
02-proportional-control-v01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d690  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a8  0800d860  0800d860  0000e860  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de08  0800de08  0000f1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800de08  0800de08  0000ee08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800de10  0800de10  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de10  0800de10  0000ee10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800de14  0800de14  0000ee14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800de18  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000435c  200001d8  0800dff0  0000f1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004534  0800dff0  0000f534  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018cb7  00000000  00000000  0000f208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000417b  00000000  00000000  00027ebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c8  00000000  00000000  0002c040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fff  00000000  00000000  0002d508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027408  00000000  00000000  0002e507  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ac8a  00000000  00000000  0005590f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e88fd  00000000  00000000  00070599  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00158e96  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b08  00000000  00000000  00158edc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0015f9e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d848 	.word	0x0800d848

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	0800d848 	.word	0x0800d848

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cfc:	f000 b9be 	b.w	800107c <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	468e      	mov	lr, r1
 8000d8c:	4604      	mov	r4, r0
 8000d8e:	4688      	mov	r8, r1
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d14a      	bne.n	8000e2a <__udivmoddi4+0xa6>
 8000d94:	428a      	cmp	r2, r1
 8000d96:	4617      	mov	r7, r2
 8000d98:	d962      	bls.n	8000e60 <__udivmoddi4+0xdc>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	b14e      	cbz	r6, 8000db4 <__udivmoddi4+0x30>
 8000da0:	f1c6 0320 	rsb	r3, r6, #32
 8000da4:	fa01 f806 	lsl.w	r8, r1, r6
 8000da8:	fa20 f303 	lsr.w	r3, r0, r3
 8000dac:	40b7      	lsls	r7, r6
 8000dae:	ea43 0808 	orr.w	r8, r3, r8
 8000db2:	40b4      	lsls	r4, r6
 8000db4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db8:	fa1f fc87 	uxth.w	ip, r7
 8000dbc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000dc0:	0c23      	lsrs	r3, r4, #16
 8000dc2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000dc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dca:	fb01 f20c 	mul.w	r2, r1, ip
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x62>
 8000dd2:	18fb      	adds	r3, r7, r3
 8000dd4:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000dd8:	f080 80ea 	bcs.w	8000fb0 <__udivmoddi4+0x22c>
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	f240 80e7 	bls.w	8000fb0 <__udivmoddi4+0x22c>
 8000de2:	3902      	subs	r1, #2
 8000de4:	443b      	add	r3, r7
 8000de6:	1a9a      	subs	r2, r3, r2
 8000de8:	b2a3      	uxth	r3, r4
 8000dea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000df2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000df6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dfa:	459c      	cmp	ip, r3
 8000dfc:	d909      	bls.n	8000e12 <__udivmoddi4+0x8e>
 8000dfe:	18fb      	adds	r3, r7, r3
 8000e00:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000e04:	f080 80d6 	bcs.w	8000fb4 <__udivmoddi4+0x230>
 8000e08:	459c      	cmp	ip, r3
 8000e0a:	f240 80d3 	bls.w	8000fb4 <__udivmoddi4+0x230>
 8000e0e:	443b      	add	r3, r7
 8000e10:	3802      	subs	r0, #2
 8000e12:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e16:	eba3 030c 	sub.w	r3, r3, ip
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	b11d      	cbz	r5, 8000e26 <__udivmoddi4+0xa2>
 8000e1e:	40f3      	lsrs	r3, r6
 8000e20:	2200      	movs	r2, #0
 8000e22:	e9c5 3200 	strd	r3, r2, [r5]
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d905      	bls.n	8000e3a <__udivmoddi4+0xb6>
 8000e2e:	b10d      	cbz	r5, 8000e34 <__udivmoddi4+0xb0>
 8000e30:	e9c5 0100 	strd	r0, r1, [r5]
 8000e34:	2100      	movs	r1, #0
 8000e36:	4608      	mov	r0, r1
 8000e38:	e7f5      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000e3a:	fab3 f183 	clz	r1, r3
 8000e3e:	2900      	cmp	r1, #0
 8000e40:	d146      	bne.n	8000ed0 <__udivmoddi4+0x14c>
 8000e42:	4573      	cmp	r3, lr
 8000e44:	d302      	bcc.n	8000e4c <__udivmoddi4+0xc8>
 8000e46:	4282      	cmp	r2, r0
 8000e48:	f200 8105 	bhi.w	8001056 <__udivmoddi4+0x2d2>
 8000e4c:	1a84      	subs	r4, r0, r2
 8000e4e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e52:	2001      	movs	r0, #1
 8000e54:	4690      	mov	r8, r2
 8000e56:	2d00      	cmp	r5, #0
 8000e58:	d0e5      	beq.n	8000e26 <__udivmoddi4+0xa2>
 8000e5a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e5e:	e7e2      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000e60:	2a00      	cmp	r2, #0
 8000e62:	f000 8090 	beq.w	8000f86 <__udivmoddi4+0x202>
 8000e66:	fab2 f682 	clz	r6, r2
 8000e6a:	2e00      	cmp	r6, #0
 8000e6c:	f040 80a4 	bne.w	8000fb8 <__udivmoddi4+0x234>
 8000e70:	1a8a      	subs	r2, r1, r2
 8000e72:	0c03      	lsrs	r3, r0, #16
 8000e74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e78:	b280      	uxth	r0, r0
 8000e7a:	b2bc      	uxth	r4, r7
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e82:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e8a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d907      	bls.n	8000ea2 <__udivmoddi4+0x11e>
 8000e92:	18fb      	adds	r3, r7, r3
 8000e94:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000e98:	d202      	bcs.n	8000ea0 <__udivmoddi4+0x11c>
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	f200 80e0 	bhi.w	8001060 <__udivmoddi4+0x2dc>
 8000ea0:	46c4      	mov	ip, r8
 8000ea2:	1a9b      	subs	r3, r3, r2
 8000ea4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ea8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000eac:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000eb0:	fb02 f404 	mul.w	r4, r2, r4
 8000eb4:	429c      	cmp	r4, r3
 8000eb6:	d907      	bls.n	8000ec8 <__udivmoddi4+0x144>
 8000eb8:	18fb      	adds	r3, r7, r3
 8000eba:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000ebe:	d202      	bcs.n	8000ec6 <__udivmoddi4+0x142>
 8000ec0:	429c      	cmp	r4, r3
 8000ec2:	f200 80ca 	bhi.w	800105a <__udivmoddi4+0x2d6>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	1b1b      	subs	r3, r3, r4
 8000eca:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ece:	e7a5      	b.n	8000e1c <__udivmoddi4+0x98>
 8000ed0:	f1c1 0620 	rsb	r6, r1, #32
 8000ed4:	408b      	lsls	r3, r1
 8000ed6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eda:	431f      	orrs	r7, r3
 8000edc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ee0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ee4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ee8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eec:	4323      	orrs	r3, r4
 8000eee:	fa00 f801 	lsl.w	r8, r0, r1
 8000ef2:	fa1f fc87 	uxth.w	ip, r7
 8000ef6:	fbbe f0f9 	udiv	r0, lr, r9
 8000efa:	0c1c      	lsrs	r4, r3, #16
 8000efc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f00:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f04:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f0e:	d909      	bls.n	8000f24 <__udivmoddi4+0x1a0>
 8000f10:	193c      	adds	r4, r7, r4
 8000f12:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000f16:	f080 809c 	bcs.w	8001052 <__udivmoddi4+0x2ce>
 8000f1a:	45a6      	cmp	lr, r4
 8000f1c:	f240 8099 	bls.w	8001052 <__udivmoddi4+0x2ce>
 8000f20:	3802      	subs	r0, #2
 8000f22:	443c      	add	r4, r7
 8000f24:	eba4 040e 	sub.w	r4, r4, lr
 8000f28:	fa1f fe83 	uxth.w	lr, r3
 8000f2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f30:	fb09 4413 	mls	r4, r9, r3, r4
 8000f34:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f38:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f3c:	45a4      	cmp	ip, r4
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x1ce>
 8000f40:	193c      	adds	r4, r7, r4
 8000f42:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000f46:	f080 8082 	bcs.w	800104e <__udivmoddi4+0x2ca>
 8000f4a:	45a4      	cmp	ip, r4
 8000f4c:	d97f      	bls.n	800104e <__udivmoddi4+0x2ca>
 8000f4e:	3b02      	subs	r3, #2
 8000f50:	443c      	add	r4, r7
 8000f52:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f56:	eba4 040c 	sub.w	r4, r4, ip
 8000f5a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f5e:	4564      	cmp	r4, ip
 8000f60:	4673      	mov	r3, lr
 8000f62:	46e1      	mov	r9, ip
 8000f64:	d362      	bcc.n	800102c <__udivmoddi4+0x2a8>
 8000f66:	d05f      	beq.n	8001028 <__udivmoddi4+0x2a4>
 8000f68:	b15d      	cbz	r5, 8000f82 <__udivmoddi4+0x1fe>
 8000f6a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f6e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f72:	fa04 f606 	lsl.w	r6, r4, r6
 8000f76:	fa22 f301 	lsr.w	r3, r2, r1
 8000f7a:	431e      	orrs	r6, r3
 8000f7c:	40cc      	lsrs	r4, r1
 8000f7e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f82:	2100      	movs	r1, #0
 8000f84:	e74f      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000f86:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f8a:	0c01      	lsrs	r1, r0, #16
 8000f8c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f90:	b280      	uxth	r0, r0
 8000f92:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f96:	463b      	mov	r3, r7
 8000f98:	4638      	mov	r0, r7
 8000f9a:	463c      	mov	r4, r7
 8000f9c:	46b8      	mov	r8, r7
 8000f9e:	46be      	mov	lr, r7
 8000fa0:	2620      	movs	r6, #32
 8000fa2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000fa6:	eba2 0208 	sub.w	r2, r2, r8
 8000faa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000fae:	e766      	b.n	8000e7e <__udivmoddi4+0xfa>
 8000fb0:	4601      	mov	r1, r0
 8000fb2:	e718      	b.n	8000de6 <__udivmoddi4+0x62>
 8000fb4:	4610      	mov	r0, r2
 8000fb6:	e72c      	b.n	8000e12 <__udivmoddi4+0x8e>
 8000fb8:	f1c6 0220 	rsb	r2, r6, #32
 8000fbc:	fa2e f302 	lsr.w	r3, lr, r2
 8000fc0:	40b7      	lsls	r7, r6
 8000fc2:	40b1      	lsls	r1, r6
 8000fc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fd2:	b2bc      	uxth	r4, r7
 8000fd4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fde:	fb08 f904 	mul.w	r9, r8, r4
 8000fe2:	40b0      	lsls	r0, r6
 8000fe4:	4589      	cmp	r9, r1
 8000fe6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fea:	b280      	uxth	r0, r0
 8000fec:	d93e      	bls.n	800106c <__udivmoddi4+0x2e8>
 8000fee:	1879      	adds	r1, r7, r1
 8000ff0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000ff4:	d201      	bcs.n	8000ffa <__udivmoddi4+0x276>
 8000ff6:	4589      	cmp	r9, r1
 8000ff8:	d81f      	bhi.n	800103a <__udivmoddi4+0x2b6>
 8000ffa:	eba1 0109 	sub.w	r1, r1, r9
 8000ffe:	fbb1 f9fe 	udiv	r9, r1, lr
 8001002:	fb09 f804 	mul.w	r8, r9, r4
 8001006:	fb0e 1119 	mls	r1, lr, r9, r1
 800100a:	b292      	uxth	r2, r2
 800100c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001010:	4542      	cmp	r2, r8
 8001012:	d229      	bcs.n	8001068 <__udivmoddi4+0x2e4>
 8001014:	18ba      	adds	r2, r7, r2
 8001016:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800101a:	d2c4      	bcs.n	8000fa6 <__udivmoddi4+0x222>
 800101c:	4542      	cmp	r2, r8
 800101e:	d2c2      	bcs.n	8000fa6 <__udivmoddi4+0x222>
 8001020:	f1a9 0102 	sub.w	r1, r9, #2
 8001024:	443a      	add	r2, r7
 8001026:	e7be      	b.n	8000fa6 <__udivmoddi4+0x222>
 8001028:	45f0      	cmp	r8, lr
 800102a:	d29d      	bcs.n	8000f68 <__udivmoddi4+0x1e4>
 800102c:	ebbe 0302 	subs.w	r3, lr, r2
 8001030:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001034:	3801      	subs	r0, #1
 8001036:	46e1      	mov	r9, ip
 8001038:	e796      	b.n	8000f68 <__udivmoddi4+0x1e4>
 800103a:	eba7 0909 	sub.w	r9, r7, r9
 800103e:	4449      	add	r1, r9
 8001040:	f1a8 0c02 	sub.w	ip, r8, #2
 8001044:	fbb1 f9fe 	udiv	r9, r1, lr
 8001048:	fb09 f804 	mul.w	r8, r9, r4
 800104c:	e7db      	b.n	8001006 <__udivmoddi4+0x282>
 800104e:	4673      	mov	r3, lr
 8001050:	e77f      	b.n	8000f52 <__udivmoddi4+0x1ce>
 8001052:	4650      	mov	r0, sl
 8001054:	e766      	b.n	8000f24 <__udivmoddi4+0x1a0>
 8001056:	4608      	mov	r0, r1
 8001058:	e6fd      	b.n	8000e56 <__udivmoddi4+0xd2>
 800105a:	443b      	add	r3, r7
 800105c:	3a02      	subs	r2, #2
 800105e:	e733      	b.n	8000ec8 <__udivmoddi4+0x144>
 8001060:	f1ac 0c02 	sub.w	ip, ip, #2
 8001064:	443b      	add	r3, r7
 8001066:	e71c      	b.n	8000ea2 <__udivmoddi4+0x11e>
 8001068:	4649      	mov	r1, r9
 800106a:	e79c      	b.n	8000fa6 <__udivmoddi4+0x222>
 800106c:	eba1 0109 	sub.w	r1, r1, r9
 8001070:	46c4      	mov	ip, r8
 8001072:	fbb1 f9fe 	udiv	r9, r1, lr
 8001076:	fb09 f804 	mul.w	r8, r9, r4
 800107a:	e7c4      	b.n	8001006 <__udivmoddi4+0x282>

0800107c <__aeabi_idiv0>:
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop

08001080 <uart_event_cb>:
static QueueHandle_t rx_queue;
static uart_drv_t   *uart;
static uint8_t       rx_byte;

// ISR-callback: enqueue received byte and re-arm next RX
static void uart_event_cb(uart_event_t evt, void *ctx) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	6039      	str	r1, [r7, #0]
 800108a:	71fb      	strb	r3, [r7, #7]
    if (evt == UART_EVT_RX_COMPLETE) {
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d12a      	bne.n	80010e8 <uart_event_cb+0x68>
        uint8_t *b = ctx;
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	60fb      	str	r3, [r7, #12]
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001096:	2300      	movs	r3, #0
 8001098:	60bb      	str	r3, [r7, #8]
        xQueueSendFromISR(rx_queue, b, &xHigherPriorityTaskWoken);
 800109a:	4b15      	ldr	r3, [pc, #84]	@ (80010f0 <uart_event_cb+0x70>)
 800109c:	6818      	ldr	r0, [r3, #0]
 800109e:	f107 0208 	add.w	r2, r7, #8
 80010a2:	2300      	movs	r3, #0
 80010a4:	68f9      	ldr	r1, [r7, #12]
 80010a6:	f005 ffbf 	bl	8007028 <xQueueGenericSendFromISR>
        // re-arm next RX based on driver config
        if (uart->hdma_rx) {
 80010aa:	4b12      	ldr	r3, [pc, #72]	@ (80010f4 <uart_event_cb+0x74>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d007      	beq.n	80010c4 <uart_event_cb+0x44>
            uart_start_dma_rx(uart, &rx_byte, 1);
 80010b4:	4b0f      	ldr	r3, [pc, #60]	@ (80010f4 <uart_event_cb+0x74>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2201      	movs	r2, #1
 80010ba:	490f      	ldr	r1, [pc, #60]	@ (80010f8 <uart_event_cb+0x78>)
 80010bc:	4618      	mov	r0, r3
 80010be:	f001 fa3e 	bl	800253e <uart_start_dma_rx>
 80010c2:	e006      	b.n	80010d2 <uart_event_cb+0x52>
        } else {
            uart_receive_nb(uart, &rx_byte, 1);
 80010c4:	4b0b      	ldr	r3, [pc, #44]	@ (80010f4 <uart_event_cb+0x74>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2201      	movs	r2, #1
 80010ca:	490b      	ldr	r1, [pc, #44]	@ (80010f8 <uart_event_cb+0x78>)
 80010cc:	4618      	mov	r0, r3
 80010ce:	f001 fa11 	bl	80024f4 <uart_receive_nb>
        }
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d007      	beq.n	80010e8 <uart_event_cb+0x68>
 80010d8:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <uart_event_cb+0x7c>)
 80010da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	f3bf 8f4f 	dsb	sy
 80010e4:	f3bf 8f6f 	isb	sy
    }
}
 80010e8:	bf00      	nop
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	200001f4 	.word	0x200001f4
 80010f4:	200001f8 	.word	0x200001f8
 80010f8:	200001fc 	.word	0x200001fc
 80010fc:	e000ed04 	.word	0xe000ed04

08001100 <cmd_task>:


// Task: build lines, parse, dispatch commands
static void cmd_task(void *pvParameters) {
 8001100:	b590      	push	{r4, r7, lr}
 8001102:	b0b5      	sub	sp, #212	@ 0xd4
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
    char    line[CMD_MAX_LINE_LEN];
    size_t  idx = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    uint8_t byte;
    Args    args;

    // Print initial prompt
    const char *prompt = "\r\n> ";
 800110e:	4b69      	ldr	r3, [pc, #420]	@ (80012b4 <cmd_task+0x1b4>)
 8001110:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    uart_send_blocking(uart, (uint8_t*)prompt, strlen(prompt), 100);
 8001114:	4b68      	ldr	r3, [pc, #416]	@ (80012b8 <cmd_task+0x1b8>)
 8001116:	681c      	ldr	r4, [r3, #0]
 8001118:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 800111c:	f7ff f8d8 	bl	80002d0 <strlen>
 8001120:	4602      	mov	r2, r0
 8001122:	2364      	movs	r3, #100	@ 0x64
 8001124:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8001128:	4620      	mov	r0, r4
 800112a:	f001 f9ab 	bl	8002484 <uart_send_blocking>

    for (;;) {
        // Wait for next byte
        if (xQueueReceive(rx_queue, &byte, portMAX_DELAY) == pdPASS) {
 800112e:	4b63      	ldr	r3, [pc, #396]	@ (80012bc <cmd_task+0x1bc>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f107 0133 	add.w	r1, r7, #51	@ 0x33
 8001136:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800113a:	4618      	mov	r0, r3
 800113c:	f006 f812 	bl	8007164 <xQueueReceive>
 8001140:	4603      	mov	r3, r0
 8001142:	2b01      	cmp	r3, #1
 8001144:	d1f3      	bne.n	800112e <cmd_task+0x2e>
            // Echo input
            uart_send_blocking(uart, &byte, 1, 100);
 8001146:	4b5c      	ldr	r3, [pc, #368]	@ (80012b8 <cmd_task+0x1b8>)
 8001148:	6818      	ldr	r0, [r3, #0]
 800114a:	f107 0133 	add.w	r1, r7, #51	@ 0x33
 800114e:	2364      	movs	r3, #100	@ 0x64
 8001150:	2201      	movs	r2, #1
 8001152:	f001 f997 	bl	8002484 <uart_send_blocking>

            // Check for end-of-line
            if (byte == '\r' || byte == '\n') {
 8001156:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800115a:	2b0d      	cmp	r3, #13
 800115c:	d004      	beq.n	8001168 <cmd_task+0x68>
 800115e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001162:	2b0a      	cmp	r3, #10
 8001164:	f040 8083 	bne.w	800126e <cmd_task+0x16e>
                line[idx] = '\0';
 8001168:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800116c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001170:	4413      	add	r3, r2
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]
                // Tokenize into args
                int argc = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
                char *tok = strtok(line, " ");
 800117c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001180:	494f      	ldr	r1, [pc, #316]	@ (80012c0 <cmd_task+0x1c0>)
 8001182:	4618      	mov	r0, r3
 8001184:	f009 fd84 	bl	800ac90 <strtok>
 8001188:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
                while (tok && argc < CMD_MAX_PARAMS) {
 800118c:	e011      	b.n	80011b2 <cmd_task+0xb2>
                    args.argv[argc++] = tok;
 800118e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001192:	1c5a      	adds	r2, r3, #1
 8001194:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	33d0      	adds	r3, #208	@ 0xd0
 800119c:	443b      	add	r3, r7
 800119e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80011a2:	f843 2cc0 	str.w	r2, [r3, #-192]
                    tok = strtok(NULL, " ");
 80011a6:	4946      	ldr	r1, [pc, #280]	@ (80012c0 <cmd_task+0x1c0>)
 80011a8:	2000      	movs	r0, #0
 80011aa:	f009 fd71 	bl	800ac90 <strtok>
 80011ae:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
                while (tok && argc < CMD_MAX_PARAMS) {
 80011b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <cmd_task+0xc2>
 80011ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80011be:	2b07      	cmp	r3, #7
 80011c0:	dde5      	ble.n	800118e <cmd_task+0x8e>
                }
                args.argc = argc;
 80011c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80011c6:	60fb      	str	r3, [r7, #12]

                // Dispatch
                if (argc > 0) {
 80011c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	dd43      	ble.n	8001258 <cmd_task+0x158>
                    bool found = false;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
                    for (size_t i = 0; i < cmd_count; ++i) {
 80011d6:	2300      	movs	r3, #0
 80011d8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80011dc:	e01f      	b.n	800121e <cmd_task+0x11e>
                        if (strcmp(args.argv[0], cmd_list[i].name) == 0) {
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4938      	ldr	r1, [pc, #224]	@ (80012c4 <cmd_task+0x1c4>)
 80011e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80011e6:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 80011ea:	4619      	mov	r1, r3
 80011ec:	4610      	mov	r0, r2
 80011ee:	f7ff f80f 	bl	8000210 <strcmp>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d10d      	bne.n	8001214 <cmd_task+0x114>
                            cmd_list[i].handler(&args);
 80011f8:	4a32      	ldr	r2, [pc, #200]	@ (80012c4 <cmd_task+0x1c4>)
 80011fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80011fe:	00db      	lsls	r3, r3, #3
 8001200:	4413      	add	r3, r2
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f107 020c 	add.w	r2, r7, #12
 8001208:	4610      	mov	r0, r2
 800120a:	4798      	blx	r3
                            found = true;
 800120c:	2301      	movs	r3, #1
 800120e:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
                            break;
 8001212:	e00a      	b.n	800122a <cmd_task+0x12a>
                    for (size_t i = 0; i < cmd_count; ++i) {
 8001214:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001218:	3301      	adds	r3, #1
 800121a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800121e:	4b2a      	ldr	r3, [pc, #168]	@ (80012c8 <cmd_task+0x1c8>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001226:	429a      	cmp	r2, r3
 8001228:	d3d9      	bcc.n	80011de <cmd_task+0xde>
                        }
                    }
                    if (!found) {
 800122a:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 800122e:	f083 0301 	eor.w	r3, r3, #1
 8001232:	b2db      	uxtb	r3, r3
 8001234:	2b00      	cmp	r3, #0
 8001236:	d00f      	beq.n	8001258 <cmd_task+0x158>
                        const char *err = "Error: unknown command\r\n";
 8001238:	4b24      	ldr	r3, [pc, #144]	@ (80012cc <cmd_task+0x1cc>)
 800123a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
                        uart_send_blocking(uart, (uint8_t*)err, strlen(err), 100);
 800123e:	4b1e      	ldr	r3, [pc, #120]	@ (80012b8 <cmd_task+0x1b8>)
 8001240:	681c      	ldr	r4, [r3, #0]
 8001242:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8001246:	f7ff f843 	bl	80002d0 <strlen>
 800124a:	4602      	mov	r2, r0
 800124c:	2364      	movs	r3, #100	@ 0x64
 800124e:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8001252:	4620      	mov	r0, r4
 8001254:	f001 f916 	bl	8002484 <uart_send_blocking>
                    }
                }
                idx = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                // Prompt again
                uart_send_blocking(uart, (uint8_t*)"> ", 2, 100);
 800125e:	4b16      	ldr	r3, [pc, #88]	@ (80012b8 <cmd_task+0x1b8>)
 8001260:	6818      	ldr	r0, [r3, #0]
 8001262:	2364      	movs	r3, #100	@ 0x64
 8001264:	2202      	movs	r2, #2
 8001266:	491a      	ldr	r1, [pc, #104]	@ (80012d0 <cmd_task+0x1d0>)
 8001268:	f001 f90c 	bl	8002484 <uart_send_blocking>
            if (byte == '\r' || byte == '\n') {
 800126c:	e021      	b.n	80012b2 <cmd_task+0x1b2>

            } else if ((byte == '\b' || byte == 127) && idx > 0) {
 800126e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001272:	2b08      	cmp	r3, #8
 8001274:	d003      	beq.n	800127e <cmd_task+0x17e>
 8001276:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800127a:	2b7f      	cmp	r3, #127	@ 0x7f
 800127c:	d109      	bne.n	8001292 <cmd_task+0x192>
 800127e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001282:	2b00      	cmp	r3, #0
 8001284:	d005      	beq.n	8001292 <cmd_task+0x192>
                // Backspace handling
                idx--;
 8001286:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800128a:	3b01      	subs	r3, #1
 800128c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001290:	e00f      	b.n	80012b2 <cmd_task+0x1b2>
            } else if (idx < CMD_MAX_LINE_LEN - 1) {
 8001292:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001296:	2b7e      	cmp	r3, #126	@ 0x7e
 8001298:	f63f af49 	bhi.w	800112e <cmd_task+0x2e>
                // Accumulate
                line[idx++] = byte;
 800129c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80012a0:	1c5a      	adds	r2, r3, #1
 80012a2:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80012a6:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80012aa:	33d0      	adds	r3, #208	@ 0xd0
 80012ac:	443b      	add	r3, r7
 80012ae:	f803 2c9c 	strb.w	r2, [r3, #-156]
        if (xQueueReceive(rx_queue, &byte, portMAX_DELAY) == pdPASS) {
 80012b2:	e73c      	b.n	800112e <cmd_task+0x2e>
 80012b4:	0800d860 	.word	0x0800d860
 80012b8:	200001f8 	.word	0x200001f8
 80012bc:	200001f4 	.word	0x200001f4
 80012c0:	0800d868 	.word	0x0800d868
 80012c4:	0800d94c 	.word	0x0800d94c
 80012c8:	0800d964 	.word	0x0800d964
 80012cc:	0800d86c 	.word	0x0800d86c
 80012d0:	0800d888 	.word	0x0800d888

080012d4 <cmd_init>:
        }
    }
}

// Public init: register callback, create queue, start first RX and the cmd task
void cmd_init(uart_drv_t *uart_drv) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af02      	add	r7, sp, #8
 80012da:	6078      	str	r0, [r7, #4]
    uart = uart_drv;
 80012dc:	4a1a      	ldr	r2, [pc, #104]	@ (8001348 <cmd_init+0x74>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6013      	str	r3, [r2, #0]
    rx_queue = xQueueCreate(CMD_MAX_LINE_LEN, sizeof(uint8_t));
 80012e2:	2200      	movs	r2, #0
 80012e4:	2101      	movs	r1, #1
 80012e6:	2080      	movs	r0, #128	@ 0x80
 80012e8:	f005 fd10 	bl	8006d0c <xQueueGenericCreate>
 80012ec:	4603      	mov	r3, r0
 80012ee:	4a17      	ldr	r2, [pc, #92]	@ (800134c <cmd_init+0x78>)
 80012f0:	6013      	str	r3, [r2, #0]
    // Register ISR callback
    uart_register_callback(uart, uart_event_cb, &rx_byte);
 80012f2:	4b15      	ldr	r3, [pc, #84]	@ (8001348 <cmd_init+0x74>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a16      	ldr	r2, [pc, #88]	@ (8001350 <cmd_init+0x7c>)
 80012f8:	4916      	ldr	r1, [pc, #88]	@ (8001354 <cmd_init+0x80>)
 80012fa:	4618      	mov	r0, r3
 80012fc:	f001 f93d 	bl	800257a <uart_register_callback>
    // Kick off first RX based on driver config
    if (uart->hdma_rx) {
 8001300:	4b11      	ldr	r3, [pc, #68]	@ (8001348 <cmd_init+0x74>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d007      	beq.n	800131a <cmd_init+0x46>
        uart_start_dma_rx(uart, &rx_byte, 1);
 800130a:	4b0f      	ldr	r3, [pc, #60]	@ (8001348 <cmd_init+0x74>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2201      	movs	r2, #1
 8001310:	490f      	ldr	r1, [pc, #60]	@ (8001350 <cmd_init+0x7c>)
 8001312:	4618      	mov	r0, r3
 8001314:	f001 f913 	bl	800253e <uart_start_dma_rx>
 8001318:	e006      	b.n	8001328 <cmd_init+0x54>
    } else {
        uart_receive_nb(uart, &rx_byte, 1);
 800131a:	4b0b      	ldr	r3, [pc, #44]	@ (8001348 <cmd_init+0x74>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2201      	movs	r2, #1
 8001320:	490b      	ldr	r1, [pc, #44]	@ (8001350 <cmd_init+0x7c>)
 8001322:	4618      	mov	r0, r3
 8001324:	f001 f8e6 	bl	80024f4 <uart_receive_nb>
    }
    // Launch the processing task
    xTaskCreate(cmd_task, "CmdIf", CMD_TASK_STACK, NULL, CMD_TASK_PRIO, NULL);
 8001328:	2300      	movs	r3, #0
 800132a:	9301      	str	r3, [sp, #4]
 800132c:	2301      	movs	r3, #1
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	2300      	movs	r3, #0
 8001332:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001336:	4908      	ldr	r1, [pc, #32]	@ (8001358 <cmd_init+0x84>)
 8001338:	4808      	ldr	r0, [pc, #32]	@ (800135c <cmd_init+0x88>)
 800133a:	f006 fa8d 	bl	8007858 <xTaskCreate>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200001f8 	.word	0x200001f8
 800134c:	200001f4 	.word	0x200001f4
 8001350:	200001fc 	.word	0x200001fc
 8001354:	08001081 	.word	0x08001081
 8001358:	0800d88c 	.word	0x0800d88c
 800135c:	08001101 	.word	0x08001101

08001360 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4a07      	ldr	r2, [pc, #28]	@ (800138c <vApplicationGetIdleTaskMemory+0x2c>)
 8001370:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	4a06      	ldr	r2, [pc, #24]	@ (8001390 <vApplicationGetIdleTaskMemory+0x30>)
 8001376:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2280      	movs	r2, #128	@ 0x80
 800137c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800137e:	bf00      	nop
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	20000200 	.word	0x20000200
 8001390:	20000254 	.word	0x20000254

08001394 <get_current_timestamp>:
static void log_task(void *arg);


// Fully contained timestamp stub
static Timestamp get_current_timestamp(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
    TickType_t ticks = xTaskGetTickCount();
 800139c:	f006 fcd8 	bl	8007d50 <xTaskGetTickCount>
 80013a0:	6178      	str	r0, [r7, #20]
    Timestamp ts;
    ts.seconds = ticks / 1000;
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	4a0d      	ldr	r2, [pc, #52]	@ (80013dc <get_current_timestamp+0x48>)
 80013a6:	fba2 2303 	umull	r2, r3, r2, r3
 80013aa:	099b      	lsrs	r3, r3, #6
 80013ac:	60fb      	str	r3, [r7, #12]
    ts.subseconds = ticks % 1000;
 80013ae:	697a      	ldr	r2, [r7, #20]
 80013b0:	4b0a      	ldr	r3, [pc, #40]	@ (80013dc <get_current_timestamp+0x48>)
 80013b2:	fba3 1302 	umull	r1, r3, r3, r2
 80013b6:	099b      	lsrs	r3, r3, #6
 80013b8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80013bc:	fb01 f303 	mul.w	r3, r1, r3
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	613b      	str	r3, [r7, #16]
    return ts;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	461a      	mov	r2, r3
 80013c8:	f107 030c 	add.w	r3, r7, #12
 80013cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80013d0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	10624dd3 	.word	0x10624dd3

080013e0 <log_init>:

// Public initialization
void log_init(uart_drv_t *drv)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af02      	add	r7, sp, #8
 80013e6:	6078      	str	r0, [r7, #4]
#if LOGGING_ENABLED
    log_uart = drv;
 80013e8:	4a12      	ldr	r2, [pc, #72]	@ (8001434 <log_init+0x54>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6013      	str	r3, [r2, #0]
    log_queue = xQueueCreate(LOG_QUEUE_DEPTH, sizeof(LogEntry));
 80013ee:	2200      	movs	r2, #0
 80013f0:	218c      	movs	r1, #140	@ 0x8c
 80013f2:	2020      	movs	r0, #32
 80013f4:	f005 fc8a 	bl	8006d0c <xQueueGenericCreate>
 80013f8:	4603      	mov	r3, r0
 80013fa:	4a0f      	ldr	r2, [pc, #60]	@ (8001438 <log_init+0x58>)
 80013fc:	6013      	str	r3, [r2, #0]
    telemetry_queue = xQueueCreate(16, sizeof(TelemetryPacket));
 80013fe:	2200      	movs	r2, #0
 8001400:	2108      	movs	r1, #8
 8001402:	2010      	movs	r0, #16
 8001404:	f005 fc82 	bl	8006d0c <xQueueGenericCreate>
 8001408:	4603      	mov	r3, r0
 800140a:	4a0c      	ldr	r2, [pc, #48]	@ (800143c <log_init+0x5c>)
 800140c:	6013      	str	r3, [r2, #0]

    if (log_queue) {
 800140e:	4b0a      	ldr	r3, [pc, #40]	@ (8001438 <log_init+0x58>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d00a      	beq.n	800142c <log_init+0x4c>
        xTaskCreate(log_task, "Logger", LOG_TASK_STACK, NULL, LOG_TASK_PRIO, NULL);
 8001416:	2300      	movs	r3, #0
 8001418:	9301      	str	r3, [sp, #4]
 800141a:	2301      	movs	r3, #1
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	2300      	movs	r3, #0
 8001420:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001424:	4906      	ldr	r1, [pc, #24]	@ (8001440 <log_init+0x60>)
 8001426:	4807      	ldr	r0, [pc, #28]	@ (8001444 <log_init+0x64>)
 8001428:	f006 fa16 	bl	8007858 <xTaskCreate>
    }
#endif
}
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20000454 	.word	0x20000454
 8001438:	20000458 	.word	0x20000458
 800143c:	2000045c 	.word	0x2000045c
 8001440:	0800d894 	.word	0x0800d894
 8001444:	08001479 	.word	0x08001479

08001448 <telemetry_send>:
    xQueueSend(log_queue, &entry, 0);  // No block if queue full
#endif
}

void telemetry_send(const TelemetryPacket *pkt)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
#if LOGGING_ENABLED
    if (telemetry_queue && pkt) {
 8001450:	4b08      	ldr	r3, [pc, #32]	@ (8001474 <telemetry_send+0x2c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d009      	beq.n	800146c <telemetry_send+0x24>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d006      	beq.n	800146c <telemetry_send+0x24>
        xQueueSend(telemetry_queue, pkt, 0);  // No blocking
 800145e:	4b05      	ldr	r3, [pc, #20]	@ (8001474 <telemetry_send+0x2c>)
 8001460:	6818      	ldr	r0, [r3, #0]
 8001462:	2300      	movs	r3, #0
 8001464:	2200      	movs	r2, #0
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	f005 fcdc 	bl	8006e24 <xQueueGenericSend>
    }
#endif
}
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	2000045c 	.word	0x2000045c

08001478 <log_task>:


// Logging task: drain queue and transmit
static void log_task(void *arg)
{
 8001478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800147a:	b0f3      	sub	sp, #460	@ 0x1cc
 800147c:	af04      	add	r7, sp, #16
 800147e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001482:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001486:	6018      	str	r0, [r3, #0]
    LogEntry entry;
    char out_buf[256];

    for (;;) {
        // Process log queue first
        if (xQueueReceive(log_queue, &entry, pdMS_TO_TICKS(10)) == pdPASS) {
 8001488:	4b35      	ldr	r3, [pc, #212]	@ (8001560 <log_task+0xe8>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f507 718a 	add.w	r1, r7, #276	@ 0x114
 8001490:	220a      	movs	r2, #10
 8001492:	4618      	mov	r0, r3
 8001494:	f005 fe66 	bl	8007164 <xQueueReceive>
 8001498:	4603      	mov	r3, r0
 800149a:	2b01      	cmp	r3, #1
 800149c:	d11f      	bne.n	80014de <log_task+0x66>
            int len = snprintf(out_buf, sizeof(out_buf),
 800149e:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 80014a2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
                               "[%lu.%03lu] [%d] %s\r\n",
                               entry.ts.seconds,
                               entry.ts.subseconds,
                               entry.level,
 80014a6:	f897 211c 	ldrb.w	r2, [r7, #284]	@ 0x11c
            int len = snprintf(out_buf, sizeof(out_buf),
 80014aa:	4614      	mov	r4, r2
 80014ac:	f107 0014 	add.w	r0, r7, #20
 80014b0:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 80014b4:	3209      	adds	r2, #9
 80014b6:	9202      	str	r2, [sp, #8]
 80014b8:	9401      	str	r4, [sp, #4]
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	460b      	mov	r3, r1
 80014be:	4a29      	ldr	r2, [pc, #164]	@ (8001564 <log_task+0xec>)
 80014c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014c4:	f008 fc20 	bl	8009d08 <sniprintf>
 80014c8:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
                               entry.payload);

            uart_send_blocking(log_uart, (uint8_t *)out_buf, len, 100);
 80014cc:	4b26      	ldr	r3, [pc, #152]	@ (8001568 <log_task+0xf0>)
 80014ce:	6818      	ldr	r0, [r3, #0]
 80014d0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80014d4:	f107 0114 	add.w	r1, r7, #20
 80014d8:	2364      	movs	r3, #100	@ 0x64
 80014da:	f000 ffd3 	bl	8002484 <uart_send_blocking>
        }

        // Then check telemetry queue
        TelemetryPacket pkt;
        if (xQueueReceive(telemetry_queue, &pkt, 0) == pdPASS) {
 80014de:	4b23      	ldr	r3, [pc, #140]	@ (800156c <log_task+0xf4>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f107 010c 	add.w	r1, r7, #12
 80014e6:	2200      	movs	r2, #0
 80014e8:	4618      	mov	r0, r3
 80014ea:	f005 fe3b 	bl	8007164 <xQueueReceive>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d1c9      	bne.n	8001488 <log_task+0x10>
            int len = snprintf(out_buf, sizeof(out_buf),
                               "[%lu.%03lu] TLM sensor1=%lu sensor2=%.2f\r\n",
                               get_current_timestamp().seconds,
 80014f4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff4b 	bl	8001394 <get_current_timestamp>
            int len = snprintf(out_buf, sizeof(out_buf),
 80014fe:	f8d7 61a0 	ldr.w	r6, [r7, #416]	@ 0x1a0
                               get_current_timestamp().subseconds,
 8001502:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff ff44 	bl	8001394 <get_current_timestamp>
            int len = snprintf(out_buf, sizeof(out_buf),
 800150c:	f8d7 41ac 	ldr.w	r4, [r7, #428]	@ 0x1ac
 8001510:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001514:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001518:	681d      	ldr	r5, [r3, #0]
                               pkt.sensor1, pkt.sensor2);
 800151a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800151e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001522:	685b      	ldr	r3, [r3, #4]
            int len = snprintf(out_buf, sizeof(out_buf),
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff f83f 	bl	80005a8 <__aeabi_f2d>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	f107 0014 	add.w	r0, r7, #20
 8001532:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001536:	9501      	str	r5, [sp, #4]
 8001538:	9400      	str	r4, [sp, #0]
 800153a:	4633      	mov	r3, r6
 800153c:	4a0c      	ldr	r2, [pc, #48]	@ (8001570 <log_task+0xf8>)
 800153e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001542:	f008 fbe1 	bl	8009d08 <sniprintf>
 8001546:	f8c7 01b0 	str.w	r0, [r7, #432]	@ 0x1b0

            uart_send_blocking(log_uart, (uint8_t *)out_buf, len, 100);
 800154a:	4b07      	ldr	r3, [pc, #28]	@ (8001568 <log_task+0xf0>)
 800154c:	6818      	ldr	r0, [r3, #0]
 800154e:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8001552:	f107 0114 	add.w	r1, r7, #20
 8001556:	2364      	movs	r3, #100	@ 0x64
 8001558:	f000 ff94 	bl	8002484 <uart_send_blocking>
    for (;;) {
 800155c:	e794      	b.n	8001488 <log_task+0x10>
 800155e:	bf00      	nop
 8001560:	20000458 	.word	0x20000458
 8001564:	0800d89c 	.word	0x0800d89c
 8001568:	20000454 	.word	0x20000454
 800156c:	2000045c 	.word	0x2000045c
 8001570:	0800d8b4 	.word	0x0800d8b4

08001574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800157a:	f001 f873 	bl	8002664 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800157e:	f000 f851 	bl	8001624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001582:	f000 f9bd 	bl	8001900 <MX_GPIO_Init>
  MX_DMA_Init();
 8001586:	f000 f993 	bl	80018b0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800158a:	f000 f967 	bl	800185c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800158e:	f000 f8bb 	bl	8001708 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001592:	f000 f90b 	bl	80017ac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  rx_done_sem = xSemaphoreCreateBinary();
 8001596:	2203      	movs	r2, #3
 8001598:	2100      	movs	r1, #0
 800159a:	2001      	movs	r0, #1
 800159c:	f005 fbb6 	bl	8006d0c <xQueueGenericCreate>
 80015a0:	4603      	mov	r3, r0
 80015a2:	4a16      	ldr	r2, [pc, #88]	@ (80015fc <main+0x88>)
 80015a4:	6013      	str	r3, [r2, #0]
  if (uart_init(&uart2_drv, &huart2, &hdma_usart2_tx, &hdma_usart2_rx) != UART_OK) {
 80015a6:	4b16      	ldr	r3, [pc, #88]	@ (8001600 <main+0x8c>)
 80015a8:	4a16      	ldr	r2, [pc, #88]	@ (8001604 <main+0x90>)
 80015aa:	4917      	ldr	r1, [pc, #92]	@ (8001608 <main+0x94>)
 80015ac:	4817      	ldr	r0, [pc, #92]	@ (800160c <main+0x98>)
 80015ae:	f000 ff0f 	bl	80023d0 <uart_init>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <main+0x48>
        Error_Handler();
 80015b8:	f000 fa52 	bl	8001a60 <Error_Handler>
  }
  shared_uart = &uart2_drv;
 80015bc:	4b14      	ldr	r3, [pc, #80]	@ (8001610 <main+0x9c>)
 80015be:	4a13      	ldr	r2, [pc, #76]	@ (800160c <main+0x98>)
 80015c0:	601a      	str	r2, [r3, #0]
  cmd_init(&uart2_drv);
 80015c2:	4812      	ldr	r0, [pc, #72]	@ (800160c <main+0x98>)
 80015c4:	f7ff fe86 	bl	80012d4 <cmd_init>
  log_init(&uart2_drv);
 80015c8:	4810      	ldr	r0, [pc, #64]	@ (800160c <main+0x98>)
 80015ca:	f7ff ff09 	bl	80013e0 <log_init>

  Pwm_init(&pwm, &htim2, TIM_CHANNEL_2);
 80015ce:	2204      	movs	r2, #4
 80015d0:	4910      	ldr	r1, [pc, #64]	@ (8001614 <main+0xa0>)
 80015d2:	4811      	ldr	r0, [pc, #68]	@ (8001618 <main+0xa4>)
 80015d4:	f000 fad0 	bl	8001b78 <Pwm_init>
  Pwm_start(&pwm);
 80015d8:	480f      	ldr	r0, [pc, #60]	@ (8001618 <main+0xa4>)
 80015da:	f000 faec 	bl	8001bb6 <Pwm_start>
//  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  xTaskCreate(PhotoCellTask, "photo", 256, NULL, tskIDLE_PRIORITY + 1, NULL);
 80015de:	2300      	movs	r3, #0
 80015e0:	9301      	str	r3, [sp, #4]
 80015e2:	2301      	movs	r3, #1
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	2300      	movs	r3, #0
 80015e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015ec:	490b      	ldr	r1, [pc, #44]	@ (800161c <main+0xa8>)
 80015ee:	480c      	ldr	r0, [pc, #48]	@ (8001620 <main+0xac>)
 80015f0:	f006 f932 	bl	8007858 <xTaskCreate>

  vTaskStartScheduler();
 80015f4:	f006 fa9e 	bl	8007b34 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015f8:	bf00      	nop
 80015fa:	e7fd      	b.n	80015f8 <main+0x84>
 80015fc:	20000484 	.word	0x20000484
 8001600:	20000570 	.word	0x20000570
 8001604:	200005d0 	.word	0x200005d0
 8001608:	20000528 	.word	0x20000528
 800160c:	20000460 	.word	0x20000460
 8001610:	20000480 	.word	0x20000480
 8001614:	200004e0 	.word	0x200004e0
 8001618:	20000488 	.word	0x20000488
 800161c:	0800d8e0 	.word	0x0800d8e0
 8001620:	080019dd 	.word	0x080019dd

08001624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b094      	sub	sp, #80	@ 0x50
 8001628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800162a:	f107 031c 	add.w	r3, r7, #28
 800162e:	2234      	movs	r2, #52	@ 0x34
 8001630:	2100      	movs	r1, #0
 8001632:	4618      	mov	r0, r3
 8001634:	f009 fb12 	bl	800ac5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001638:	f107 0308 	add.w	r3, r7, #8
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001648:	2300      	movs	r3, #0
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	4b2c      	ldr	r3, [pc, #176]	@ (8001700 <SystemClock_Config+0xdc>)
 800164e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001650:	4a2b      	ldr	r2, [pc, #172]	@ (8001700 <SystemClock_Config+0xdc>)
 8001652:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001656:	6413      	str	r3, [r2, #64]	@ 0x40
 8001658:	4b29      	ldr	r3, [pc, #164]	@ (8001700 <SystemClock_Config+0xdc>)
 800165a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001660:	607b      	str	r3, [r7, #4]
 8001662:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001664:	2300      	movs	r3, #0
 8001666:	603b      	str	r3, [r7, #0]
 8001668:	4b26      	ldr	r3, [pc, #152]	@ (8001704 <SystemClock_Config+0xe0>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a25      	ldr	r2, [pc, #148]	@ (8001704 <SystemClock_Config+0xe0>)
 800166e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001672:	6013      	str	r3, [r2, #0]
 8001674:	4b23      	ldr	r3, [pc, #140]	@ (8001704 <SystemClock_Config+0xe0>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800167c:	603b      	str	r3, [r7, #0]
 800167e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001680:	2301      	movs	r3, #1
 8001682:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001684:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001688:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800168a:	2302      	movs	r3, #2
 800168c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800168e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001692:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001694:	2304      	movs	r3, #4
 8001696:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001698:	23b4      	movs	r3, #180	@ 0xb4
 800169a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800169c:	2302      	movs	r3, #2
 800169e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80016a0:	2302      	movs	r3, #2
 80016a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016a4:	2302      	movs	r3, #2
 80016a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016a8:	f107 031c 	add.w	r3, r7, #28
 80016ac:	4618      	mov	r0, r3
 80016ae:	f002 fe55 	bl	800435c <HAL_RCC_OscConfig>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80016b8:	f000 f9d2 	bl	8001a60 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80016bc:	f002 fa82 	bl	8003bc4 <HAL_PWREx_EnableOverDrive>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80016c6:	f000 f9cb 	bl	8001a60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ca:	230f      	movs	r3, #15
 80016cc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ce:	2302      	movs	r3, #2
 80016d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d2:	2300      	movs	r3, #0
 80016d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016d6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80016da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016e0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016e2:	f107 0308 	add.w	r3, r7, #8
 80016e6:	2105      	movs	r1, #5
 80016e8:	4618      	mov	r0, r3
 80016ea:	f002 fabb 	bl	8003c64 <HAL_RCC_ClockConfig>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80016f4:	f000 f9b4 	bl	8001a60 <Error_Handler>
  }
}
 80016f8:	bf00      	nop
 80016fa:	3750      	adds	r7, #80	@ 0x50
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40023800 	.word	0x40023800
 8001704:	40007000 	.word	0x40007000

08001708 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800170e:	463b      	mov	r3, r7
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800171a:	4b21      	ldr	r3, [pc, #132]	@ (80017a0 <MX_ADC1_Init+0x98>)
 800171c:	4a21      	ldr	r2, [pc, #132]	@ (80017a4 <MX_ADC1_Init+0x9c>)
 800171e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001720:	4b1f      	ldr	r3, [pc, #124]	@ (80017a0 <MX_ADC1_Init+0x98>)
 8001722:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001726:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001728:	4b1d      	ldr	r3, [pc, #116]	@ (80017a0 <MX_ADC1_Init+0x98>)
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800172e:	4b1c      	ldr	r3, [pc, #112]	@ (80017a0 <MX_ADC1_Init+0x98>)
 8001730:	2200      	movs	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001734:	4b1a      	ldr	r3, [pc, #104]	@ (80017a0 <MX_ADC1_Init+0x98>)
 8001736:	2201      	movs	r2, #1
 8001738:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800173a:	4b19      	ldr	r3, [pc, #100]	@ (80017a0 <MX_ADC1_Init+0x98>)
 800173c:	2200      	movs	r2, #0
 800173e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001742:	4b17      	ldr	r3, [pc, #92]	@ (80017a0 <MX_ADC1_Init+0x98>)
 8001744:	2200      	movs	r2, #0
 8001746:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001748:	4b15      	ldr	r3, [pc, #84]	@ (80017a0 <MX_ADC1_Init+0x98>)
 800174a:	4a17      	ldr	r2, [pc, #92]	@ (80017a8 <MX_ADC1_Init+0xa0>)
 800174c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800174e:	4b14      	ldr	r3, [pc, #80]	@ (80017a0 <MX_ADC1_Init+0x98>)
 8001750:	2200      	movs	r2, #0
 8001752:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001754:	4b12      	ldr	r3, [pc, #72]	@ (80017a0 <MX_ADC1_Init+0x98>)
 8001756:	2201      	movs	r2, #1
 8001758:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800175a:	4b11      	ldr	r3, [pc, #68]	@ (80017a0 <MX_ADC1_Init+0x98>)
 800175c:	2200      	movs	r2, #0
 800175e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001762:	4b0f      	ldr	r3, [pc, #60]	@ (80017a0 <MX_ADC1_Init+0x98>)
 8001764:	2201      	movs	r2, #1
 8001766:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001768:	480d      	ldr	r0, [pc, #52]	@ (80017a0 <MX_ADC1_Init+0x98>)
 800176a:	f000 ffbd 	bl	80026e8 <HAL_ADC_Init>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001774:	f000 f974 	bl	8001a60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001778:	2300      	movs	r3, #0
 800177a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800177c:	2301      	movs	r3, #1
 800177e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001780:	2300      	movs	r3, #0
 8001782:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001784:	463b      	mov	r3, r7
 8001786:	4619      	mov	r1, r3
 8001788:	4805      	ldr	r0, [pc, #20]	@ (80017a0 <MX_ADC1_Init+0x98>)
 800178a:	f001 f95b 	bl	8002a44 <HAL_ADC_ConfigChannel>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001794:	f000 f964 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001798:	bf00      	nop
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20000498 	.word	0x20000498
 80017a4:	40012000 	.word	0x40012000
 80017a8:	0f000001 	.word	0x0f000001

080017ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08a      	sub	sp, #40	@ 0x28
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b2:	f107 0320 	add.w	r3, r7, #32
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017bc:	1d3b      	adds	r3, r7, #4
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]
 80017c6:	60da      	str	r2, [r3, #12]
 80017c8:	611a      	str	r2, [r3, #16]
 80017ca:	615a      	str	r2, [r3, #20]
 80017cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017ce:	4b22      	ldr	r3, [pc, #136]	@ (8001858 <MX_TIM2_Init+0xac>)
 80017d0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 80017d6:	4b20      	ldr	r3, [pc, #128]	@ (8001858 <MX_TIM2_Init+0xac>)
 80017d8:	2259      	movs	r2, #89	@ 0x59
 80017da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001858 <MX_TIM2_Init+0xac>)
 80017de:	2200      	movs	r2, #0
 80017e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80017e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001858 <MX_TIM2_Init+0xac>)
 80017e4:	2263      	movs	r2, #99	@ 0x63
 80017e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001858 <MX_TIM2_Init+0xac>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001858 <MX_TIM2_Init+0xac>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80017f4:	4818      	ldr	r0, [pc, #96]	@ (8001858 <MX_TIM2_Init+0xac>)
 80017f6:	f003 f919 	bl	8004a2c <HAL_TIM_PWM_Init>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001800:	f000 f92e 	bl	8001a60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001804:	2300      	movs	r3, #0
 8001806:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001808:	2300      	movs	r3, #0
 800180a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800180c:	f107 0320 	add.w	r3, r7, #32
 8001810:	4619      	mov	r1, r3
 8001812:	4811      	ldr	r0, [pc, #68]	@ (8001858 <MX_TIM2_Init+0xac>)
 8001814:	f003 fe78 	bl	8005508 <HAL_TIMEx_MasterConfigSynchronization>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 800181e:	f000 f91f 	bl	8001a60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001822:	2360      	movs	r3, #96	@ 0x60
 8001824:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8001826:	2332      	movs	r3, #50	@ 0x32
 8001828:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	2204      	movs	r2, #4
 8001836:	4619      	mov	r1, r3
 8001838:	4807      	ldr	r0, [pc, #28]	@ (8001858 <MX_TIM2_Init+0xac>)
 800183a:	f003 faff 	bl	8004e3c <HAL_TIM_PWM_ConfigChannel>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001844:	f000 f90c 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001848:	4803      	ldr	r0, [pc, #12]	@ (8001858 <MX_TIM2_Init+0xac>)
 800184a:	f000 faf5 	bl	8001e38 <HAL_TIM_MspPostInit>

}
 800184e:	bf00      	nop
 8001850:	3728      	adds	r7, #40	@ 0x28
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	200004e0 	.word	0x200004e0

0800185c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001860:	4b11      	ldr	r3, [pc, #68]	@ (80018a8 <MX_USART2_UART_Init+0x4c>)
 8001862:	4a12      	ldr	r2, [pc, #72]	@ (80018ac <MX_USART2_UART_Init+0x50>)
 8001864:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001866:	4b10      	ldr	r3, [pc, #64]	@ (80018a8 <MX_USART2_UART_Init+0x4c>)
 8001868:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800186c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800186e:	4b0e      	ldr	r3, [pc, #56]	@ (80018a8 <MX_USART2_UART_Init+0x4c>)
 8001870:	2200      	movs	r2, #0
 8001872:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001874:	4b0c      	ldr	r3, [pc, #48]	@ (80018a8 <MX_USART2_UART_Init+0x4c>)
 8001876:	2200      	movs	r2, #0
 8001878:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800187a:	4b0b      	ldr	r3, [pc, #44]	@ (80018a8 <MX_USART2_UART_Init+0x4c>)
 800187c:	2200      	movs	r2, #0
 800187e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001880:	4b09      	ldr	r3, [pc, #36]	@ (80018a8 <MX_USART2_UART_Init+0x4c>)
 8001882:	220c      	movs	r2, #12
 8001884:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001886:	4b08      	ldr	r3, [pc, #32]	@ (80018a8 <MX_USART2_UART_Init+0x4c>)
 8001888:	2200      	movs	r2, #0
 800188a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800188c:	4b06      	ldr	r3, [pc, #24]	@ (80018a8 <MX_USART2_UART_Init+0x4c>)
 800188e:	2200      	movs	r2, #0
 8001890:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001892:	4805      	ldr	r0, [pc, #20]	@ (80018a8 <MX_USART2_UART_Init+0x4c>)
 8001894:	f003 fec8 	bl	8005628 <HAL_UART_Init>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800189e:	f000 f8df 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000528 	.word	0x20000528
 80018ac:	40004400 	.word	0x40004400

080018b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	607b      	str	r3, [r7, #4]
 80018ba:	4b10      	ldr	r3, [pc, #64]	@ (80018fc <MX_DMA_Init+0x4c>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	4a0f      	ldr	r2, [pc, #60]	@ (80018fc <MX_DMA_Init+0x4c>)
 80018c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c6:	4b0d      	ldr	r3, [pc, #52]	@ (80018fc <MX_DMA_Init+0x4c>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018ce:	607b      	str	r3, [r7, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80018d2:	2200      	movs	r2, #0
 80018d4:	2105      	movs	r1, #5
 80018d6:	2010      	movs	r0, #16
 80018d8:	f001 fb9a 	bl	8003010 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80018dc:	2010      	movs	r0, #16
 80018de:	f001 fbb3 	bl	8003048 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80018e2:	2200      	movs	r2, #0
 80018e4:	2105      	movs	r1, #5
 80018e6:	2011      	movs	r0, #17
 80018e8:	f001 fb92 	bl	8003010 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80018ec:	2011      	movs	r0, #17
 80018ee:	f001 fbab 	bl	8003048 <HAL_NVIC_EnableIRQ>

}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40023800 	.word	0x40023800

08001900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08a      	sub	sp, #40	@ 0x28
 8001904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001906:	f107 0314 	add.w	r3, r7, #20
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	605a      	str	r2, [r3, #4]
 8001910:	609a      	str	r2, [r3, #8]
 8001912:	60da      	str	r2, [r3, #12]
 8001914:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	4b2d      	ldr	r3, [pc, #180]	@ (80019d0 <MX_GPIO_Init+0xd0>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191e:	4a2c      	ldr	r2, [pc, #176]	@ (80019d0 <MX_GPIO_Init+0xd0>)
 8001920:	f043 0304 	orr.w	r3, r3, #4
 8001924:	6313      	str	r3, [r2, #48]	@ 0x30
 8001926:	4b2a      	ldr	r3, [pc, #168]	@ (80019d0 <MX_GPIO_Init+0xd0>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192a:	f003 0304 	and.w	r3, r3, #4
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	4b26      	ldr	r3, [pc, #152]	@ (80019d0 <MX_GPIO_Init+0xd0>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193a:	4a25      	ldr	r2, [pc, #148]	@ (80019d0 <MX_GPIO_Init+0xd0>)
 800193c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001940:	6313      	str	r3, [r2, #48]	@ 0x30
 8001942:	4b23      	ldr	r3, [pc, #140]	@ (80019d0 <MX_GPIO_Init+0xd0>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	4b1f      	ldr	r3, [pc, #124]	@ (80019d0 <MX_GPIO_Init+0xd0>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001956:	4a1e      	ldr	r2, [pc, #120]	@ (80019d0 <MX_GPIO_Init+0xd0>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	6313      	str	r3, [r2, #48]	@ 0x30
 800195e:	4b1c      	ldr	r3, [pc, #112]	@ (80019d0 <MX_GPIO_Init+0xd0>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	60bb      	str	r3, [r7, #8]
 8001968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	607b      	str	r3, [r7, #4]
 800196e:	4b18      	ldr	r3, [pc, #96]	@ (80019d0 <MX_GPIO_Init+0xd0>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001972:	4a17      	ldr	r2, [pc, #92]	@ (80019d0 <MX_GPIO_Init+0xd0>)
 8001974:	f043 0302 	orr.w	r3, r3, #2
 8001978:	6313      	str	r3, [r2, #48]	@ 0x30
 800197a:	4b15      	ldr	r3, [pc, #84]	@ (80019d0 <MX_GPIO_Init+0xd0>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	607b      	str	r3, [r7, #4]
 8001984:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001986:	2200      	movs	r2, #0
 8001988:	2120      	movs	r1, #32
 800198a:	4812      	ldr	r0, [pc, #72]	@ (80019d4 <MX_GPIO_Init+0xd4>)
 800198c:	f002 f900 	bl	8003b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001990:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001996:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800199a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019a0:	f107 0314 	add.w	r3, r7, #20
 80019a4:	4619      	mov	r1, r3
 80019a6:	480c      	ldr	r0, [pc, #48]	@ (80019d8 <MX_GPIO_Init+0xd8>)
 80019a8:	f001 ff5e 	bl	8003868 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80019ac:	2320      	movs	r3, #32
 80019ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b0:	2301      	movs	r3, #1
 80019b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b8:	2300      	movs	r3, #0
 80019ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	4619      	mov	r1, r3
 80019c2:	4804      	ldr	r0, [pc, #16]	@ (80019d4 <MX_GPIO_Init+0xd4>)
 80019c4:	f001 ff50 	bl	8003868 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80019c8:	bf00      	nop
 80019ca:	3728      	adds	r7, #40	@ 0x28
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40023800 	.word	0x40023800
 80019d4:	40020000 	.word	0x40020000
 80019d8:	40020800 	.word	0x40020800

080019dc <PhotoCellTask>:

/* USER CODE BEGIN 4 */
static void PhotoCellTask(void *arg) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
    photoCell_t sensor;
    TelemetryPacket pkt = {0};
 80019e4:	f107 030c 	add.w	r3, r7, #12
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
    photoCell_init(&sensor, true, 200, 3900);
 80019ee:	f107 0014 	add.w	r0, r7, #20
 80019f2:	f640 733c 	movw	r3, #3900	@ 0xf3c
 80019f6:	22c8      	movs	r2, #200	@ 0xc8
 80019f8:	2101      	movs	r1, #1
 80019fa:	f000 f853 	bl	8001aa4 <photoCell_init>

    for (;;) {
        uint8_t level = readSensor(&sensor, &hadc1);
 80019fe:	f107 0314 	add.w	r3, r7, #20
 8001a02:	490d      	ldr	r1, [pc, #52]	@ (8001a38 <PhotoCellTask+0x5c>)
 8001a04:	4618      	mov	r0, r3
 8001a06:	f000 f86f 	bl	8001ae8 <readSensor>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	77fb      	strb	r3, [r7, #31]

        pkt.sensor1++;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	3301      	adds	r3, #1
 8001a12:	60fb      	str	r3, [r7, #12]
        pkt.sensor2 = level;
 8001a14:	7ffb      	ldrb	r3, [r7, #31]
 8001a16:	ee07 3a90 	vmov	s15, r3
 8001a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a1e:	edc7 7a04 	vstr	s15, [r7, #16]

        telemetry_send(&pkt);
 8001a22:	f107 030c 	add.w	r3, r7, #12
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff fd0e 	bl	8001448 <telemetry_send>

        vTaskDelay(pdMS_TO_TICKS(1000));
 8001a2c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a30:	f006 f84a 	bl	8007ac8 <vTaskDelay>
    for (;;) {
 8001a34:	bf00      	nop
 8001a36:	e7e2      	b.n	80019fe <PhotoCellTask+0x22>
 8001a38:	20000498 	.word	0x20000498

08001a3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a04      	ldr	r2, [pc, #16]	@ (8001a5c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d101      	bne.n	8001a52 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001a4e:	f000 fe2b 	bl	80026a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40001400 	.word	0x40001400

08001a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a64:	b672      	cpsid	i
}
 8001a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a68:	bf00      	nop
 8001a6a:	e7fd      	b.n	8001a68 <Error_Handler+0x8>

08001a6c <map_range>:
 * @param in_max   Maximum of the input range.
 * @param out_min  Minimum of the output range.
 * @param out_max  Maximum of the output range.
 * @return long    Mapped output value.
 */
static inline long map_range(long x, long in_min, long in_max, long out_min, long out_max) {
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
 8001a78:	603b      	str	r3, [r7, #0]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	69b9      	ldr	r1, [r7, #24]
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	1a8a      	subs	r2, r1, r2
 8001a86:	fb03 f202 	mul.w	r2, r3, r2
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	1acb      	subs	r3, r1, r3
 8001a90:	fb92 f2f3 	sdiv	r2, r2, r3
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	4413      	add	r3, r2
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3714      	adds	r7, #20
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <photoCell_init>:
 * @param sensor      Pointer to a photoCell_t instance to initialize.
 * @param scaled      If true, the output will be scaled to a range of 0–100.
 * @param min_value   Minimum expected raw ADC value for scaling.
 * @param max_value   Maximum expected raw ADC value for scaling.
 */
void photoCell_init(photoCell_t* sensor, bool scaled, uint16_t min_value, uint16_t max_value) {
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	4608      	mov	r0, r1
 8001aae:	4611      	mov	r1, r2
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	72fb      	strb	r3, [r7, #11]
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	813b      	strh	r3, [r7, #8]
 8001aba:	4613      	mov	r3, r2
 8001abc:	80fb      	strh	r3, [r7, #6]
    sensor->scaled = scaled;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	7afa      	ldrb	r2, [r7, #11]
 8001ac2:	701a      	strb	r2, [r3, #0]
    sensor->min_value = min_value;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	893a      	ldrh	r2, [r7, #8]
 8001ac8:	805a      	strh	r2, [r3, #2]
    sensor->max_value = max_value;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	88fa      	ldrh	r2, [r7, #6]
 8001ace:	809a      	strh	r2, [r3, #4]
    sensor->current_level = 0;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	719a      	strb	r2, [r3, #6]
    sensor->last_raw_value = 0;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	811a      	strh	r2, [r3, #8]
}
 8001adc:	bf00      	nop
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <readSensor>:
 * the raw and optionally scaled light level into the provided sensor instance.
 *
 * @param sensor  Pointer to a photoCell_t instance to update.
 * @return uint8_t  Scaled (0–100) or raw (0–255 clipped) light level.
 */
uint8_t readSensor(photoCell_t* sensor, ADC_HandleTypeDef* hadc) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af02      	add	r7, sp, #8
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
    HAL_ADC_Start(hadc);
 8001af2:	6838      	ldr	r0, [r7, #0]
 8001af4:	f000 fe3c 	bl	8002770 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8001af8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001afc:	6838      	ldr	r0, [r7, #0]
 8001afe:	f000 ff09 	bl	8002914 <HAL_ADC_PollForConversion>
    uint16_t raw = HAL_ADC_GetValue(hadc);
 8001b02:	6838      	ldr	r0, [r7, #0]
 8001b04:	f000 ff91 	bl	8002a2a <HAL_ADC_GetValue>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	81bb      	strh	r3, [r7, #12]

    sensor->last_raw_value = raw;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	89ba      	ldrh	r2, [r7, #12]
 8001b10:	811a      	strh	r2, [r3, #8]

    uint8_t value;
    if (sensor->scaled) {
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d01e      	beq.n	8001b58 <readSensor+0x70>
        if (raw <= sensor->min_value) {
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	885b      	ldrh	r3, [r3, #2]
 8001b1e:	89ba      	ldrh	r2, [r7, #12]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d802      	bhi.n	8001b2a <readSensor+0x42>
            value = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	73fb      	strb	r3, [r7, #15]
 8001b28:	e01e      	b.n	8001b68 <readSensor+0x80>
        } else if (raw >= sensor->max_value) {
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	889b      	ldrh	r3, [r3, #4]
 8001b2e:	89ba      	ldrh	r2, [r7, #12]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d302      	bcc.n	8001b3a <readSensor+0x52>
            value = 100;
 8001b34:	2364      	movs	r3, #100	@ 0x64
 8001b36:	73fb      	strb	r3, [r7, #15]
 8001b38:	e016      	b.n	8001b68 <readSensor+0x80>
        } else {
            value = (uint8_t)map_range(raw, sensor->min_value, sensor->max_value, 0, 100);
 8001b3a:	89b8      	ldrh	r0, [r7, #12]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	885b      	ldrh	r3, [r3, #2]
 8001b40:	4619      	mov	r1, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	889b      	ldrh	r3, [r3, #4]
 8001b46:	461a      	mov	r2, r3
 8001b48:	2364      	movs	r3, #100	@ 0x64
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f7ff ff8d 	bl	8001a6c <map_range>
 8001b52:	4603      	mov	r3, r0
 8001b54:	73fb      	strb	r3, [r7, #15]
 8001b56:	e007      	b.n	8001b68 <readSensor+0x80>
        }
    } else {
        value = (raw > 255) ? 255 : (uint8_t)raw;
 8001b58:	89bb      	ldrh	r3, [r7, #12]
 8001b5a:	2bff      	cmp	r3, #255	@ 0xff
 8001b5c:	d802      	bhi.n	8001b64 <readSensor+0x7c>
 8001b5e:	89bb      	ldrh	r3, [r7, #12]
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	e000      	b.n	8001b66 <readSensor+0x7e>
 8001b64:	23ff      	movs	r3, #255	@ 0xff
 8001b66:	73fb      	strb	r3, [r7, #15]
    }

    sensor->current_level = value;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	7bfa      	ldrb	r2, [r7, #15]
 8001b6c:	719a      	strb	r2, [r3, #6]
    return value;
 8001b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <Pwm_init>:
/*
 * Initialize the PWM channel structure and start the timer in PWM mode.
 * The timer handle must already be configured with the desired period and
 * prescaler values prior to calling this function.
 */
void Pwm_init(PwmChannel_t* pwm, TIM_HandleTypeDef* htim, uint32_t channel) {
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
    pwm->htim = htim;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	68ba      	ldr	r2, [r7, #8]
 8001b88:	601a      	str	r2, [r3, #0]
    pwm->channel = channel;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	605a      	str	r2, [r3, #4]
    pwm->period = htim->Init.Period;
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	68da      	ldr	r2, [r3, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	609a      	str	r2, [r3, #8]
    pwm->duty_percent = 0;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	731a      	strb	r2, [r3, #12]

    HAL_TIM_PWM_Start(pwm->htim, pwm->channel);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4610      	mov	r0, r2
 8001baa:	f002 ff8f 	bl	8004acc <HAL_TIM_PWM_Start>
}
 8001bae:	bf00      	nop
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <Pwm_start>:

/* Start PWM signal generation on the configured channel. */
void Pwm_start(PwmChannel_t* pwm) {
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start(pwm->htim, pwm->channel);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4610      	mov	r0, r2
 8001bca:	f002 ff7f 	bl	8004acc <HAL_TIM_PWM_Start>
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
	...

08001bd8 <send_str>:

// Shared UART driver instance provided by application
extern uart_drv_t *shared_uart;

// Helper to send strings over UART (blocking with 100ms timeout)
static void send_str(const char *s) {
 8001bd8:	b590      	push	{r4, r7, lr}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
    if (shared_uart) {
 8001be0:	4b09      	ldr	r3, [pc, #36]	@ (8001c08 <send_str+0x30>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d00a      	beq.n	8001bfe <send_str+0x26>
        uart_send_blocking(shared_uart, (uint8_t *)s, strlen(s), 100);
 8001be8:	4b07      	ldr	r3, [pc, #28]	@ (8001c08 <send_str+0x30>)
 8001bea:	681c      	ldr	r4, [r3, #0]
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f7fe fb6f 	bl	80002d0 <strlen>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	2364      	movs	r3, #100	@ 0x64
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	4620      	mov	r0, r4
 8001bfa:	f000 fc43 	bl	8002484 <uart_send_blocking>
    }
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd90      	pop	{r4, r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000480 	.word	0x20000480

08001c0c <cmd_help>:

// 'help' command: list all available commands
void cmd_help(Args *args) {
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
    send_str("Available commands:\r\n");
 8001c14:	480f      	ldr	r0, [pc, #60]	@ (8001c54 <cmd_help+0x48>)
 8001c16:	f7ff ffdf 	bl	8001bd8 <send_str>
    for (size_t i = 0; i < cmd_count; i++) {
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	e00f      	b.n	8001c40 <cmd_help+0x34>
        send_str("  ");
 8001c20:	480d      	ldr	r0, [pc, #52]	@ (8001c58 <cmd_help+0x4c>)
 8001c22:	f7ff ffd9 	bl	8001bd8 <send_str>
        send_str(cmd_list[i].name);
 8001c26:	4a0d      	ldr	r2, [pc, #52]	@ (8001c5c <cmd_help+0x50>)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff ffd2 	bl	8001bd8 <send_str>
        send_str("\r\n");
 8001c34:	480a      	ldr	r0, [pc, #40]	@ (8001c60 <cmd_help+0x54>)
 8001c36:	f7ff ffcf 	bl	8001bd8 <send_str>
    for (size_t i = 0; i < cmd_count; i++) {
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	2203      	movs	r2, #3
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d3eb      	bcc.n	8001c20 <cmd_help+0x14>
    }
}
 8001c48:	bf00      	nop
 8001c4a:	bf00      	nop
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	0800d8e8 	.word	0x0800d8e8
 8001c58:	0800d900 	.word	0x0800d900
 8001c5c:	0800d94c 	.word	0x0800d94c
 8001c60:	0800d904 	.word	0x0800d904

08001c64 <cmd_echo>:

// 'echo' command: repeat back provided parameters
void cmd_echo(Args *args) {
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
    for (int i = 1; i < args->argc; i++) {
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	e013      	b.n	8001c9a <cmd_echo+0x36>
        send_str(args->argv[i]);
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ffab 	bl	8001bd8 <send_str>
        if (i < args->argc - 1) send_str(" ");
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	68fa      	ldr	r2, [r7, #12]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	da02      	bge.n	8001c94 <cmd_echo+0x30>
 8001c8e:	4809      	ldr	r0, [pc, #36]	@ (8001cb4 <cmd_echo+0x50>)
 8001c90:	f7ff ffa2 	bl	8001bd8 <send_str>
    for (int i = 1; i < args->argc; i++) {
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	3301      	adds	r3, #1
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	dbe6      	blt.n	8001c72 <cmd_echo+0xe>
    }
    send_str("\r\n");
 8001ca4:	4804      	ldr	r0, [pc, #16]	@ (8001cb8 <cmd_echo+0x54>)
 8001ca6:	f7ff ff97 	bl	8001bd8 <send_str>
}
 8001caa:	bf00      	nop
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	0800d908 	.word	0x0800d908
 8001cb8:	0800d904 	.word	0x0800d904

08001cbc <cmd_add>:

// 'add' command: add two integers and print result
void cmd_add(Args *args) {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08c      	sub	sp, #48	@ 0x30
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
    if (args->argc != 3) {
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2b03      	cmp	r3, #3
 8001cca:	d003      	beq.n	8001cd4 <cmd_add+0x18>
        send_str("Usage: add <a> <b>\r\n");
 8001ccc:	4810      	ldr	r0, [pc, #64]	@ (8001d10 <cmd_add+0x54>)
 8001cce:	f7ff ff83 	bl	8001bd8 <send_str>
 8001cd2:	e019      	b.n	8001d08 <cmd_add+0x4c>
        return;
    }
    int a = atoi(args->argv[1]);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f007 f9ad 	bl	8009038 <atoi>
 8001cde:	62f8      	str	r0, [r7, #44]	@ 0x2c
    int b = atoi(args->argv[2]);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f007 f9a7 	bl	8009038 <atoi>
 8001cea:	62b8      	str	r0, [r7, #40]	@ 0x28
    char buf[32];
    snprintf(buf, sizeof(buf), "Sum: %d\r\n", a + b);
 8001cec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cf0:	4413      	add	r3, r2
 8001cf2:	f107 0008 	add.w	r0, r7, #8
 8001cf6:	4a07      	ldr	r2, [pc, #28]	@ (8001d14 <cmd_add+0x58>)
 8001cf8:	2120      	movs	r1, #32
 8001cfa:	f008 f805 	bl	8009d08 <sniprintf>
    send_str(buf);
 8001cfe:	f107 0308 	add.w	r3, r7, #8
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff ff68 	bl	8001bd8 <send_str>
}
 8001d08:	3730      	adds	r7, #48	@ 0x30
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	0800d90c 	.word	0x0800d90c
 8001d14:	0800d924 	.word	0x0800d924

08001d18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	607b      	str	r3, [r7, #4]
 8001d22:	4b12      	ldr	r3, [pc, #72]	@ (8001d6c <HAL_MspInit+0x54>)
 8001d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d26:	4a11      	ldr	r2, [pc, #68]	@ (8001d6c <HAL_MspInit+0x54>)
 8001d28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d6c <HAL_MspInit+0x54>)
 8001d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d36:	607b      	str	r3, [r7, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	603b      	str	r3, [r7, #0]
 8001d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d6c <HAL_MspInit+0x54>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d42:	4a0a      	ldr	r2, [pc, #40]	@ (8001d6c <HAL_MspInit+0x54>)
 8001d44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d4a:	4b08      	ldr	r3, [pc, #32]	@ (8001d6c <HAL_MspInit+0x54>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d52:	603b      	str	r3, [r7, #0]
 8001d54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d56:	2200      	movs	r2, #0
 8001d58:	210f      	movs	r1, #15
 8001d5a:	f06f 0001 	mvn.w	r0, #1
 8001d5e:	f001 f957 	bl	8003010 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40023800 	.word	0x40023800

08001d70 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b08a      	sub	sp, #40	@ 0x28
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d78:	f107 0314 	add.w	r3, r7, #20
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	60da      	str	r2, [r3, #12]
 8001d86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a17      	ldr	r2, [pc, #92]	@ (8001dec <HAL_ADC_MspInit+0x7c>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d127      	bne.n	8001de2 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	613b      	str	r3, [r7, #16]
 8001d96:	4b16      	ldr	r3, [pc, #88]	@ (8001df0 <HAL_ADC_MspInit+0x80>)
 8001d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9a:	4a15      	ldr	r2, [pc, #84]	@ (8001df0 <HAL_ADC_MspInit+0x80>)
 8001d9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001da0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001da2:	4b13      	ldr	r3, [pc, #76]	@ (8001df0 <HAL_ADC_MspInit+0x80>)
 8001da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001daa:	613b      	str	r3, [r7, #16]
 8001dac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	4b0f      	ldr	r3, [pc, #60]	@ (8001df0 <HAL_ADC_MspInit+0x80>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db6:	4a0e      	ldr	r2, [pc, #56]	@ (8001df0 <HAL_ADC_MspInit+0x80>)
 8001db8:	f043 0301 	orr.w	r3, r3, #1
 8001dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8001df0 <HAL_ADC_MspInit+0x80>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd6:	f107 0314 	add.w	r3, r7, #20
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4805      	ldr	r0, [pc, #20]	@ (8001df4 <HAL_ADC_MspInit+0x84>)
 8001dde:	f001 fd43 	bl	8003868 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001de2:	bf00      	nop
 8001de4:	3728      	adds	r7, #40	@ 0x28
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40012000 	.word	0x40012000
 8001df0:	40023800 	.word	0x40023800
 8001df4:	40020000 	.word	0x40020000

08001df8 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e08:	d10d      	bne.n	8001e26 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	4b09      	ldr	r3, [pc, #36]	@ (8001e34 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e12:	4a08      	ldr	r2, [pc, #32]	@ (8001e34 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e1a:	4b06      	ldr	r3, [pc, #24]	@ (8001e34 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001e26:	bf00      	nop
 8001e28:	3714      	adds	r7, #20
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	40023800 	.word	0x40023800

08001e38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b088      	sub	sp, #32
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e40:	f107 030c 	add.w	r3, r7, #12
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e58:	d11d      	bne.n	8001e96 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	4b10      	ldr	r3, [pc, #64]	@ (8001ea0 <HAL_TIM_MspPostInit+0x68>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e62:	4a0f      	ldr	r2, [pc, #60]	@ (8001ea0 <HAL_TIM_MspPostInit+0x68>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea0 <HAL_TIM_MspPostInit+0x68>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	60bb      	str	r3, [r7, #8]
 8001e74:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e76:	2302      	movs	r3, #2
 8001e78:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e86:	2301      	movs	r3, #1
 8001e88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8a:	f107 030c 	add.w	r3, r7, #12
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4804      	ldr	r0, [pc, #16]	@ (8001ea4 <HAL_TIM_MspPostInit+0x6c>)
 8001e92:	f001 fce9 	bl	8003868 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001e96:	bf00      	nop
 8001e98:	3720      	adds	r7, #32
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	40020000 	.word	0x40020000

08001ea8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08a      	sub	sp, #40	@ 0x28
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb0:	f107 0314 	add.w	r3, r7, #20
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a4b      	ldr	r2, [pc, #300]	@ (8001ff4 <HAL_UART_MspInit+0x14c>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	f040 8090 	bne.w	8001fec <HAL_UART_MspInit+0x144>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ecc:	2300      	movs	r3, #0
 8001ece:	613b      	str	r3, [r7, #16]
 8001ed0:	4b49      	ldr	r3, [pc, #292]	@ (8001ff8 <HAL_UART_MspInit+0x150>)
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed4:	4a48      	ldr	r2, [pc, #288]	@ (8001ff8 <HAL_UART_MspInit+0x150>)
 8001ed6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001eda:	6413      	str	r3, [r2, #64]	@ 0x40
 8001edc:	4b46      	ldr	r3, [pc, #280]	@ (8001ff8 <HAL_UART_MspInit+0x150>)
 8001ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee4:	613b      	str	r3, [r7, #16]
 8001ee6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee8:	2300      	movs	r3, #0
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	4b42      	ldr	r3, [pc, #264]	@ (8001ff8 <HAL_UART_MspInit+0x150>)
 8001eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef0:	4a41      	ldr	r2, [pc, #260]	@ (8001ff8 <HAL_UART_MspInit+0x150>)
 8001ef2:	f043 0301 	orr.w	r3, r3, #1
 8001ef6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ef8:	4b3f      	ldr	r3, [pc, #252]	@ (8001ff8 <HAL_UART_MspInit+0x150>)
 8001efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f04:	230c      	movs	r3, #12
 8001f06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f10:	2303      	movs	r3, #3
 8001f12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f14:	2307      	movs	r3, #7
 8001f16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f18:	f107 0314 	add.w	r3, r7, #20
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4837      	ldr	r0, [pc, #220]	@ (8001ffc <HAL_UART_MspInit+0x154>)
 8001f20:	f001 fca2 	bl	8003868 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001f24:	4b36      	ldr	r3, [pc, #216]	@ (8002000 <HAL_UART_MspInit+0x158>)
 8001f26:	4a37      	ldr	r2, [pc, #220]	@ (8002004 <HAL_UART_MspInit+0x15c>)
 8001f28:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001f2a:	4b35      	ldr	r3, [pc, #212]	@ (8002000 <HAL_UART_MspInit+0x158>)
 8001f2c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001f30:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f32:	4b33      	ldr	r3, [pc, #204]	@ (8002000 <HAL_UART_MspInit+0x158>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f38:	4b31      	ldr	r3, [pc, #196]	@ (8002000 <HAL_UART_MspInit+0x158>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f3e:	4b30      	ldr	r3, [pc, #192]	@ (8002000 <HAL_UART_MspInit+0x158>)
 8001f40:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f44:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f46:	4b2e      	ldr	r3, [pc, #184]	@ (8002000 <HAL_UART_MspInit+0x158>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f4c:	4b2c      	ldr	r3, [pc, #176]	@ (8002000 <HAL_UART_MspInit+0x158>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001f52:	4b2b      	ldr	r3, [pc, #172]	@ (8002000 <HAL_UART_MspInit+0x158>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f58:	4b29      	ldr	r3, [pc, #164]	@ (8002000 <HAL_UART_MspInit+0x158>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f5e:	4b28      	ldr	r3, [pc, #160]	@ (8002000 <HAL_UART_MspInit+0x158>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001f64:	4826      	ldr	r0, [pc, #152]	@ (8002000 <HAL_UART_MspInit+0x158>)
 8001f66:	f001 f87d 	bl	8003064 <HAL_DMA_Init>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001f70:	f7ff fd76 	bl	8001a60 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a22      	ldr	r2, [pc, #136]	@ (8002000 <HAL_UART_MspInit+0x158>)
 8001f78:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001f7a:	4a21      	ldr	r2, [pc, #132]	@ (8002000 <HAL_UART_MspInit+0x158>)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001f80:	4b21      	ldr	r3, [pc, #132]	@ (8002008 <HAL_UART_MspInit+0x160>)
 8001f82:	4a22      	ldr	r2, [pc, #136]	@ (800200c <HAL_UART_MspInit+0x164>)
 8001f84:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001f86:	4b20      	ldr	r3, [pc, #128]	@ (8002008 <HAL_UART_MspInit+0x160>)
 8001f88:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001f8c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f8e:	4b1e      	ldr	r3, [pc, #120]	@ (8002008 <HAL_UART_MspInit+0x160>)
 8001f90:	2240      	movs	r2, #64	@ 0x40
 8001f92:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f94:	4b1c      	ldr	r3, [pc, #112]	@ (8002008 <HAL_UART_MspInit+0x160>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f9a:	4b1b      	ldr	r3, [pc, #108]	@ (8002008 <HAL_UART_MspInit+0x160>)
 8001f9c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fa0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fa2:	4b19      	ldr	r3, [pc, #100]	@ (8002008 <HAL_UART_MspInit+0x160>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fa8:	4b17      	ldr	r3, [pc, #92]	@ (8002008 <HAL_UART_MspInit+0x160>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001fae:	4b16      	ldr	r3, [pc, #88]	@ (8002008 <HAL_UART_MspInit+0x160>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fb4:	4b14      	ldr	r3, [pc, #80]	@ (8002008 <HAL_UART_MspInit+0x160>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fba:	4b13      	ldr	r3, [pc, #76]	@ (8002008 <HAL_UART_MspInit+0x160>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001fc0:	4811      	ldr	r0, [pc, #68]	@ (8002008 <HAL_UART_MspInit+0x160>)
 8001fc2:	f001 f84f 	bl	8003064 <HAL_DMA_Init>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8001fcc:	f7ff fd48 	bl	8001a60 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a0d      	ldr	r2, [pc, #52]	@ (8002008 <HAL_UART_MspInit+0x160>)
 8001fd4:	639a      	str	r2, [r3, #56]	@ 0x38
 8001fd6:	4a0c      	ldr	r2, [pc, #48]	@ (8002008 <HAL_UART_MspInit+0x160>)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2105      	movs	r1, #5
 8001fe0:	2026      	movs	r0, #38	@ 0x26
 8001fe2:	f001 f815 	bl	8003010 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001fe6:	2026      	movs	r0, #38	@ 0x26
 8001fe8:	f001 f82e 	bl	8003048 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001fec:	bf00      	nop
 8001fee:	3728      	adds	r7, #40	@ 0x28
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40004400 	.word	0x40004400
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	40020000 	.word	0x40020000
 8002000:	20000570 	.word	0x20000570
 8002004:	40026088 	.word	0x40026088
 8002008:	200005d0 	.word	0x200005d0
 800200c:	400260a0 	.word	0x400260a0

08002010 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b08e      	sub	sp, #56	@ 0x38
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800201c:	2300      	movs	r3, #0
 800201e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002020:	2300      	movs	r3, #0
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	4b33      	ldr	r3, [pc, #204]	@ (80020f4 <HAL_InitTick+0xe4>)
 8002026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002028:	4a32      	ldr	r2, [pc, #200]	@ (80020f4 <HAL_InitTick+0xe4>)
 800202a:	f043 0320 	orr.w	r3, r3, #32
 800202e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002030:	4b30      	ldr	r3, [pc, #192]	@ (80020f4 <HAL_InitTick+0xe4>)
 8002032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002034:	f003 0320 	and.w	r3, r3, #32
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800203c:	f107 0210 	add.w	r2, r7, #16
 8002040:	f107 0314 	add.w	r3, r7, #20
 8002044:	4611      	mov	r1, r2
 8002046:	4618      	mov	r0, r3
 8002048:	f001 ff26 	bl	8003e98 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800204c:	6a3b      	ldr	r3, [r7, #32]
 800204e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002052:	2b00      	cmp	r3, #0
 8002054:	d103      	bne.n	800205e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002056:	f001 fef7 	bl	8003e48 <HAL_RCC_GetPCLK1Freq>
 800205a:	6378      	str	r0, [r7, #52]	@ 0x34
 800205c:	e004      	b.n	8002068 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800205e:	f001 fef3 	bl	8003e48 <HAL_RCC_GetPCLK1Freq>
 8002062:	4603      	mov	r3, r0
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800206a:	4a23      	ldr	r2, [pc, #140]	@ (80020f8 <HAL_InitTick+0xe8>)
 800206c:	fba2 2303 	umull	r2, r3, r2, r3
 8002070:	0c9b      	lsrs	r3, r3, #18
 8002072:	3b01      	subs	r3, #1
 8002074:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8002076:	4b21      	ldr	r3, [pc, #132]	@ (80020fc <HAL_InitTick+0xec>)
 8002078:	4a21      	ldr	r2, [pc, #132]	@ (8002100 <HAL_InitTick+0xf0>)
 800207a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800207c:	4b1f      	ldr	r3, [pc, #124]	@ (80020fc <HAL_InitTick+0xec>)
 800207e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002082:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8002084:	4a1d      	ldr	r2, [pc, #116]	@ (80020fc <HAL_InitTick+0xec>)
 8002086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002088:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800208a:	4b1c      	ldr	r3, [pc, #112]	@ (80020fc <HAL_InitTick+0xec>)
 800208c:	2200      	movs	r2, #0
 800208e:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002090:	4b1a      	ldr	r3, [pc, #104]	@ (80020fc <HAL_InitTick+0xec>)
 8002092:	2200      	movs	r2, #0
 8002094:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002096:	4b19      	ldr	r3, [pc, #100]	@ (80020fc <HAL_InitTick+0xec>)
 8002098:	2200      	movs	r2, #0
 800209a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 800209c:	4817      	ldr	r0, [pc, #92]	@ (80020fc <HAL_InitTick+0xec>)
 800209e:	f002 fbfb 	bl	8004898 <HAL_TIM_Base_Init>
 80020a2:	4603      	mov	r3, r0
 80020a4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80020a8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d11b      	bne.n	80020e8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 80020b0:	4812      	ldr	r0, [pc, #72]	@ (80020fc <HAL_InitTick+0xec>)
 80020b2:	f002 fc4b 	bl	800494c <HAL_TIM_Base_Start_IT>
 80020b6:	4603      	mov	r3, r0
 80020b8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80020bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d111      	bne.n	80020e8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80020c4:	2037      	movs	r0, #55	@ 0x37
 80020c6:	f000 ffbf 	bl	8003048 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b0f      	cmp	r3, #15
 80020ce:	d808      	bhi.n	80020e2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 80020d0:	2200      	movs	r2, #0
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	2037      	movs	r0, #55	@ 0x37
 80020d6:	f000 ff9b 	bl	8003010 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020da:	4a0a      	ldr	r2, [pc, #40]	@ (8002104 <HAL_InitTick+0xf4>)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6013      	str	r3, [r2, #0]
 80020e0:	e002      	b.n	80020e8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80020e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3738      	adds	r7, #56	@ 0x38
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40023800 	.word	0x40023800
 80020f8:	431bde83 	.word	0x431bde83
 80020fc:	20000630 	.word	0x20000630
 8002100:	40001400 	.word	0x40001400
 8002104:	20000004 	.word	0x20000004

08002108 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800210c:	bf00      	nop
 800210e:	e7fd      	b.n	800210c <NMI_Handler+0x4>

08002110 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002114:	bf00      	nop
 8002116:	e7fd      	b.n	8002114 <HardFault_Handler+0x4>

08002118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800211c:	bf00      	nop
 800211e:	e7fd      	b.n	800211c <MemManage_Handler+0x4>

08002120 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002124:	bf00      	nop
 8002126:	e7fd      	b.n	8002124 <BusFault_Handler+0x4>

08002128 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800212c:	bf00      	nop
 800212e:	e7fd      	b.n	800212c <UsageFault_Handler+0x4>

08002130 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002134:	bf00      	nop
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
	...

08002140 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002144:	4802      	ldr	r0, [pc, #8]	@ (8002150 <DMA1_Stream5_IRQHandler+0x10>)
 8002146:	f001 f925 	bl	8003394 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20000570 	.word	0x20000570

08002154 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002158:	4802      	ldr	r0, [pc, #8]	@ (8002164 <DMA1_Stream6_IRQHandler+0x10>)
 800215a:	f001 f91b 	bl	8003394 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	200005d0 	.word	0x200005d0

08002168 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800216c:	4802      	ldr	r0, [pc, #8]	@ (8002178 <USART2_IRQHandler+0x10>)
 800216e:	f003 fb81 	bl	8005874 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000528 	.word	0x20000528

0800217c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002180:	4802      	ldr	r0, [pc, #8]	@ (800218c <TIM7_IRQHandler+0x10>)
 8002182:	f002 fd6b 	bl	8004c5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000630 	.word	0x20000630

08002190 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  return 1;
 8002194:	2301      	movs	r3, #1
}
 8002196:	4618      	mov	r0, r3
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <_kill>:

int _kill(int pid, int sig)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021aa:	f008 fdcd 	bl	800ad48 <__errno>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2216      	movs	r2, #22
 80021b2:	601a      	str	r2, [r3, #0]
  return -1;
 80021b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <_exit>:

void _exit (int status)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021c8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f7ff ffe7 	bl	80021a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80021d2:	bf00      	nop
 80021d4:	e7fd      	b.n	80021d2 <_exit+0x12>

080021d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b086      	sub	sp, #24
 80021da:	af00      	add	r7, sp, #0
 80021dc:	60f8      	str	r0, [r7, #12]
 80021de:	60b9      	str	r1, [r7, #8]
 80021e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e2:	2300      	movs	r3, #0
 80021e4:	617b      	str	r3, [r7, #20]
 80021e6:	e00a      	b.n	80021fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021e8:	f3af 8000 	nop.w
 80021ec:	4601      	mov	r1, r0
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	1c5a      	adds	r2, r3, #1
 80021f2:	60ba      	str	r2, [r7, #8]
 80021f4:	b2ca      	uxtb	r2, r1
 80021f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	3301      	adds	r3, #1
 80021fc:	617b      	str	r3, [r7, #20]
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	429a      	cmp	r2, r3
 8002204:	dbf0      	blt.n	80021e8 <_read+0x12>
  }

  return len;
 8002206:	687b      	ldr	r3, [r7, #4]
}
 8002208:	4618      	mov	r0, r3
 800220a:	3718      	adds	r7, #24
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800221c:	2300      	movs	r3, #0
 800221e:	617b      	str	r3, [r7, #20]
 8002220:	e009      	b.n	8002236 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	1c5a      	adds	r2, r3, #1
 8002226:	60ba      	str	r2, [r7, #8]
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	3301      	adds	r3, #1
 8002234:	617b      	str	r3, [r7, #20]
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	429a      	cmp	r2, r3
 800223c:	dbf1      	blt.n	8002222 <_write+0x12>
  }
  return len;
 800223e:	687b      	ldr	r3, [r7, #4]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <_close>:

int _close(int file)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002250:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002254:	4618      	mov	r0, r3
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002270:	605a      	str	r2, [r3, #4]
  return 0;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <_isatty>:

int _isatty(int file)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002288:	2301      	movs	r3, #1
}
 800228a:	4618      	mov	r0, r3
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002296:	b480      	push	{r7}
 8002298:	b085      	sub	sp, #20
 800229a:	af00      	add	r7, sp, #0
 800229c:	60f8      	str	r0, [r7, #12]
 800229e:	60b9      	str	r1, [r7, #8]
 80022a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3714      	adds	r7, #20
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022b8:	4a14      	ldr	r2, [pc, #80]	@ (800230c <_sbrk+0x5c>)
 80022ba:	4b15      	ldr	r3, [pc, #84]	@ (8002310 <_sbrk+0x60>)
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022c4:	4b13      	ldr	r3, [pc, #76]	@ (8002314 <_sbrk+0x64>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d102      	bne.n	80022d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022cc:	4b11      	ldr	r3, [pc, #68]	@ (8002314 <_sbrk+0x64>)
 80022ce:	4a12      	ldr	r2, [pc, #72]	@ (8002318 <_sbrk+0x68>)
 80022d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022d2:	4b10      	ldr	r3, [pc, #64]	@ (8002314 <_sbrk+0x64>)
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4413      	add	r3, r2
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d207      	bcs.n	80022f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022e0:	f008 fd32 	bl	800ad48 <__errno>
 80022e4:	4603      	mov	r3, r0
 80022e6:	220c      	movs	r2, #12
 80022e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80022ee:	e009      	b.n	8002304 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022f0:	4b08      	ldr	r3, [pc, #32]	@ (8002314 <_sbrk+0x64>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022f6:	4b07      	ldr	r3, [pc, #28]	@ (8002314 <_sbrk+0x64>)
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4413      	add	r3, r2
 80022fe:	4a05      	ldr	r2, [pc, #20]	@ (8002314 <_sbrk+0x64>)
 8002300:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002302:	68fb      	ldr	r3, [r7, #12]
}
 8002304:	4618      	mov	r0, r3
 8002306:	3718      	adds	r7, #24
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	20020000 	.word	0x20020000
 8002310:	00000400 	.word	0x00000400
 8002314:	20000678 	.word	0x20000678
 8002318:	20004538 	.word	0x20004538

0800231c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002320:	4b06      	ldr	r3, [pc, #24]	@ (800233c <SystemInit+0x20>)
 8002322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002326:	4a05      	ldr	r2, [pc, #20]	@ (800233c <SystemInit+0x20>)
 8002328:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800232c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002330:	bf00      	nop
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	e000ed00 	.word	0xe000ed00

08002340 <find_drv>:
// Registry of all inited instances
static uart_drv_t *uart_instances[UART_DRV_MAX_INSTANCES];
static size_t      uart_instance_count = 0;

/** Find the drv instance matching a given huart pointer */
static uart_drv_t *find_drv(UART_HandleTypeDef *hu) {
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
    for (size_t i = 0; i < uart_instance_count; ++i) {
 8002348:	2300      	movs	r3, #0
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	e00f      	b.n	800236e <find_drv+0x2e>
        if (uart_instances[i]->huart == hu) {
 800234e:	4a0e      	ldr	r2, [pc, #56]	@ (8002388 <find_drv+0x48>)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	429a      	cmp	r2, r3
 800235c:	d104      	bne.n	8002368 <find_drv+0x28>
            return uart_instances[i];
 800235e:	4a0a      	ldr	r2, [pc, #40]	@ (8002388 <find_drv+0x48>)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002366:	e008      	b.n	800237a <find_drv+0x3a>
    for (size_t i = 0; i < uart_instance_count; ++i) {
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	3301      	adds	r3, #1
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	4b07      	ldr	r3, [pc, #28]	@ (800238c <find_drv+0x4c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	429a      	cmp	r2, r3
 8002376:	d3ea      	bcc.n	800234e <find_drv+0xe>
        }
    }
    return NULL;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	2000067c 	.word	0x2000067c
 800238c:	2000068c 	.word	0x2000068c

08002390 <notify_event>:

/** Invoke the user callback and update status */
static void notify_event(uart_drv_t *drv, uart_event_t evt) {
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	460b      	mov	r3, r1
 800239a:	70fb      	strb	r3, [r7, #3]
    drv->status = (evt == UART_EVT_TX_COMPLETE || evt == UART_EVT_RX_COMPLETE)
                  ? UART_OK
                  : UART_ERROR;
 800239c:	78fb      	ldrb	r3, [r7, #3]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d002      	beq.n	80023a8 <notify_event+0x18>
    drv->status = (evt == UART_EVT_TX_COMPLETE || evt == UART_EVT_RX_COMPLETE)
 80023a2:	78fb      	ldrb	r3, [r7, #3]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d101      	bne.n	80023ac <notify_event+0x1c>
                  : UART_ERROR;
 80023a8:	2200      	movs	r2, #0
 80023aa:	e000      	b.n	80023ae <notify_event+0x1e>
 80023ac:	2202      	movs	r2, #2
    drv->status = (evt == UART_EVT_TX_COMPLETE || evt == UART_EVT_RX_COMPLETE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	771a      	strb	r2, [r3, #28]
    if (drv->cb) drv->cb(evt, drv->ctx);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d006      	beq.n	80023c8 <notify_event+0x38>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6991      	ldr	r1, [r2, #24]
 80023c2:	78fa      	ldrb	r2, [r7, #3]
 80023c4:	4610      	mov	r0, r2
 80023c6:	4798      	blx	r3
}
 80023c8:	bf00      	nop
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <uart_init>:

uart_status_t uart_init(uart_drv_t *drv,
                        UART_HandleTypeDef *huart,
                        DMA_HandleTypeDef  *hdma_tx,
                        DMA_HandleTypeDef  *hdma_rx)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
 80023dc:	603b      	str	r3, [r7, #0]
    if (uart_instance_count >= UART_DRV_MAX_INSTANCES) {
 80023de:	4b27      	ldr	r3, [pc, #156]	@ (800247c <uart_init+0xac>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2b03      	cmp	r3, #3
 80023e4:	d901      	bls.n	80023ea <uart_init+0x1a>
        return UART_ERROR;
 80023e6:	2302      	movs	r3, #2
 80023e8:	e043      	b.n	8002472 <uart_init+0xa2>
    }
    drv->huart   = huart;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	68ba      	ldr	r2, [r7, #8]
 80023ee:	601a      	str	r2, [r3, #0]
    drv->hdma_tx = hdma_tx;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	605a      	str	r2, [r3, #4]
    drv->hdma_rx = hdma_rx;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	609a      	str	r2, [r3, #8]
    // Link DMA handles if provided
    if (drv->hdma_tx) drv->huart->hdmatx = drv->hdma_tx;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d004      	beq.n	800240e <uart_init+0x3e>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	6852      	ldr	r2, [r2, #4]
 800240c:	639a      	str	r2, [r3, #56]	@ 0x38
    if (drv->hdma_rx) drv->huart->hdmarx = drv->hdma_rx;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d004      	beq.n	8002420 <uart_init+0x50>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	6892      	ldr	r2, [r2, #8]
 800241e:	63da      	str	r2, [r3, #60]	@ 0x3c
    // Create mutexes
    drv->tx_mutex = xSemaphoreCreateMutex();
 8002420:	2001      	movs	r0, #1
 8002422:	f004 fce7 	bl	8006df4 <xQueueCreateMutex>
 8002426:	4602      	mov	r2, r0
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	60da      	str	r2, [r3, #12]
    drv->rx_mutex = xSemaphoreCreateMutex();
 800242c:	2001      	movs	r0, #1
 800242e:	f004 fce1 	bl	8006df4 <xQueueCreateMutex>
 8002432:	4602      	mov	r2, r0
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	611a      	str	r2, [r3, #16]
    drv->cb       = NULL;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	615a      	str	r2, [r3, #20]
    drv->ctx      = NULL;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	619a      	str	r2, [r3, #24]
    drv->status   = UART_OK;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	771a      	strb	r2, [r3, #28]
    // Register instance
    uart_instances[uart_instance_count++] = drv;
 800244a:	4b0c      	ldr	r3, [pc, #48]	@ (800247c <uart_init+0xac>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	1c5a      	adds	r2, r3, #1
 8002450:	490a      	ldr	r1, [pc, #40]	@ (800247c <uart_init+0xac>)
 8002452:	600a      	str	r2, [r1, #0]
 8002454:	490a      	ldr	r1, [pc, #40]	@ (8002480 <uart_init+0xb0>)
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return (drv->tx_mutex && drv->rx_mutex) ? UART_OK : UART_ERROR;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d005      	beq.n	8002470 <uart_init+0xa0>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <uart_init+0xa0>
 800246c:	2300      	movs	r3, #0
 800246e:	e000      	b.n	8002472 <uart_init+0xa2>
 8002470:	2302      	movs	r3, #2
}
 8002472:	4618      	mov	r0, r3
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	2000068c 	.word	0x2000068c
 8002480:	2000067c 	.word	0x2000067c

08002484 <uart_send_blocking>:
    return UART_OK;
}

// Blocking APIs

uart_status_t uart_send_blocking(uart_drv_t *drv, uint8_t *data, size_t len, uint32_t timeout_ms) {
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
 8002490:	603b      	str	r3, [r7, #0]
    if (xSemaphoreTake(drv->tx_mutex, pdMS_TO_TICKS(timeout_ms)) != pdTRUE)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	68da      	ldr	r2, [r3, #12]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800249c:	fb01 f303 	mul.w	r3, r1, r3
 80024a0:	4913      	ldr	r1, [pc, #76]	@ (80024f0 <uart_send_blocking+0x6c>)
 80024a2:	fba1 1303 	umull	r1, r3, r1, r3
 80024a6:	099b      	lsrs	r3, r3, #6
 80024a8:	4619      	mov	r1, r3
 80024aa:	4610      	mov	r0, r2
 80024ac:	f004 ff3c 	bl	8007328 <xQueueSemaphoreTake>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d001      	beq.n	80024ba <uart_send_blocking+0x36>
        return UART_BUSY;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e016      	b.n	80024e8 <uart_send_blocking+0x64>
    HAL_StatusTypeDef h = HAL_UART_Transmit(drv->huart, data, len, timeout_ms);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6818      	ldr	r0, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	68b9      	ldr	r1, [r7, #8]
 80024c6:	f003 f8ff 	bl	80056c8 <HAL_UART_Transmit>
 80024ca:	4603      	mov	r3, r0
 80024cc:	75fb      	strb	r3, [r7, #23]
    xSemaphoreGive(drv->tx_mutex);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	68d8      	ldr	r0, [r3, #12]
 80024d2:	2300      	movs	r3, #0
 80024d4:	2200      	movs	r2, #0
 80024d6:	2100      	movs	r1, #0
 80024d8:	f004 fca4 	bl	8006e24 <xQueueGenericSend>
    return (h == HAL_OK ? UART_OK : UART_ERROR);
 80024dc:	7dfb      	ldrb	r3, [r7, #23]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <uart_send_blocking+0x62>
 80024e2:	2300      	movs	r3, #0
 80024e4:	e000      	b.n	80024e8 <uart_send_blocking+0x64>
 80024e6:	2302      	movs	r3, #2
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3718      	adds	r7, #24
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	10624dd3 	.word	0x10624dd3

080024f4 <uart_receive_nb>:
        return UART_ERROR;
    }
    return UART_OK;
}

uart_status_t uart_receive_nb(uart_drv_t *drv, uint8_t *buf, size_t len) {
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
    if (drv->status == UART_BUSY) return UART_BUSY;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	7f1b      	ldrb	r3, [r3, #28]
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b01      	cmp	r3, #1
 8002508:	d101      	bne.n	800250e <uart_receive_nb+0x1a>
 800250a:	2301      	movs	r3, #1
 800250c:	e013      	b.n	8002536 <uart_receive_nb+0x42>
    drv->status = UART_BUSY;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2201      	movs	r2, #1
 8002512:	771a      	strb	r2, [r3, #28]
    if (HAL_UART_Receive_IT(drv->huart, buf, len) != HAL_OK) {
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	b292      	uxth	r2, r2
 800251c:	68b9      	ldr	r1, [r7, #8]
 800251e:	4618      	mov	r0, r3
 8002520:	f003 f95d 	bl	80057de <HAL_UART_Receive_IT>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d004      	beq.n	8002534 <uart_receive_nb+0x40>
        drv->status = UART_ERROR;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2202      	movs	r2, #2
 800252e:	771a      	strb	r2, [r3, #28]
        return UART_ERROR;
 8002530:	2302      	movs	r3, #2
 8002532:	e000      	b.n	8002536 <uart_receive_nb+0x42>
    }
    return UART_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <uart_start_dma_rx>:
    if (!drv->hdma_tx) return UART_ERROR;
    return (HAL_UART_Transmit_DMA(drv->huart, data, len) == HAL_OK
            ? UART_OK : UART_ERROR);
}

uart_status_t uart_start_dma_rx(uart_drv_t *drv, uint8_t *buf, size_t len) {
 800253e:	b580      	push	{r7, lr}
 8002540:	b084      	sub	sp, #16
 8002542:	af00      	add	r7, sp, #0
 8002544:	60f8      	str	r0, [r7, #12]
 8002546:	60b9      	str	r1, [r7, #8]
 8002548:	607a      	str	r2, [r7, #4]
    if (!drv->hdma_rx) return UART_ERROR;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <uart_start_dma_rx+0x18>
 8002552:	2302      	movs	r3, #2
 8002554:	e00d      	b.n	8002572 <uart_start_dma_rx+0x34>
    return (HAL_UART_Receive_DMA(drv->huart, buf, len) == HAL_OK
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	b292      	uxth	r2, r2
 800255e:	68b9      	ldr	r1, [r7, #8]
 8002560:	4618      	mov	r0, r3
 8002562:	f003 f961 	bl	8005828 <HAL_UART_Receive_DMA>
 8002566:	4603      	mov	r3, r0
            ? UART_OK : UART_ERROR);
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <uart_start_dma_rx+0x32>
 800256c:	2300      	movs	r3, #0
 800256e:	e000      	b.n	8002572 <uart_start_dma_rx+0x34>
 8002570:	2302      	movs	r3, #2
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <uart_register_callback>:
    return drv->status;
}

// Callback registration

void uart_register_callback(uart_drv_t *drv, uart_callback_t cb, void *user_ctx) {
 800257a:	b480      	push	{r7}
 800257c:	b085      	sub	sp, #20
 800257e:	af00      	add	r7, sp, #0
 8002580:	60f8      	str	r0, [r7, #12]
 8002582:	60b9      	str	r1, [r7, #8]
 8002584:	607a      	str	r2, [r7, #4]
    drv->cb  = cb;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	68ba      	ldr	r2, [r7, #8]
 800258a:	615a      	str	r2, [r3, #20]
    drv->ctx = user_ctx;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	619a      	str	r2, [r3, #24]
}
 8002592:	bf00      	nop
 8002594:	3714      	adds	r7, #20
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <HAL_UART_TxCpltCallback>:

// HAL UART IRQ callbacks (called by HAL_UART_IRQHandler)

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *hu) {
 800259e:	b580      	push	{r7, lr}
 80025a0:	b084      	sub	sp, #16
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
    uart_drv_t *drv = find_drv(hu);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7ff feca 	bl	8002340 <find_drv>
 80025ac:	60f8      	str	r0, [r7, #12]
    if (drv) notify_event(drv, UART_EVT_TX_COMPLETE);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d003      	beq.n	80025bc <HAL_UART_TxCpltCallback+0x1e>
 80025b4:	2100      	movs	r1, #0
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f7ff feea 	bl	8002390 <notify_event>
}
 80025bc:	bf00      	nop
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *hu) {
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
    uart_drv_t *drv = find_drv(hu);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f7ff feb7 	bl	8002340 <find_drv>
 80025d2:	60f8      	str	r0, [r7, #12]
    if (drv) notify_event(drv, UART_EVT_RX_COMPLETE);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_UART_RxCpltCallback+0x1e>
 80025da:	2101      	movs	r1, #1
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f7ff fed7 	bl	8002390 <notify_event>
}
 80025e2:	bf00      	nop
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *hu) {
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b084      	sub	sp, #16
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
    uart_drv_t *drv = find_drv(hu);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f7ff fea4 	bl	8002340 <find_drv>
 80025f8:	60f8      	str	r0, [r7, #12]
    if (drv) notify_event(drv, UART_EVT_ERROR);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d003      	beq.n	8002608 <HAL_UART_ErrorCallback+0x1e>
 8002600:	2102      	movs	r1, #2
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f7ff fec4 	bl	8002390 <notify_event>
}
 8002608:	bf00      	nop
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002610:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002648 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002614:	f7ff fe82 	bl	800231c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002618:	480c      	ldr	r0, [pc, #48]	@ (800264c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800261a:	490d      	ldr	r1, [pc, #52]	@ (8002650 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800261c:	4a0d      	ldr	r2, [pc, #52]	@ (8002654 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800261e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002620:	e002      	b.n	8002628 <LoopCopyDataInit>

08002622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002626:	3304      	adds	r3, #4

08002628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800262a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800262c:	d3f9      	bcc.n	8002622 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800262e:	4a0a      	ldr	r2, [pc, #40]	@ (8002658 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002630:	4c0a      	ldr	r4, [pc, #40]	@ (800265c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002634:	e001      	b.n	800263a <LoopFillZerobss>

08002636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002638:	3204      	adds	r2, #4

0800263a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800263a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800263c:	d3fb      	bcc.n	8002636 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800263e:	f008 fb89 	bl	800ad54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002642:	f7fe ff97 	bl	8001574 <main>
  bx  lr    
 8002646:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002648:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800264c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002650:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002654:	0800de18 	.word	0x0800de18
  ldr r2, =_sbss
 8002658:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800265c:	20004534 	.word	0x20004534

08002660 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002660:	e7fe      	b.n	8002660 <ADC_IRQHandler>
	...

08002664 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002668:	4b0e      	ldr	r3, [pc, #56]	@ (80026a4 <HAL_Init+0x40>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a0d      	ldr	r2, [pc, #52]	@ (80026a4 <HAL_Init+0x40>)
 800266e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002672:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002674:	4b0b      	ldr	r3, [pc, #44]	@ (80026a4 <HAL_Init+0x40>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a0a      	ldr	r2, [pc, #40]	@ (80026a4 <HAL_Init+0x40>)
 800267a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800267e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002680:	4b08      	ldr	r3, [pc, #32]	@ (80026a4 <HAL_Init+0x40>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a07      	ldr	r2, [pc, #28]	@ (80026a4 <HAL_Init+0x40>)
 8002686:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800268a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800268c:	2003      	movs	r0, #3
 800268e:	f000 fcb4 	bl	8002ffa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002692:	200f      	movs	r0, #15
 8002694:	f7ff fcbc 	bl	8002010 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002698:	f7ff fb3e 	bl	8001d18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40023c00 	.word	0x40023c00

080026a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026ac:	4b06      	ldr	r3, [pc, #24]	@ (80026c8 <HAL_IncTick+0x20>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	461a      	mov	r2, r3
 80026b2:	4b06      	ldr	r3, [pc, #24]	@ (80026cc <HAL_IncTick+0x24>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4413      	add	r3, r2
 80026b8:	4a04      	ldr	r2, [pc, #16]	@ (80026cc <HAL_IncTick+0x24>)
 80026ba:	6013      	str	r3, [r2, #0]
}
 80026bc:	bf00      	nop
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	20000008 	.word	0x20000008
 80026cc:	20000690 	.word	0x20000690

080026d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  return uwTick;
 80026d4:	4b03      	ldr	r3, [pc, #12]	@ (80026e4 <HAL_GetTick+0x14>)
 80026d6:	681b      	ldr	r3, [r3, #0]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	20000690 	.word	0x20000690

080026e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026f0:	2300      	movs	r3, #0
 80026f2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e033      	b.n	8002766 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002702:	2b00      	cmp	r3, #0
 8002704:	d109      	bne.n	800271a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7ff fb32 	bl	8001d70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271e:	f003 0310 	and.w	r3, r3, #16
 8002722:	2b00      	cmp	r3, #0
 8002724:	d118      	bne.n	8002758 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800272e:	f023 0302 	bic.w	r3, r3, #2
 8002732:	f043 0202 	orr.w	r2, r3, #2
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 fab4 	bl	8002ca8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274a:	f023 0303 	bic.w	r3, r3, #3
 800274e:	f043 0201 	orr.w	r2, r3, #1
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	641a      	str	r2, [r3, #64]	@ 0x40
 8002756:	e001      	b.n	800275c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002764:	7bfb      	ldrb	r3, [r7, #15]
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
	...

08002770 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002778:	2300      	movs	r3, #0
 800277a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002782:	2b01      	cmp	r3, #1
 8002784:	d101      	bne.n	800278a <HAL_ADC_Start+0x1a>
 8002786:	2302      	movs	r3, #2
 8002788:	e0b2      	b.n	80028f0 <HAL_ADC_Start+0x180>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b01      	cmp	r3, #1
 800279e:	d018      	beq.n	80027d2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689a      	ldr	r2, [r3, #8]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f042 0201 	orr.w	r2, r2, #1
 80027ae:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80027b0:	4b52      	ldr	r3, [pc, #328]	@ (80028fc <HAL_ADC_Start+0x18c>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a52      	ldr	r2, [pc, #328]	@ (8002900 <HAL_ADC_Start+0x190>)
 80027b6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ba:	0c9a      	lsrs	r2, r3, #18
 80027bc:	4613      	mov	r3, r2
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	4413      	add	r3, r2
 80027c2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80027c4:	e002      	b.n	80027cc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	3b01      	subs	r3, #1
 80027ca:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1f9      	bne.n	80027c6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d17a      	bne.n	80028d6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80027e8:	f023 0301 	bic.w	r3, r3, #1
 80027ec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d007      	beq.n	8002812 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002806:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800280a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002816:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800281a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800281e:	d106      	bne.n	800282e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002824:	f023 0206 	bic.w	r2, r3, #6
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	645a      	str	r2, [r3, #68]	@ 0x44
 800282c:	e002      	b.n	8002834 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800283c:	4b31      	ldr	r3, [pc, #196]	@ (8002904 <HAL_ADC_Start+0x194>)
 800283e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002848:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f003 031f 	and.w	r3, r3, #31
 8002852:	2b00      	cmp	r3, #0
 8002854:	d12a      	bne.n	80028ac <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a2b      	ldr	r2, [pc, #172]	@ (8002908 <HAL_ADC_Start+0x198>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d015      	beq.n	800288c <HAL_ADC_Start+0x11c>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a29      	ldr	r2, [pc, #164]	@ (800290c <HAL_ADC_Start+0x19c>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d105      	bne.n	8002876 <HAL_ADC_Start+0x106>
 800286a:	4b26      	ldr	r3, [pc, #152]	@ (8002904 <HAL_ADC_Start+0x194>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f003 031f 	and.w	r3, r3, #31
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00a      	beq.n	800288c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a25      	ldr	r2, [pc, #148]	@ (8002910 <HAL_ADC_Start+0x1a0>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d136      	bne.n	80028ee <HAL_ADC_Start+0x17e>
 8002880:	4b20      	ldr	r3, [pc, #128]	@ (8002904 <HAL_ADC_Start+0x194>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 0310 	and.w	r3, r3, #16
 8002888:	2b00      	cmp	r3, #0
 800288a:	d130      	bne.n	80028ee <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d129      	bne.n	80028ee <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80028a8:	609a      	str	r2, [r3, #8]
 80028aa:	e020      	b.n	80028ee <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a15      	ldr	r2, [pc, #84]	@ (8002908 <HAL_ADC_Start+0x198>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d11b      	bne.n	80028ee <HAL_ADC_Start+0x17e>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d114      	bne.n	80028ee <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689a      	ldr	r2, [r3, #8]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80028d2:	609a      	str	r2, [r3, #8]
 80028d4:	e00b      	b.n	80028ee <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028da:	f043 0210 	orr.w	r2, r3, #16
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e6:	f043 0201 	orr.w	r2, r3, #1
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3714      	adds	r7, #20
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	20000000 	.word	0x20000000
 8002900:	431bde83 	.word	0x431bde83
 8002904:	40012300 	.word	0x40012300
 8002908:	40012000 	.word	0x40012000
 800290c:	40012100 	.word	0x40012100
 8002910:	40012200 	.word	0x40012200

08002914 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800291e:	2300      	movs	r3, #0
 8002920:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800292c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002930:	d113      	bne.n	800295a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800293c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002940:	d10b      	bne.n	800295a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002946:	f043 0220 	orr.w	r2, r3, #32
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e063      	b.n	8002a22 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800295a:	f7ff feb9 	bl	80026d0 <HAL_GetTick>
 800295e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002960:	e021      	b.n	80029a6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002968:	d01d      	beq.n	80029a6 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d007      	beq.n	8002980 <HAL_ADC_PollForConversion+0x6c>
 8002970:	f7ff feae 	bl	80026d0 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	429a      	cmp	r2, r3
 800297e:	d212      	bcs.n	80029a6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b02      	cmp	r3, #2
 800298c:	d00b      	beq.n	80029a6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002992:	f043 0204 	orr.w	r2, r3, #4
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e03d      	b.n	8002a22 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d1d6      	bne.n	8002962 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f06f 0212 	mvn.w	r2, #18
 80029bc:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d123      	bne.n	8002a20 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d11f      	bne.n	8002a20 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d006      	beq.n	80029fc <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d111      	bne.n	8002a20 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a00:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d105      	bne.n	8002a20 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a18:	f043 0201 	orr.w	r2, r3, #1
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b083      	sub	sp, #12
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d101      	bne.n	8002a60 <HAL_ADC_ConfigChannel+0x1c>
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	e113      	b.n	8002c88 <HAL_ADC_ConfigChannel+0x244>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2b09      	cmp	r3, #9
 8002a6e:	d925      	bls.n	8002abc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68d9      	ldr	r1, [r3, #12]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	4613      	mov	r3, r2
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	4413      	add	r3, r2
 8002a84:	3b1e      	subs	r3, #30
 8002a86:	2207      	movs	r2, #7
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	43da      	mvns	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	400a      	ands	r2, r1
 8002a94:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68d9      	ldr	r1, [r3, #12]
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	4403      	add	r3, r0
 8002aae:	3b1e      	subs	r3, #30
 8002ab0:	409a      	lsls	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	60da      	str	r2, [r3, #12]
 8002aba:	e022      	b.n	8002b02 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6919      	ldr	r1, [r3, #16]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	461a      	mov	r2, r3
 8002aca:	4613      	mov	r3, r2
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	4413      	add	r3, r2
 8002ad0:	2207      	movs	r2, #7
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	43da      	mvns	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	400a      	ands	r2, r1
 8002ade:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6919      	ldr	r1, [r3, #16]
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	689a      	ldr	r2, [r3, #8]
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	4618      	mov	r0, r3
 8002af2:	4603      	mov	r3, r0
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	4403      	add	r3, r0
 8002af8:	409a      	lsls	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2b06      	cmp	r3, #6
 8002b08:	d824      	bhi.n	8002b54 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	4613      	mov	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	3b05      	subs	r3, #5
 8002b1c:	221f      	movs	r2, #31
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	43da      	mvns	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	400a      	ands	r2, r1
 8002b2a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	4618      	mov	r0, r3
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4413      	add	r3, r2
 8002b44:	3b05      	subs	r3, #5
 8002b46:	fa00 f203 	lsl.w	r2, r0, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b52:	e04c      	b.n	8002bee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	2b0c      	cmp	r3, #12
 8002b5a:	d824      	bhi.n	8002ba6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	4613      	mov	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	3b23      	subs	r3, #35	@ 0x23
 8002b6e:	221f      	movs	r2, #31
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	43da      	mvns	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	400a      	ands	r2, r1
 8002b7c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	4613      	mov	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	3b23      	subs	r3, #35	@ 0x23
 8002b98:	fa00 f203 	lsl.w	r2, r0, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ba4:	e023      	b.n	8002bee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	3b41      	subs	r3, #65	@ 0x41
 8002bb8:	221f      	movs	r2, #31
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	43da      	mvns	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	400a      	ands	r2, r1
 8002bc6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685a      	ldr	r2, [r3, #4]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	3b41      	subs	r3, #65	@ 0x41
 8002be2:	fa00 f203 	lsl.w	r2, r0, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	430a      	orrs	r2, r1
 8002bec:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bee:	4b29      	ldr	r3, [pc, #164]	@ (8002c94 <HAL_ADC_ConfigChannel+0x250>)
 8002bf0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a28      	ldr	r2, [pc, #160]	@ (8002c98 <HAL_ADC_ConfigChannel+0x254>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d10f      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x1d8>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2b12      	cmp	r3, #18
 8002c02:	d10b      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a1d      	ldr	r2, [pc, #116]	@ (8002c98 <HAL_ADC_ConfigChannel+0x254>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d12b      	bne.n	8002c7e <HAL_ADC_ConfigChannel+0x23a>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a1c      	ldr	r2, [pc, #112]	@ (8002c9c <HAL_ADC_ConfigChannel+0x258>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d003      	beq.n	8002c38 <HAL_ADC_ConfigChannel+0x1f4>
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2b11      	cmp	r3, #17
 8002c36:	d122      	bne.n	8002c7e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a11      	ldr	r2, [pc, #68]	@ (8002c9c <HAL_ADC_ConfigChannel+0x258>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d111      	bne.n	8002c7e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c5a:	4b11      	ldr	r3, [pc, #68]	@ (8002ca0 <HAL_ADC_ConfigChannel+0x25c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a11      	ldr	r2, [pc, #68]	@ (8002ca4 <HAL_ADC_ConfigChannel+0x260>)
 8002c60:	fba2 2303 	umull	r2, r3, r2, r3
 8002c64:	0c9a      	lsrs	r2, r3, #18
 8002c66:	4613      	mov	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4413      	add	r3, r2
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002c70:	e002      	b.n	8002c78 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	3b01      	subs	r3, #1
 8002c76:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1f9      	bne.n	8002c72 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3714      	adds	r7, #20
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	40012300 	.word	0x40012300
 8002c98:	40012000 	.word	0x40012000
 8002c9c:	10000012 	.word	0x10000012
 8002ca0:	20000000 	.word	0x20000000
 8002ca4:	431bde83 	.word	0x431bde83

08002ca8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cb0:	4b79      	ldr	r3, [pc, #484]	@ (8002e98 <ADC_Init+0x1f0>)
 8002cb2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002cdc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6859      	ldr	r1, [r3, #4]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	021a      	lsls	r2, r3, #8
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	685a      	ldr	r2, [r3, #4]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002d00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	6859      	ldr	r1, [r3, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	430a      	orrs	r2, r1
 8002d12:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689a      	ldr	r2, [r3, #8]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6899      	ldr	r1, [r3, #8]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68da      	ldr	r2, [r3, #12]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d3a:	4a58      	ldr	r2, [pc, #352]	@ (8002e9c <ADC_Init+0x1f4>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d022      	beq.n	8002d86 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689a      	ldr	r2, [r3, #8]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002d4e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6899      	ldr	r1, [r3, #8]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002d70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6899      	ldr	r1, [r3, #8]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	430a      	orrs	r2, r1
 8002d82:	609a      	str	r2, [r3, #8]
 8002d84:	e00f      	b.n	8002da6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002d94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002da4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 0202 	bic.w	r2, r2, #2
 8002db4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6899      	ldr	r1, [r3, #8]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	7e1b      	ldrb	r3, [r3, #24]
 8002dc0:	005a      	lsls	r2, r3, #1
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d01b      	beq.n	8002e0c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002de2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002df2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6859      	ldr	r1, [r3, #4]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	035a      	lsls	r2, r3, #13
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	605a      	str	r2, [r3, #4]
 8002e0a:	e007      	b.n	8002e1c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e1a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002e2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	3b01      	subs	r3, #1
 8002e38:	051a      	lsls	r2, r3, #20
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	689a      	ldr	r2, [r3, #8]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002e50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6899      	ldr	r1, [r3, #8]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002e5e:	025a      	lsls	r2, r3, #9
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689a      	ldr	r2, [r3, #8]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6899      	ldr	r1, [r3, #8]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	029a      	lsls	r2, r3, #10
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	609a      	str	r2, [r3, #8]
}
 8002e8c:	bf00      	nop
 8002e8e:	3714      	adds	r7, #20
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	40012300 	.word	0x40012300
 8002e9c:	0f000001 	.word	0x0f000001

08002ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f003 0307 	and.w	r3, r3, #7
 8002eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eb6:	68ba      	ldr	r2, [r7, #8]
 8002eb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ec8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ecc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ed2:	4a04      	ldr	r2, [pc, #16]	@ (8002ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	60d3      	str	r3, [r2, #12]
}
 8002ed8:	bf00      	nop
 8002eda:	3714      	adds	r7, #20
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr
 8002ee4:	e000ed00 	.word	0xe000ed00

08002ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002eec:	4b04      	ldr	r3, [pc, #16]	@ (8002f00 <__NVIC_GetPriorityGrouping+0x18>)
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	0a1b      	lsrs	r3, r3, #8
 8002ef2:	f003 0307 	and.w	r3, r3, #7
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	e000ed00 	.word	0xe000ed00

08002f04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	db0b      	blt.n	8002f2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f16:	79fb      	ldrb	r3, [r7, #7]
 8002f18:	f003 021f 	and.w	r2, r3, #31
 8002f1c:	4907      	ldr	r1, [pc, #28]	@ (8002f3c <__NVIC_EnableIRQ+0x38>)
 8002f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f22:	095b      	lsrs	r3, r3, #5
 8002f24:	2001      	movs	r0, #1
 8002f26:	fa00 f202 	lsl.w	r2, r0, r2
 8002f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	e000e100 	.word	0xe000e100

08002f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	6039      	str	r1, [r7, #0]
 8002f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	db0a      	blt.n	8002f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	490c      	ldr	r1, [pc, #48]	@ (8002f8c <__NVIC_SetPriority+0x4c>)
 8002f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5e:	0112      	lsls	r2, r2, #4
 8002f60:	b2d2      	uxtb	r2, r2
 8002f62:	440b      	add	r3, r1
 8002f64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f68:	e00a      	b.n	8002f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	4908      	ldr	r1, [pc, #32]	@ (8002f90 <__NVIC_SetPriority+0x50>)
 8002f70:	79fb      	ldrb	r3, [r7, #7]
 8002f72:	f003 030f 	and.w	r3, r3, #15
 8002f76:	3b04      	subs	r3, #4
 8002f78:	0112      	lsls	r2, r2, #4
 8002f7a:	b2d2      	uxtb	r2, r2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	761a      	strb	r2, [r3, #24]
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	e000e100 	.word	0xe000e100
 8002f90:	e000ed00 	.word	0xe000ed00

08002f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b089      	sub	sp, #36	@ 0x24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f003 0307 	and.w	r3, r3, #7
 8002fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	f1c3 0307 	rsb	r3, r3, #7
 8002fae:	2b04      	cmp	r3, #4
 8002fb0:	bf28      	it	cs
 8002fb2:	2304      	movcs	r3, #4
 8002fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	3304      	adds	r3, #4
 8002fba:	2b06      	cmp	r3, #6
 8002fbc:	d902      	bls.n	8002fc4 <NVIC_EncodePriority+0x30>
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	3b03      	subs	r3, #3
 8002fc2:	e000      	b.n	8002fc6 <NVIC_EncodePriority+0x32>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fc8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	43da      	mvns	r2, r3
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	401a      	ands	r2, r3
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fdc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe6:	43d9      	mvns	r1, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fec:	4313      	orrs	r3, r2
         );
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3724      	adds	r7, #36	@ 0x24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b082      	sub	sp, #8
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7ff ff4c 	bl	8002ea0 <__NVIC_SetPriorityGrouping>
}
 8003008:	bf00      	nop
 800300a:	3708      	adds	r7, #8
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
 800301c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800301e:	2300      	movs	r3, #0
 8003020:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003022:	f7ff ff61 	bl	8002ee8 <__NVIC_GetPriorityGrouping>
 8003026:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	68b9      	ldr	r1, [r7, #8]
 800302c:	6978      	ldr	r0, [r7, #20]
 800302e:	f7ff ffb1 	bl	8002f94 <NVIC_EncodePriority>
 8003032:	4602      	mov	r2, r0
 8003034:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003038:	4611      	mov	r1, r2
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff ff80 	bl	8002f40 <__NVIC_SetPriority>
}
 8003040:	bf00      	nop
 8003042:	3718      	adds	r7, #24
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff ff54 	bl	8002f04 <__NVIC_EnableIRQ>
}
 800305c:	bf00      	nop
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800306c:	2300      	movs	r3, #0
 800306e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003070:	f7ff fb2e 	bl	80026d0 <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e099      	b.n	80031b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2202      	movs	r2, #2
 8003084:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 0201 	bic.w	r2, r2, #1
 800309e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030a0:	e00f      	b.n	80030c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030a2:	f7ff fb15 	bl	80026d0 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b05      	cmp	r3, #5
 80030ae:	d908      	bls.n	80030c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2220      	movs	r2, #32
 80030b4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2203      	movs	r2, #3
 80030ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e078      	b.n	80031b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1e8      	bne.n	80030a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	4b38      	ldr	r3, [pc, #224]	@ (80031bc <HAL_DMA_Init+0x158>)
 80030dc:	4013      	ands	r3, r2
 80030de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003106:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	4313      	orrs	r3, r2
 8003112:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003118:	2b04      	cmp	r3, #4
 800311a:	d107      	bne.n	800312c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003124:	4313      	orrs	r3, r2
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	4313      	orrs	r3, r2
 800312a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	f023 0307 	bic.w	r3, r3, #7
 8003142:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	4313      	orrs	r3, r2
 800314c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003152:	2b04      	cmp	r3, #4
 8003154:	d117      	bne.n	8003186 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	4313      	orrs	r3, r2
 800315e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00e      	beq.n	8003186 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 fb01 	bl	8003770 <DMA_CheckFifoParam>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d008      	beq.n	8003186 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2240      	movs	r2, #64	@ 0x40
 8003178:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003182:	2301      	movs	r3, #1
 8003184:	e016      	b.n	80031b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 fab8 	bl	8003704 <DMA_CalcBaseAndBitshift>
 8003194:	4603      	mov	r3, r0
 8003196:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800319c:	223f      	movs	r2, #63	@ 0x3f
 800319e:	409a      	lsls	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3718      	adds	r7, #24
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	f010803f 	.word	0xf010803f

080031c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
 80031cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031ce:	2300      	movs	r3, #0
 80031d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d101      	bne.n	80031e6 <HAL_DMA_Start_IT+0x26>
 80031e2:	2302      	movs	r3, #2
 80031e4:	e040      	b.n	8003268 <HAL_DMA_Start_IT+0xa8>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d12f      	bne.n	800325a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2202      	movs	r2, #2
 80031fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	68b9      	ldr	r1, [r7, #8]
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f000 fa4a 	bl	80036a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003218:	223f      	movs	r2, #63	@ 0x3f
 800321a:	409a      	lsls	r2, r3
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f042 0216 	orr.w	r2, r2, #22
 800322e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003234:	2b00      	cmp	r3, #0
 8003236:	d007      	beq.n	8003248 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 0208 	orr.w	r2, r2, #8
 8003246:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f042 0201 	orr.w	r2, r2, #1
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	e005      	b.n	8003266 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003262:	2302      	movs	r3, #2
 8003264:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003266:	7dfb      	ldrb	r3, [r7, #23]
}
 8003268:	4618      	mov	r0, r3
 800326a:	3718      	adds	r7, #24
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800327c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800327e:	f7ff fa27 	bl	80026d0 <HAL_GetTick>
 8003282:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d008      	beq.n	80032a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2280      	movs	r2, #128	@ 0x80
 8003294:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e052      	b.n	8003348 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 0216 	bic.w	r2, r2, #22
 80032b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	695a      	ldr	r2, [r3, #20]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d103      	bne.n	80032d2 <HAL_DMA_Abort+0x62>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d007      	beq.n	80032e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0208 	bic.w	r2, r2, #8
 80032e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 0201 	bic.w	r2, r2, #1
 80032f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032f2:	e013      	b.n	800331c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032f4:	f7ff f9ec 	bl	80026d0 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b05      	cmp	r3, #5
 8003300:	d90c      	bls.n	800331c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2220      	movs	r2, #32
 8003306:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2203      	movs	r2, #3
 800330c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e015      	b.n	8003348 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1e4      	bne.n	80032f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800332e:	223f      	movs	r2, #63	@ 0x3f
 8003330:	409a      	lsls	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d004      	beq.n	800336e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2280      	movs	r2, #128	@ 0x80
 8003368:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e00c      	b.n	8003388 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2205      	movs	r2, #5
 8003372:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0201 	bic.w	r2, r2, #1
 8003384:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800339c:	2300      	movs	r3, #0
 800339e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80033a0:	4b8e      	ldr	r3, [pc, #568]	@ (80035dc <HAL_DMA_IRQHandler+0x248>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a8e      	ldr	r2, [pc, #568]	@ (80035e0 <HAL_DMA_IRQHandler+0x24c>)
 80033a6:	fba2 2303 	umull	r2, r3, r2, r3
 80033aa:	0a9b      	lsrs	r3, r3, #10
 80033ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033be:	2208      	movs	r2, #8
 80033c0:	409a      	lsls	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	4013      	ands	r3, r2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d01a      	beq.n	8003400 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d013      	beq.n	8003400 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f022 0204 	bic.w	r2, r2, #4
 80033e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ec:	2208      	movs	r2, #8
 80033ee:	409a      	lsls	r2, r3
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033f8:	f043 0201 	orr.w	r2, r3, #1
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003404:	2201      	movs	r2, #1
 8003406:	409a      	lsls	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	4013      	ands	r3, r2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d012      	beq.n	8003436 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00b      	beq.n	8003436 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003422:	2201      	movs	r2, #1
 8003424:	409a      	lsls	r2, r3
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800342e:	f043 0202 	orr.w	r2, r3, #2
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800343a:	2204      	movs	r2, #4
 800343c:	409a      	lsls	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	4013      	ands	r3, r2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d012      	beq.n	800346c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00b      	beq.n	800346c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003458:	2204      	movs	r2, #4
 800345a:	409a      	lsls	r2, r3
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003464:	f043 0204 	orr.w	r2, r3, #4
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003470:	2210      	movs	r2, #16
 8003472:	409a      	lsls	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	4013      	ands	r3, r2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d043      	beq.n	8003504 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0308 	and.w	r3, r3, #8
 8003486:	2b00      	cmp	r3, #0
 8003488:	d03c      	beq.n	8003504 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800348e:	2210      	movs	r2, #16
 8003490:	409a      	lsls	r2, r3
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d018      	beq.n	80034d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d108      	bne.n	80034c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d024      	beq.n	8003504 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	4798      	blx	r3
 80034c2:	e01f      	b.n	8003504 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d01b      	beq.n	8003504 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	4798      	blx	r3
 80034d4:	e016      	b.n	8003504 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d107      	bne.n	80034f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0208 	bic.w	r2, r2, #8
 80034f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d003      	beq.n	8003504 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003508:	2220      	movs	r2, #32
 800350a:	409a      	lsls	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4013      	ands	r3, r2
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 808f 	beq.w	8003634 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0310 	and.w	r3, r3, #16
 8003520:	2b00      	cmp	r3, #0
 8003522:	f000 8087 	beq.w	8003634 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800352a:	2220      	movs	r2, #32
 800352c:	409a      	lsls	r2, r3
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b05      	cmp	r3, #5
 800353c:	d136      	bne.n	80035ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 0216 	bic.w	r2, r2, #22
 800354c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	695a      	ldr	r2, [r3, #20]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800355c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003562:	2b00      	cmp	r3, #0
 8003564:	d103      	bne.n	800356e <HAL_DMA_IRQHandler+0x1da>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800356a:	2b00      	cmp	r3, #0
 800356c:	d007      	beq.n	800357e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 0208 	bic.w	r2, r2, #8
 800357c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003582:	223f      	movs	r2, #63	@ 0x3f
 8003584:	409a      	lsls	r2, r3
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d07e      	beq.n	80036a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	4798      	blx	r3
        }
        return;
 80035aa:	e079      	b.n	80036a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d01d      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10d      	bne.n	80035e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d031      	beq.n	8003634 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	4798      	blx	r3
 80035d8:	e02c      	b.n	8003634 <HAL_DMA_IRQHandler+0x2a0>
 80035da:	bf00      	nop
 80035dc:	20000000 	.word	0x20000000
 80035e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d023      	beq.n	8003634 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	4798      	blx	r3
 80035f4:	e01e      	b.n	8003634 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10f      	bne.n	8003624 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 0210 	bic.w	r2, r2, #16
 8003612:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003638:	2b00      	cmp	r3, #0
 800363a:	d032      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003640:	f003 0301 	and.w	r3, r3, #1
 8003644:	2b00      	cmp	r3, #0
 8003646:	d022      	beq.n	800368e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2205      	movs	r2, #5
 800364c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0201 	bic.w	r2, r2, #1
 800365e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	3301      	adds	r3, #1
 8003664:	60bb      	str	r3, [r7, #8]
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	429a      	cmp	r2, r3
 800366a:	d307      	bcc.n	800367c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1f2      	bne.n	8003660 <HAL_DMA_IRQHandler+0x2cc>
 800367a:	e000      	b.n	800367e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800367c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003692:	2b00      	cmp	r3, #0
 8003694:	d005      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	4798      	blx	r3
 800369e:	e000      	b.n	80036a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80036a0:	bf00      	nop
    }
  }
}
 80036a2:	3718      	adds	r7, #24
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
 80036b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80036c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	2b40      	cmp	r3, #64	@ 0x40
 80036d4:	d108      	bne.n	80036e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80036e6:	e007      	b.n	80036f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	60da      	str	r2, [r3, #12]
}
 80036f8:	bf00      	nop
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	b2db      	uxtb	r3, r3
 8003712:	3b10      	subs	r3, #16
 8003714:	4a14      	ldr	r2, [pc, #80]	@ (8003768 <DMA_CalcBaseAndBitshift+0x64>)
 8003716:	fba2 2303 	umull	r2, r3, r2, r3
 800371a:	091b      	lsrs	r3, r3, #4
 800371c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800371e:	4a13      	ldr	r2, [pc, #76]	@ (800376c <DMA_CalcBaseAndBitshift+0x68>)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	4413      	add	r3, r2
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	461a      	mov	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2b03      	cmp	r3, #3
 8003730:	d909      	bls.n	8003746 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800373a:	f023 0303 	bic.w	r3, r3, #3
 800373e:	1d1a      	adds	r2, r3, #4
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	659a      	str	r2, [r3, #88]	@ 0x58
 8003744:	e007      	b.n	8003756 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800374e:	f023 0303 	bic.w	r3, r3, #3
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800375a:	4618      	mov	r0, r3
 800375c:	3714      	adds	r7, #20
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	aaaaaaab 	.word	0xaaaaaaab
 800376c:	0800d980 	.word	0x0800d980

08003770 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003778:	2300      	movs	r3, #0
 800377a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003780:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d11f      	bne.n	80037ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	2b03      	cmp	r3, #3
 800378e:	d856      	bhi.n	800383e <DMA_CheckFifoParam+0xce>
 8003790:	a201      	add	r2, pc, #4	@ (adr r2, 8003798 <DMA_CheckFifoParam+0x28>)
 8003792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003796:	bf00      	nop
 8003798:	080037a9 	.word	0x080037a9
 800379c:	080037bb 	.word	0x080037bb
 80037a0:	080037a9 	.word	0x080037a9
 80037a4:	0800383f 	.word	0x0800383f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d046      	beq.n	8003842 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037b8:	e043      	b.n	8003842 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037be:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80037c2:	d140      	bne.n	8003846 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037c8:	e03d      	b.n	8003846 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037d2:	d121      	bne.n	8003818 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	2b03      	cmp	r3, #3
 80037d8:	d837      	bhi.n	800384a <DMA_CheckFifoParam+0xda>
 80037da:	a201      	add	r2, pc, #4	@ (adr r2, 80037e0 <DMA_CheckFifoParam+0x70>)
 80037dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e0:	080037f1 	.word	0x080037f1
 80037e4:	080037f7 	.word	0x080037f7
 80037e8:	080037f1 	.word	0x080037f1
 80037ec:	08003809 	.word	0x08003809
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	73fb      	strb	r3, [r7, #15]
      break;
 80037f4:	e030      	b.n	8003858 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d025      	beq.n	800384e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003806:	e022      	b.n	800384e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800380c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003810:	d11f      	bne.n	8003852 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003816:	e01c      	b.n	8003852 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2b02      	cmp	r3, #2
 800381c:	d903      	bls.n	8003826 <DMA_CheckFifoParam+0xb6>
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	2b03      	cmp	r3, #3
 8003822:	d003      	beq.n	800382c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003824:	e018      	b.n	8003858 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	73fb      	strb	r3, [r7, #15]
      break;
 800382a:	e015      	b.n	8003858 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003830:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00e      	beq.n	8003856 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	73fb      	strb	r3, [r7, #15]
      break;
 800383c:	e00b      	b.n	8003856 <DMA_CheckFifoParam+0xe6>
      break;
 800383e:	bf00      	nop
 8003840:	e00a      	b.n	8003858 <DMA_CheckFifoParam+0xe8>
      break;
 8003842:	bf00      	nop
 8003844:	e008      	b.n	8003858 <DMA_CheckFifoParam+0xe8>
      break;
 8003846:	bf00      	nop
 8003848:	e006      	b.n	8003858 <DMA_CheckFifoParam+0xe8>
      break;
 800384a:	bf00      	nop
 800384c:	e004      	b.n	8003858 <DMA_CheckFifoParam+0xe8>
      break;
 800384e:	bf00      	nop
 8003850:	e002      	b.n	8003858 <DMA_CheckFifoParam+0xe8>
      break;   
 8003852:	bf00      	nop
 8003854:	e000      	b.n	8003858 <DMA_CheckFifoParam+0xe8>
      break;
 8003856:	bf00      	nop
    }
  } 
  
  return status; 
 8003858:	7bfb      	ldrb	r3, [r7, #15]
}
 800385a:	4618      	mov	r0, r3
 800385c:	3714      	adds	r7, #20
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop

08003868 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003868:	b480      	push	{r7}
 800386a:	b089      	sub	sp, #36	@ 0x24
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003872:	2300      	movs	r3, #0
 8003874:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003876:	2300      	movs	r3, #0
 8003878:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800387a:	2300      	movs	r3, #0
 800387c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800387e:	2300      	movs	r3, #0
 8003880:	61fb      	str	r3, [r7, #28]
 8003882:	e165      	b.n	8003b50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003884:	2201      	movs	r2, #1
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	4013      	ands	r3, r2
 8003896:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	429a      	cmp	r2, r3
 800389e:	f040 8154 	bne.w	8003b4a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f003 0303 	and.w	r3, r3, #3
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d005      	beq.n	80038ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d130      	bne.n	800391c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	2203      	movs	r2, #3
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	43db      	mvns	r3, r3
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	4013      	ands	r3, r2
 80038d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	68da      	ldr	r2, [r3, #12]
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	fa02 f303 	lsl.w	r3, r2, r3
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038f0:	2201      	movs	r2, #1
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	fa02 f303 	lsl.w	r3, r2, r3
 80038f8:	43db      	mvns	r3, r3
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	4013      	ands	r3, r2
 80038fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	091b      	lsrs	r3, r3, #4
 8003906:	f003 0201 	and.w	r2, r3, #1
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	fa02 f303 	lsl.w	r3, r2, r3
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4313      	orrs	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f003 0303 	and.w	r3, r3, #3
 8003924:	2b03      	cmp	r3, #3
 8003926:	d017      	beq.n	8003958 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	2203      	movs	r2, #3
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	43db      	mvns	r3, r3
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	4013      	ands	r3, r2
 800393e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	005b      	lsls	r3, r3, #1
 8003948:	fa02 f303 	lsl.w	r3, r2, r3
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	4313      	orrs	r3, r2
 8003950:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f003 0303 	and.w	r3, r3, #3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d123      	bne.n	80039ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	08da      	lsrs	r2, r3, #3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	3208      	adds	r2, #8
 800396c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003970:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	f003 0307 	and.w	r3, r3, #7
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	220f      	movs	r2, #15
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	43db      	mvns	r3, r3
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	4013      	ands	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	691a      	ldr	r2, [r3, #16]
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	f003 0307 	and.w	r3, r3, #7
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	4313      	orrs	r3, r2
 800399c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	08da      	lsrs	r2, r3, #3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	3208      	adds	r2, #8
 80039a6:	69b9      	ldr	r1, [r7, #24]
 80039a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	2203      	movs	r2, #3
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	43db      	mvns	r3, r3
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	4013      	ands	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f003 0203 	and.w	r2, r3, #3
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	fa02 f303 	lsl.w	r3, r2, r3
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 80ae 	beq.w	8003b4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039ee:	2300      	movs	r3, #0
 80039f0:	60fb      	str	r3, [r7, #12]
 80039f2:	4b5d      	ldr	r3, [pc, #372]	@ (8003b68 <HAL_GPIO_Init+0x300>)
 80039f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039f6:	4a5c      	ldr	r2, [pc, #368]	@ (8003b68 <HAL_GPIO_Init+0x300>)
 80039f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80039fe:	4b5a      	ldr	r3, [pc, #360]	@ (8003b68 <HAL_GPIO_Init+0x300>)
 8003a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a06:	60fb      	str	r3, [r7, #12]
 8003a08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a0a:	4a58      	ldr	r2, [pc, #352]	@ (8003b6c <HAL_GPIO_Init+0x304>)
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	089b      	lsrs	r3, r3, #2
 8003a10:	3302      	adds	r3, #2
 8003a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	f003 0303 	and.w	r3, r3, #3
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	220f      	movs	r2, #15
 8003a22:	fa02 f303 	lsl.w	r3, r2, r3
 8003a26:	43db      	mvns	r3, r3
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a4f      	ldr	r2, [pc, #316]	@ (8003b70 <HAL_GPIO_Init+0x308>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d025      	beq.n	8003a82 <HAL_GPIO_Init+0x21a>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a4e      	ldr	r2, [pc, #312]	@ (8003b74 <HAL_GPIO_Init+0x30c>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d01f      	beq.n	8003a7e <HAL_GPIO_Init+0x216>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a4d      	ldr	r2, [pc, #308]	@ (8003b78 <HAL_GPIO_Init+0x310>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d019      	beq.n	8003a7a <HAL_GPIO_Init+0x212>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a4c      	ldr	r2, [pc, #304]	@ (8003b7c <HAL_GPIO_Init+0x314>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d013      	beq.n	8003a76 <HAL_GPIO_Init+0x20e>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a4b      	ldr	r2, [pc, #300]	@ (8003b80 <HAL_GPIO_Init+0x318>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d00d      	beq.n	8003a72 <HAL_GPIO_Init+0x20a>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a4a      	ldr	r2, [pc, #296]	@ (8003b84 <HAL_GPIO_Init+0x31c>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d007      	beq.n	8003a6e <HAL_GPIO_Init+0x206>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a49      	ldr	r2, [pc, #292]	@ (8003b88 <HAL_GPIO_Init+0x320>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d101      	bne.n	8003a6a <HAL_GPIO_Init+0x202>
 8003a66:	2306      	movs	r3, #6
 8003a68:	e00c      	b.n	8003a84 <HAL_GPIO_Init+0x21c>
 8003a6a:	2307      	movs	r3, #7
 8003a6c:	e00a      	b.n	8003a84 <HAL_GPIO_Init+0x21c>
 8003a6e:	2305      	movs	r3, #5
 8003a70:	e008      	b.n	8003a84 <HAL_GPIO_Init+0x21c>
 8003a72:	2304      	movs	r3, #4
 8003a74:	e006      	b.n	8003a84 <HAL_GPIO_Init+0x21c>
 8003a76:	2303      	movs	r3, #3
 8003a78:	e004      	b.n	8003a84 <HAL_GPIO_Init+0x21c>
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	e002      	b.n	8003a84 <HAL_GPIO_Init+0x21c>
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e000      	b.n	8003a84 <HAL_GPIO_Init+0x21c>
 8003a82:	2300      	movs	r3, #0
 8003a84:	69fa      	ldr	r2, [r7, #28]
 8003a86:	f002 0203 	and.w	r2, r2, #3
 8003a8a:	0092      	lsls	r2, r2, #2
 8003a8c:	4093      	lsls	r3, r2
 8003a8e:	69ba      	ldr	r2, [r7, #24]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a94:	4935      	ldr	r1, [pc, #212]	@ (8003b6c <HAL_GPIO_Init+0x304>)
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	089b      	lsrs	r3, r3, #2
 8003a9a:	3302      	adds	r3, #2
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003aa2:	4b3a      	ldr	r3, [pc, #232]	@ (8003b8c <HAL_GPIO_Init+0x324>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	43db      	mvns	r3, r3
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ac6:	4a31      	ldr	r2, [pc, #196]	@ (8003b8c <HAL_GPIO_Init+0x324>)
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003acc:	4b2f      	ldr	r3, [pc, #188]	@ (8003b8c <HAL_GPIO_Init+0x324>)
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003af0:	4a26      	ldr	r2, [pc, #152]	@ (8003b8c <HAL_GPIO_Init+0x324>)
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003af6:	4b25      	ldr	r3, [pc, #148]	@ (8003b8c <HAL_GPIO_Init+0x324>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	43db      	mvns	r3, r3
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	4013      	ands	r3, r2
 8003b04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b1a:	4a1c      	ldr	r2, [pc, #112]	@ (8003b8c <HAL_GPIO_Init+0x324>)
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b20:	4b1a      	ldr	r3, [pc, #104]	@ (8003b8c <HAL_GPIO_Init+0x324>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	43db      	mvns	r3, r3
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d003      	beq.n	8003b44 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b44:	4a11      	ldr	r2, [pc, #68]	@ (8003b8c <HAL_GPIO_Init+0x324>)
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	61fb      	str	r3, [r7, #28]
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	2b0f      	cmp	r3, #15
 8003b54:	f67f ae96 	bls.w	8003884 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b58:	bf00      	nop
 8003b5a:	bf00      	nop
 8003b5c:	3724      	adds	r7, #36	@ 0x24
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	40023800 	.word	0x40023800
 8003b6c:	40013800 	.word	0x40013800
 8003b70:	40020000 	.word	0x40020000
 8003b74:	40020400 	.word	0x40020400
 8003b78:	40020800 	.word	0x40020800
 8003b7c:	40020c00 	.word	0x40020c00
 8003b80:	40021000 	.word	0x40021000
 8003b84:	40021400 	.word	0x40021400
 8003b88:	40021800 	.word	0x40021800
 8003b8c:	40013c00 	.word	0x40013c00

08003b90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	460b      	mov	r3, r1
 8003b9a:	807b      	strh	r3, [r7, #2]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ba0:	787b      	ldrb	r3, [r7, #1]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ba6:	887a      	ldrh	r2, [r7, #2]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bac:	e003      	b.n	8003bb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bae:	887b      	ldrh	r3, [r7, #2]
 8003bb0:	041a      	lsls	r2, r3, #16
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	619a      	str	r2, [r3, #24]
}
 8003bb6:	bf00      	nop
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
	...

08003bc4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003bce:	2300      	movs	r3, #0
 8003bd0:	603b      	str	r3, [r7, #0]
 8003bd2:	4b20      	ldr	r3, [pc, #128]	@ (8003c54 <HAL_PWREx_EnableOverDrive+0x90>)
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd6:	4a1f      	ldr	r2, [pc, #124]	@ (8003c54 <HAL_PWREx_EnableOverDrive+0x90>)
 8003bd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bde:	4b1d      	ldr	r3, [pc, #116]	@ (8003c54 <HAL_PWREx_EnableOverDrive+0x90>)
 8003be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003be6:	603b      	str	r3, [r7, #0]
 8003be8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003bea:	4b1b      	ldr	r3, [pc, #108]	@ (8003c58 <HAL_PWREx_EnableOverDrive+0x94>)
 8003bec:	2201      	movs	r2, #1
 8003bee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bf0:	f7fe fd6e 	bl	80026d0 <HAL_GetTick>
 8003bf4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003bf6:	e009      	b.n	8003c0c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003bf8:	f7fe fd6a 	bl	80026d0 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003c06:	d901      	bls.n	8003c0c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e01f      	b.n	8003c4c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c0c:	4b13      	ldr	r3, [pc, #76]	@ (8003c5c <HAL_PWREx_EnableOverDrive+0x98>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c18:	d1ee      	bne.n	8003bf8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003c1a:	4b11      	ldr	r3, [pc, #68]	@ (8003c60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c20:	f7fe fd56 	bl	80026d0 <HAL_GetTick>
 8003c24:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c26:	e009      	b.n	8003c3c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c28:	f7fe fd52 	bl	80026d0 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003c36:	d901      	bls.n	8003c3c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e007      	b.n	8003c4c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c3c:	4b07      	ldr	r3, [pc, #28]	@ (8003c5c <HAL_PWREx_EnableOverDrive+0x98>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c48:	d1ee      	bne.n	8003c28 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3708      	adds	r7, #8
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	40023800 	.word	0x40023800
 8003c58:	420e0040 	.word	0x420e0040
 8003c5c:	40007000 	.word	0x40007000
 8003c60:	420e0044 	.word	0x420e0044

08003c64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d101      	bne.n	8003c78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e0cc      	b.n	8003e12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c78:	4b68      	ldr	r3, [pc, #416]	@ (8003e1c <HAL_RCC_ClockConfig+0x1b8>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 030f 	and.w	r3, r3, #15
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d90c      	bls.n	8003ca0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c86:	4b65      	ldr	r3, [pc, #404]	@ (8003e1c <HAL_RCC_ClockConfig+0x1b8>)
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	b2d2      	uxtb	r2, r2
 8003c8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c8e:	4b63      	ldr	r3, [pc, #396]	@ (8003e1c <HAL_RCC_ClockConfig+0x1b8>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 030f 	and.w	r3, r3, #15
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d001      	beq.n	8003ca0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e0b8      	b.n	8003e12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d020      	beq.n	8003cee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0304 	and.w	r3, r3, #4
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d005      	beq.n	8003cc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cb8:	4b59      	ldr	r3, [pc, #356]	@ (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	4a58      	ldr	r2, [pc, #352]	@ (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003cc2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0308 	and.w	r3, r3, #8
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d005      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cd0:	4b53      	ldr	r3, [pc, #332]	@ (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	4a52      	ldr	r2, [pc, #328]	@ (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003cda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cdc:	4b50      	ldr	r3, [pc, #320]	@ (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	494d      	ldr	r1, [pc, #308]	@ (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d044      	beq.n	8003d84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d107      	bne.n	8003d12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d02:	4b47      	ldr	r3, [pc, #284]	@ (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d119      	bne.n	8003d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e07f      	b.n	8003e12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d003      	beq.n	8003d22 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d1e:	2b03      	cmp	r3, #3
 8003d20:	d107      	bne.n	8003d32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d22:	4b3f      	ldr	r3, [pc, #252]	@ (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d109      	bne.n	8003d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e06f      	b.n	8003e12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d32:	4b3b      	ldr	r3, [pc, #236]	@ (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e067      	b.n	8003e12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d42:	4b37      	ldr	r3, [pc, #220]	@ (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f023 0203 	bic.w	r2, r3, #3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	4934      	ldr	r1, [pc, #208]	@ (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d54:	f7fe fcbc 	bl	80026d0 <HAL_GetTick>
 8003d58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d5a:	e00a      	b.n	8003d72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d5c:	f7fe fcb8 	bl	80026d0 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e04f      	b.n	8003e12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d72:	4b2b      	ldr	r3, [pc, #172]	@ (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f003 020c 	and.w	r2, r3, #12
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d1eb      	bne.n	8003d5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d84:	4b25      	ldr	r3, [pc, #148]	@ (8003e1c <HAL_RCC_ClockConfig+0x1b8>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 030f 	and.w	r3, r3, #15
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d20c      	bcs.n	8003dac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d92:	4b22      	ldr	r3, [pc, #136]	@ (8003e1c <HAL_RCC_ClockConfig+0x1b8>)
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	b2d2      	uxtb	r2, r2
 8003d98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d9a:	4b20      	ldr	r3, [pc, #128]	@ (8003e1c <HAL_RCC_ClockConfig+0x1b8>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 030f 	and.w	r3, r3, #15
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d001      	beq.n	8003dac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e032      	b.n	8003e12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d008      	beq.n	8003dca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003db8:	4b19      	ldr	r3, [pc, #100]	@ (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	4916      	ldr	r1, [pc, #88]	@ (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0308 	and.w	r3, r3, #8
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d009      	beq.n	8003dea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dd6:	4b12      	ldr	r3, [pc, #72]	@ (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	490e      	ldr	r1, [pc, #56]	@ (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003dea:	f000 f887 	bl	8003efc <HAL_RCC_GetSysClockFreq>
 8003dee:	4602      	mov	r2, r0
 8003df0:	4b0b      	ldr	r3, [pc, #44]	@ (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	091b      	lsrs	r3, r3, #4
 8003df6:	f003 030f 	and.w	r3, r3, #15
 8003dfa:	490a      	ldr	r1, [pc, #40]	@ (8003e24 <HAL_RCC_ClockConfig+0x1c0>)
 8003dfc:	5ccb      	ldrb	r3, [r1, r3]
 8003dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8003e02:	4a09      	ldr	r2, [pc, #36]	@ (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003e04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003e06:	4b09      	ldr	r3, [pc, #36]	@ (8003e2c <HAL_RCC_ClockConfig+0x1c8>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7fe f900 	bl	8002010 <HAL_InitTick>

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	40023c00 	.word	0x40023c00
 8003e20:	40023800 	.word	0x40023800
 8003e24:	0800d968 	.word	0x0800d968
 8003e28:	20000000 	.word	0x20000000
 8003e2c:	20000004 	.word	0x20000004

08003e30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e34:	4b03      	ldr	r3, [pc, #12]	@ (8003e44 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e36:	681b      	ldr	r3, [r3, #0]
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	20000000 	.word	0x20000000

08003e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e4c:	f7ff fff0 	bl	8003e30 <HAL_RCC_GetHCLKFreq>
 8003e50:	4602      	mov	r2, r0
 8003e52:	4b05      	ldr	r3, [pc, #20]	@ (8003e68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	0a9b      	lsrs	r3, r3, #10
 8003e58:	f003 0307 	and.w	r3, r3, #7
 8003e5c:	4903      	ldr	r1, [pc, #12]	@ (8003e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e5e:	5ccb      	ldrb	r3, [r1, r3]
 8003e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	40023800 	.word	0x40023800
 8003e6c:	0800d978 	.word	0x0800d978

08003e70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e74:	f7ff ffdc 	bl	8003e30 <HAL_RCC_GetHCLKFreq>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	4b05      	ldr	r3, [pc, #20]	@ (8003e90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	0b5b      	lsrs	r3, r3, #13
 8003e80:	f003 0307 	and.w	r3, r3, #7
 8003e84:	4903      	ldr	r1, [pc, #12]	@ (8003e94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e86:	5ccb      	ldrb	r3, [r1, r3]
 8003e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	40023800 	.word	0x40023800
 8003e94:	0800d978 	.word	0x0800d978

08003e98 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	220f      	movs	r2, #15
 8003ea6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ea8:	4b12      	ldr	r3, [pc, #72]	@ (8003ef4 <HAL_RCC_GetClockConfig+0x5c>)
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f003 0203 	and.w	r2, r3, #3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8003ef4 <HAL_RCC_GetClockConfig+0x5c>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ef4 <HAL_RCC_GetClockConfig+0x5c>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003ecc:	4b09      	ldr	r3, [pc, #36]	@ (8003ef4 <HAL_RCC_GetClockConfig+0x5c>)
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	08db      	lsrs	r3, r3, #3
 8003ed2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003eda:	4b07      	ldr	r3, [pc, #28]	@ (8003ef8 <HAL_RCC_GetClockConfig+0x60>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 020f 	and.w	r2, r3, #15
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	601a      	str	r2, [r3, #0]
}
 8003ee6:	bf00      	nop
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	40023c00 	.word	0x40023c00

08003efc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003efc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f00:	b0ae      	sub	sp, #184	@ 0xb8
 8003f02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003f04:	2300      	movs	r3, #0
 8003f06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003f10:	2300      	movs	r3, #0
 8003f12:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003f16:	2300      	movs	r3, #0
 8003f18:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f22:	4bcb      	ldr	r3, [pc, #812]	@ (8004250 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 030c 	and.w	r3, r3, #12
 8003f2a:	2b0c      	cmp	r3, #12
 8003f2c:	f200 8206 	bhi.w	800433c <HAL_RCC_GetSysClockFreq+0x440>
 8003f30:	a201      	add	r2, pc, #4	@ (adr r2, 8003f38 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f36:	bf00      	nop
 8003f38:	08003f6d 	.word	0x08003f6d
 8003f3c:	0800433d 	.word	0x0800433d
 8003f40:	0800433d 	.word	0x0800433d
 8003f44:	0800433d 	.word	0x0800433d
 8003f48:	08003f75 	.word	0x08003f75
 8003f4c:	0800433d 	.word	0x0800433d
 8003f50:	0800433d 	.word	0x0800433d
 8003f54:	0800433d 	.word	0x0800433d
 8003f58:	08003f7d 	.word	0x08003f7d
 8003f5c:	0800433d 	.word	0x0800433d
 8003f60:	0800433d 	.word	0x0800433d
 8003f64:	0800433d 	.word	0x0800433d
 8003f68:	0800416d 	.word	0x0800416d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f6c:	4bb9      	ldr	r3, [pc, #740]	@ (8004254 <HAL_RCC_GetSysClockFreq+0x358>)
 8003f6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003f72:	e1e7      	b.n	8004344 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f74:	4bb8      	ldr	r3, [pc, #736]	@ (8004258 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003f76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003f7a:	e1e3      	b.n	8004344 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f7c:	4bb4      	ldr	r3, [pc, #720]	@ (8004250 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f88:	4bb1      	ldr	r3, [pc, #708]	@ (8004250 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d071      	beq.n	8004078 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f94:	4bae      	ldr	r3, [pc, #696]	@ (8004250 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	099b      	lsrs	r3, r3, #6
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003fa0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003fa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003fa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003fb6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003fba:	4622      	mov	r2, r4
 8003fbc:	462b      	mov	r3, r5
 8003fbe:	f04f 0000 	mov.w	r0, #0
 8003fc2:	f04f 0100 	mov.w	r1, #0
 8003fc6:	0159      	lsls	r1, r3, #5
 8003fc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fcc:	0150      	lsls	r0, r2, #5
 8003fce:	4602      	mov	r2, r0
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	4621      	mov	r1, r4
 8003fd4:	1a51      	subs	r1, r2, r1
 8003fd6:	6439      	str	r1, [r7, #64]	@ 0x40
 8003fd8:	4629      	mov	r1, r5
 8003fda:	eb63 0301 	sbc.w	r3, r3, r1
 8003fde:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fe0:	f04f 0200 	mov.w	r2, #0
 8003fe4:	f04f 0300 	mov.w	r3, #0
 8003fe8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003fec:	4649      	mov	r1, r9
 8003fee:	018b      	lsls	r3, r1, #6
 8003ff0:	4641      	mov	r1, r8
 8003ff2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ff6:	4641      	mov	r1, r8
 8003ff8:	018a      	lsls	r2, r1, #6
 8003ffa:	4641      	mov	r1, r8
 8003ffc:	1a51      	subs	r1, r2, r1
 8003ffe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004000:	4649      	mov	r1, r9
 8004002:	eb63 0301 	sbc.w	r3, r3, r1
 8004006:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004008:	f04f 0200 	mov.w	r2, #0
 800400c:	f04f 0300 	mov.w	r3, #0
 8004010:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004014:	4649      	mov	r1, r9
 8004016:	00cb      	lsls	r3, r1, #3
 8004018:	4641      	mov	r1, r8
 800401a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800401e:	4641      	mov	r1, r8
 8004020:	00ca      	lsls	r2, r1, #3
 8004022:	4610      	mov	r0, r2
 8004024:	4619      	mov	r1, r3
 8004026:	4603      	mov	r3, r0
 8004028:	4622      	mov	r2, r4
 800402a:	189b      	adds	r3, r3, r2
 800402c:	633b      	str	r3, [r7, #48]	@ 0x30
 800402e:	462b      	mov	r3, r5
 8004030:	460a      	mov	r2, r1
 8004032:	eb42 0303 	adc.w	r3, r2, r3
 8004036:	637b      	str	r3, [r7, #52]	@ 0x34
 8004038:	f04f 0200 	mov.w	r2, #0
 800403c:	f04f 0300 	mov.w	r3, #0
 8004040:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004044:	4629      	mov	r1, r5
 8004046:	024b      	lsls	r3, r1, #9
 8004048:	4621      	mov	r1, r4
 800404a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800404e:	4621      	mov	r1, r4
 8004050:	024a      	lsls	r2, r1, #9
 8004052:	4610      	mov	r0, r2
 8004054:	4619      	mov	r1, r3
 8004056:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800405a:	2200      	movs	r2, #0
 800405c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004060:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004064:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004068:	f7fc fe3e 	bl	8000ce8 <__aeabi_uldivmod>
 800406c:	4602      	mov	r2, r0
 800406e:	460b      	mov	r3, r1
 8004070:	4613      	mov	r3, r2
 8004072:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004076:	e067      	b.n	8004148 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004078:	4b75      	ldr	r3, [pc, #468]	@ (8004250 <HAL_RCC_GetSysClockFreq+0x354>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	099b      	lsrs	r3, r3, #6
 800407e:	2200      	movs	r2, #0
 8004080:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004084:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004088:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800408c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004090:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004092:	2300      	movs	r3, #0
 8004094:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004096:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800409a:	4622      	mov	r2, r4
 800409c:	462b      	mov	r3, r5
 800409e:	f04f 0000 	mov.w	r0, #0
 80040a2:	f04f 0100 	mov.w	r1, #0
 80040a6:	0159      	lsls	r1, r3, #5
 80040a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040ac:	0150      	lsls	r0, r2, #5
 80040ae:	4602      	mov	r2, r0
 80040b0:	460b      	mov	r3, r1
 80040b2:	4621      	mov	r1, r4
 80040b4:	1a51      	subs	r1, r2, r1
 80040b6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80040b8:	4629      	mov	r1, r5
 80040ba:	eb63 0301 	sbc.w	r3, r3, r1
 80040be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040c0:	f04f 0200 	mov.w	r2, #0
 80040c4:	f04f 0300 	mov.w	r3, #0
 80040c8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80040cc:	4649      	mov	r1, r9
 80040ce:	018b      	lsls	r3, r1, #6
 80040d0:	4641      	mov	r1, r8
 80040d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040d6:	4641      	mov	r1, r8
 80040d8:	018a      	lsls	r2, r1, #6
 80040da:	4641      	mov	r1, r8
 80040dc:	ebb2 0a01 	subs.w	sl, r2, r1
 80040e0:	4649      	mov	r1, r9
 80040e2:	eb63 0b01 	sbc.w	fp, r3, r1
 80040e6:	f04f 0200 	mov.w	r2, #0
 80040ea:	f04f 0300 	mov.w	r3, #0
 80040ee:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80040f2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80040f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040fa:	4692      	mov	sl, r2
 80040fc:	469b      	mov	fp, r3
 80040fe:	4623      	mov	r3, r4
 8004100:	eb1a 0303 	adds.w	r3, sl, r3
 8004104:	623b      	str	r3, [r7, #32]
 8004106:	462b      	mov	r3, r5
 8004108:	eb4b 0303 	adc.w	r3, fp, r3
 800410c:	627b      	str	r3, [r7, #36]	@ 0x24
 800410e:	f04f 0200 	mov.w	r2, #0
 8004112:	f04f 0300 	mov.w	r3, #0
 8004116:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800411a:	4629      	mov	r1, r5
 800411c:	028b      	lsls	r3, r1, #10
 800411e:	4621      	mov	r1, r4
 8004120:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004124:	4621      	mov	r1, r4
 8004126:	028a      	lsls	r2, r1, #10
 8004128:	4610      	mov	r0, r2
 800412a:	4619      	mov	r1, r3
 800412c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004130:	2200      	movs	r2, #0
 8004132:	673b      	str	r3, [r7, #112]	@ 0x70
 8004134:	677a      	str	r2, [r7, #116]	@ 0x74
 8004136:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800413a:	f7fc fdd5 	bl	8000ce8 <__aeabi_uldivmod>
 800413e:	4602      	mov	r2, r0
 8004140:	460b      	mov	r3, r1
 8004142:	4613      	mov	r3, r2
 8004144:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004148:	4b41      	ldr	r3, [pc, #260]	@ (8004250 <HAL_RCC_GetSysClockFreq+0x354>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	0c1b      	lsrs	r3, r3, #16
 800414e:	f003 0303 	and.w	r3, r3, #3
 8004152:	3301      	adds	r3, #1
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800415a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800415e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004162:	fbb2 f3f3 	udiv	r3, r2, r3
 8004166:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800416a:	e0eb      	b.n	8004344 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800416c:	4b38      	ldr	r3, [pc, #224]	@ (8004250 <HAL_RCC_GetSysClockFreq+0x354>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004174:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004178:	4b35      	ldr	r3, [pc, #212]	@ (8004250 <HAL_RCC_GetSysClockFreq+0x354>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d06b      	beq.n	800425c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004184:	4b32      	ldr	r3, [pc, #200]	@ (8004250 <HAL_RCC_GetSysClockFreq+0x354>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	099b      	lsrs	r3, r3, #6
 800418a:	2200      	movs	r2, #0
 800418c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800418e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004190:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004196:	663b      	str	r3, [r7, #96]	@ 0x60
 8004198:	2300      	movs	r3, #0
 800419a:	667b      	str	r3, [r7, #100]	@ 0x64
 800419c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80041a0:	4622      	mov	r2, r4
 80041a2:	462b      	mov	r3, r5
 80041a4:	f04f 0000 	mov.w	r0, #0
 80041a8:	f04f 0100 	mov.w	r1, #0
 80041ac:	0159      	lsls	r1, r3, #5
 80041ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041b2:	0150      	lsls	r0, r2, #5
 80041b4:	4602      	mov	r2, r0
 80041b6:	460b      	mov	r3, r1
 80041b8:	4621      	mov	r1, r4
 80041ba:	1a51      	subs	r1, r2, r1
 80041bc:	61b9      	str	r1, [r7, #24]
 80041be:	4629      	mov	r1, r5
 80041c0:	eb63 0301 	sbc.w	r3, r3, r1
 80041c4:	61fb      	str	r3, [r7, #28]
 80041c6:	f04f 0200 	mov.w	r2, #0
 80041ca:	f04f 0300 	mov.w	r3, #0
 80041ce:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80041d2:	4659      	mov	r1, fp
 80041d4:	018b      	lsls	r3, r1, #6
 80041d6:	4651      	mov	r1, sl
 80041d8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041dc:	4651      	mov	r1, sl
 80041de:	018a      	lsls	r2, r1, #6
 80041e0:	4651      	mov	r1, sl
 80041e2:	ebb2 0801 	subs.w	r8, r2, r1
 80041e6:	4659      	mov	r1, fp
 80041e8:	eb63 0901 	sbc.w	r9, r3, r1
 80041ec:	f04f 0200 	mov.w	r2, #0
 80041f0:	f04f 0300 	mov.w	r3, #0
 80041f4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041f8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041fc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004200:	4690      	mov	r8, r2
 8004202:	4699      	mov	r9, r3
 8004204:	4623      	mov	r3, r4
 8004206:	eb18 0303 	adds.w	r3, r8, r3
 800420a:	613b      	str	r3, [r7, #16]
 800420c:	462b      	mov	r3, r5
 800420e:	eb49 0303 	adc.w	r3, r9, r3
 8004212:	617b      	str	r3, [r7, #20]
 8004214:	f04f 0200 	mov.w	r2, #0
 8004218:	f04f 0300 	mov.w	r3, #0
 800421c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004220:	4629      	mov	r1, r5
 8004222:	024b      	lsls	r3, r1, #9
 8004224:	4621      	mov	r1, r4
 8004226:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800422a:	4621      	mov	r1, r4
 800422c:	024a      	lsls	r2, r1, #9
 800422e:	4610      	mov	r0, r2
 8004230:	4619      	mov	r1, r3
 8004232:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004236:	2200      	movs	r2, #0
 8004238:	65bb      	str	r3, [r7, #88]	@ 0x58
 800423a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800423c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004240:	f7fc fd52 	bl	8000ce8 <__aeabi_uldivmod>
 8004244:	4602      	mov	r2, r0
 8004246:	460b      	mov	r3, r1
 8004248:	4613      	mov	r3, r2
 800424a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800424e:	e065      	b.n	800431c <HAL_RCC_GetSysClockFreq+0x420>
 8004250:	40023800 	.word	0x40023800
 8004254:	00f42400 	.word	0x00f42400
 8004258:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800425c:	4b3d      	ldr	r3, [pc, #244]	@ (8004354 <HAL_RCC_GetSysClockFreq+0x458>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	099b      	lsrs	r3, r3, #6
 8004262:	2200      	movs	r2, #0
 8004264:	4618      	mov	r0, r3
 8004266:	4611      	mov	r1, r2
 8004268:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800426c:	653b      	str	r3, [r7, #80]	@ 0x50
 800426e:	2300      	movs	r3, #0
 8004270:	657b      	str	r3, [r7, #84]	@ 0x54
 8004272:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004276:	4642      	mov	r2, r8
 8004278:	464b      	mov	r3, r9
 800427a:	f04f 0000 	mov.w	r0, #0
 800427e:	f04f 0100 	mov.w	r1, #0
 8004282:	0159      	lsls	r1, r3, #5
 8004284:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004288:	0150      	lsls	r0, r2, #5
 800428a:	4602      	mov	r2, r0
 800428c:	460b      	mov	r3, r1
 800428e:	4641      	mov	r1, r8
 8004290:	1a51      	subs	r1, r2, r1
 8004292:	60b9      	str	r1, [r7, #8]
 8004294:	4649      	mov	r1, r9
 8004296:	eb63 0301 	sbc.w	r3, r3, r1
 800429a:	60fb      	str	r3, [r7, #12]
 800429c:	f04f 0200 	mov.w	r2, #0
 80042a0:	f04f 0300 	mov.w	r3, #0
 80042a4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80042a8:	4659      	mov	r1, fp
 80042aa:	018b      	lsls	r3, r1, #6
 80042ac:	4651      	mov	r1, sl
 80042ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042b2:	4651      	mov	r1, sl
 80042b4:	018a      	lsls	r2, r1, #6
 80042b6:	4651      	mov	r1, sl
 80042b8:	1a54      	subs	r4, r2, r1
 80042ba:	4659      	mov	r1, fp
 80042bc:	eb63 0501 	sbc.w	r5, r3, r1
 80042c0:	f04f 0200 	mov.w	r2, #0
 80042c4:	f04f 0300 	mov.w	r3, #0
 80042c8:	00eb      	lsls	r3, r5, #3
 80042ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042ce:	00e2      	lsls	r2, r4, #3
 80042d0:	4614      	mov	r4, r2
 80042d2:	461d      	mov	r5, r3
 80042d4:	4643      	mov	r3, r8
 80042d6:	18e3      	adds	r3, r4, r3
 80042d8:	603b      	str	r3, [r7, #0]
 80042da:	464b      	mov	r3, r9
 80042dc:	eb45 0303 	adc.w	r3, r5, r3
 80042e0:	607b      	str	r3, [r7, #4]
 80042e2:	f04f 0200 	mov.w	r2, #0
 80042e6:	f04f 0300 	mov.w	r3, #0
 80042ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042ee:	4629      	mov	r1, r5
 80042f0:	028b      	lsls	r3, r1, #10
 80042f2:	4621      	mov	r1, r4
 80042f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042f8:	4621      	mov	r1, r4
 80042fa:	028a      	lsls	r2, r1, #10
 80042fc:	4610      	mov	r0, r2
 80042fe:	4619      	mov	r1, r3
 8004300:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004304:	2200      	movs	r2, #0
 8004306:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004308:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800430a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800430e:	f7fc fceb 	bl	8000ce8 <__aeabi_uldivmod>
 8004312:	4602      	mov	r2, r0
 8004314:	460b      	mov	r3, r1
 8004316:	4613      	mov	r3, r2
 8004318:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800431c:	4b0d      	ldr	r3, [pc, #52]	@ (8004354 <HAL_RCC_GetSysClockFreq+0x458>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	0f1b      	lsrs	r3, r3, #28
 8004322:	f003 0307 	and.w	r3, r3, #7
 8004326:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800432a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800432e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004332:	fbb2 f3f3 	udiv	r3, r2, r3
 8004336:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800433a:	e003      	b.n	8004344 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800433c:	4b06      	ldr	r3, [pc, #24]	@ (8004358 <HAL_RCC_GetSysClockFreq+0x45c>)
 800433e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004342:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004344:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004348:	4618      	mov	r0, r3
 800434a:	37b8      	adds	r7, #184	@ 0xb8
 800434c:	46bd      	mov	sp, r7
 800434e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004352:	bf00      	nop
 8004354:	40023800 	.word	0x40023800
 8004358:	00f42400 	.word	0x00f42400

0800435c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b086      	sub	sp, #24
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e28d      	b.n	800488a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	2b00      	cmp	r3, #0
 8004378:	f000 8083 	beq.w	8004482 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800437c:	4b94      	ldr	r3, [pc, #592]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f003 030c 	and.w	r3, r3, #12
 8004384:	2b04      	cmp	r3, #4
 8004386:	d019      	beq.n	80043bc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004388:	4b91      	ldr	r3, [pc, #580]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f003 030c 	and.w	r3, r3, #12
        || \
 8004390:	2b08      	cmp	r3, #8
 8004392:	d106      	bne.n	80043a2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004394:	4b8e      	ldr	r3, [pc, #568]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800439c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043a0:	d00c      	beq.n	80043bc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043a2:	4b8b      	ldr	r3, [pc, #556]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80043aa:	2b0c      	cmp	r3, #12
 80043ac:	d112      	bne.n	80043d4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043ae:	4b88      	ldr	r3, [pc, #544]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043ba:	d10b      	bne.n	80043d4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043bc:	4b84      	ldr	r3, [pc, #528]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d05b      	beq.n	8004480 <HAL_RCC_OscConfig+0x124>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d157      	bne.n	8004480 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e25a      	b.n	800488a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043dc:	d106      	bne.n	80043ec <HAL_RCC_OscConfig+0x90>
 80043de:	4b7c      	ldr	r3, [pc, #496]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a7b      	ldr	r2, [pc, #492]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 80043e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043e8:	6013      	str	r3, [r2, #0]
 80043ea:	e01d      	b.n	8004428 <HAL_RCC_OscConfig+0xcc>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043f4:	d10c      	bne.n	8004410 <HAL_RCC_OscConfig+0xb4>
 80043f6:	4b76      	ldr	r3, [pc, #472]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a75      	ldr	r2, [pc, #468]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 80043fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004400:	6013      	str	r3, [r2, #0]
 8004402:	4b73      	ldr	r3, [pc, #460]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a72      	ldr	r2, [pc, #456]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 8004408:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800440c:	6013      	str	r3, [r2, #0]
 800440e:	e00b      	b.n	8004428 <HAL_RCC_OscConfig+0xcc>
 8004410:	4b6f      	ldr	r3, [pc, #444]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a6e      	ldr	r2, [pc, #440]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 8004416:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800441a:	6013      	str	r3, [r2, #0]
 800441c:	4b6c      	ldr	r3, [pc, #432]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a6b      	ldr	r2, [pc, #428]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 8004422:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004426:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d013      	beq.n	8004458 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004430:	f7fe f94e 	bl	80026d0 <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004438:	f7fe f94a 	bl	80026d0 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b64      	cmp	r3, #100	@ 0x64
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e21f      	b.n	800488a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800444a:	4b61      	ldr	r3, [pc, #388]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d0f0      	beq.n	8004438 <HAL_RCC_OscConfig+0xdc>
 8004456:	e014      	b.n	8004482 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004458:	f7fe f93a 	bl	80026d0 <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800445e:	e008      	b.n	8004472 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004460:	f7fe f936 	bl	80026d0 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b64      	cmp	r3, #100	@ 0x64
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e20b      	b.n	800488a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004472:	4b57      	ldr	r3, [pc, #348]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1f0      	bne.n	8004460 <HAL_RCC_OscConfig+0x104>
 800447e:	e000      	b.n	8004482 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d06f      	beq.n	800456e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800448e:	4b50      	ldr	r3, [pc, #320]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f003 030c 	and.w	r3, r3, #12
 8004496:	2b00      	cmp	r3, #0
 8004498:	d017      	beq.n	80044ca <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800449a:	4b4d      	ldr	r3, [pc, #308]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f003 030c 	and.w	r3, r3, #12
        || \
 80044a2:	2b08      	cmp	r3, #8
 80044a4:	d105      	bne.n	80044b2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80044a6:	4b4a      	ldr	r3, [pc, #296]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00b      	beq.n	80044ca <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044b2:	4b47      	ldr	r3, [pc, #284]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80044ba:	2b0c      	cmp	r3, #12
 80044bc:	d11c      	bne.n	80044f8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044be:	4b44      	ldr	r3, [pc, #272]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d116      	bne.n	80044f8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ca:	4b41      	ldr	r3, [pc, #260]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d005      	beq.n	80044e2 <HAL_RCC_OscConfig+0x186>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d001      	beq.n	80044e2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e1d3      	b.n	800488a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044e2:	4b3b      	ldr	r3, [pc, #236]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	00db      	lsls	r3, r3, #3
 80044f0:	4937      	ldr	r1, [pc, #220]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044f6:	e03a      	b.n	800456e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d020      	beq.n	8004542 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004500:	4b34      	ldr	r3, [pc, #208]	@ (80045d4 <HAL_RCC_OscConfig+0x278>)
 8004502:	2201      	movs	r2, #1
 8004504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004506:	f7fe f8e3 	bl	80026d0 <HAL_GetTick>
 800450a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800450c:	e008      	b.n	8004520 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800450e:	f7fe f8df 	bl	80026d0 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d901      	bls.n	8004520 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e1b4      	b.n	800488a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004520:	4b2b      	ldr	r3, [pc, #172]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0302 	and.w	r3, r3, #2
 8004528:	2b00      	cmp	r3, #0
 800452a:	d0f0      	beq.n	800450e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800452c:	4b28      	ldr	r3, [pc, #160]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	00db      	lsls	r3, r3, #3
 800453a:	4925      	ldr	r1, [pc, #148]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 800453c:	4313      	orrs	r3, r2
 800453e:	600b      	str	r3, [r1, #0]
 8004540:	e015      	b.n	800456e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004542:	4b24      	ldr	r3, [pc, #144]	@ (80045d4 <HAL_RCC_OscConfig+0x278>)
 8004544:	2200      	movs	r2, #0
 8004546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004548:	f7fe f8c2 	bl	80026d0 <HAL_GetTick>
 800454c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800454e:	e008      	b.n	8004562 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004550:	f7fe f8be 	bl	80026d0 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b02      	cmp	r3, #2
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e193      	b.n	800488a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004562:	4b1b      	ldr	r3, [pc, #108]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1f0      	bne.n	8004550 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0308 	and.w	r3, r3, #8
 8004576:	2b00      	cmp	r3, #0
 8004578:	d036      	beq.n	80045e8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d016      	beq.n	80045b0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004582:	4b15      	ldr	r3, [pc, #84]	@ (80045d8 <HAL_RCC_OscConfig+0x27c>)
 8004584:	2201      	movs	r2, #1
 8004586:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004588:	f7fe f8a2 	bl	80026d0 <HAL_GetTick>
 800458c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004590:	f7fe f89e 	bl	80026d0 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e173      	b.n	800488a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045a2:	4b0b      	ldr	r3, [pc, #44]	@ (80045d0 <HAL_RCC_OscConfig+0x274>)
 80045a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d0f0      	beq.n	8004590 <HAL_RCC_OscConfig+0x234>
 80045ae:	e01b      	b.n	80045e8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045b0:	4b09      	ldr	r3, [pc, #36]	@ (80045d8 <HAL_RCC_OscConfig+0x27c>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b6:	f7fe f88b 	bl	80026d0 <HAL_GetTick>
 80045ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045bc:	e00e      	b.n	80045dc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045be:	f7fe f887 	bl	80026d0 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d907      	bls.n	80045dc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e15c      	b.n	800488a <HAL_RCC_OscConfig+0x52e>
 80045d0:	40023800 	.word	0x40023800
 80045d4:	42470000 	.word	0x42470000
 80045d8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045dc:	4b8a      	ldr	r3, [pc, #552]	@ (8004808 <HAL_RCC_OscConfig+0x4ac>)
 80045de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1ea      	bne.n	80045be <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0304 	and.w	r3, r3, #4
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f000 8097 	beq.w	8004724 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045f6:	2300      	movs	r3, #0
 80045f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045fa:	4b83      	ldr	r3, [pc, #524]	@ (8004808 <HAL_RCC_OscConfig+0x4ac>)
 80045fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10f      	bne.n	8004626 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004606:	2300      	movs	r3, #0
 8004608:	60bb      	str	r3, [r7, #8]
 800460a:	4b7f      	ldr	r3, [pc, #508]	@ (8004808 <HAL_RCC_OscConfig+0x4ac>)
 800460c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460e:	4a7e      	ldr	r2, [pc, #504]	@ (8004808 <HAL_RCC_OscConfig+0x4ac>)
 8004610:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004614:	6413      	str	r3, [r2, #64]	@ 0x40
 8004616:	4b7c      	ldr	r3, [pc, #496]	@ (8004808 <HAL_RCC_OscConfig+0x4ac>)
 8004618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800461e:	60bb      	str	r3, [r7, #8]
 8004620:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004622:	2301      	movs	r3, #1
 8004624:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004626:	4b79      	ldr	r3, [pc, #484]	@ (800480c <HAL_RCC_OscConfig+0x4b0>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800462e:	2b00      	cmp	r3, #0
 8004630:	d118      	bne.n	8004664 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004632:	4b76      	ldr	r3, [pc, #472]	@ (800480c <HAL_RCC_OscConfig+0x4b0>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a75      	ldr	r2, [pc, #468]	@ (800480c <HAL_RCC_OscConfig+0x4b0>)
 8004638:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800463c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800463e:	f7fe f847 	bl	80026d0 <HAL_GetTick>
 8004642:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004644:	e008      	b.n	8004658 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004646:	f7fe f843 	bl	80026d0 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d901      	bls.n	8004658 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e118      	b.n	800488a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004658:	4b6c      	ldr	r3, [pc, #432]	@ (800480c <HAL_RCC_OscConfig+0x4b0>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004660:	2b00      	cmp	r3, #0
 8004662:	d0f0      	beq.n	8004646 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d106      	bne.n	800467a <HAL_RCC_OscConfig+0x31e>
 800466c:	4b66      	ldr	r3, [pc, #408]	@ (8004808 <HAL_RCC_OscConfig+0x4ac>)
 800466e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004670:	4a65      	ldr	r2, [pc, #404]	@ (8004808 <HAL_RCC_OscConfig+0x4ac>)
 8004672:	f043 0301 	orr.w	r3, r3, #1
 8004676:	6713      	str	r3, [r2, #112]	@ 0x70
 8004678:	e01c      	b.n	80046b4 <HAL_RCC_OscConfig+0x358>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	2b05      	cmp	r3, #5
 8004680:	d10c      	bne.n	800469c <HAL_RCC_OscConfig+0x340>
 8004682:	4b61      	ldr	r3, [pc, #388]	@ (8004808 <HAL_RCC_OscConfig+0x4ac>)
 8004684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004686:	4a60      	ldr	r2, [pc, #384]	@ (8004808 <HAL_RCC_OscConfig+0x4ac>)
 8004688:	f043 0304 	orr.w	r3, r3, #4
 800468c:	6713      	str	r3, [r2, #112]	@ 0x70
 800468e:	4b5e      	ldr	r3, [pc, #376]	@ (8004808 <HAL_RCC_OscConfig+0x4ac>)
 8004690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004692:	4a5d      	ldr	r2, [pc, #372]	@ (8004808 <HAL_RCC_OscConfig+0x4ac>)
 8004694:	f043 0301 	orr.w	r3, r3, #1
 8004698:	6713      	str	r3, [r2, #112]	@ 0x70
 800469a:	e00b      	b.n	80046b4 <HAL_RCC_OscConfig+0x358>
 800469c:	4b5a      	ldr	r3, [pc, #360]	@ (8004808 <HAL_RCC_OscConfig+0x4ac>)
 800469e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046a0:	4a59      	ldr	r2, [pc, #356]	@ (8004808 <HAL_RCC_OscConfig+0x4ac>)
 80046a2:	f023 0301 	bic.w	r3, r3, #1
 80046a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80046a8:	4b57      	ldr	r3, [pc, #348]	@ (8004808 <HAL_RCC_OscConfig+0x4ac>)
 80046aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ac:	4a56      	ldr	r2, [pc, #344]	@ (8004808 <HAL_RCC_OscConfig+0x4ac>)
 80046ae:	f023 0304 	bic.w	r3, r3, #4
 80046b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d015      	beq.n	80046e8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046bc:	f7fe f808 	bl	80026d0 <HAL_GetTick>
 80046c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046c2:	e00a      	b.n	80046da <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046c4:	f7fe f804 	bl	80026d0 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e0d7      	b.n	800488a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046da:	4b4b      	ldr	r3, [pc, #300]	@ (8004808 <HAL_RCC_OscConfig+0x4ac>)
 80046dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d0ee      	beq.n	80046c4 <HAL_RCC_OscConfig+0x368>
 80046e6:	e014      	b.n	8004712 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e8:	f7fd fff2 	bl	80026d0 <HAL_GetTick>
 80046ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046ee:	e00a      	b.n	8004706 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046f0:	f7fd ffee 	bl	80026d0 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046fe:	4293      	cmp	r3, r2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e0c1      	b.n	800488a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004706:	4b40      	ldr	r3, [pc, #256]	@ (8004808 <HAL_RCC_OscConfig+0x4ac>)
 8004708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1ee      	bne.n	80046f0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004712:	7dfb      	ldrb	r3, [r7, #23]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d105      	bne.n	8004724 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004718:	4b3b      	ldr	r3, [pc, #236]	@ (8004808 <HAL_RCC_OscConfig+0x4ac>)
 800471a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471c:	4a3a      	ldr	r2, [pc, #232]	@ (8004808 <HAL_RCC_OscConfig+0x4ac>)
 800471e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004722:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 80ad 	beq.w	8004888 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800472e:	4b36      	ldr	r3, [pc, #216]	@ (8004808 <HAL_RCC_OscConfig+0x4ac>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f003 030c 	and.w	r3, r3, #12
 8004736:	2b08      	cmp	r3, #8
 8004738:	d060      	beq.n	80047fc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	2b02      	cmp	r3, #2
 8004740:	d145      	bne.n	80047ce <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004742:	4b33      	ldr	r3, [pc, #204]	@ (8004810 <HAL_RCC_OscConfig+0x4b4>)
 8004744:	2200      	movs	r2, #0
 8004746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004748:	f7fd ffc2 	bl	80026d0 <HAL_GetTick>
 800474c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800474e:	e008      	b.n	8004762 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004750:	f7fd ffbe 	bl	80026d0 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e093      	b.n	800488a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004762:	4b29      	ldr	r3, [pc, #164]	@ (8004808 <HAL_RCC_OscConfig+0x4ac>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1f0      	bne.n	8004750 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	69da      	ldr	r2, [r3, #28]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	431a      	orrs	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477c:	019b      	lsls	r3, r3, #6
 800477e:	431a      	orrs	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004784:	085b      	lsrs	r3, r3, #1
 8004786:	3b01      	subs	r3, #1
 8004788:	041b      	lsls	r3, r3, #16
 800478a:	431a      	orrs	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004790:	061b      	lsls	r3, r3, #24
 8004792:	431a      	orrs	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004798:	071b      	lsls	r3, r3, #28
 800479a:	491b      	ldr	r1, [pc, #108]	@ (8004808 <HAL_RCC_OscConfig+0x4ac>)
 800479c:	4313      	orrs	r3, r2
 800479e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047a0:	4b1b      	ldr	r3, [pc, #108]	@ (8004810 <HAL_RCC_OscConfig+0x4b4>)
 80047a2:	2201      	movs	r2, #1
 80047a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a6:	f7fd ff93 	bl	80026d0 <HAL_GetTick>
 80047aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ac:	e008      	b.n	80047c0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ae:	f7fd ff8f 	bl	80026d0 <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d901      	bls.n	80047c0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e064      	b.n	800488a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047c0:	4b11      	ldr	r3, [pc, #68]	@ (8004808 <HAL_RCC_OscConfig+0x4ac>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d0f0      	beq.n	80047ae <HAL_RCC_OscConfig+0x452>
 80047cc:	e05c      	b.n	8004888 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ce:	4b10      	ldr	r3, [pc, #64]	@ (8004810 <HAL_RCC_OscConfig+0x4b4>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d4:	f7fd ff7c 	bl	80026d0 <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047dc:	f7fd ff78 	bl	80026d0 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e04d      	b.n	800488a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ee:	4b06      	ldr	r3, [pc, #24]	@ (8004808 <HAL_RCC_OscConfig+0x4ac>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1f0      	bne.n	80047dc <HAL_RCC_OscConfig+0x480>
 80047fa:	e045      	b.n	8004888 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d107      	bne.n	8004814 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e040      	b.n	800488a <HAL_RCC_OscConfig+0x52e>
 8004808:	40023800 	.word	0x40023800
 800480c:	40007000 	.word	0x40007000
 8004810:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004814:	4b1f      	ldr	r3, [pc, #124]	@ (8004894 <HAL_RCC_OscConfig+0x538>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d030      	beq.n	8004884 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800482c:	429a      	cmp	r2, r3
 800482e:	d129      	bne.n	8004884 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800483a:	429a      	cmp	r2, r3
 800483c:	d122      	bne.n	8004884 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004844:	4013      	ands	r3, r2
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800484a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800484c:	4293      	cmp	r3, r2
 800484e:	d119      	bne.n	8004884 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800485a:	085b      	lsrs	r3, r3, #1
 800485c:	3b01      	subs	r3, #1
 800485e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004860:	429a      	cmp	r2, r3
 8004862:	d10f      	bne.n	8004884 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800486e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004870:	429a      	cmp	r2, r3
 8004872:	d107      	bne.n	8004884 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800487e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004880:	429a      	cmp	r2, r3
 8004882:	d001      	beq.n	8004888 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e000      	b.n	800488a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3718      	adds	r7, #24
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	40023800 	.word	0x40023800

08004898 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e041      	b.n	800492e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d106      	bne.n	80048c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f839 	bl	8004936 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	3304      	adds	r3, #4
 80048d4:	4619      	mov	r1, r3
 80048d6:	4610      	mov	r0, r2
 80048d8:	f000 fb9a 	bl	8005010 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3708      	adds	r7, #8
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004936:	b480      	push	{r7}
 8004938:	b083      	sub	sp, #12
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800493e:	bf00      	nop
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
	...

0800494c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b01      	cmp	r3, #1
 800495e:	d001      	beq.n	8004964 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e04e      	b.n	8004a02 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2202      	movs	r2, #2
 8004968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68da      	ldr	r2, [r3, #12]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f042 0201 	orr.w	r2, r2, #1
 800497a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a23      	ldr	r2, [pc, #140]	@ (8004a10 <HAL_TIM_Base_Start_IT+0xc4>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d022      	beq.n	80049cc <HAL_TIM_Base_Start_IT+0x80>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800498e:	d01d      	beq.n	80049cc <HAL_TIM_Base_Start_IT+0x80>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a1f      	ldr	r2, [pc, #124]	@ (8004a14 <HAL_TIM_Base_Start_IT+0xc8>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d018      	beq.n	80049cc <HAL_TIM_Base_Start_IT+0x80>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a1e      	ldr	r2, [pc, #120]	@ (8004a18 <HAL_TIM_Base_Start_IT+0xcc>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d013      	beq.n	80049cc <HAL_TIM_Base_Start_IT+0x80>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a1c      	ldr	r2, [pc, #112]	@ (8004a1c <HAL_TIM_Base_Start_IT+0xd0>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d00e      	beq.n	80049cc <HAL_TIM_Base_Start_IT+0x80>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a1b      	ldr	r2, [pc, #108]	@ (8004a20 <HAL_TIM_Base_Start_IT+0xd4>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d009      	beq.n	80049cc <HAL_TIM_Base_Start_IT+0x80>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a19      	ldr	r2, [pc, #100]	@ (8004a24 <HAL_TIM_Base_Start_IT+0xd8>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d004      	beq.n	80049cc <HAL_TIM_Base_Start_IT+0x80>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a18      	ldr	r2, [pc, #96]	@ (8004a28 <HAL_TIM_Base_Start_IT+0xdc>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d111      	bne.n	80049f0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f003 0307 	and.w	r3, r3, #7
 80049d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2b06      	cmp	r3, #6
 80049dc:	d010      	beq.n	8004a00 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f042 0201 	orr.w	r2, r2, #1
 80049ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ee:	e007      	b.n	8004a00 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f042 0201 	orr.w	r2, r2, #1
 80049fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3714      	adds	r7, #20
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	40010000 	.word	0x40010000
 8004a14:	40000400 	.word	0x40000400
 8004a18:	40000800 	.word	0x40000800
 8004a1c:	40000c00 	.word	0x40000c00
 8004a20:	40010400 	.word	0x40010400
 8004a24:	40014000 	.word	0x40014000
 8004a28:	40001800 	.word	0x40001800

08004a2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e041      	b.n	8004ac2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d106      	bne.n	8004a58 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7fd f9d0 	bl	8001df8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	3304      	adds	r3, #4
 8004a68:	4619      	mov	r1, r3
 8004a6a:	4610      	mov	r0, r2
 8004a6c:	f000 fad0 	bl	8005010 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3708      	adds	r7, #8
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
	...

08004acc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d109      	bne.n	8004af0 <HAL_TIM_PWM_Start+0x24>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	bf14      	ite	ne
 8004ae8:	2301      	movne	r3, #1
 8004aea:	2300      	moveq	r3, #0
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	e022      	b.n	8004b36 <HAL_TIM_PWM_Start+0x6a>
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	d109      	bne.n	8004b0a <HAL_TIM_PWM_Start+0x3e>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	bf14      	ite	ne
 8004b02:	2301      	movne	r3, #1
 8004b04:	2300      	moveq	r3, #0
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	e015      	b.n	8004b36 <HAL_TIM_PWM_Start+0x6a>
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	2b08      	cmp	r3, #8
 8004b0e:	d109      	bne.n	8004b24 <HAL_TIM_PWM_Start+0x58>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	bf14      	ite	ne
 8004b1c:	2301      	movne	r3, #1
 8004b1e:	2300      	moveq	r3, #0
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	e008      	b.n	8004b36 <HAL_TIM_PWM_Start+0x6a>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	bf14      	ite	ne
 8004b30:	2301      	movne	r3, #1
 8004b32:	2300      	moveq	r3, #0
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e07c      	b.n	8004c38 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d104      	bne.n	8004b4e <HAL_TIM_PWM_Start+0x82>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2202      	movs	r2, #2
 8004b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b4c:	e013      	b.n	8004b76 <HAL_TIM_PWM_Start+0xaa>
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	2b04      	cmp	r3, #4
 8004b52:	d104      	bne.n	8004b5e <HAL_TIM_PWM_Start+0x92>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2202      	movs	r2, #2
 8004b58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b5c:	e00b      	b.n	8004b76 <HAL_TIM_PWM_Start+0xaa>
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	2b08      	cmp	r3, #8
 8004b62:	d104      	bne.n	8004b6e <HAL_TIM_PWM_Start+0xa2>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2202      	movs	r2, #2
 8004b68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b6c:	e003      	b.n	8004b76 <HAL_TIM_PWM_Start+0xaa>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2202      	movs	r2, #2
 8004b72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	6839      	ldr	r1, [r7, #0]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f000 fc9c 	bl	80054bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a2d      	ldr	r2, [pc, #180]	@ (8004c40 <HAL_TIM_PWM_Start+0x174>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d004      	beq.n	8004b98 <HAL_TIM_PWM_Start+0xcc>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a2c      	ldr	r2, [pc, #176]	@ (8004c44 <HAL_TIM_PWM_Start+0x178>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d101      	bne.n	8004b9c <HAL_TIM_PWM_Start+0xd0>
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e000      	b.n	8004b9e <HAL_TIM_PWM_Start+0xd2>
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d007      	beq.n	8004bb2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004bb0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a22      	ldr	r2, [pc, #136]	@ (8004c40 <HAL_TIM_PWM_Start+0x174>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d022      	beq.n	8004c02 <HAL_TIM_PWM_Start+0x136>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bc4:	d01d      	beq.n	8004c02 <HAL_TIM_PWM_Start+0x136>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a1f      	ldr	r2, [pc, #124]	@ (8004c48 <HAL_TIM_PWM_Start+0x17c>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d018      	beq.n	8004c02 <HAL_TIM_PWM_Start+0x136>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a1d      	ldr	r2, [pc, #116]	@ (8004c4c <HAL_TIM_PWM_Start+0x180>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d013      	beq.n	8004c02 <HAL_TIM_PWM_Start+0x136>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a1c      	ldr	r2, [pc, #112]	@ (8004c50 <HAL_TIM_PWM_Start+0x184>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d00e      	beq.n	8004c02 <HAL_TIM_PWM_Start+0x136>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a16      	ldr	r2, [pc, #88]	@ (8004c44 <HAL_TIM_PWM_Start+0x178>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d009      	beq.n	8004c02 <HAL_TIM_PWM_Start+0x136>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a18      	ldr	r2, [pc, #96]	@ (8004c54 <HAL_TIM_PWM_Start+0x188>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d004      	beq.n	8004c02 <HAL_TIM_PWM_Start+0x136>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a16      	ldr	r2, [pc, #88]	@ (8004c58 <HAL_TIM_PWM_Start+0x18c>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d111      	bne.n	8004c26 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f003 0307 	and.w	r3, r3, #7
 8004c0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2b06      	cmp	r3, #6
 8004c12:	d010      	beq.n	8004c36 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f042 0201 	orr.w	r2, r2, #1
 8004c22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c24:	e007      	b.n	8004c36 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f042 0201 	orr.w	r2, r2, #1
 8004c34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3710      	adds	r7, #16
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	40010000 	.word	0x40010000
 8004c44:	40010400 	.word	0x40010400
 8004c48:	40000400 	.word	0x40000400
 8004c4c:	40000800 	.word	0x40000800
 8004c50:	40000c00 	.word	0x40000c00
 8004c54:	40014000 	.word	0x40014000
 8004c58:	40001800 	.word	0x40001800

08004c5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d020      	beq.n	8004cc0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f003 0302 	and.w	r3, r3, #2
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d01b      	beq.n	8004cc0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f06f 0202 	mvn.w	r2, #2
 8004c90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	f003 0303 	and.w	r3, r3, #3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d003      	beq.n	8004cae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 f994 	bl	8004fd4 <HAL_TIM_IC_CaptureCallback>
 8004cac:	e005      	b.n	8004cba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f986 	bl	8004fc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 f997 	bl	8004fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	f003 0304 	and.w	r3, r3, #4
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d020      	beq.n	8004d0c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d01b      	beq.n	8004d0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f06f 0204 	mvn.w	r2, #4
 8004cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2202      	movs	r2, #2
 8004ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d003      	beq.n	8004cfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f96e 	bl	8004fd4 <HAL_TIM_IC_CaptureCallback>
 8004cf8:	e005      	b.n	8004d06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f960 	bl	8004fc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 f971 	bl	8004fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	f003 0308 	and.w	r3, r3, #8
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d020      	beq.n	8004d58 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f003 0308 	and.w	r3, r3, #8
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d01b      	beq.n	8004d58 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f06f 0208 	mvn.w	r2, #8
 8004d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2204      	movs	r2, #4
 8004d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	69db      	ldr	r3, [r3, #28]
 8004d36:	f003 0303 	and.w	r3, r3, #3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d003      	beq.n	8004d46 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 f948 	bl	8004fd4 <HAL_TIM_IC_CaptureCallback>
 8004d44:	e005      	b.n	8004d52 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f93a 	bl	8004fc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f94b 	bl	8004fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	f003 0310 	and.w	r3, r3, #16
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d020      	beq.n	8004da4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f003 0310 	and.w	r3, r3, #16
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d01b      	beq.n	8004da4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f06f 0210 	mvn.w	r2, #16
 8004d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2208      	movs	r2, #8
 8004d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	69db      	ldr	r3, [r3, #28]
 8004d82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d003      	beq.n	8004d92 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f922 	bl	8004fd4 <HAL_TIM_IC_CaptureCallback>
 8004d90:	e005      	b.n	8004d9e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 f914 	bl	8004fc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 f925 	bl	8004fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00c      	beq.n	8004dc8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d007      	beq.n	8004dc8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f06f 0201 	mvn.w	r2, #1
 8004dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7fc fe3a 	bl	8001a3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00c      	beq.n	8004dec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d007      	beq.n	8004dec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 fc14 	bl	8005614 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00c      	beq.n	8004e10 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d007      	beq.n	8004e10 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f8f6 	bl	8004ffc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	f003 0320 	and.w	r3, r3, #32
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00c      	beq.n	8004e34 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f003 0320 	and.w	r3, r3, #32
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d007      	beq.n	8004e34 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f06f 0220 	mvn.w	r2, #32
 8004e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 fbe6 	bl	8005600 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e34:	bf00      	nop
 8004e36:	3710      	adds	r7, #16
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b086      	sub	sp, #24
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d101      	bne.n	8004e5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e56:	2302      	movs	r3, #2
 8004e58:	e0ae      	b.n	8004fb8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2b0c      	cmp	r3, #12
 8004e66:	f200 809f 	bhi.w	8004fa8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8004e70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e70:	08004ea5 	.word	0x08004ea5
 8004e74:	08004fa9 	.word	0x08004fa9
 8004e78:	08004fa9 	.word	0x08004fa9
 8004e7c:	08004fa9 	.word	0x08004fa9
 8004e80:	08004ee5 	.word	0x08004ee5
 8004e84:	08004fa9 	.word	0x08004fa9
 8004e88:	08004fa9 	.word	0x08004fa9
 8004e8c:	08004fa9 	.word	0x08004fa9
 8004e90:	08004f27 	.word	0x08004f27
 8004e94:	08004fa9 	.word	0x08004fa9
 8004e98:	08004fa9 	.word	0x08004fa9
 8004e9c:	08004fa9 	.word	0x08004fa9
 8004ea0:	08004f67 	.word	0x08004f67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68b9      	ldr	r1, [r7, #8]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 f956 	bl	800515c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	699a      	ldr	r2, [r3, #24]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f042 0208 	orr.w	r2, r2, #8
 8004ebe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	699a      	ldr	r2, [r3, #24]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f022 0204 	bic.w	r2, r2, #4
 8004ece:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6999      	ldr	r1, [r3, #24]
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	691a      	ldr	r2, [r3, #16]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	619a      	str	r2, [r3, #24]
      break;
 8004ee2:	e064      	b.n	8004fae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68b9      	ldr	r1, [r7, #8]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 f9a6 	bl	800523c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	699a      	ldr	r2, [r3, #24]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004efe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	699a      	ldr	r2, [r3, #24]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	6999      	ldr	r1, [r3, #24]
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	021a      	lsls	r2, r3, #8
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	430a      	orrs	r2, r1
 8004f22:	619a      	str	r2, [r3, #24]
      break;
 8004f24:	e043      	b.n	8004fae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68b9      	ldr	r1, [r7, #8]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f000 f9fb 	bl	8005328 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	69da      	ldr	r2, [r3, #28]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f042 0208 	orr.w	r2, r2, #8
 8004f40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	69da      	ldr	r2, [r3, #28]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f022 0204 	bic.w	r2, r2, #4
 8004f50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	69d9      	ldr	r1, [r3, #28]
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	691a      	ldr	r2, [r3, #16]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	430a      	orrs	r2, r1
 8004f62:	61da      	str	r2, [r3, #28]
      break;
 8004f64:	e023      	b.n	8004fae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68b9      	ldr	r1, [r7, #8]
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 fa4f 	bl	8005410 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	69da      	ldr	r2, [r3, #28]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	69da      	ldr	r2, [r3, #28]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	69d9      	ldr	r1, [r3, #28]
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	021a      	lsls	r2, r3, #8
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	61da      	str	r2, [r3, #28]
      break;
 8004fa6:	e002      	b.n	8004fae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	75fb      	strb	r3, [r7, #23]
      break;
 8004fac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004fb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3718      	adds	r7, #24
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005010:	b480      	push	{r7}
 8005012:	b085      	sub	sp, #20
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a43      	ldr	r2, [pc, #268]	@ (8005130 <TIM_Base_SetConfig+0x120>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d013      	beq.n	8005050 <TIM_Base_SetConfig+0x40>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800502e:	d00f      	beq.n	8005050 <TIM_Base_SetConfig+0x40>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a40      	ldr	r2, [pc, #256]	@ (8005134 <TIM_Base_SetConfig+0x124>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d00b      	beq.n	8005050 <TIM_Base_SetConfig+0x40>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a3f      	ldr	r2, [pc, #252]	@ (8005138 <TIM_Base_SetConfig+0x128>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d007      	beq.n	8005050 <TIM_Base_SetConfig+0x40>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a3e      	ldr	r2, [pc, #248]	@ (800513c <TIM_Base_SetConfig+0x12c>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d003      	beq.n	8005050 <TIM_Base_SetConfig+0x40>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a3d      	ldr	r2, [pc, #244]	@ (8005140 <TIM_Base_SetConfig+0x130>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d108      	bne.n	8005062 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005056:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	4313      	orrs	r3, r2
 8005060:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a32      	ldr	r2, [pc, #200]	@ (8005130 <TIM_Base_SetConfig+0x120>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d02b      	beq.n	80050c2 <TIM_Base_SetConfig+0xb2>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005070:	d027      	beq.n	80050c2 <TIM_Base_SetConfig+0xb2>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a2f      	ldr	r2, [pc, #188]	@ (8005134 <TIM_Base_SetConfig+0x124>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d023      	beq.n	80050c2 <TIM_Base_SetConfig+0xb2>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a2e      	ldr	r2, [pc, #184]	@ (8005138 <TIM_Base_SetConfig+0x128>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d01f      	beq.n	80050c2 <TIM_Base_SetConfig+0xb2>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a2d      	ldr	r2, [pc, #180]	@ (800513c <TIM_Base_SetConfig+0x12c>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d01b      	beq.n	80050c2 <TIM_Base_SetConfig+0xb2>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a2c      	ldr	r2, [pc, #176]	@ (8005140 <TIM_Base_SetConfig+0x130>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d017      	beq.n	80050c2 <TIM_Base_SetConfig+0xb2>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a2b      	ldr	r2, [pc, #172]	@ (8005144 <TIM_Base_SetConfig+0x134>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d013      	beq.n	80050c2 <TIM_Base_SetConfig+0xb2>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a2a      	ldr	r2, [pc, #168]	@ (8005148 <TIM_Base_SetConfig+0x138>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d00f      	beq.n	80050c2 <TIM_Base_SetConfig+0xb2>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a29      	ldr	r2, [pc, #164]	@ (800514c <TIM_Base_SetConfig+0x13c>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d00b      	beq.n	80050c2 <TIM_Base_SetConfig+0xb2>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a28      	ldr	r2, [pc, #160]	@ (8005150 <TIM_Base_SetConfig+0x140>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d007      	beq.n	80050c2 <TIM_Base_SetConfig+0xb2>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a27      	ldr	r2, [pc, #156]	@ (8005154 <TIM_Base_SetConfig+0x144>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d003      	beq.n	80050c2 <TIM_Base_SetConfig+0xb2>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a26      	ldr	r2, [pc, #152]	@ (8005158 <TIM_Base_SetConfig+0x148>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d108      	bne.n	80050d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	4313      	orrs	r3, r2
 80050e0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	689a      	ldr	r2, [r3, #8]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a0e      	ldr	r2, [pc, #56]	@ (8005130 <TIM_Base_SetConfig+0x120>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d003      	beq.n	8005102 <TIM_Base_SetConfig+0xf2>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a10      	ldr	r2, [pc, #64]	@ (8005140 <TIM_Base_SetConfig+0x130>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d103      	bne.n	800510a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	691a      	ldr	r2, [r3, #16]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f043 0204 	orr.w	r2, r3, #4
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	601a      	str	r2, [r3, #0]
}
 8005122:	bf00      	nop
 8005124:	3714      	adds	r7, #20
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	40010000 	.word	0x40010000
 8005134:	40000400 	.word	0x40000400
 8005138:	40000800 	.word	0x40000800
 800513c:	40000c00 	.word	0x40000c00
 8005140:	40010400 	.word	0x40010400
 8005144:	40014000 	.word	0x40014000
 8005148:	40014400 	.word	0x40014400
 800514c:	40014800 	.word	0x40014800
 8005150:	40001800 	.word	0x40001800
 8005154:	40001c00 	.word	0x40001c00
 8005158:	40002000 	.word	0x40002000

0800515c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800515c:	b480      	push	{r7}
 800515e:	b087      	sub	sp, #28
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a1b      	ldr	r3, [r3, #32]
 8005170:	f023 0201 	bic.w	r2, r3, #1
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800518a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f023 0303 	bic.w	r3, r3, #3
 8005192:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	4313      	orrs	r3, r2
 800519c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	f023 0302 	bic.w	r3, r3, #2
 80051a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a20      	ldr	r2, [pc, #128]	@ (8005234 <TIM_OC1_SetConfig+0xd8>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d003      	beq.n	80051c0 <TIM_OC1_SetConfig+0x64>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a1f      	ldr	r2, [pc, #124]	@ (8005238 <TIM_OC1_SetConfig+0xdc>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d10c      	bne.n	80051da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	f023 0308 	bic.w	r3, r3, #8
 80051c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	697a      	ldr	r2, [r7, #20]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f023 0304 	bic.w	r3, r3, #4
 80051d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a15      	ldr	r2, [pc, #84]	@ (8005234 <TIM_OC1_SetConfig+0xd8>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d003      	beq.n	80051ea <TIM_OC1_SetConfig+0x8e>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a14      	ldr	r2, [pc, #80]	@ (8005238 <TIM_OC1_SetConfig+0xdc>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d111      	bne.n	800520e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80051f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	4313      	orrs	r3, r2
 8005202:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	4313      	orrs	r3, r2
 800520c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	685a      	ldr	r2, [r3, #4]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	621a      	str	r2, [r3, #32]
}
 8005228:	bf00      	nop
 800522a:	371c      	adds	r7, #28
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr
 8005234:	40010000 	.word	0x40010000
 8005238:	40010400 	.word	0x40010400

0800523c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800523c:	b480      	push	{r7}
 800523e:	b087      	sub	sp, #28
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a1b      	ldr	r3, [r3, #32]
 8005250:	f023 0210 	bic.w	r2, r3, #16
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800526a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005272:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	021b      	lsls	r3, r3, #8
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	4313      	orrs	r3, r2
 800527e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	f023 0320 	bic.w	r3, r3, #32
 8005286:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	011b      	lsls	r3, r3, #4
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	4313      	orrs	r3, r2
 8005292:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a22      	ldr	r2, [pc, #136]	@ (8005320 <TIM_OC2_SetConfig+0xe4>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d003      	beq.n	80052a4 <TIM_OC2_SetConfig+0x68>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a21      	ldr	r2, [pc, #132]	@ (8005324 <TIM_OC2_SetConfig+0xe8>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d10d      	bne.n	80052c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	011b      	lsls	r3, r3, #4
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a17      	ldr	r2, [pc, #92]	@ (8005320 <TIM_OC2_SetConfig+0xe4>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d003      	beq.n	80052d0 <TIM_OC2_SetConfig+0x94>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a16      	ldr	r2, [pc, #88]	@ (8005324 <TIM_OC2_SetConfig+0xe8>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d113      	bne.n	80052f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80052d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80052de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	695b      	ldr	r3, [r3, #20]
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	699b      	ldr	r3, [r3, #24]
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	685a      	ldr	r2, [r3, #4]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	621a      	str	r2, [r3, #32]
}
 8005312:	bf00      	nop
 8005314:	371c      	adds	r7, #28
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	40010000 	.word	0x40010000
 8005324:	40010400 	.word	0x40010400

08005328 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005328:	b480      	push	{r7}
 800532a:	b087      	sub	sp, #28
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f023 0303 	bic.w	r3, r3, #3
 800535e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	4313      	orrs	r3, r2
 8005368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005370:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	021b      	lsls	r3, r3, #8
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	4313      	orrs	r3, r2
 800537c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a21      	ldr	r2, [pc, #132]	@ (8005408 <TIM_OC3_SetConfig+0xe0>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d003      	beq.n	800538e <TIM_OC3_SetConfig+0x66>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a20      	ldr	r2, [pc, #128]	@ (800540c <TIM_OC3_SetConfig+0xe4>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d10d      	bne.n	80053aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005394:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	021b      	lsls	r3, r3, #8
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	4313      	orrs	r3, r2
 80053a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80053a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a16      	ldr	r2, [pc, #88]	@ (8005408 <TIM_OC3_SetConfig+0xe0>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d003      	beq.n	80053ba <TIM_OC3_SetConfig+0x92>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a15      	ldr	r2, [pc, #84]	@ (800540c <TIM_OC3_SetConfig+0xe4>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d113      	bne.n	80053e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80053c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80053c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	011b      	lsls	r3, r3, #4
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	011b      	lsls	r3, r3, #4
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	4313      	orrs	r3, r2
 80053e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	685a      	ldr	r2, [r3, #4]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	621a      	str	r2, [r3, #32]
}
 80053fc:	bf00      	nop
 80053fe:	371c      	adds	r7, #28
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr
 8005408:	40010000 	.word	0x40010000
 800540c:	40010400 	.word	0x40010400

08005410 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005410:	b480      	push	{r7}
 8005412:	b087      	sub	sp, #28
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a1b      	ldr	r3, [r3, #32]
 8005424:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	69db      	ldr	r3, [r3, #28]
 8005436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800543e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005446:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	021b      	lsls	r3, r3, #8
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	4313      	orrs	r3, r2
 8005452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800545a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	031b      	lsls	r3, r3, #12
 8005462:	693a      	ldr	r2, [r7, #16]
 8005464:	4313      	orrs	r3, r2
 8005466:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a12      	ldr	r2, [pc, #72]	@ (80054b4 <TIM_OC4_SetConfig+0xa4>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d003      	beq.n	8005478 <TIM_OC4_SetConfig+0x68>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a11      	ldr	r2, [pc, #68]	@ (80054b8 <TIM_OC4_SetConfig+0xa8>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d109      	bne.n	800548c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800547e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	695b      	ldr	r3, [r3, #20]
 8005484:	019b      	lsls	r3, r3, #6
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	4313      	orrs	r3, r2
 800548a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	685a      	ldr	r2, [r3, #4]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	621a      	str	r2, [r3, #32]
}
 80054a6:	bf00      	nop
 80054a8:	371c      	adds	r7, #28
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	40010000 	.word	0x40010000
 80054b8:	40010400 	.word	0x40010400

080054bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054bc:	b480      	push	{r7}
 80054be:	b087      	sub	sp, #28
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	f003 031f 	and.w	r3, r3, #31
 80054ce:	2201      	movs	r2, #1
 80054d0:	fa02 f303 	lsl.w	r3, r2, r3
 80054d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6a1a      	ldr	r2, [r3, #32]
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	43db      	mvns	r3, r3
 80054de:	401a      	ands	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6a1a      	ldr	r2, [r3, #32]
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	f003 031f 	and.w	r3, r3, #31
 80054ee:	6879      	ldr	r1, [r7, #4]
 80054f0:	fa01 f303 	lsl.w	r3, r1, r3
 80054f4:	431a      	orrs	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	621a      	str	r2, [r3, #32]
}
 80054fa:	bf00      	nop
 80054fc:	371c      	adds	r7, #28
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
	...

08005508 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005518:	2b01      	cmp	r3, #1
 800551a:	d101      	bne.n	8005520 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800551c:	2302      	movs	r3, #2
 800551e:	e05a      	b.n	80055d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2202      	movs	r2, #2
 800552c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005546:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	4313      	orrs	r3, r2
 8005550:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a21      	ldr	r2, [pc, #132]	@ (80055e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d022      	beq.n	80055aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800556c:	d01d      	beq.n	80055aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a1d      	ldr	r2, [pc, #116]	@ (80055e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d018      	beq.n	80055aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a1b      	ldr	r2, [pc, #108]	@ (80055ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d013      	beq.n	80055aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a1a      	ldr	r2, [pc, #104]	@ (80055f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d00e      	beq.n	80055aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a18      	ldr	r2, [pc, #96]	@ (80055f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d009      	beq.n	80055aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a17      	ldr	r2, [pc, #92]	@ (80055f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d004      	beq.n	80055aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a15      	ldr	r2, [pc, #84]	@ (80055fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d10c      	bne.n	80055c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	68ba      	ldr	r2, [r7, #8]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3714      	adds	r7, #20
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	40010000 	.word	0x40010000
 80055e8:	40000400 	.word	0x40000400
 80055ec:	40000800 	.word	0x40000800
 80055f0:	40000c00 	.word	0x40000c00
 80055f4:	40010400 	.word	0x40010400
 80055f8:	40014000 	.word	0x40014000
 80055fc:	40001800 	.word	0x40001800

08005600 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005608:	bf00      	nop
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800561c:	bf00      	nop
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e042      	b.n	80056c0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005640:	b2db      	uxtb	r3, r3
 8005642:	2b00      	cmp	r3, #0
 8005644:	d106      	bne.n	8005654 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f7fc fc2a 	bl	8001ea8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2224      	movs	r2, #36	@ 0x24
 8005658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68da      	ldr	r2, [r3, #12]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800566a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 ffbb 	bl	80065e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	691a      	ldr	r2, [r3, #16]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005680:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	695a      	ldr	r2, [r3, #20]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005690:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68da      	ldr	r2, [r3, #12]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80056a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2220      	movs	r2, #32
 80056ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2220      	movs	r2, #32
 80056b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3708      	adds	r7, #8
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b08a      	sub	sp, #40	@ 0x28
 80056cc:	af02      	add	r7, sp, #8
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	603b      	str	r3, [r7, #0]
 80056d4:	4613      	mov	r3, r2
 80056d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80056d8:	2300      	movs	r3, #0
 80056da:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	2b20      	cmp	r3, #32
 80056e6:	d175      	bne.n	80057d4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d002      	beq.n	80056f4 <HAL_UART_Transmit+0x2c>
 80056ee:	88fb      	ldrh	r3, [r7, #6]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d101      	bne.n	80056f8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e06e      	b.n	80057d6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2221      	movs	r2, #33	@ 0x21
 8005702:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005706:	f7fc ffe3 	bl	80026d0 <HAL_GetTick>
 800570a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	88fa      	ldrh	r2, [r7, #6]
 8005710:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	88fa      	ldrh	r2, [r7, #6]
 8005716:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005720:	d108      	bne.n	8005734 <HAL_UART_Transmit+0x6c>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d104      	bne.n	8005734 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800572a:	2300      	movs	r3, #0
 800572c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	61bb      	str	r3, [r7, #24]
 8005732:	e003      	b.n	800573c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005738:	2300      	movs	r3, #0
 800573a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800573c:	e02e      	b.n	800579c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	9300      	str	r3, [sp, #0]
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	2200      	movs	r2, #0
 8005746:	2180      	movs	r1, #128	@ 0x80
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f000 fc51 	bl	8005ff0 <UART_WaitOnFlagUntilTimeout>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d005      	beq.n	8005760 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2220      	movs	r2, #32
 8005758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e03a      	b.n	80057d6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d10b      	bne.n	800577e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	881b      	ldrh	r3, [r3, #0]
 800576a:	461a      	mov	r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005774:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	3302      	adds	r3, #2
 800577a:	61bb      	str	r3, [r7, #24]
 800577c:	e007      	b.n	800578e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	781a      	ldrb	r2, [r3, #0]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	3301      	adds	r3, #1
 800578c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005792:	b29b      	uxth	r3, r3
 8005794:	3b01      	subs	r3, #1
 8005796:	b29a      	uxth	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1cb      	bne.n	800573e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	9300      	str	r3, [sp, #0]
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	2200      	movs	r2, #0
 80057ae:	2140      	movs	r1, #64	@ 0x40
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f000 fc1d 	bl	8005ff0 <UART_WaitOnFlagUntilTimeout>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d005      	beq.n	80057c8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2220      	movs	r2, #32
 80057c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e006      	b.n	80057d6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2220      	movs	r2, #32
 80057cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80057d0:	2300      	movs	r3, #0
 80057d2:	e000      	b.n	80057d6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80057d4:	2302      	movs	r3, #2
  }
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3720      	adds	r7, #32
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b084      	sub	sp, #16
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	60f8      	str	r0, [r7, #12]
 80057e6:	60b9      	str	r1, [r7, #8]
 80057e8:	4613      	mov	r3, r2
 80057ea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	2b20      	cmp	r3, #32
 80057f6:	d112      	bne.n	800581e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d002      	beq.n	8005804 <HAL_UART_Receive_IT+0x26>
 80057fe:	88fb      	ldrh	r3, [r7, #6]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d101      	bne.n	8005808 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e00b      	b.n	8005820 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800580e:	88fb      	ldrh	r3, [r7, #6]
 8005810:	461a      	mov	r2, r3
 8005812:	68b9      	ldr	r1, [r7, #8]
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f000 fc44 	bl	80060a2 <UART_Start_Receive_IT>
 800581a:	4603      	mov	r3, r0
 800581c:	e000      	b.n	8005820 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800581e:	2302      	movs	r3, #2
  }
}
 8005820:	4618      	mov	r0, r3
 8005822:	3710      	adds	r7, #16
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	4613      	mov	r3, r2
 8005834:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b20      	cmp	r3, #32
 8005840:	d112      	bne.n	8005868 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d002      	beq.n	800584e <HAL_UART_Receive_DMA+0x26>
 8005848:	88fb      	ldrh	r3, [r7, #6]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d101      	bne.n	8005852 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e00b      	b.n	800586a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005858:	88fb      	ldrh	r3, [r7, #6]
 800585a:	461a      	mov	r2, r3
 800585c:	68b9      	ldr	r1, [r7, #8]
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	f000 fc5a 	bl	8006118 <UART_Start_Receive_DMA>
 8005864:	4603      	mov	r3, r0
 8005866:	e000      	b.n	800586a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005868:	2302      	movs	r3, #2
  }
}
 800586a:	4618      	mov	r0, r3
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
	...

08005874 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b0ba      	sub	sp, #232	@ 0xe8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800589a:	2300      	movs	r3, #0
 800589c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80058a0:	2300      	movs	r3, #0
 80058a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80058a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058aa:	f003 030f 	and.w	r3, r3, #15
 80058ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80058b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d10f      	bne.n	80058da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058be:	f003 0320 	and.w	r3, r3, #32
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d009      	beq.n	80058da <HAL_UART_IRQHandler+0x66>
 80058c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058ca:	f003 0320 	and.w	r3, r3, #32
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d003      	beq.n	80058da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 fdca 	bl	800646c <UART_Receive_IT>
      return;
 80058d8:	e273      	b.n	8005dc2 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80058da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80058de:	2b00      	cmp	r3, #0
 80058e0:	f000 80de 	beq.w	8005aa0 <HAL_UART_IRQHandler+0x22c>
 80058e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d106      	bne.n	80058fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80058f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058f4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	f000 80d1 	beq.w	8005aa0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80058fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005902:	f003 0301 	and.w	r3, r3, #1
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00b      	beq.n	8005922 <HAL_UART_IRQHandler+0xae>
 800590a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800590e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005912:	2b00      	cmp	r3, #0
 8005914:	d005      	beq.n	8005922 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800591a:	f043 0201 	orr.w	r2, r3, #1
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005926:	f003 0304 	and.w	r3, r3, #4
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00b      	beq.n	8005946 <HAL_UART_IRQHandler+0xd2>
 800592e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005932:	f003 0301 	and.w	r3, r3, #1
 8005936:	2b00      	cmp	r3, #0
 8005938:	d005      	beq.n	8005946 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800593e:	f043 0202 	orr.w	r2, r3, #2
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00b      	beq.n	800596a <HAL_UART_IRQHandler+0xf6>
 8005952:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005956:	f003 0301 	and.w	r3, r3, #1
 800595a:	2b00      	cmp	r3, #0
 800595c:	d005      	beq.n	800596a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005962:	f043 0204 	orr.w	r2, r3, #4
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800596a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800596e:	f003 0308 	and.w	r3, r3, #8
 8005972:	2b00      	cmp	r3, #0
 8005974:	d011      	beq.n	800599a <HAL_UART_IRQHandler+0x126>
 8005976:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800597a:	f003 0320 	and.w	r3, r3, #32
 800597e:	2b00      	cmp	r3, #0
 8005980:	d105      	bne.n	800598e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005982:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	2b00      	cmp	r3, #0
 800598c:	d005      	beq.n	800599a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005992:	f043 0208 	orr.w	r2, r3, #8
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800599e:	2b00      	cmp	r3, #0
 80059a0:	f000 820a 	beq.w	8005db8 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059a8:	f003 0320 	and.w	r3, r3, #32
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d008      	beq.n	80059c2 <HAL_UART_IRQHandler+0x14e>
 80059b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059b4:	f003 0320 	and.w	r3, r3, #32
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d002      	beq.n	80059c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 fd55 	bl	800646c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	695b      	ldr	r3, [r3, #20]
 80059c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059cc:	2b40      	cmp	r3, #64	@ 0x40
 80059ce:	bf0c      	ite	eq
 80059d0:	2301      	moveq	r3, #1
 80059d2:	2300      	movne	r3, #0
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059de:	f003 0308 	and.w	r3, r3, #8
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d103      	bne.n	80059ee <HAL_UART_IRQHandler+0x17a>
 80059e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d04f      	beq.n	8005a8e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 fc60 	bl	80062b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059fe:	2b40      	cmp	r3, #64	@ 0x40
 8005a00:	d141      	bne.n	8005a86 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	3314      	adds	r3, #20
 8005a08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005a10:	e853 3f00 	ldrex	r3, [r3]
 8005a14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005a18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005a1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	3314      	adds	r3, #20
 8005a2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005a2e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005a32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005a3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005a3e:	e841 2300 	strex	r3, r2, [r1]
 8005a42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005a46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1d9      	bne.n	8005a02 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d013      	beq.n	8005a7e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a5a:	4a8a      	ldr	r2, [pc, #552]	@ (8005c84 <HAL_UART_IRQHandler+0x410>)
 8005a5c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7fd fc74 	bl	8003350 <HAL_DMA_Abort_IT>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d016      	beq.n	8005a9c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005a78:	4610      	mov	r0, r2
 8005a7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a7c:	e00e      	b.n	8005a9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f7fc fdb3 	bl	80025ea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a84:	e00a      	b.n	8005a9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f7fc fdaf 	bl	80025ea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a8c:	e006      	b.n	8005a9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f7fc fdab 	bl	80025ea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005a9a:	e18d      	b.n	8005db8 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a9c:	bf00      	nop
    return;
 8005a9e:	e18b      	b.n	8005db8 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	f040 8167 	bne.w	8005d78 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005aae:	f003 0310 	and.w	r3, r3, #16
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f000 8160 	beq.w	8005d78 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8005ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005abc:	f003 0310 	and.w	r3, r3, #16
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f000 8159 	beq.w	8005d78 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	60bb      	str	r3, [r7, #8]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	60bb      	str	r3, [r7, #8]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	60bb      	str	r3, [r7, #8]
 8005ada:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ae6:	2b40      	cmp	r3, #64	@ 0x40
 8005ae8:	f040 80ce 	bne.w	8005c88 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005af8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f000 80a9 	beq.w	8005c54 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005b06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	f080 80a2 	bcs.w	8005c54 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b16:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b1c:	69db      	ldr	r3, [r3, #28]
 8005b1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b22:	f000 8088 	beq.w	8005c36 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	330c      	adds	r3, #12
 8005b2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005b34:	e853 3f00 	ldrex	r3, [r3]
 8005b38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005b3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005b40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	330c      	adds	r3, #12
 8005b4e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005b52:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005b56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005b5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005b62:	e841 2300 	strex	r3, r2, [r1]
 8005b66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005b6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1d9      	bne.n	8005b26 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	3314      	adds	r3, #20
 8005b78:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b7c:	e853 3f00 	ldrex	r3, [r3]
 8005b80:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005b82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b84:	f023 0301 	bic.w	r3, r3, #1
 8005b88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	3314      	adds	r3, #20
 8005b92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005b96:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005b9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005b9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005ba2:	e841 2300 	strex	r3, r2, [r1]
 8005ba6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005ba8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1e1      	bne.n	8005b72 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	3314      	adds	r3, #20
 8005bb4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005bb8:	e853 3f00 	ldrex	r3, [r3]
 8005bbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005bbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005bc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bc4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	3314      	adds	r3, #20
 8005bce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005bd2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005bd4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005bd8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005bda:	e841 2300 	strex	r3, r2, [r1]
 8005bde:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005be0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1e3      	bne.n	8005bae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2220      	movs	r2, #32
 8005bea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	330c      	adds	r3, #12
 8005bfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bfe:	e853 3f00 	ldrex	r3, [r3]
 8005c02:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005c04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c06:	f023 0310 	bic.w	r3, r3, #16
 8005c0a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	330c      	adds	r3, #12
 8005c14:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005c18:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005c1a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005c1e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005c20:	e841 2300 	strex	r3, r2, [r1]
 8005c24:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005c26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1e3      	bne.n	8005bf4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7fd fb1d 	bl	8003270 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2202      	movs	r2, #2
 8005c3a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 f8c5 	bl	8005ddc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005c52:	e0b3      	b.n	8005dbc <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005c58:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	f040 80ad 	bne.w	8005dbc <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c66:	69db      	ldr	r3, [r3, #28]
 8005c68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c6c:	f040 80a6 	bne.w	8005dbc <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2202      	movs	r2, #2
 8005c74:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 f8ad 	bl	8005ddc <HAL_UARTEx_RxEventCallback>
      return;
 8005c82:	e09b      	b.n	8005dbc <HAL_UART_IRQHandler+0x548>
 8005c84:	0800637b 	.word	0x0800637b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	f000 808e 	beq.w	8005dc0 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005ca4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f000 8089 	beq.w	8005dc0 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	330c      	adds	r3, #12
 8005cb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cb8:	e853 3f00 	ldrex	r3, [r3]
 8005cbc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005cbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cc0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005cc4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	330c      	adds	r3, #12
 8005cce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005cd2:	647a      	str	r2, [r7, #68]	@ 0x44
 8005cd4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005cd8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005cda:	e841 2300 	strex	r3, r2, [r1]
 8005cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ce0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1e3      	bne.n	8005cae <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	3314      	adds	r3, #20
 8005cec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf0:	e853 3f00 	ldrex	r3, [r3]
 8005cf4:	623b      	str	r3, [r7, #32]
   return(result);
 8005cf6:	6a3b      	ldr	r3, [r7, #32]
 8005cf8:	f023 0301 	bic.w	r3, r3, #1
 8005cfc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	3314      	adds	r3, #20
 8005d06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005d0a:	633a      	str	r2, [r7, #48]	@ 0x30
 8005d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d12:	e841 2300 	strex	r3, r2, [r1]
 8005d16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1e3      	bne.n	8005ce6 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2220      	movs	r2, #32
 8005d22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	330c      	adds	r3, #12
 8005d32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	e853 3f00 	ldrex	r3, [r3]
 8005d3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f023 0310 	bic.w	r3, r3, #16
 8005d42:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	330c      	adds	r3, #12
 8005d4c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005d50:	61fa      	str	r2, [r7, #28]
 8005d52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d54:	69b9      	ldr	r1, [r7, #24]
 8005d56:	69fa      	ldr	r2, [r7, #28]
 8005d58:	e841 2300 	strex	r3, r2, [r1]
 8005d5c:	617b      	str	r3, [r7, #20]
   return(result);
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1e3      	bne.n	8005d2c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2202      	movs	r2, #2
 8005d68:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d6e:	4619      	mov	r1, r3
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 f833 	bl	8005ddc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d76:	e023      	b.n	8005dc0 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d009      	beq.n	8005d98 <HAL_UART_IRQHandler+0x524>
 8005d84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d003      	beq.n	8005d98 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 fb03 	bl	800639c <UART_Transmit_IT>
    return;
 8005d96:	e014      	b.n	8005dc2 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00e      	beq.n	8005dc2 <HAL_UART_IRQHandler+0x54e>
 8005da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d008      	beq.n	8005dc2 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 fb43 	bl	800643c <UART_EndTransmit_IT>
    return;
 8005db6:	e004      	b.n	8005dc2 <HAL_UART_IRQHandler+0x54e>
    return;
 8005db8:	bf00      	nop
 8005dba:	e002      	b.n	8005dc2 <HAL_UART_IRQHandler+0x54e>
      return;
 8005dbc:	bf00      	nop
 8005dbe:	e000      	b.n	8005dc2 <HAL_UART_IRQHandler+0x54e>
      return;
 8005dc0:	bf00      	nop
  }
}
 8005dc2:	37e8      	adds	r7, #232	@ 0xe8
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005dd0:	bf00      	nop
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	460b      	mov	r3, r1
 8005de6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005de8:	bf00      	nop
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b09c      	sub	sp, #112	@ 0x70
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e00:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d172      	bne.n	8005ef6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005e10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e12:	2200      	movs	r2, #0
 8005e14:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	330c      	adds	r3, #12
 8005e1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e20:	e853 3f00 	ldrex	r3, [r3]
 8005e24:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005e26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	330c      	adds	r3, #12
 8005e34:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005e36:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005e38:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005e3c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005e3e:	e841 2300 	strex	r3, r2, [r1]
 8005e42:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005e44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d1e5      	bne.n	8005e16 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	3314      	adds	r3, #20
 8005e50:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e54:	e853 3f00 	ldrex	r3, [r3]
 8005e58:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e5c:	f023 0301 	bic.w	r3, r3, #1
 8005e60:	667b      	str	r3, [r7, #100]	@ 0x64
 8005e62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	3314      	adds	r3, #20
 8005e68:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005e6a:	647a      	str	r2, [r7, #68]	@ 0x44
 8005e6c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e72:	e841 2300 	strex	r3, r2, [r1]
 8005e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1e5      	bne.n	8005e4a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	3314      	adds	r3, #20
 8005e84:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e88:	e853 3f00 	ldrex	r3, [r3]
 8005e8c:	623b      	str	r3, [r7, #32]
   return(result);
 8005e8e:	6a3b      	ldr	r3, [r7, #32]
 8005e90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e94:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	3314      	adds	r3, #20
 8005e9c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005e9e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ea4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ea6:	e841 2300 	strex	r3, r2, [r1]
 8005eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1e5      	bne.n	8005e7e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005eb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005eb4:	2220      	movs	r2, #32
 8005eb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005eba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d119      	bne.n	8005ef6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ec2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	330c      	adds	r3, #12
 8005ec8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	e853 3f00 	ldrex	r3, [r3]
 8005ed0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f023 0310 	bic.w	r3, r3, #16
 8005ed8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005eda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	330c      	adds	r3, #12
 8005ee0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005ee2:	61fa      	str	r2, [r7, #28]
 8005ee4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee6:	69b9      	ldr	r1, [r7, #24]
 8005ee8:	69fa      	ldr	r2, [r7, #28]
 8005eea:	e841 2300 	strex	r3, r2, [r1]
 8005eee:	617b      	str	r3, [r7, #20]
   return(result);
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1e5      	bne.n	8005ec2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ef6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ef8:	2200      	movs	r2, #0
 8005efa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005efc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d106      	bne.n	8005f12 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f06:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005f08:	4619      	mov	r1, r3
 8005f0a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005f0c:	f7ff ff66 	bl	8005ddc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005f10:	e002      	b.n	8005f18 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005f12:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005f14:	f7fc fb56 	bl	80025c4 <HAL_UART_RxCpltCallback>
}
 8005f18:	bf00      	nop
 8005f1a:	3770      	adds	r7, #112	@ 0x70
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f2c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2201      	movs	r2, #1
 8005f32:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d108      	bne.n	8005f4e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005f40:	085b      	lsrs	r3, r3, #1
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	4619      	mov	r1, r3
 8005f46:	68f8      	ldr	r0, [r7, #12]
 8005f48:	f7ff ff48 	bl	8005ddc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005f4c:	e002      	b.n	8005f54 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005f4e:	68f8      	ldr	r0, [r7, #12]
 8005f50:	f7ff ff3a 	bl	8005dc8 <HAL_UART_RxHalfCpltCallback>
}
 8005f54:	bf00      	nop
 8005f56:	3710      	adds	r7, #16
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005f64:	2300      	movs	r3, #0
 8005f66:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f6c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	695b      	ldr	r3, [r3, #20]
 8005f74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f78:	2b80      	cmp	r3, #128	@ 0x80
 8005f7a:	bf0c      	ite	eq
 8005f7c:	2301      	moveq	r3, #1
 8005f7e:	2300      	movne	r3, #0
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	2b21      	cmp	r3, #33	@ 0x21
 8005f8e:	d108      	bne.n	8005fa2 <UART_DMAError+0x46>
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d005      	beq.n	8005fa2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005f9c:	68b8      	ldr	r0, [r7, #8]
 8005f9e:	f000 f961 	bl	8006264 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	695b      	ldr	r3, [r3, #20]
 8005fa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fac:	2b40      	cmp	r3, #64	@ 0x40
 8005fae:	bf0c      	ite	eq
 8005fb0:	2301      	moveq	r3, #1
 8005fb2:	2300      	movne	r3, #0
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	2b22      	cmp	r3, #34	@ 0x22
 8005fc2:	d108      	bne.n	8005fd6 <UART_DMAError+0x7a>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d005      	beq.n	8005fd6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005fd0:	68b8      	ldr	r0, [r7, #8]
 8005fd2:	f000 f96f 	bl	80062b4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fda:	f043 0210 	orr.w	r2, r3, #16
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fe2:	68b8      	ldr	r0, [r7, #8]
 8005fe4:	f7fc fb01 	bl	80025ea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fe8:	bf00      	nop
 8005fea:	3710      	adds	r7, #16
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b086      	sub	sp, #24
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	603b      	str	r3, [r7, #0]
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006000:	e03b      	b.n	800607a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006002:	6a3b      	ldr	r3, [r7, #32]
 8006004:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006008:	d037      	beq.n	800607a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800600a:	f7fc fb61 	bl	80026d0 <HAL_GetTick>
 800600e:	4602      	mov	r2, r0
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	6a3a      	ldr	r2, [r7, #32]
 8006016:	429a      	cmp	r2, r3
 8006018:	d302      	bcc.n	8006020 <UART_WaitOnFlagUntilTimeout+0x30>
 800601a:	6a3b      	ldr	r3, [r7, #32]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d101      	bne.n	8006024 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006020:	2303      	movs	r3, #3
 8006022:	e03a      	b.n	800609a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	f003 0304 	and.w	r3, r3, #4
 800602e:	2b00      	cmp	r3, #0
 8006030:	d023      	beq.n	800607a <UART_WaitOnFlagUntilTimeout+0x8a>
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	2b80      	cmp	r3, #128	@ 0x80
 8006036:	d020      	beq.n	800607a <UART_WaitOnFlagUntilTimeout+0x8a>
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	2b40      	cmp	r3, #64	@ 0x40
 800603c:	d01d      	beq.n	800607a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0308 	and.w	r3, r3, #8
 8006048:	2b08      	cmp	r3, #8
 800604a:	d116      	bne.n	800607a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800604c:	2300      	movs	r3, #0
 800604e:	617b      	str	r3, [r7, #20]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	617b      	str	r3, [r7, #20]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	617b      	str	r3, [r7, #20]
 8006060:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006062:	68f8      	ldr	r0, [r7, #12]
 8006064:	f000 f926 	bl	80062b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2208      	movs	r2, #8
 800606c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e00f      	b.n	800609a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	4013      	ands	r3, r2
 8006084:	68ba      	ldr	r2, [r7, #8]
 8006086:	429a      	cmp	r2, r3
 8006088:	bf0c      	ite	eq
 800608a:	2301      	moveq	r3, #1
 800608c:	2300      	movne	r3, #0
 800608e:	b2db      	uxtb	r3, r3
 8006090:	461a      	mov	r2, r3
 8006092:	79fb      	ldrb	r3, [r7, #7]
 8006094:	429a      	cmp	r2, r3
 8006096:	d0b4      	beq.n	8006002 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3718      	adds	r7, #24
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}

080060a2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060a2:	b480      	push	{r7}
 80060a4:	b085      	sub	sp, #20
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	60f8      	str	r0, [r7, #12]
 80060aa:	60b9      	str	r1, [r7, #8]
 80060ac:	4613      	mov	r3, r2
 80060ae:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	88fa      	ldrh	r2, [r7, #6]
 80060ba:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	88fa      	ldrh	r2, [r7, #6]
 80060c0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2222      	movs	r2, #34	@ 0x22
 80060cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d007      	beq.n	80060e8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68da      	ldr	r2, [r3, #12]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80060e6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	695a      	ldr	r2, [r3, #20]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f042 0201 	orr.w	r2, r2, #1
 80060f6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68da      	ldr	r2, [r3, #12]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f042 0220 	orr.w	r2, r2, #32
 8006106:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3714      	adds	r7, #20
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
	...

08006118 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b098      	sub	sp, #96	@ 0x60
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	4613      	mov	r3, r2
 8006124:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006126:	68ba      	ldr	r2, [r7, #8]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	88fa      	ldrh	r2, [r7, #6]
 8006130:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2222      	movs	r2, #34	@ 0x22
 800613c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006144:	4a44      	ldr	r2, [pc, #272]	@ (8006258 <UART_Start_Receive_DMA+0x140>)
 8006146:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800614c:	4a43      	ldr	r2, [pc, #268]	@ (800625c <UART_Start_Receive_DMA+0x144>)
 800614e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006154:	4a42      	ldr	r2, [pc, #264]	@ (8006260 <UART_Start_Receive_DMA+0x148>)
 8006156:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800615c:	2200      	movs	r2, #0
 800615e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006160:	f107 0308 	add.w	r3, r7, #8
 8006164:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	3304      	adds	r3, #4
 8006170:	4619      	mov	r1, r3
 8006172:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	88fb      	ldrh	r3, [r7, #6]
 8006178:	f7fd f822 	bl	80031c0 <HAL_DMA_Start_IT>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d008      	beq.n	8006194 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2210      	movs	r2, #16
 8006186:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2220      	movs	r2, #32
 800618c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e05d      	b.n	8006250 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006194:	2300      	movs	r3, #0
 8006196:	613b      	str	r3, [r7, #16]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	613b      	str	r3, [r7, #16]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	613b      	str	r3, [r7, #16]
 80061a8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d019      	beq.n	80061e6 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	330c      	adds	r3, #12
 80061b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061bc:	e853 3f00 	ldrex	r3, [r3]
 80061c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80061c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	330c      	adds	r3, #12
 80061d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80061d2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80061d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80061d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80061da:	e841 2300 	strex	r3, r2, [r1]
 80061de:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80061e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d1e5      	bne.n	80061b2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	3314      	adds	r3, #20
 80061ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f0:	e853 3f00 	ldrex	r3, [r3]
 80061f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80061f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061f8:	f043 0301 	orr.w	r3, r3, #1
 80061fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	3314      	adds	r3, #20
 8006204:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006206:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006208:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800620c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800620e:	e841 2300 	strex	r3, r2, [r1]
 8006212:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006216:	2b00      	cmp	r3, #0
 8006218:	d1e5      	bne.n	80061e6 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	3314      	adds	r3, #20
 8006220:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	e853 3f00 	ldrex	r3, [r3]
 8006228:	617b      	str	r3, [r7, #20]
   return(result);
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006230:	653b      	str	r3, [r7, #80]	@ 0x50
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	3314      	adds	r3, #20
 8006238:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800623a:	627a      	str	r2, [r7, #36]	@ 0x24
 800623c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623e:	6a39      	ldr	r1, [r7, #32]
 8006240:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006242:	e841 2300 	strex	r3, r2, [r1]
 8006246:	61fb      	str	r3, [r7, #28]
   return(result);
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1e5      	bne.n	800621a <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	3760      	adds	r7, #96	@ 0x60
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	08005df5 	.word	0x08005df5
 800625c:	08005f21 	.word	0x08005f21
 8006260:	08005f5d 	.word	0x08005f5d

08006264 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006264:	b480      	push	{r7}
 8006266:	b089      	sub	sp, #36	@ 0x24
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	330c      	adds	r3, #12
 8006272:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	e853 3f00 	ldrex	r3, [r3]
 800627a:	60bb      	str	r3, [r7, #8]
   return(result);
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006282:	61fb      	str	r3, [r7, #28]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	330c      	adds	r3, #12
 800628a:	69fa      	ldr	r2, [r7, #28]
 800628c:	61ba      	str	r2, [r7, #24]
 800628e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006290:	6979      	ldr	r1, [r7, #20]
 8006292:	69ba      	ldr	r2, [r7, #24]
 8006294:	e841 2300 	strex	r3, r2, [r1]
 8006298:	613b      	str	r3, [r7, #16]
   return(result);
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1e5      	bne.n	800626c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2220      	movs	r2, #32
 80062a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80062a8:	bf00      	nop
 80062aa:	3724      	adds	r7, #36	@ 0x24
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b095      	sub	sp, #84	@ 0x54
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	330c      	adds	r3, #12
 80062c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062c6:	e853 3f00 	ldrex	r3, [r3]
 80062ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80062cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	330c      	adds	r3, #12
 80062da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80062dc:	643a      	str	r2, [r7, #64]	@ 0x40
 80062de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80062e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80062e4:	e841 2300 	strex	r3, r2, [r1]
 80062e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80062ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d1e5      	bne.n	80062bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	3314      	adds	r3, #20
 80062f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f8:	6a3b      	ldr	r3, [r7, #32]
 80062fa:	e853 3f00 	ldrex	r3, [r3]
 80062fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	f023 0301 	bic.w	r3, r3, #1
 8006306:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	3314      	adds	r3, #20
 800630e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006310:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006312:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006314:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006316:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006318:	e841 2300 	strex	r3, r2, [r1]
 800631c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800631e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006320:	2b00      	cmp	r3, #0
 8006322:	d1e5      	bne.n	80062f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006328:	2b01      	cmp	r3, #1
 800632a:	d119      	bne.n	8006360 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	330c      	adds	r3, #12
 8006332:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	e853 3f00 	ldrex	r3, [r3]
 800633a:	60bb      	str	r3, [r7, #8]
   return(result);
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	f023 0310 	bic.w	r3, r3, #16
 8006342:	647b      	str	r3, [r7, #68]	@ 0x44
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	330c      	adds	r3, #12
 800634a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800634c:	61ba      	str	r2, [r7, #24]
 800634e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006350:	6979      	ldr	r1, [r7, #20]
 8006352:	69ba      	ldr	r2, [r7, #24]
 8006354:	e841 2300 	strex	r3, r2, [r1]
 8006358:	613b      	str	r3, [r7, #16]
   return(result);
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d1e5      	bne.n	800632c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2220      	movs	r2, #32
 8006364:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800636e:	bf00      	nop
 8006370:	3754      	adds	r7, #84	@ 0x54
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr

0800637a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800637a:	b580      	push	{r7, lr}
 800637c:	b084      	sub	sp, #16
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006386:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800638e:	68f8      	ldr	r0, [r7, #12]
 8006390:	f7fc f92b 	bl	80025ea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006394:	bf00      	nop
 8006396:	3710      	adds	r7, #16
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800639c:	b480      	push	{r7}
 800639e:	b085      	sub	sp, #20
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	2b21      	cmp	r3, #33	@ 0x21
 80063ae:	d13e      	bne.n	800642e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063b8:	d114      	bne.n	80063e4 <UART_Transmit_IT+0x48>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d110      	bne.n	80063e4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a1b      	ldr	r3, [r3, #32]
 80063c6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	881b      	ldrh	r3, [r3, #0]
 80063cc:	461a      	mov	r2, r3
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063d6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6a1b      	ldr	r3, [r3, #32]
 80063dc:	1c9a      	adds	r2, r3, #2
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	621a      	str	r2, [r3, #32]
 80063e2:	e008      	b.n	80063f6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6a1b      	ldr	r3, [r3, #32]
 80063e8:	1c59      	adds	r1, r3, #1
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	6211      	str	r1, [r2, #32]
 80063ee:	781a      	ldrb	r2, [r3, #0]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	3b01      	subs	r3, #1
 80063fe:	b29b      	uxth	r3, r3
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	4619      	mov	r1, r3
 8006404:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006406:	2b00      	cmp	r3, #0
 8006408:	d10f      	bne.n	800642a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68da      	ldr	r2, [r3, #12]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006418:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68da      	ldr	r2, [r3, #12]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006428:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800642a:	2300      	movs	r3, #0
 800642c:	e000      	b.n	8006430 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800642e:	2302      	movs	r3, #2
  }
}
 8006430:	4618      	mov	r0, r3
 8006432:	3714      	adds	r7, #20
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68da      	ldr	r2, [r3, #12]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006452:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2220      	movs	r2, #32
 8006458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f7fc f89e 	bl	800259e <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006462:	2300      	movs	r3, #0
}
 8006464:	4618      	mov	r0, r3
 8006466:	3708      	adds	r7, #8
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b08c      	sub	sp, #48	@ 0x30
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8006474:	2300      	movs	r3, #0
 8006476:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8006478:	2300      	movs	r3, #0
 800647a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006482:	b2db      	uxtb	r3, r3
 8006484:	2b22      	cmp	r3, #34	@ 0x22
 8006486:	f040 80aa 	bne.w	80065de <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006492:	d115      	bne.n	80064c0 <UART_Receive_IT+0x54>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d111      	bne.n	80064c0 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064a0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064b2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064b8:	1c9a      	adds	r2, r3, #2
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	629a      	str	r2, [r3, #40]	@ 0x28
 80064be:	e024      	b.n	800650a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064ce:	d007      	beq.n	80064e0 <UART_Receive_IT+0x74>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d10a      	bne.n	80064ee <UART_Receive_IT+0x82>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d106      	bne.n	80064ee <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	b2da      	uxtb	r2, r3
 80064e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ea:	701a      	strb	r2, [r3, #0]
 80064ec:	e008      	b.n	8006500 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064fa:	b2da      	uxtb	r2, r3
 80064fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064fe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006504:	1c5a      	adds	r2, r3, #1
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800650e:	b29b      	uxth	r3, r3
 8006510:	3b01      	subs	r3, #1
 8006512:	b29b      	uxth	r3, r3
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	4619      	mov	r1, r3
 8006518:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800651a:	2b00      	cmp	r3, #0
 800651c:	d15d      	bne.n	80065da <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68da      	ldr	r2, [r3, #12]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f022 0220 	bic.w	r2, r2, #32
 800652c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68da      	ldr	r2, [r3, #12]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800653c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	695a      	ldr	r2, [r3, #20]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f022 0201 	bic.w	r2, r2, #1
 800654c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2220      	movs	r2, #32
 8006552:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006560:	2b01      	cmp	r3, #1
 8006562:	d135      	bne.n	80065d0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	330c      	adds	r3, #12
 8006570:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	e853 3f00 	ldrex	r3, [r3]
 8006578:	613b      	str	r3, [r7, #16]
   return(result);
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	f023 0310 	bic.w	r3, r3, #16
 8006580:	627b      	str	r3, [r7, #36]	@ 0x24
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	330c      	adds	r3, #12
 8006588:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800658a:	623a      	str	r2, [r7, #32]
 800658c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658e:	69f9      	ldr	r1, [r7, #28]
 8006590:	6a3a      	ldr	r2, [r7, #32]
 8006592:	e841 2300 	strex	r3, r2, [r1]
 8006596:	61bb      	str	r3, [r7, #24]
   return(result);
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1e5      	bne.n	800656a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 0310 	and.w	r3, r3, #16
 80065a8:	2b10      	cmp	r3, #16
 80065aa:	d10a      	bne.n	80065c2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80065ac:	2300      	movs	r3, #0
 80065ae:	60fb      	str	r3, [r7, #12]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	60fb      	str	r3, [r7, #12]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	60fb      	str	r3, [r7, #12]
 80065c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80065c6:	4619      	mov	r1, r3
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f7ff fc07 	bl	8005ddc <HAL_UARTEx_RxEventCallback>
 80065ce:	e002      	b.n	80065d6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f7fb fff7 	bl	80025c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80065d6:	2300      	movs	r3, #0
 80065d8:	e002      	b.n	80065e0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80065da:	2300      	movs	r3, #0
 80065dc:	e000      	b.n	80065e0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80065de:	2302      	movs	r3, #2
  }
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3730      	adds	r7, #48	@ 0x30
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065ec:	b0c0      	sub	sp, #256	@ 0x100
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006604:	68d9      	ldr	r1, [r3, #12]
 8006606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	ea40 0301 	orr.w	r3, r0, r1
 8006610:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006616:	689a      	ldr	r2, [r3, #8]
 8006618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	431a      	orrs	r2, r3
 8006620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	431a      	orrs	r2, r3
 8006628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800662c:	69db      	ldr	r3, [r3, #28]
 800662e:	4313      	orrs	r3, r2
 8006630:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006640:	f021 010c 	bic.w	r1, r1, #12
 8006644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800664e:	430b      	orrs	r3, r1
 8006650:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800665e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006662:	6999      	ldr	r1, [r3, #24]
 8006664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	ea40 0301 	orr.w	r3, r0, r1
 800666e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	4b8f      	ldr	r3, [pc, #572]	@ (80068b4 <UART_SetConfig+0x2cc>)
 8006678:	429a      	cmp	r2, r3
 800667a:	d005      	beq.n	8006688 <UART_SetConfig+0xa0>
 800667c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	4b8d      	ldr	r3, [pc, #564]	@ (80068b8 <UART_SetConfig+0x2d0>)
 8006684:	429a      	cmp	r2, r3
 8006686:	d104      	bne.n	8006692 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006688:	f7fd fbf2 	bl	8003e70 <HAL_RCC_GetPCLK2Freq>
 800668c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006690:	e003      	b.n	800669a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006692:	f7fd fbd9 	bl	8003e48 <HAL_RCC_GetPCLK1Freq>
 8006696:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800669a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800669e:	69db      	ldr	r3, [r3, #28]
 80066a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066a4:	f040 810c 	bne.w	80068c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80066a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066ac:	2200      	movs	r2, #0
 80066ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80066b2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80066b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80066ba:	4622      	mov	r2, r4
 80066bc:	462b      	mov	r3, r5
 80066be:	1891      	adds	r1, r2, r2
 80066c0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80066c2:	415b      	adcs	r3, r3
 80066c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80066c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80066ca:	4621      	mov	r1, r4
 80066cc:	eb12 0801 	adds.w	r8, r2, r1
 80066d0:	4629      	mov	r1, r5
 80066d2:	eb43 0901 	adc.w	r9, r3, r1
 80066d6:	f04f 0200 	mov.w	r2, #0
 80066da:	f04f 0300 	mov.w	r3, #0
 80066de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80066e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80066e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80066ea:	4690      	mov	r8, r2
 80066ec:	4699      	mov	r9, r3
 80066ee:	4623      	mov	r3, r4
 80066f0:	eb18 0303 	adds.w	r3, r8, r3
 80066f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80066f8:	462b      	mov	r3, r5
 80066fa:	eb49 0303 	adc.w	r3, r9, r3
 80066fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800670e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006712:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006716:	460b      	mov	r3, r1
 8006718:	18db      	adds	r3, r3, r3
 800671a:	653b      	str	r3, [r7, #80]	@ 0x50
 800671c:	4613      	mov	r3, r2
 800671e:	eb42 0303 	adc.w	r3, r2, r3
 8006722:	657b      	str	r3, [r7, #84]	@ 0x54
 8006724:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006728:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800672c:	f7fa fadc 	bl	8000ce8 <__aeabi_uldivmod>
 8006730:	4602      	mov	r2, r0
 8006732:	460b      	mov	r3, r1
 8006734:	4b61      	ldr	r3, [pc, #388]	@ (80068bc <UART_SetConfig+0x2d4>)
 8006736:	fba3 2302 	umull	r2, r3, r3, r2
 800673a:	095b      	lsrs	r3, r3, #5
 800673c:	011c      	lsls	r4, r3, #4
 800673e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006742:	2200      	movs	r2, #0
 8006744:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006748:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800674c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006750:	4642      	mov	r2, r8
 8006752:	464b      	mov	r3, r9
 8006754:	1891      	adds	r1, r2, r2
 8006756:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006758:	415b      	adcs	r3, r3
 800675a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800675c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006760:	4641      	mov	r1, r8
 8006762:	eb12 0a01 	adds.w	sl, r2, r1
 8006766:	4649      	mov	r1, r9
 8006768:	eb43 0b01 	adc.w	fp, r3, r1
 800676c:	f04f 0200 	mov.w	r2, #0
 8006770:	f04f 0300 	mov.w	r3, #0
 8006774:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006778:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800677c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006780:	4692      	mov	sl, r2
 8006782:	469b      	mov	fp, r3
 8006784:	4643      	mov	r3, r8
 8006786:	eb1a 0303 	adds.w	r3, sl, r3
 800678a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800678e:	464b      	mov	r3, r9
 8006790:	eb4b 0303 	adc.w	r3, fp, r3
 8006794:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80067a4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80067a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80067ac:	460b      	mov	r3, r1
 80067ae:	18db      	adds	r3, r3, r3
 80067b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80067b2:	4613      	mov	r3, r2
 80067b4:	eb42 0303 	adc.w	r3, r2, r3
 80067b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80067ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80067be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80067c2:	f7fa fa91 	bl	8000ce8 <__aeabi_uldivmod>
 80067c6:	4602      	mov	r2, r0
 80067c8:	460b      	mov	r3, r1
 80067ca:	4611      	mov	r1, r2
 80067cc:	4b3b      	ldr	r3, [pc, #236]	@ (80068bc <UART_SetConfig+0x2d4>)
 80067ce:	fba3 2301 	umull	r2, r3, r3, r1
 80067d2:	095b      	lsrs	r3, r3, #5
 80067d4:	2264      	movs	r2, #100	@ 0x64
 80067d6:	fb02 f303 	mul.w	r3, r2, r3
 80067da:	1acb      	subs	r3, r1, r3
 80067dc:	00db      	lsls	r3, r3, #3
 80067de:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80067e2:	4b36      	ldr	r3, [pc, #216]	@ (80068bc <UART_SetConfig+0x2d4>)
 80067e4:	fba3 2302 	umull	r2, r3, r3, r2
 80067e8:	095b      	lsrs	r3, r3, #5
 80067ea:	005b      	lsls	r3, r3, #1
 80067ec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80067f0:	441c      	add	r4, r3
 80067f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067f6:	2200      	movs	r2, #0
 80067f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80067fc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006800:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006804:	4642      	mov	r2, r8
 8006806:	464b      	mov	r3, r9
 8006808:	1891      	adds	r1, r2, r2
 800680a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800680c:	415b      	adcs	r3, r3
 800680e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006810:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006814:	4641      	mov	r1, r8
 8006816:	1851      	adds	r1, r2, r1
 8006818:	6339      	str	r1, [r7, #48]	@ 0x30
 800681a:	4649      	mov	r1, r9
 800681c:	414b      	adcs	r3, r1
 800681e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006820:	f04f 0200 	mov.w	r2, #0
 8006824:	f04f 0300 	mov.w	r3, #0
 8006828:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800682c:	4659      	mov	r1, fp
 800682e:	00cb      	lsls	r3, r1, #3
 8006830:	4651      	mov	r1, sl
 8006832:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006836:	4651      	mov	r1, sl
 8006838:	00ca      	lsls	r2, r1, #3
 800683a:	4610      	mov	r0, r2
 800683c:	4619      	mov	r1, r3
 800683e:	4603      	mov	r3, r0
 8006840:	4642      	mov	r2, r8
 8006842:	189b      	adds	r3, r3, r2
 8006844:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006848:	464b      	mov	r3, r9
 800684a:	460a      	mov	r2, r1
 800684c:	eb42 0303 	adc.w	r3, r2, r3
 8006850:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006860:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006864:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006868:	460b      	mov	r3, r1
 800686a:	18db      	adds	r3, r3, r3
 800686c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800686e:	4613      	mov	r3, r2
 8006870:	eb42 0303 	adc.w	r3, r2, r3
 8006874:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006876:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800687a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800687e:	f7fa fa33 	bl	8000ce8 <__aeabi_uldivmod>
 8006882:	4602      	mov	r2, r0
 8006884:	460b      	mov	r3, r1
 8006886:	4b0d      	ldr	r3, [pc, #52]	@ (80068bc <UART_SetConfig+0x2d4>)
 8006888:	fba3 1302 	umull	r1, r3, r3, r2
 800688c:	095b      	lsrs	r3, r3, #5
 800688e:	2164      	movs	r1, #100	@ 0x64
 8006890:	fb01 f303 	mul.w	r3, r1, r3
 8006894:	1ad3      	subs	r3, r2, r3
 8006896:	00db      	lsls	r3, r3, #3
 8006898:	3332      	adds	r3, #50	@ 0x32
 800689a:	4a08      	ldr	r2, [pc, #32]	@ (80068bc <UART_SetConfig+0x2d4>)
 800689c:	fba2 2303 	umull	r2, r3, r2, r3
 80068a0:	095b      	lsrs	r3, r3, #5
 80068a2:	f003 0207 	and.w	r2, r3, #7
 80068a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4422      	add	r2, r4
 80068ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80068b0:	e106      	b.n	8006ac0 <UART_SetConfig+0x4d8>
 80068b2:	bf00      	nop
 80068b4:	40011000 	.word	0x40011000
 80068b8:	40011400 	.word	0x40011400
 80068bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068c4:	2200      	movs	r2, #0
 80068c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80068ca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80068ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80068d2:	4642      	mov	r2, r8
 80068d4:	464b      	mov	r3, r9
 80068d6:	1891      	adds	r1, r2, r2
 80068d8:	6239      	str	r1, [r7, #32]
 80068da:	415b      	adcs	r3, r3
 80068dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80068de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80068e2:	4641      	mov	r1, r8
 80068e4:	1854      	adds	r4, r2, r1
 80068e6:	4649      	mov	r1, r9
 80068e8:	eb43 0501 	adc.w	r5, r3, r1
 80068ec:	f04f 0200 	mov.w	r2, #0
 80068f0:	f04f 0300 	mov.w	r3, #0
 80068f4:	00eb      	lsls	r3, r5, #3
 80068f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80068fa:	00e2      	lsls	r2, r4, #3
 80068fc:	4614      	mov	r4, r2
 80068fe:	461d      	mov	r5, r3
 8006900:	4643      	mov	r3, r8
 8006902:	18e3      	adds	r3, r4, r3
 8006904:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006908:	464b      	mov	r3, r9
 800690a:	eb45 0303 	adc.w	r3, r5, r3
 800690e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800691e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006922:	f04f 0200 	mov.w	r2, #0
 8006926:	f04f 0300 	mov.w	r3, #0
 800692a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800692e:	4629      	mov	r1, r5
 8006930:	008b      	lsls	r3, r1, #2
 8006932:	4621      	mov	r1, r4
 8006934:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006938:	4621      	mov	r1, r4
 800693a:	008a      	lsls	r2, r1, #2
 800693c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006940:	f7fa f9d2 	bl	8000ce8 <__aeabi_uldivmod>
 8006944:	4602      	mov	r2, r0
 8006946:	460b      	mov	r3, r1
 8006948:	4b60      	ldr	r3, [pc, #384]	@ (8006acc <UART_SetConfig+0x4e4>)
 800694a:	fba3 2302 	umull	r2, r3, r3, r2
 800694e:	095b      	lsrs	r3, r3, #5
 8006950:	011c      	lsls	r4, r3, #4
 8006952:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006956:	2200      	movs	r2, #0
 8006958:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800695c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006960:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006964:	4642      	mov	r2, r8
 8006966:	464b      	mov	r3, r9
 8006968:	1891      	adds	r1, r2, r2
 800696a:	61b9      	str	r1, [r7, #24]
 800696c:	415b      	adcs	r3, r3
 800696e:	61fb      	str	r3, [r7, #28]
 8006970:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006974:	4641      	mov	r1, r8
 8006976:	1851      	adds	r1, r2, r1
 8006978:	6139      	str	r1, [r7, #16]
 800697a:	4649      	mov	r1, r9
 800697c:	414b      	adcs	r3, r1
 800697e:	617b      	str	r3, [r7, #20]
 8006980:	f04f 0200 	mov.w	r2, #0
 8006984:	f04f 0300 	mov.w	r3, #0
 8006988:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800698c:	4659      	mov	r1, fp
 800698e:	00cb      	lsls	r3, r1, #3
 8006990:	4651      	mov	r1, sl
 8006992:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006996:	4651      	mov	r1, sl
 8006998:	00ca      	lsls	r2, r1, #3
 800699a:	4610      	mov	r0, r2
 800699c:	4619      	mov	r1, r3
 800699e:	4603      	mov	r3, r0
 80069a0:	4642      	mov	r2, r8
 80069a2:	189b      	adds	r3, r3, r2
 80069a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80069a8:	464b      	mov	r3, r9
 80069aa:	460a      	mov	r2, r1
 80069ac:	eb42 0303 	adc.w	r3, r2, r3
 80069b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80069b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80069be:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80069c0:	f04f 0200 	mov.w	r2, #0
 80069c4:	f04f 0300 	mov.w	r3, #0
 80069c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80069cc:	4649      	mov	r1, r9
 80069ce:	008b      	lsls	r3, r1, #2
 80069d0:	4641      	mov	r1, r8
 80069d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069d6:	4641      	mov	r1, r8
 80069d8:	008a      	lsls	r2, r1, #2
 80069da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80069de:	f7fa f983 	bl	8000ce8 <__aeabi_uldivmod>
 80069e2:	4602      	mov	r2, r0
 80069e4:	460b      	mov	r3, r1
 80069e6:	4611      	mov	r1, r2
 80069e8:	4b38      	ldr	r3, [pc, #224]	@ (8006acc <UART_SetConfig+0x4e4>)
 80069ea:	fba3 2301 	umull	r2, r3, r3, r1
 80069ee:	095b      	lsrs	r3, r3, #5
 80069f0:	2264      	movs	r2, #100	@ 0x64
 80069f2:	fb02 f303 	mul.w	r3, r2, r3
 80069f6:	1acb      	subs	r3, r1, r3
 80069f8:	011b      	lsls	r3, r3, #4
 80069fa:	3332      	adds	r3, #50	@ 0x32
 80069fc:	4a33      	ldr	r2, [pc, #204]	@ (8006acc <UART_SetConfig+0x4e4>)
 80069fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006a02:	095b      	lsrs	r3, r3, #5
 8006a04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006a08:	441c      	add	r4, r3
 8006a0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a0e:	2200      	movs	r2, #0
 8006a10:	673b      	str	r3, [r7, #112]	@ 0x70
 8006a12:	677a      	str	r2, [r7, #116]	@ 0x74
 8006a14:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006a18:	4642      	mov	r2, r8
 8006a1a:	464b      	mov	r3, r9
 8006a1c:	1891      	adds	r1, r2, r2
 8006a1e:	60b9      	str	r1, [r7, #8]
 8006a20:	415b      	adcs	r3, r3
 8006a22:	60fb      	str	r3, [r7, #12]
 8006a24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a28:	4641      	mov	r1, r8
 8006a2a:	1851      	adds	r1, r2, r1
 8006a2c:	6039      	str	r1, [r7, #0]
 8006a2e:	4649      	mov	r1, r9
 8006a30:	414b      	adcs	r3, r1
 8006a32:	607b      	str	r3, [r7, #4]
 8006a34:	f04f 0200 	mov.w	r2, #0
 8006a38:	f04f 0300 	mov.w	r3, #0
 8006a3c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006a40:	4659      	mov	r1, fp
 8006a42:	00cb      	lsls	r3, r1, #3
 8006a44:	4651      	mov	r1, sl
 8006a46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a4a:	4651      	mov	r1, sl
 8006a4c:	00ca      	lsls	r2, r1, #3
 8006a4e:	4610      	mov	r0, r2
 8006a50:	4619      	mov	r1, r3
 8006a52:	4603      	mov	r3, r0
 8006a54:	4642      	mov	r2, r8
 8006a56:	189b      	adds	r3, r3, r2
 8006a58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a5a:	464b      	mov	r3, r9
 8006a5c:	460a      	mov	r2, r1
 8006a5e:	eb42 0303 	adc.w	r3, r2, r3
 8006a62:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a6e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006a70:	f04f 0200 	mov.w	r2, #0
 8006a74:	f04f 0300 	mov.w	r3, #0
 8006a78:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006a7c:	4649      	mov	r1, r9
 8006a7e:	008b      	lsls	r3, r1, #2
 8006a80:	4641      	mov	r1, r8
 8006a82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a86:	4641      	mov	r1, r8
 8006a88:	008a      	lsls	r2, r1, #2
 8006a8a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006a8e:	f7fa f92b 	bl	8000ce8 <__aeabi_uldivmod>
 8006a92:	4602      	mov	r2, r0
 8006a94:	460b      	mov	r3, r1
 8006a96:	4b0d      	ldr	r3, [pc, #52]	@ (8006acc <UART_SetConfig+0x4e4>)
 8006a98:	fba3 1302 	umull	r1, r3, r3, r2
 8006a9c:	095b      	lsrs	r3, r3, #5
 8006a9e:	2164      	movs	r1, #100	@ 0x64
 8006aa0:	fb01 f303 	mul.w	r3, r1, r3
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	011b      	lsls	r3, r3, #4
 8006aa8:	3332      	adds	r3, #50	@ 0x32
 8006aaa:	4a08      	ldr	r2, [pc, #32]	@ (8006acc <UART_SetConfig+0x4e4>)
 8006aac:	fba2 2303 	umull	r2, r3, r2, r3
 8006ab0:	095b      	lsrs	r3, r3, #5
 8006ab2:	f003 020f 	and.w	r2, r3, #15
 8006ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4422      	add	r2, r4
 8006abe:	609a      	str	r2, [r3, #8]
}
 8006ac0:	bf00      	nop
 8006ac2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006acc:	51eb851f 	.word	0x51eb851f

08006ad0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f103 0208 	add.w	r2, r3, #8
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006ae8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f103 0208 	add.w	r2, r3, #8
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f103 0208 	add.w	r2, r3, #8
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006b04:	bf00      	nop
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006b1e:	bf00      	nop
 8006b20:	370c      	adds	r7, #12
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr

08006b2a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b2a:	b480      	push	{r7}
 8006b2c:	b085      	sub	sp, #20
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
 8006b32:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	689a      	ldr	r2, [r3, #8]
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	683a      	ldr	r2, [r7, #0]
 8006b4e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	683a      	ldr	r2, [r7, #0]
 8006b54:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	1c5a      	adds	r2, r3, #1
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	601a      	str	r2, [r3, #0]
}
 8006b66:	bf00      	nop
 8006b68:	3714      	adds	r7, #20
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr

08006b72 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b72:	b480      	push	{r7}
 8006b74:	b085      	sub	sp, #20
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
 8006b7a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b88:	d103      	bne.n	8006b92 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	60fb      	str	r3, [r7, #12]
 8006b90:	e00c      	b.n	8006bac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	3308      	adds	r3, #8
 8006b96:	60fb      	str	r3, [r7, #12]
 8006b98:	e002      	b.n	8006ba0 <vListInsert+0x2e>
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	60fb      	str	r3, [r7, #12]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68ba      	ldr	r2, [r7, #8]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d2f6      	bcs.n	8006b9a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	685a      	ldr	r2, [r3, #4]
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	683a      	ldr	r2, [r7, #0]
 8006bba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	683a      	ldr	r2, [r7, #0]
 8006bc6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	1c5a      	adds	r2, r3, #1
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	601a      	str	r2, [r3, #0]
}
 8006bd8:	bf00      	nop
 8006bda:	3714      	adds	r7, #20
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006be4:	b480      	push	{r7}
 8006be6:	b085      	sub	sp, #20
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	6892      	ldr	r2, [r2, #8]
 8006bfa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	6852      	ldr	r2, [r2, #4]
 8006c04:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d103      	bne.n	8006c18 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	689a      	ldr	r2, [r3, #8]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	1e5a      	subs	r2, r3, #1
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3714      	adds	r7, #20
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d10b      	bne.n	8006c64 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c50:	f383 8811 	msr	BASEPRI, r3
 8006c54:	f3bf 8f6f 	isb	sy
 8006c58:	f3bf 8f4f 	dsb	sy
 8006c5c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006c5e:	bf00      	nop
 8006c60:	bf00      	nop
 8006c62:	e7fd      	b.n	8006c60 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006c64:	f001 fed8 	bl	8008a18 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c70:	68f9      	ldr	r1, [r7, #12]
 8006c72:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006c74:	fb01 f303 	mul.w	r3, r1, r3
 8006c78:	441a      	add	r2, r3
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c94:	3b01      	subs	r3, #1
 8006c96:	68f9      	ldr	r1, [r7, #12]
 8006c98:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006c9a:	fb01 f303 	mul.w	r3, r1, r3
 8006c9e:	441a      	add	r2, r3
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	22ff      	movs	r2, #255	@ 0xff
 8006ca8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	22ff      	movs	r2, #255	@ 0xff
 8006cb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d114      	bne.n	8006ce4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d01a      	beq.n	8006cf8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	3310      	adds	r3, #16
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f001 f98e 	bl	8007fe8 <xTaskRemoveFromEventList>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d012      	beq.n	8006cf8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8006d08 <xQueueGenericReset+0xd0>)
 8006cd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cd8:	601a      	str	r2, [r3, #0]
 8006cda:	f3bf 8f4f 	dsb	sy
 8006cde:	f3bf 8f6f 	isb	sy
 8006ce2:	e009      	b.n	8006cf8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	3310      	adds	r3, #16
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f7ff fef1 	bl	8006ad0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	3324      	adds	r3, #36	@ 0x24
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7ff feec 	bl	8006ad0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006cf8:	f001 fec0 	bl	8008a7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006cfc:	2301      	movs	r3, #1
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	e000ed04 	.word	0xe000ed04

08006d0c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b08a      	sub	sp, #40	@ 0x28
 8006d10:	af02      	add	r7, sp, #8
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	4613      	mov	r3, r2
 8006d18:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d10b      	bne.n	8006d38 <xQueueGenericCreate+0x2c>
	__asm volatile
 8006d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d24:	f383 8811 	msr	BASEPRI, r3
 8006d28:	f3bf 8f6f 	isb	sy
 8006d2c:	f3bf 8f4f 	dsb	sy
 8006d30:	613b      	str	r3, [r7, #16]
}
 8006d32:	bf00      	nop
 8006d34:	bf00      	nop
 8006d36:	e7fd      	b.n	8006d34 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	68ba      	ldr	r2, [r7, #8]
 8006d3c:	fb02 f303 	mul.w	r3, r2, r3
 8006d40:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	3348      	adds	r3, #72	@ 0x48
 8006d46:	4618      	mov	r0, r3
 8006d48:	f001 ff88 	bl	8008c5c <pvPortMalloc>
 8006d4c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d011      	beq.n	8006d78 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	3348      	adds	r3, #72	@ 0x48
 8006d5c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006d66:	79fa      	ldrb	r2, [r7, #7]
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	9300      	str	r3, [sp, #0]
 8006d6c:	4613      	mov	r3, r2
 8006d6e:	697a      	ldr	r2, [r7, #20]
 8006d70:	68b9      	ldr	r1, [r7, #8]
 8006d72:	68f8      	ldr	r0, [r7, #12]
 8006d74:	f000 f805 	bl	8006d82 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006d78:	69bb      	ldr	r3, [r7, #24]
	}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3720      	adds	r7, #32
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b084      	sub	sp, #16
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	60f8      	str	r0, [r7, #12]
 8006d8a:	60b9      	str	r1, [r7, #8]
 8006d8c:	607a      	str	r2, [r7, #4]
 8006d8e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d103      	bne.n	8006d9e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	69ba      	ldr	r2, [r7, #24]
 8006d9a:	601a      	str	r2, [r3, #0]
 8006d9c:	e002      	b.n	8006da4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	68ba      	ldr	r2, [r7, #8]
 8006dae:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006db0:	2101      	movs	r1, #1
 8006db2:	69b8      	ldr	r0, [r7, #24]
 8006db4:	f7ff ff40 	bl	8006c38 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006db8:	bf00      	nop
 8006dba:	3710      	adds	r7, #16
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00e      	beq.n	8006dec <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006de0:	2300      	movs	r3, #0
 8006de2:	2200      	movs	r2, #0
 8006de4:	2100      	movs	r1, #0
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 f81c 	bl	8006e24 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006dec:	bf00      	nop
 8006dee:	3708      	adds	r7, #8
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b086      	sub	sp, #24
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	617b      	str	r3, [r7, #20]
 8006e02:	2300      	movs	r3, #0
 8006e04:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006e06:	79fb      	ldrb	r3, [r7, #7]
 8006e08:	461a      	mov	r2, r3
 8006e0a:	6939      	ldr	r1, [r7, #16]
 8006e0c:	6978      	ldr	r0, [r7, #20]
 8006e0e:	f7ff ff7d 	bl	8006d0c <xQueueGenericCreate>
 8006e12:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	f7ff ffd3 	bl	8006dc0 <prvInitialiseMutex>

		return xNewQueue;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
	}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3718      	adds	r7, #24
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b08e      	sub	sp, #56	@ 0x38
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	60b9      	str	r1, [r7, #8]
 8006e2e:	607a      	str	r2, [r7, #4]
 8006e30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006e32:	2300      	movs	r3, #0
 8006e34:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d10b      	bne.n	8006e58 <xQueueGenericSend+0x34>
	__asm volatile
 8006e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e44:	f383 8811 	msr	BASEPRI, r3
 8006e48:	f3bf 8f6f 	isb	sy
 8006e4c:	f3bf 8f4f 	dsb	sy
 8006e50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006e52:	bf00      	nop
 8006e54:	bf00      	nop
 8006e56:	e7fd      	b.n	8006e54 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d103      	bne.n	8006e66 <xQueueGenericSend+0x42>
 8006e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d101      	bne.n	8006e6a <xQueueGenericSend+0x46>
 8006e66:	2301      	movs	r3, #1
 8006e68:	e000      	b.n	8006e6c <xQueueGenericSend+0x48>
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d10b      	bne.n	8006e88 <xQueueGenericSend+0x64>
	__asm volatile
 8006e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e74:	f383 8811 	msr	BASEPRI, r3
 8006e78:	f3bf 8f6f 	isb	sy
 8006e7c:	f3bf 8f4f 	dsb	sy
 8006e80:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006e82:	bf00      	nop
 8006e84:	bf00      	nop
 8006e86:	e7fd      	b.n	8006e84 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	d103      	bne.n	8006e96 <xQueueGenericSend+0x72>
 8006e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d101      	bne.n	8006e9a <xQueueGenericSend+0x76>
 8006e96:	2301      	movs	r3, #1
 8006e98:	e000      	b.n	8006e9c <xQueueGenericSend+0x78>
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d10b      	bne.n	8006eb8 <xQueueGenericSend+0x94>
	__asm volatile
 8006ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea4:	f383 8811 	msr	BASEPRI, r3
 8006ea8:	f3bf 8f6f 	isb	sy
 8006eac:	f3bf 8f4f 	dsb	sy
 8006eb0:	623b      	str	r3, [r7, #32]
}
 8006eb2:	bf00      	nop
 8006eb4:	bf00      	nop
 8006eb6:	e7fd      	b.n	8006eb4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006eb8:	f001 fa56 	bl	8008368 <xTaskGetSchedulerState>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d102      	bne.n	8006ec8 <xQueueGenericSend+0xa4>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d101      	bne.n	8006ecc <xQueueGenericSend+0xa8>
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e000      	b.n	8006ece <xQueueGenericSend+0xaa>
 8006ecc:	2300      	movs	r3, #0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d10b      	bne.n	8006eea <xQueueGenericSend+0xc6>
	__asm volatile
 8006ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ed6:	f383 8811 	msr	BASEPRI, r3
 8006eda:	f3bf 8f6f 	isb	sy
 8006ede:	f3bf 8f4f 	dsb	sy
 8006ee2:	61fb      	str	r3, [r7, #28]
}
 8006ee4:	bf00      	nop
 8006ee6:	bf00      	nop
 8006ee8:	e7fd      	b.n	8006ee6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006eea:	f001 fd95 	bl	8008a18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d302      	bcc.n	8006f00 <xQueueGenericSend+0xdc>
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d129      	bne.n	8006f54 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f00:	683a      	ldr	r2, [r7, #0]
 8006f02:	68b9      	ldr	r1, [r7, #8]
 8006f04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f06:	f000 fb37 	bl	8007578 <prvCopyDataToQueue>
 8006f0a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d010      	beq.n	8006f36 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f16:	3324      	adds	r3, #36	@ 0x24
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f001 f865 	bl	8007fe8 <xTaskRemoveFromEventList>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d013      	beq.n	8006f4c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006f24:	4b3f      	ldr	r3, [pc, #252]	@ (8007024 <xQueueGenericSend+0x200>)
 8006f26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f2a:	601a      	str	r2, [r3, #0]
 8006f2c:	f3bf 8f4f 	dsb	sy
 8006f30:	f3bf 8f6f 	isb	sy
 8006f34:	e00a      	b.n	8006f4c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d007      	beq.n	8006f4c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006f3c:	4b39      	ldr	r3, [pc, #228]	@ (8007024 <xQueueGenericSend+0x200>)
 8006f3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f42:	601a      	str	r2, [r3, #0]
 8006f44:	f3bf 8f4f 	dsb	sy
 8006f48:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006f4c:	f001 fd96 	bl	8008a7c <vPortExitCritical>
				return pdPASS;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e063      	b.n	800701c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d103      	bne.n	8006f62 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f5a:	f001 fd8f 	bl	8008a7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	e05c      	b.n	800701c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d106      	bne.n	8006f76 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f68:	f107 0314 	add.w	r3, r7, #20
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f001 f89f 	bl	80080b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f72:	2301      	movs	r3, #1
 8006f74:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f76:	f001 fd81 	bl	8008a7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f7a:	f000 fe3d 	bl	8007bf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f7e:	f001 fd4b 	bl	8008a18 <vPortEnterCritical>
 8006f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f88:	b25b      	sxtb	r3, r3
 8006f8a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f8e:	d103      	bne.n	8006f98 <xQueueGenericSend+0x174>
 8006f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f92:	2200      	movs	r2, #0
 8006f94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f9e:	b25b      	sxtb	r3, r3
 8006fa0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006fa4:	d103      	bne.n	8006fae <xQueueGenericSend+0x18a>
 8006fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006fae:	f001 fd65 	bl	8008a7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006fb2:	1d3a      	adds	r2, r7, #4
 8006fb4:	f107 0314 	add.w	r3, r7, #20
 8006fb8:	4611      	mov	r1, r2
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f001 f88e 	bl	80080dc <xTaskCheckForTimeOut>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d124      	bne.n	8007010 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006fc6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006fc8:	f000 fbce 	bl	8007768 <prvIsQueueFull>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d018      	beq.n	8007004 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd4:	3310      	adds	r3, #16
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	4611      	mov	r1, r2
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f000 ffde 	bl	8007f9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006fe0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006fe2:	f000 fb59 	bl	8007698 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006fe6:	f000 fe15 	bl	8007c14 <xTaskResumeAll>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	f47f af7c 	bne.w	8006eea <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8007024 <xQueueGenericSend+0x200>)
 8006ff4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ff8:	601a      	str	r2, [r3, #0]
 8006ffa:	f3bf 8f4f 	dsb	sy
 8006ffe:	f3bf 8f6f 	isb	sy
 8007002:	e772      	b.n	8006eea <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007004:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007006:	f000 fb47 	bl	8007698 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800700a:	f000 fe03 	bl	8007c14 <xTaskResumeAll>
 800700e:	e76c      	b.n	8006eea <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007010:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007012:	f000 fb41 	bl	8007698 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007016:	f000 fdfd 	bl	8007c14 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800701a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800701c:	4618      	mov	r0, r3
 800701e:	3738      	adds	r7, #56	@ 0x38
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}
 8007024:	e000ed04 	.word	0xe000ed04

08007028 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b090      	sub	sp, #64	@ 0x40
 800702c:	af00      	add	r7, sp, #0
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	607a      	str	r2, [r7, #4]
 8007034:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800703a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800703c:	2b00      	cmp	r3, #0
 800703e:	d10b      	bne.n	8007058 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007044:	f383 8811 	msr	BASEPRI, r3
 8007048:	f3bf 8f6f 	isb	sy
 800704c:	f3bf 8f4f 	dsb	sy
 8007050:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007052:	bf00      	nop
 8007054:	bf00      	nop
 8007056:	e7fd      	b.n	8007054 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d103      	bne.n	8007066 <xQueueGenericSendFromISR+0x3e>
 800705e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007062:	2b00      	cmp	r3, #0
 8007064:	d101      	bne.n	800706a <xQueueGenericSendFromISR+0x42>
 8007066:	2301      	movs	r3, #1
 8007068:	e000      	b.n	800706c <xQueueGenericSendFromISR+0x44>
 800706a:	2300      	movs	r3, #0
 800706c:	2b00      	cmp	r3, #0
 800706e:	d10b      	bne.n	8007088 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007074:	f383 8811 	msr	BASEPRI, r3
 8007078:	f3bf 8f6f 	isb	sy
 800707c:	f3bf 8f4f 	dsb	sy
 8007080:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007082:	bf00      	nop
 8007084:	bf00      	nop
 8007086:	e7fd      	b.n	8007084 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	2b02      	cmp	r3, #2
 800708c:	d103      	bne.n	8007096 <xQueueGenericSendFromISR+0x6e>
 800708e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007090:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007092:	2b01      	cmp	r3, #1
 8007094:	d101      	bne.n	800709a <xQueueGenericSendFromISR+0x72>
 8007096:	2301      	movs	r3, #1
 8007098:	e000      	b.n	800709c <xQueueGenericSendFromISR+0x74>
 800709a:	2300      	movs	r3, #0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d10b      	bne.n	80070b8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80070a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070a4:	f383 8811 	msr	BASEPRI, r3
 80070a8:	f3bf 8f6f 	isb	sy
 80070ac:	f3bf 8f4f 	dsb	sy
 80070b0:	623b      	str	r3, [r7, #32]
}
 80070b2:	bf00      	nop
 80070b4:	bf00      	nop
 80070b6:	e7fd      	b.n	80070b4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80070b8:	f001 fd8e 	bl	8008bd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80070bc:	f3ef 8211 	mrs	r2, BASEPRI
 80070c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070c4:	f383 8811 	msr	BASEPRI, r3
 80070c8:	f3bf 8f6f 	isb	sy
 80070cc:	f3bf 8f4f 	dsb	sy
 80070d0:	61fa      	str	r2, [r7, #28]
 80070d2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80070d4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80070d6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80070d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d302      	bcc.n	80070ea <xQueueGenericSendFromISR+0xc2>
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	2b02      	cmp	r3, #2
 80070e8:	d12f      	bne.n	800714a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80070ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80070f0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80070fa:	683a      	ldr	r2, [r7, #0]
 80070fc:	68b9      	ldr	r1, [r7, #8]
 80070fe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007100:	f000 fa3a 	bl	8007578 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007104:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007108:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800710c:	d112      	bne.n	8007134 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800710e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007112:	2b00      	cmp	r3, #0
 8007114:	d016      	beq.n	8007144 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007118:	3324      	adds	r3, #36	@ 0x24
 800711a:	4618      	mov	r0, r3
 800711c:	f000 ff64 	bl	8007fe8 <xTaskRemoveFromEventList>
 8007120:	4603      	mov	r3, r0
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00e      	beq.n	8007144 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00b      	beq.n	8007144 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	601a      	str	r2, [r3, #0]
 8007132:	e007      	b.n	8007144 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007134:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007138:	3301      	adds	r3, #1
 800713a:	b2db      	uxtb	r3, r3
 800713c:	b25a      	sxtb	r2, r3
 800713e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007140:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007144:	2301      	movs	r3, #1
 8007146:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007148:	e001      	b.n	800714e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800714a:	2300      	movs	r3, #0
 800714c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800714e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007150:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007158:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800715a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800715c:	4618      	mov	r0, r3
 800715e:	3740      	adds	r7, #64	@ 0x40
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b08c      	sub	sp, #48	@ 0x30
 8007168:	af00      	add	r7, sp, #0
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007170:	2300      	movs	r3, #0
 8007172:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800717a:	2b00      	cmp	r3, #0
 800717c:	d10b      	bne.n	8007196 <xQueueReceive+0x32>
	__asm volatile
 800717e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007182:	f383 8811 	msr	BASEPRI, r3
 8007186:	f3bf 8f6f 	isb	sy
 800718a:	f3bf 8f4f 	dsb	sy
 800718e:	623b      	str	r3, [r7, #32]
}
 8007190:	bf00      	nop
 8007192:	bf00      	nop
 8007194:	e7fd      	b.n	8007192 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d103      	bne.n	80071a4 <xQueueReceive+0x40>
 800719c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800719e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d101      	bne.n	80071a8 <xQueueReceive+0x44>
 80071a4:	2301      	movs	r3, #1
 80071a6:	e000      	b.n	80071aa <xQueueReceive+0x46>
 80071a8:	2300      	movs	r3, #0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d10b      	bne.n	80071c6 <xQueueReceive+0x62>
	__asm volatile
 80071ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071b2:	f383 8811 	msr	BASEPRI, r3
 80071b6:	f3bf 8f6f 	isb	sy
 80071ba:	f3bf 8f4f 	dsb	sy
 80071be:	61fb      	str	r3, [r7, #28]
}
 80071c0:	bf00      	nop
 80071c2:	bf00      	nop
 80071c4:	e7fd      	b.n	80071c2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071c6:	f001 f8cf 	bl	8008368 <xTaskGetSchedulerState>
 80071ca:	4603      	mov	r3, r0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d102      	bne.n	80071d6 <xQueueReceive+0x72>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d101      	bne.n	80071da <xQueueReceive+0x76>
 80071d6:	2301      	movs	r3, #1
 80071d8:	e000      	b.n	80071dc <xQueueReceive+0x78>
 80071da:	2300      	movs	r3, #0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d10b      	bne.n	80071f8 <xQueueReceive+0x94>
	__asm volatile
 80071e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e4:	f383 8811 	msr	BASEPRI, r3
 80071e8:	f3bf 8f6f 	isb	sy
 80071ec:	f3bf 8f4f 	dsb	sy
 80071f0:	61bb      	str	r3, [r7, #24]
}
 80071f2:	bf00      	nop
 80071f4:	bf00      	nop
 80071f6:	e7fd      	b.n	80071f4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80071f8:	f001 fc0e 	bl	8008a18 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007200:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007204:	2b00      	cmp	r3, #0
 8007206:	d01f      	beq.n	8007248 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007208:	68b9      	ldr	r1, [r7, #8]
 800720a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800720c:	f000 fa1e 	bl	800764c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007212:	1e5a      	subs	r2, r3, #1
 8007214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007216:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00f      	beq.n	8007240 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007222:	3310      	adds	r3, #16
 8007224:	4618      	mov	r0, r3
 8007226:	f000 fedf 	bl	8007fe8 <xTaskRemoveFromEventList>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d007      	beq.n	8007240 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007230:	4b3c      	ldr	r3, [pc, #240]	@ (8007324 <xQueueReceive+0x1c0>)
 8007232:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007236:	601a      	str	r2, [r3, #0]
 8007238:	f3bf 8f4f 	dsb	sy
 800723c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007240:	f001 fc1c 	bl	8008a7c <vPortExitCritical>
				return pdPASS;
 8007244:	2301      	movs	r3, #1
 8007246:	e069      	b.n	800731c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d103      	bne.n	8007256 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800724e:	f001 fc15 	bl	8008a7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007252:	2300      	movs	r3, #0
 8007254:	e062      	b.n	800731c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007258:	2b00      	cmp	r3, #0
 800725a:	d106      	bne.n	800726a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800725c:	f107 0310 	add.w	r3, r7, #16
 8007260:	4618      	mov	r0, r3
 8007262:	f000 ff25 	bl	80080b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007266:	2301      	movs	r3, #1
 8007268:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800726a:	f001 fc07 	bl	8008a7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800726e:	f000 fcc3 	bl	8007bf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007272:	f001 fbd1 	bl	8008a18 <vPortEnterCritical>
 8007276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007278:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800727c:	b25b      	sxtb	r3, r3
 800727e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007282:	d103      	bne.n	800728c <xQueueReceive+0x128>
 8007284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007286:	2200      	movs	r2, #0
 8007288:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800728c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800728e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007292:	b25b      	sxtb	r3, r3
 8007294:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007298:	d103      	bne.n	80072a2 <xQueueReceive+0x13e>
 800729a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800729c:	2200      	movs	r2, #0
 800729e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80072a2:	f001 fbeb 	bl	8008a7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072a6:	1d3a      	adds	r2, r7, #4
 80072a8:	f107 0310 	add.w	r3, r7, #16
 80072ac:	4611      	mov	r1, r2
 80072ae:	4618      	mov	r0, r3
 80072b0:	f000 ff14 	bl	80080dc <xTaskCheckForTimeOut>
 80072b4:	4603      	mov	r3, r0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d123      	bne.n	8007302 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072bc:	f000 fa3e 	bl	800773c <prvIsQueueEmpty>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d017      	beq.n	80072f6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80072c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072c8:	3324      	adds	r3, #36	@ 0x24
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	4611      	mov	r1, r2
 80072ce:	4618      	mov	r0, r3
 80072d0:	f000 fe64 	bl	8007f9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80072d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072d6:	f000 f9df 	bl	8007698 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80072da:	f000 fc9b 	bl	8007c14 <xTaskResumeAll>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d189      	bne.n	80071f8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80072e4:	4b0f      	ldr	r3, [pc, #60]	@ (8007324 <xQueueReceive+0x1c0>)
 80072e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072ea:	601a      	str	r2, [r3, #0]
 80072ec:	f3bf 8f4f 	dsb	sy
 80072f0:	f3bf 8f6f 	isb	sy
 80072f4:	e780      	b.n	80071f8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80072f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072f8:	f000 f9ce 	bl	8007698 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80072fc:	f000 fc8a 	bl	8007c14 <xTaskResumeAll>
 8007300:	e77a      	b.n	80071f8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007302:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007304:	f000 f9c8 	bl	8007698 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007308:	f000 fc84 	bl	8007c14 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800730c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800730e:	f000 fa15 	bl	800773c <prvIsQueueEmpty>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	f43f af6f 	beq.w	80071f8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800731a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800731c:	4618      	mov	r0, r3
 800731e:	3730      	adds	r7, #48	@ 0x30
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}
 8007324:	e000ed04 	.word	0xe000ed04

08007328 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b08e      	sub	sp, #56	@ 0x38
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007332:	2300      	movs	r3, #0
 8007334:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800733a:	2300      	movs	r3, #0
 800733c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800733e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007340:	2b00      	cmp	r3, #0
 8007342:	d10b      	bne.n	800735c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8007344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007348:	f383 8811 	msr	BASEPRI, r3
 800734c:	f3bf 8f6f 	isb	sy
 8007350:	f3bf 8f4f 	dsb	sy
 8007354:	623b      	str	r3, [r7, #32]
}
 8007356:	bf00      	nop
 8007358:	bf00      	nop
 800735a:	e7fd      	b.n	8007358 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800735c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800735e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007360:	2b00      	cmp	r3, #0
 8007362:	d00b      	beq.n	800737c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8007364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007368:	f383 8811 	msr	BASEPRI, r3
 800736c:	f3bf 8f6f 	isb	sy
 8007370:	f3bf 8f4f 	dsb	sy
 8007374:	61fb      	str	r3, [r7, #28]
}
 8007376:	bf00      	nop
 8007378:	bf00      	nop
 800737a:	e7fd      	b.n	8007378 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800737c:	f000 fff4 	bl	8008368 <xTaskGetSchedulerState>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d102      	bne.n	800738c <xQueueSemaphoreTake+0x64>
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d101      	bne.n	8007390 <xQueueSemaphoreTake+0x68>
 800738c:	2301      	movs	r3, #1
 800738e:	e000      	b.n	8007392 <xQueueSemaphoreTake+0x6a>
 8007390:	2300      	movs	r3, #0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d10b      	bne.n	80073ae <xQueueSemaphoreTake+0x86>
	__asm volatile
 8007396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800739a:	f383 8811 	msr	BASEPRI, r3
 800739e:	f3bf 8f6f 	isb	sy
 80073a2:	f3bf 8f4f 	dsb	sy
 80073a6:	61bb      	str	r3, [r7, #24]
}
 80073a8:	bf00      	nop
 80073aa:	bf00      	nop
 80073ac:	e7fd      	b.n	80073aa <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80073ae:	f001 fb33 	bl	8008a18 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80073b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073b6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80073b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d024      	beq.n	8007408 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80073be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073c0:	1e5a      	subs	r2, r3, #1
 80073c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073c4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80073c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d104      	bne.n	80073d8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80073ce:	f001 f977 	bl	80086c0 <pvTaskIncrementMutexHeldCount>
 80073d2:	4602      	mov	r2, r0
 80073d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073d6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d00f      	beq.n	8007400 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073e2:	3310      	adds	r3, #16
 80073e4:	4618      	mov	r0, r3
 80073e6:	f000 fdff 	bl	8007fe8 <xTaskRemoveFromEventList>
 80073ea:	4603      	mov	r3, r0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d007      	beq.n	8007400 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80073f0:	4b54      	ldr	r3, [pc, #336]	@ (8007544 <xQueueSemaphoreTake+0x21c>)
 80073f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073f6:	601a      	str	r2, [r3, #0]
 80073f8:	f3bf 8f4f 	dsb	sy
 80073fc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007400:	f001 fb3c 	bl	8008a7c <vPortExitCritical>
				return pdPASS;
 8007404:	2301      	movs	r3, #1
 8007406:	e098      	b.n	800753a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d112      	bne.n	8007434 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800740e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007410:	2b00      	cmp	r3, #0
 8007412:	d00b      	beq.n	800742c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8007414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007418:	f383 8811 	msr	BASEPRI, r3
 800741c:	f3bf 8f6f 	isb	sy
 8007420:	f3bf 8f4f 	dsb	sy
 8007424:	617b      	str	r3, [r7, #20]
}
 8007426:	bf00      	nop
 8007428:	bf00      	nop
 800742a:	e7fd      	b.n	8007428 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800742c:	f001 fb26 	bl	8008a7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007430:	2300      	movs	r3, #0
 8007432:	e082      	b.n	800753a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007436:	2b00      	cmp	r3, #0
 8007438:	d106      	bne.n	8007448 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800743a:	f107 030c 	add.w	r3, r7, #12
 800743e:	4618      	mov	r0, r3
 8007440:	f000 fe36 	bl	80080b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007444:	2301      	movs	r3, #1
 8007446:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007448:	f001 fb18 	bl	8008a7c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800744c:	f000 fbd4 	bl	8007bf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007450:	f001 fae2 	bl	8008a18 <vPortEnterCritical>
 8007454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007456:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800745a:	b25b      	sxtb	r3, r3
 800745c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007460:	d103      	bne.n	800746a <xQueueSemaphoreTake+0x142>
 8007462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007464:	2200      	movs	r2, #0
 8007466:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800746a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800746c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007470:	b25b      	sxtb	r3, r3
 8007472:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007476:	d103      	bne.n	8007480 <xQueueSemaphoreTake+0x158>
 8007478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800747a:	2200      	movs	r2, #0
 800747c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007480:	f001 fafc 	bl	8008a7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007484:	463a      	mov	r2, r7
 8007486:	f107 030c 	add.w	r3, r7, #12
 800748a:	4611      	mov	r1, r2
 800748c:	4618      	mov	r0, r3
 800748e:	f000 fe25 	bl	80080dc <xTaskCheckForTimeOut>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d132      	bne.n	80074fe <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007498:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800749a:	f000 f94f 	bl	800773c <prvIsQueueEmpty>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d026      	beq.n	80074f2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80074a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d109      	bne.n	80074c0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80074ac:	f001 fab4 	bl	8008a18 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80074b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	4618      	mov	r0, r3
 80074b6:	f000 ff75 	bl	80083a4 <xTaskPriorityInherit>
 80074ba:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80074bc:	f001 fade 	bl	8008a7c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80074c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074c2:	3324      	adds	r3, #36	@ 0x24
 80074c4:	683a      	ldr	r2, [r7, #0]
 80074c6:	4611      	mov	r1, r2
 80074c8:	4618      	mov	r0, r3
 80074ca:	f000 fd67 	bl	8007f9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80074ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80074d0:	f000 f8e2 	bl	8007698 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80074d4:	f000 fb9e 	bl	8007c14 <xTaskResumeAll>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	f47f af67 	bne.w	80073ae <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80074e0:	4b18      	ldr	r3, [pc, #96]	@ (8007544 <xQueueSemaphoreTake+0x21c>)
 80074e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074e6:	601a      	str	r2, [r3, #0]
 80074e8:	f3bf 8f4f 	dsb	sy
 80074ec:	f3bf 8f6f 	isb	sy
 80074f0:	e75d      	b.n	80073ae <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80074f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80074f4:	f000 f8d0 	bl	8007698 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80074f8:	f000 fb8c 	bl	8007c14 <xTaskResumeAll>
 80074fc:	e757      	b.n	80073ae <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80074fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007500:	f000 f8ca 	bl	8007698 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007504:	f000 fb86 	bl	8007c14 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007508:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800750a:	f000 f917 	bl	800773c <prvIsQueueEmpty>
 800750e:	4603      	mov	r3, r0
 8007510:	2b00      	cmp	r3, #0
 8007512:	f43f af4c 	beq.w	80073ae <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00d      	beq.n	8007538 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800751c:	f001 fa7c 	bl	8008a18 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007520:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007522:	f000 f811 	bl	8007548 <prvGetDisinheritPriorityAfterTimeout>
 8007526:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800752e:	4618      	mov	r0, r3
 8007530:	f001 f836 	bl	80085a0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007534:	f001 faa2 	bl	8008a7c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007538:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800753a:	4618      	mov	r0, r3
 800753c:	3738      	adds	r7, #56	@ 0x38
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	e000ed04 	.word	0xe000ed04

08007548 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007548:	b480      	push	{r7}
 800754a:	b085      	sub	sp, #20
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007554:	2b00      	cmp	r3, #0
 8007556:	d006      	beq.n	8007566 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f1c3 0307 	rsb	r3, r3, #7
 8007562:	60fb      	str	r3, [r7, #12]
 8007564:	e001      	b.n	800756a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007566:	2300      	movs	r3, #0
 8007568:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800756a:	68fb      	ldr	r3, [r7, #12]
	}
 800756c:	4618      	mov	r0, r3
 800756e:	3714      	adds	r7, #20
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b086      	sub	sp, #24
 800757c:	af00      	add	r7, sp, #0
 800757e:	60f8      	str	r0, [r7, #12]
 8007580:	60b9      	str	r1, [r7, #8]
 8007582:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007584:	2300      	movs	r3, #0
 8007586:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800758c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007592:	2b00      	cmp	r3, #0
 8007594:	d10d      	bne.n	80075b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d14d      	bne.n	800763a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	4618      	mov	r0, r3
 80075a4:	f000 ff74 	bl	8008490 <xTaskPriorityDisinherit>
 80075a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	609a      	str	r2, [r3, #8]
 80075b0:	e043      	b.n	800763a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d119      	bne.n	80075ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6858      	ldr	r0, [r3, #4]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075c0:	461a      	mov	r2, r3
 80075c2:	68b9      	ldr	r1, [r7, #8]
 80075c4:	f003 fbf2 	bl	800adac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	685a      	ldr	r2, [r3, #4]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075d0:	441a      	add	r2, r3
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	685a      	ldr	r2, [r3, #4]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d32b      	bcc.n	800763a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	605a      	str	r2, [r3, #4]
 80075ea:	e026      	b.n	800763a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	68d8      	ldr	r0, [r3, #12]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075f4:	461a      	mov	r2, r3
 80075f6:	68b9      	ldr	r1, [r7, #8]
 80075f8:	f003 fbd8 	bl	800adac <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	68da      	ldr	r2, [r3, #12]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007604:	425b      	negs	r3, r3
 8007606:	441a      	add	r2, r3
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	68da      	ldr	r2, [r3, #12]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	429a      	cmp	r2, r3
 8007616:	d207      	bcs.n	8007628 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	689a      	ldr	r2, [r3, #8]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007620:	425b      	negs	r3, r3
 8007622:	441a      	add	r2, r3
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2b02      	cmp	r3, #2
 800762c:	d105      	bne.n	800763a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d002      	beq.n	800763a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	3b01      	subs	r3, #1
 8007638:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	1c5a      	adds	r2, r3, #1
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007642:	697b      	ldr	r3, [r7, #20]
}
 8007644:	4618      	mov	r0, r3
 8007646:	3718      	adds	r7, #24
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800765a:	2b00      	cmp	r3, #0
 800765c:	d018      	beq.n	8007690 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	68da      	ldr	r2, [r3, #12]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007666:	441a      	add	r2, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	68da      	ldr	r2, [r3, #12]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	429a      	cmp	r2, r3
 8007676:	d303      	bcc.n	8007680 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	68d9      	ldr	r1, [r3, #12]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007688:	461a      	mov	r2, r3
 800768a:	6838      	ldr	r0, [r7, #0]
 800768c:	f003 fb8e 	bl	800adac <memcpy>
	}
}
 8007690:	bf00      	nop
 8007692:	3708      	adds	r7, #8
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80076a0:	f001 f9ba 	bl	8008a18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80076aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076ac:	e011      	b.n	80076d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d012      	beq.n	80076dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	3324      	adds	r3, #36	@ 0x24
 80076ba:	4618      	mov	r0, r3
 80076bc:	f000 fc94 	bl	8007fe8 <xTaskRemoveFromEventList>
 80076c0:	4603      	mov	r3, r0
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d001      	beq.n	80076ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80076c6:	f000 fd6d 	bl	80081a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80076ca:	7bfb      	ldrb	r3, [r7, #15]
 80076cc:	3b01      	subs	r3, #1
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	dce9      	bgt.n	80076ae <prvUnlockQueue+0x16>
 80076da:	e000      	b.n	80076de <prvUnlockQueue+0x46>
					break;
 80076dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	22ff      	movs	r2, #255	@ 0xff
 80076e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80076e6:	f001 f9c9 	bl	8008a7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80076ea:	f001 f995 	bl	8008a18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80076f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80076f6:	e011      	b.n	800771c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	691b      	ldr	r3, [r3, #16]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d012      	beq.n	8007726 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	3310      	adds	r3, #16
 8007704:	4618      	mov	r0, r3
 8007706:	f000 fc6f 	bl	8007fe8 <xTaskRemoveFromEventList>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d001      	beq.n	8007714 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007710:	f000 fd48 	bl	80081a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007714:	7bbb      	ldrb	r3, [r7, #14]
 8007716:	3b01      	subs	r3, #1
 8007718:	b2db      	uxtb	r3, r3
 800771a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800771c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007720:	2b00      	cmp	r3, #0
 8007722:	dce9      	bgt.n	80076f8 <prvUnlockQueue+0x60>
 8007724:	e000      	b.n	8007728 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007726:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	22ff      	movs	r2, #255	@ 0xff
 800772c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007730:	f001 f9a4 	bl	8008a7c <vPortExitCritical>
}
 8007734:	bf00      	nop
 8007736:	3710      	adds	r7, #16
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007744:	f001 f968 	bl	8008a18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800774c:	2b00      	cmp	r3, #0
 800774e:	d102      	bne.n	8007756 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007750:	2301      	movs	r3, #1
 8007752:	60fb      	str	r3, [r7, #12]
 8007754:	e001      	b.n	800775a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007756:	2300      	movs	r3, #0
 8007758:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800775a:	f001 f98f 	bl	8008a7c <vPortExitCritical>

	return xReturn;
 800775e:	68fb      	ldr	r3, [r7, #12]
}
 8007760:	4618      	mov	r0, r3
 8007762:	3710      	adds	r7, #16
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007770:	f001 f952 	bl	8008a18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800777c:	429a      	cmp	r2, r3
 800777e:	d102      	bne.n	8007786 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007780:	2301      	movs	r3, #1
 8007782:	60fb      	str	r3, [r7, #12]
 8007784:	e001      	b.n	800778a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007786:	2300      	movs	r3, #0
 8007788:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800778a:	f001 f977 	bl	8008a7c <vPortExitCritical>

	return xReturn;
 800778e:	68fb      	ldr	r3, [r7, #12]
}
 8007790:	4618      	mov	r0, r3
 8007792:	3710      	adds	r7, #16
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007798:	b580      	push	{r7, lr}
 800779a:	b08e      	sub	sp, #56	@ 0x38
 800779c:	af04      	add	r7, sp, #16
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	607a      	str	r2, [r7, #4]
 80077a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80077a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d10b      	bne.n	80077c4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80077ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077b0:	f383 8811 	msr	BASEPRI, r3
 80077b4:	f3bf 8f6f 	isb	sy
 80077b8:	f3bf 8f4f 	dsb	sy
 80077bc:	623b      	str	r3, [r7, #32]
}
 80077be:	bf00      	nop
 80077c0:	bf00      	nop
 80077c2:	e7fd      	b.n	80077c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80077c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d10b      	bne.n	80077e2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80077ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ce:	f383 8811 	msr	BASEPRI, r3
 80077d2:	f3bf 8f6f 	isb	sy
 80077d6:	f3bf 8f4f 	dsb	sy
 80077da:	61fb      	str	r3, [r7, #28]
}
 80077dc:	bf00      	nop
 80077de:	bf00      	nop
 80077e0:	e7fd      	b.n	80077de <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80077e2:	2354      	movs	r3, #84	@ 0x54
 80077e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	2b54      	cmp	r3, #84	@ 0x54
 80077ea:	d00b      	beq.n	8007804 <xTaskCreateStatic+0x6c>
	__asm volatile
 80077ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077f0:	f383 8811 	msr	BASEPRI, r3
 80077f4:	f3bf 8f6f 	isb	sy
 80077f8:	f3bf 8f4f 	dsb	sy
 80077fc:	61bb      	str	r3, [r7, #24]
}
 80077fe:	bf00      	nop
 8007800:	bf00      	nop
 8007802:	e7fd      	b.n	8007800 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007804:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007808:	2b00      	cmp	r3, #0
 800780a:	d01e      	beq.n	800784a <xTaskCreateStatic+0xb2>
 800780c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800780e:	2b00      	cmp	r3, #0
 8007810:	d01b      	beq.n	800784a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007814:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007818:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800781a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800781c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800781e:	2202      	movs	r2, #2
 8007820:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007824:	2300      	movs	r3, #0
 8007826:	9303      	str	r3, [sp, #12]
 8007828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800782a:	9302      	str	r3, [sp, #8]
 800782c:	f107 0314 	add.w	r3, r7, #20
 8007830:	9301      	str	r3, [sp, #4]
 8007832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007834:	9300      	str	r3, [sp, #0]
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	68b9      	ldr	r1, [r7, #8]
 800783c:	68f8      	ldr	r0, [r7, #12]
 800783e:	f000 f850 	bl	80078e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007842:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007844:	f000 f8d6 	bl	80079f4 <prvAddNewTaskToReadyList>
 8007848:	e001      	b.n	800784e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800784a:	2300      	movs	r3, #0
 800784c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800784e:	697b      	ldr	r3, [r7, #20]
	}
 8007850:	4618      	mov	r0, r3
 8007852:	3728      	adds	r7, #40	@ 0x28
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007858:	b580      	push	{r7, lr}
 800785a:	b08c      	sub	sp, #48	@ 0x30
 800785c:	af04      	add	r7, sp, #16
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	60b9      	str	r1, [r7, #8]
 8007862:	603b      	str	r3, [r7, #0]
 8007864:	4613      	mov	r3, r2
 8007866:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007868:	88fb      	ldrh	r3, [r7, #6]
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	4618      	mov	r0, r3
 800786e:	f001 f9f5 	bl	8008c5c <pvPortMalloc>
 8007872:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d00e      	beq.n	8007898 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800787a:	2054      	movs	r0, #84	@ 0x54
 800787c:	f001 f9ee 	bl	8008c5c <pvPortMalloc>
 8007880:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d003      	beq.n	8007890 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	697a      	ldr	r2, [r7, #20]
 800788c:	631a      	str	r2, [r3, #48]	@ 0x30
 800788e:	e005      	b.n	800789c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007890:	6978      	ldr	r0, [r7, #20]
 8007892:	f001 fab1 	bl	8008df8 <vPortFree>
 8007896:	e001      	b.n	800789c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007898:	2300      	movs	r3, #0
 800789a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d017      	beq.n	80078d2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80078aa:	88fa      	ldrh	r2, [r7, #6]
 80078ac:	2300      	movs	r3, #0
 80078ae:	9303      	str	r3, [sp, #12]
 80078b0:	69fb      	ldr	r3, [r7, #28]
 80078b2:	9302      	str	r3, [sp, #8]
 80078b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078b6:	9301      	str	r3, [sp, #4]
 80078b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ba:	9300      	str	r3, [sp, #0]
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	68b9      	ldr	r1, [r7, #8]
 80078c0:	68f8      	ldr	r0, [r7, #12]
 80078c2:	f000 f80e 	bl	80078e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80078c6:	69f8      	ldr	r0, [r7, #28]
 80078c8:	f000 f894 	bl	80079f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80078cc:	2301      	movs	r3, #1
 80078ce:	61bb      	str	r3, [r7, #24]
 80078d0:	e002      	b.n	80078d8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80078d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80078d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80078d8:	69bb      	ldr	r3, [r7, #24]
	}
 80078da:	4618      	mov	r0, r3
 80078dc:	3720      	adds	r7, #32
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80078e2:	b580      	push	{r7, lr}
 80078e4:	b088      	sub	sp, #32
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	60f8      	str	r0, [r7, #12]
 80078ea:	60b9      	str	r1, [r7, #8]
 80078ec:	607a      	str	r2, [r7, #4]
 80078ee:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80078f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80078fa:	3b01      	subs	r3, #1
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	4413      	add	r3, r2
 8007900:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007902:	69bb      	ldr	r3, [r7, #24]
 8007904:	f023 0307 	bic.w	r3, r3, #7
 8007908:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	f003 0307 	and.w	r3, r3, #7
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00b      	beq.n	800792c <prvInitialiseNewTask+0x4a>
	__asm volatile
 8007914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007918:	f383 8811 	msr	BASEPRI, r3
 800791c:	f3bf 8f6f 	isb	sy
 8007920:	f3bf 8f4f 	dsb	sy
 8007924:	617b      	str	r3, [r7, #20]
}
 8007926:	bf00      	nop
 8007928:	bf00      	nop
 800792a:	e7fd      	b.n	8007928 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d01f      	beq.n	8007972 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007932:	2300      	movs	r3, #0
 8007934:	61fb      	str	r3, [r7, #28]
 8007936:	e012      	b.n	800795e <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007938:	68ba      	ldr	r2, [r7, #8]
 800793a:	69fb      	ldr	r3, [r7, #28]
 800793c:	4413      	add	r3, r2
 800793e:	7819      	ldrb	r1, [r3, #0]
 8007940:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	4413      	add	r3, r2
 8007946:	3334      	adds	r3, #52	@ 0x34
 8007948:	460a      	mov	r2, r1
 800794a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800794c:	68ba      	ldr	r2, [r7, #8]
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	4413      	add	r3, r2
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d006      	beq.n	8007966 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007958:	69fb      	ldr	r3, [r7, #28]
 800795a:	3301      	adds	r3, #1
 800795c:	61fb      	str	r3, [r7, #28]
 800795e:	69fb      	ldr	r3, [r7, #28]
 8007960:	2b0f      	cmp	r3, #15
 8007962:	d9e9      	bls.n	8007938 <prvInitialiseNewTask+0x56>
 8007964:	e000      	b.n	8007968 <prvInitialiseNewTask+0x86>
			{
				break;
 8007966:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800796a:	2200      	movs	r2, #0
 800796c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007970:	e003      	b.n	800797a <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007974:	2200      	movs	r2, #0
 8007976:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800797a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800797c:	2b06      	cmp	r3, #6
 800797e:	d901      	bls.n	8007984 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007980:	2306      	movs	r3, #6
 8007982:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007986:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007988:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800798a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800798c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800798e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007992:	2200      	movs	r2, #0
 8007994:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007998:	3304      	adds	r3, #4
 800799a:	4618      	mov	r0, r3
 800799c:	f7ff f8b8 	bl	8006b10 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80079a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a2:	3318      	adds	r3, #24
 80079a4:	4618      	mov	r0, r3
 80079a6:	f7ff f8b3 	bl	8006b10 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80079aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079b2:	f1c3 0207 	rsb	r2, r3, #7
 80079b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80079ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079be:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80079c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c2:	2200      	movs	r2, #0
 80079c4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80079c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c8:	2200      	movs	r2, #0
 80079ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80079ce:	683a      	ldr	r2, [r7, #0]
 80079d0:	68f9      	ldr	r1, [r7, #12]
 80079d2:	69b8      	ldr	r0, [r7, #24]
 80079d4:	f000 feee 	bl	80087b4 <pxPortInitialiseStack>
 80079d8:	4602      	mov	r2, r0
 80079da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80079de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d002      	beq.n	80079ea <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80079e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079ea:	bf00      	nop
 80079ec:	3720      	adds	r7, #32
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
	...

080079f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80079fc:	f001 f80c 	bl	8008a18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007a00:	4b2a      	ldr	r3, [pc, #168]	@ (8007aac <prvAddNewTaskToReadyList+0xb8>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	3301      	adds	r3, #1
 8007a06:	4a29      	ldr	r2, [pc, #164]	@ (8007aac <prvAddNewTaskToReadyList+0xb8>)
 8007a08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007a0a:	4b29      	ldr	r3, [pc, #164]	@ (8007ab0 <prvAddNewTaskToReadyList+0xbc>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d109      	bne.n	8007a26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007a12:	4a27      	ldr	r2, [pc, #156]	@ (8007ab0 <prvAddNewTaskToReadyList+0xbc>)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007a18:	4b24      	ldr	r3, [pc, #144]	@ (8007aac <prvAddNewTaskToReadyList+0xb8>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d110      	bne.n	8007a42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007a20:	f000 fbe4 	bl	80081ec <prvInitialiseTaskLists>
 8007a24:	e00d      	b.n	8007a42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007a26:	4b23      	ldr	r3, [pc, #140]	@ (8007ab4 <prvAddNewTaskToReadyList+0xc0>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d109      	bne.n	8007a42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007a2e:	4b20      	ldr	r3, [pc, #128]	@ (8007ab0 <prvAddNewTaskToReadyList+0xbc>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d802      	bhi.n	8007a42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007a3c:	4a1c      	ldr	r2, [pc, #112]	@ (8007ab0 <prvAddNewTaskToReadyList+0xbc>)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007a42:	4b1d      	ldr	r3, [pc, #116]	@ (8007ab8 <prvAddNewTaskToReadyList+0xc4>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	3301      	adds	r3, #1
 8007a48:	4a1b      	ldr	r2, [pc, #108]	@ (8007ab8 <prvAddNewTaskToReadyList+0xc4>)
 8007a4a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a50:	2201      	movs	r2, #1
 8007a52:	409a      	lsls	r2, r3
 8007a54:	4b19      	ldr	r3, [pc, #100]	@ (8007abc <prvAddNewTaskToReadyList+0xc8>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	4a18      	ldr	r2, [pc, #96]	@ (8007abc <prvAddNewTaskToReadyList+0xc8>)
 8007a5c:	6013      	str	r3, [r2, #0]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a62:	4613      	mov	r3, r2
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	4413      	add	r3, r2
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	4a15      	ldr	r2, [pc, #84]	@ (8007ac0 <prvAddNewTaskToReadyList+0xcc>)
 8007a6c:	441a      	add	r2, r3
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	3304      	adds	r3, #4
 8007a72:	4619      	mov	r1, r3
 8007a74:	4610      	mov	r0, r2
 8007a76:	f7ff f858 	bl	8006b2a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007a7a:	f000 ffff 	bl	8008a7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8007ab4 <prvAddNewTaskToReadyList+0xc0>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00e      	beq.n	8007aa4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007a86:	4b0a      	ldr	r3, [pc, #40]	@ (8007ab0 <prvAddNewTaskToReadyList+0xbc>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d207      	bcs.n	8007aa4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007a94:	4b0b      	ldr	r3, [pc, #44]	@ (8007ac4 <prvAddNewTaskToReadyList+0xd0>)
 8007a96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a9a:	601a      	str	r2, [r3, #0]
 8007a9c:	f3bf 8f4f 	dsb	sy
 8007aa0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007aa4:	bf00      	nop
 8007aa6:	3708      	adds	r7, #8
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	20000794 	.word	0x20000794
 8007ab0:	20000694 	.word	0x20000694
 8007ab4:	200007a0 	.word	0x200007a0
 8007ab8:	200007b0 	.word	0x200007b0
 8007abc:	2000079c 	.word	0x2000079c
 8007ac0:	20000698 	.word	0x20000698
 8007ac4:	e000ed04 	.word	0xe000ed04

08007ac8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d018      	beq.n	8007b0c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007ada:	4b14      	ldr	r3, [pc, #80]	@ (8007b2c <vTaskDelay+0x64>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00b      	beq.n	8007afa <vTaskDelay+0x32>
	__asm volatile
 8007ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ae6:	f383 8811 	msr	BASEPRI, r3
 8007aea:	f3bf 8f6f 	isb	sy
 8007aee:	f3bf 8f4f 	dsb	sy
 8007af2:	60bb      	str	r3, [r7, #8]
}
 8007af4:	bf00      	nop
 8007af6:	bf00      	nop
 8007af8:	e7fd      	b.n	8007af6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007afa:	f000 f87d 	bl	8007bf8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007afe:	2100      	movs	r1, #0
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 fdf1 	bl	80086e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007b06:	f000 f885 	bl	8007c14 <xTaskResumeAll>
 8007b0a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d107      	bne.n	8007b22 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007b12:	4b07      	ldr	r3, [pc, #28]	@ (8007b30 <vTaskDelay+0x68>)
 8007b14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b18:	601a      	str	r2, [r3, #0]
 8007b1a:	f3bf 8f4f 	dsb	sy
 8007b1e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007b22:	bf00      	nop
 8007b24:	3710      	adds	r7, #16
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}
 8007b2a:	bf00      	nop
 8007b2c:	200007bc 	.word	0x200007bc
 8007b30:	e000ed04 	.word	0xe000ed04

08007b34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b08a      	sub	sp, #40	@ 0x28
 8007b38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007b42:	463a      	mov	r2, r7
 8007b44:	1d39      	adds	r1, r7, #4
 8007b46:	f107 0308 	add.w	r3, r7, #8
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f7f9 fc08 	bl	8001360 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007b50:	6839      	ldr	r1, [r7, #0]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	68ba      	ldr	r2, [r7, #8]
 8007b56:	9202      	str	r2, [sp, #8]
 8007b58:	9301      	str	r3, [sp, #4]
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	9300      	str	r3, [sp, #0]
 8007b5e:	2300      	movs	r3, #0
 8007b60:	460a      	mov	r2, r1
 8007b62:	491f      	ldr	r1, [pc, #124]	@ (8007be0 <vTaskStartScheduler+0xac>)
 8007b64:	481f      	ldr	r0, [pc, #124]	@ (8007be4 <vTaskStartScheduler+0xb0>)
 8007b66:	f7ff fe17 	bl	8007798 <xTaskCreateStatic>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	4a1e      	ldr	r2, [pc, #120]	@ (8007be8 <vTaskStartScheduler+0xb4>)
 8007b6e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007b70:	4b1d      	ldr	r3, [pc, #116]	@ (8007be8 <vTaskStartScheduler+0xb4>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d002      	beq.n	8007b7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	617b      	str	r3, [r7, #20]
 8007b7c:	e001      	b.n	8007b82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d116      	bne.n	8007bb6 <vTaskStartScheduler+0x82>
	__asm volatile
 8007b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b8c:	f383 8811 	msr	BASEPRI, r3
 8007b90:	f3bf 8f6f 	isb	sy
 8007b94:	f3bf 8f4f 	dsb	sy
 8007b98:	613b      	str	r3, [r7, #16]
}
 8007b9a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007b9c:	4b13      	ldr	r3, [pc, #76]	@ (8007bec <vTaskStartScheduler+0xb8>)
 8007b9e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007ba2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007ba4:	4b12      	ldr	r3, [pc, #72]	@ (8007bf0 <vTaskStartScheduler+0xbc>)
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007baa:	4b12      	ldr	r3, [pc, #72]	@ (8007bf4 <vTaskStartScheduler+0xc0>)
 8007bac:	2200      	movs	r2, #0
 8007bae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007bb0:	f000 fe8e 	bl	80088d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007bb4:	e00f      	b.n	8007bd6 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007bbc:	d10b      	bne.n	8007bd6 <vTaskStartScheduler+0xa2>
	__asm volatile
 8007bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bc2:	f383 8811 	msr	BASEPRI, r3
 8007bc6:	f3bf 8f6f 	isb	sy
 8007bca:	f3bf 8f4f 	dsb	sy
 8007bce:	60fb      	str	r3, [r7, #12]
}
 8007bd0:	bf00      	nop
 8007bd2:	bf00      	nop
 8007bd4:	e7fd      	b.n	8007bd2 <vTaskStartScheduler+0x9e>
}
 8007bd6:	bf00      	nop
 8007bd8:	3718      	adds	r7, #24
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop
 8007be0:	0800d944 	.word	0x0800d944
 8007be4:	080081bd 	.word	0x080081bd
 8007be8:	200007b8 	.word	0x200007b8
 8007bec:	200007b4 	.word	0x200007b4
 8007bf0:	200007a0 	.word	0x200007a0
 8007bf4:	20000798 	.word	0x20000798

08007bf8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007bfc:	4b04      	ldr	r3, [pc, #16]	@ (8007c10 <vTaskSuspendAll+0x18>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	3301      	adds	r3, #1
 8007c02:	4a03      	ldr	r2, [pc, #12]	@ (8007c10 <vTaskSuspendAll+0x18>)
 8007c04:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007c06:	bf00      	nop
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr
 8007c10:	200007bc 	.word	0x200007bc

08007c14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007c22:	4b42      	ldr	r3, [pc, #264]	@ (8007d2c <xTaskResumeAll+0x118>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d10b      	bne.n	8007c42 <xTaskResumeAll+0x2e>
	__asm volatile
 8007c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c2e:	f383 8811 	msr	BASEPRI, r3
 8007c32:	f3bf 8f6f 	isb	sy
 8007c36:	f3bf 8f4f 	dsb	sy
 8007c3a:	603b      	str	r3, [r7, #0]
}
 8007c3c:	bf00      	nop
 8007c3e:	bf00      	nop
 8007c40:	e7fd      	b.n	8007c3e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007c42:	f000 fee9 	bl	8008a18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007c46:	4b39      	ldr	r3, [pc, #228]	@ (8007d2c <xTaskResumeAll+0x118>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	3b01      	subs	r3, #1
 8007c4c:	4a37      	ldr	r2, [pc, #220]	@ (8007d2c <xTaskResumeAll+0x118>)
 8007c4e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c50:	4b36      	ldr	r3, [pc, #216]	@ (8007d2c <xTaskResumeAll+0x118>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d161      	bne.n	8007d1c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007c58:	4b35      	ldr	r3, [pc, #212]	@ (8007d30 <xTaskResumeAll+0x11c>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d05d      	beq.n	8007d1c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c60:	e02e      	b.n	8007cc0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c62:	4b34      	ldr	r3, [pc, #208]	@ (8007d34 <xTaskResumeAll+0x120>)
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	3318      	adds	r3, #24
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7fe ffb8 	bl	8006be4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	3304      	adds	r3, #4
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7fe ffb3 	bl	8006be4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c82:	2201      	movs	r2, #1
 8007c84:	409a      	lsls	r2, r3
 8007c86:	4b2c      	ldr	r3, [pc, #176]	@ (8007d38 <xTaskResumeAll+0x124>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	4a2a      	ldr	r2, [pc, #168]	@ (8007d38 <xTaskResumeAll+0x124>)
 8007c8e:	6013      	str	r3, [r2, #0]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c94:	4613      	mov	r3, r2
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	4413      	add	r3, r2
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	4a27      	ldr	r2, [pc, #156]	@ (8007d3c <xTaskResumeAll+0x128>)
 8007c9e:	441a      	add	r2, r3
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	3304      	adds	r3, #4
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	4610      	mov	r0, r2
 8007ca8:	f7fe ff3f 	bl	8006b2a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cb0:	4b23      	ldr	r3, [pc, #140]	@ (8007d40 <xTaskResumeAll+0x12c>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d302      	bcc.n	8007cc0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007cba:	4b22      	ldr	r3, [pc, #136]	@ (8007d44 <xTaskResumeAll+0x130>)
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007cc0:	4b1c      	ldr	r3, [pc, #112]	@ (8007d34 <xTaskResumeAll+0x120>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d1cc      	bne.n	8007c62 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d001      	beq.n	8007cd2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007cce:	f000 fb2b 	bl	8008328 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007cd2:	4b1d      	ldr	r3, [pc, #116]	@ (8007d48 <xTaskResumeAll+0x134>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d010      	beq.n	8007d00 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007cde:	f000 f847 	bl	8007d70 <xTaskIncrementTick>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d002      	beq.n	8007cee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007ce8:	4b16      	ldr	r3, [pc, #88]	@ (8007d44 <xTaskResumeAll+0x130>)
 8007cea:	2201      	movs	r2, #1
 8007cec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	3b01      	subs	r3, #1
 8007cf2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d1f1      	bne.n	8007cde <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007cfa:	4b13      	ldr	r3, [pc, #76]	@ (8007d48 <xTaskResumeAll+0x134>)
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007d00:	4b10      	ldr	r3, [pc, #64]	@ (8007d44 <xTaskResumeAll+0x130>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d009      	beq.n	8007d1c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8007d4c <xTaskResumeAll+0x138>)
 8007d0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d12:	601a      	str	r2, [r3, #0]
 8007d14:	f3bf 8f4f 	dsb	sy
 8007d18:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d1c:	f000 feae 	bl	8008a7c <vPortExitCritical>

	return xAlreadyYielded;
 8007d20:	68bb      	ldr	r3, [r7, #8]
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3710      	adds	r7, #16
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	200007bc 	.word	0x200007bc
 8007d30:	20000794 	.word	0x20000794
 8007d34:	20000754 	.word	0x20000754
 8007d38:	2000079c 	.word	0x2000079c
 8007d3c:	20000698 	.word	0x20000698
 8007d40:	20000694 	.word	0x20000694
 8007d44:	200007a8 	.word	0x200007a8
 8007d48:	200007a4 	.word	0x200007a4
 8007d4c:	e000ed04 	.word	0xe000ed04

08007d50 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007d56:	4b05      	ldr	r3, [pc, #20]	@ (8007d6c <xTaskGetTickCount+0x1c>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007d5c:	687b      	ldr	r3, [r7, #4]
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	370c      	adds	r7, #12
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr
 8007d6a:	bf00      	nop
 8007d6c:	20000798 	.word	0x20000798

08007d70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b086      	sub	sp, #24
 8007d74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007d76:	2300      	movs	r3, #0
 8007d78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d7a:	4b4f      	ldr	r3, [pc, #316]	@ (8007eb8 <xTaskIncrementTick+0x148>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	f040 808f 	bne.w	8007ea2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007d84:	4b4d      	ldr	r3, [pc, #308]	@ (8007ebc <xTaskIncrementTick+0x14c>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	3301      	adds	r3, #1
 8007d8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007d8c:	4a4b      	ldr	r2, [pc, #300]	@ (8007ebc <xTaskIncrementTick+0x14c>)
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d121      	bne.n	8007ddc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007d98:	4b49      	ldr	r3, [pc, #292]	@ (8007ec0 <xTaskIncrementTick+0x150>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d00b      	beq.n	8007dba <xTaskIncrementTick+0x4a>
	__asm volatile
 8007da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007da6:	f383 8811 	msr	BASEPRI, r3
 8007daa:	f3bf 8f6f 	isb	sy
 8007dae:	f3bf 8f4f 	dsb	sy
 8007db2:	603b      	str	r3, [r7, #0]
}
 8007db4:	bf00      	nop
 8007db6:	bf00      	nop
 8007db8:	e7fd      	b.n	8007db6 <xTaskIncrementTick+0x46>
 8007dba:	4b41      	ldr	r3, [pc, #260]	@ (8007ec0 <xTaskIncrementTick+0x150>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	60fb      	str	r3, [r7, #12]
 8007dc0:	4b40      	ldr	r3, [pc, #256]	@ (8007ec4 <xTaskIncrementTick+0x154>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a3e      	ldr	r2, [pc, #248]	@ (8007ec0 <xTaskIncrementTick+0x150>)
 8007dc6:	6013      	str	r3, [r2, #0]
 8007dc8:	4a3e      	ldr	r2, [pc, #248]	@ (8007ec4 <xTaskIncrementTick+0x154>)
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6013      	str	r3, [r2, #0]
 8007dce:	4b3e      	ldr	r3, [pc, #248]	@ (8007ec8 <xTaskIncrementTick+0x158>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	4a3c      	ldr	r2, [pc, #240]	@ (8007ec8 <xTaskIncrementTick+0x158>)
 8007dd6:	6013      	str	r3, [r2, #0]
 8007dd8:	f000 faa6 	bl	8008328 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007ddc:	4b3b      	ldr	r3, [pc, #236]	@ (8007ecc <xTaskIncrementTick+0x15c>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	693a      	ldr	r2, [r7, #16]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d348      	bcc.n	8007e78 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007de6:	4b36      	ldr	r3, [pc, #216]	@ (8007ec0 <xTaskIncrementTick+0x150>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d104      	bne.n	8007dfa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007df0:	4b36      	ldr	r3, [pc, #216]	@ (8007ecc <xTaskIncrementTick+0x15c>)
 8007df2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007df6:	601a      	str	r2, [r3, #0]
					break;
 8007df8:	e03e      	b.n	8007e78 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dfa:	4b31      	ldr	r3, [pc, #196]	@ (8007ec0 <xTaskIncrementTick+0x150>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007e0a:	693a      	ldr	r2, [r7, #16]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d203      	bcs.n	8007e1a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007e12:	4a2e      	ldr	r2, [pc, #184]	@ (8007ecc <xTaskIncrementTick+0x15c>)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007e18:	e02e      	b.n	8007e78 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	3304      	adds	r3, #4
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7fe fee0 	bl	8006be4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d004      	beq.n	8007e36 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	3318      	adds	r3, #24
 8007e30:	4618      	mov	r0, r3
 8007e32:	f7fe fed7 	bl	8006be4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	409a      	lsls	r2, r3
 8007e3e:	4b24      	ldr	r3, [pc, #144]	@ (8007ed0 <xTaskIncrementTick+0x160>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	4a22      	ldr	r2, [pc, #136]	@ (8007ed0 <xTaskIncrementTick+0x160>)
 8007e46:	6013      	str	r3, [r2, #0]
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e4c:	4613      	mov	r3, r2
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	4413      	add	r3, r2
 8007e52:	009b      	lsls	r3, r3, #2
 8007e54:	4a1f      	ldr	r2, [pc, #124]	@ (8007ed4 <xTaskIncrementTick+0x164>)
 8007e56:	441a      	add	r2, r3
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	3304      	adds	r3, #4
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	4610      	mov	r0, r2
 8007e60:	f7fe fe63 	bl	8006b2a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e68:	4b1b      	ldr	r3, [pc, #108]	@ (8007ed8 <xTaskIncrementTick+0x168>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d3b9      	bcc.n	8007de6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007e72:	2301      	movs	r3, #1
 8007e74:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e76:	e7b6      	b.n	8007de6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007e78:	4b17      	ldr	r3, [pc, #92]	@ (8007ed8 <xTaskIncrementTick+0x168>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e7e:	4915      	ldr	r1, [pc, #84]	@ (8007ed4 <xTaskIncrementTick+0x164>)
 8007e80:	4613      	mov	r3, r2
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	4413      	add	r3, r2
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	440b      	add	r3, r1
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d901      	bls.n	8007e94 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007e90:	2301      	movs	r3, #1
 8007e92:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007e94:	4b11      	ldr	r3, [pc, #68]	@ (8007edc <xTaskIncrementTick+0x16c>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d007      	beq.n	8007eac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	617b      	str	r3, [r7, #20]
 8007ea0:	e004      	b.n	8007eac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007ea2:	4b0f      	ldr	r3, [pc, #60]	@ (8007ee0 <xTaskIncrementTick+0x170>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	4a0d      	ldr	r2, [pc, #52]	@ (8007ee0 <xTaskIncrementTick+0x170>)
 8007eaa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007eac:	697b      	ldr	r3, [r7, #20]
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3718      	adds	r7, #24
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	200007bc 	.word	0x200007bc
 8007ebc:	20000798 	.word	0x20000798
 8007ec0:	2000074c 	.word	0x2000074c
 8007ec4:	20000750 	.word	0x20000750
 8007ec8:	200007ac 	.word	0x200007ac
 8007ecc:	200007b4 	.word	0x200007b4
 8007ed0:	2000079c 	.word	0x2000079c
 8007ed4:	20000698 	.word	0x20000698
 8007ed8:	20000694 	.word	0x20000694
 8007edc:	200007a8 	.word	0x200007a8
 8007ee0:	200007a4 	.word	0x200007a4

08007ee4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b087      	sub	sp, #28
 8007ee8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007eea:	4b27      	ldr	r3, [pc, #156]	@ (8007f88 <vTaskSwitchContext+0xa4>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d003      	beq.n	8007efa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007ef2:	4b26      	ldr	r3, [pc, #152]	@ (8007f8c <vTaskSwitchContext+0xa8>)
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007ef8:	e040      	b.n	8007f7c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007efa:	4b24      	ldr	r3, [pc, #144]	@ (8007f8c <vTaskSwitchContext+0xa8>)
 8007efc:	2200      	movs	r2, #0
 8007efe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f00:	4b23      	ldr	r3, [pc, #140]	@ (8007f90 <vTaskSwitchContext+0xac>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	fab3 f383 	clz	r3, r3
 8007f0c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007f0e:	7afb      	ldrb	r3, [r7, #11]
 8007f10:	f1c3 031f 	rsb	r3, r3, #31
 8007f14:	617b      	str	r3, [r7, #20]
 8007f16:	491f      	ldr	r1, [pc, #124]	@ (8007f94 <vTaskSwitchContext+0xb0>)
 8007f18:	697a      	ldr	r2, [r7, #20]
 8007f1a:	4613      	mov	r3, r2
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	4413      	add	r3, r2
 8007f20:	009b      	lsls	r3, r3, #2
 8007f22:	440b      	add	r3, r1
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d10b      	bne.n	8007f42 <vTaskSwitchContext+0x5e>
	__asm volatile
 8007f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f2e:	f383 8811 	msr	BASEPRI, r3
 8007f32:	f3bf 8f6f 	isb	sy
 8007f36:	f3bf 8f4f 	dsb	sy
 8007f3a:	607b      	str	r3, [r7, #4]
}
 8007f3c:	bf00      	nop
 8007f3e:	bf00      	nop
 8007f40:	e7fd      	b.n	8007f3e <vTaskSwitchContext+0x5a>
 8007f42:	697a      	ldr	r2, [r7, #20]
 8007f44:	4613      	mov	r3, r2
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	4413      	add	r3, r2
 8007f4a:	009b      	lsls	r3, r3, #2
 8007f4c:	4a11      	ldr	r2, [pc, #68]	@ (8007f94 <vTaskSwitchContext+0xb0>)
 8007f4e:	4413      	add	r3, r2
 8007f50:	613b      	str	r3, [r7, #16]
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	685a      	ldr	r2, [r3, #4]
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	605a      	str	r2, [r3, #4]
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	685a      	ldr	r2, [r3, #4]
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	3308      	adds	r3, #8
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d104      	bne.n	8007f72 <vTaskSwitchContext+0x8e>
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	685a      	ldr	r2, [r3, #4]
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	605a      	str	r2, [r3, #4]
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	4a07      	ldr	r2, [pc, #28]	@ (8007f98 <vTaskSwitchContext+0xb4>)
 8007f7a:	6013      	str	r3, [r2, #0]
}
 8007f7c:	bf00      	nop
 8007f7e:	371c      	adds	r7, #28
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr
 8007f88:	200007bc 	.word	0x200007bc
 8007f8c:	200007a8 	.word	0x200007a8
 8007f90:	2000079c 	.word	0x2000079c
 8007f94:	20000698 	.word	0x20000698
 8007f98:	20000694 	.word	0x20000694

08007f9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d10b      	bne.n	8007fc4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fb0:	f383 8811 	msr	BASEPRI, r3
 8007fb4:	f3bf 8f6f 	isb	sy
 8007fb8:	f3bf 8f4f 	dsb	sy
 8007fbc:	60fb      	str	r3, [r7, #12]
}
 8007fbe:	bf00      	nop
 8007fc0:	bf00      	nop
 8007fc2:	e7fd      	b.n	8007fc0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007fc4:	4b07      	ldr	r3, [pc, #28]	@ (8007fe4 <vTaskPlaceOnEventList+0x48>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	3318      	adds	r3, #24
 8007fca:	4619      	mov	r1, r3
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f7fe fdd0 	bl	8006b72 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007fd2:	2101      	movs	r1, #1
 8007fd4:	6838      	ldr	r0, [r7, #0]
 8007fd6:	f000 fb87 	bl	80086e8 <prvAddCurrentTaskToDelayedList>
}
 8007fda:	bf00      	nop
 8007fdc:	3710      	adds	r7, #16
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	20000694 	.word	0x20000694

08007fe8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b086      	sub	sp, #24
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	68db      	ldr	r3, [r3, #12]
 8007ff4:	68db      	ldr	r3, [r3, #12]
 8007ff6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d10b      	bne.n	8008016 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008002:	f383 8811 	msr	BASEPRI, r3
 8008006:	f3bf 8f6f 	isb	sy
 800800a:	f3bf 8f4f 	dsb	sy
 800800e:	60fb      	str	r3, [r7, #12]
}
 8008010:	bf00      	nop
 8008012:	bf00      	nop
 8008014:	e7fd      	b.n	8008012 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	3318      	adds	r3, #24
 800801a:	4618      	mov	r0, r3
 800801c:	f7fe fde2 	bl	8006be4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008020:	4b1d      	ldr	r3, [pc, #116]	@ (8008098 <xTaskRemoveFromEventList+0xb0>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d11c      	bne.n	8008062 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	3304      	adds	r3, #4
 800802c:	4618      	mov	r0, r3
 800802e:	f7fe fdd9 	bl	8006be4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008036:	2201      	movs	r2, #1
 8008038:	409a      	lsls	r2, r3
 800803a:	4b18      	ldr	r3, [pc, #96]	@ (800809c <xTaskRemoveFromEventList+0xb4>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4313      	orrs	r3, r2
 8008040:	4a16      	ldr	r2, [pc, #88]	@ (800809c <xTaskRemoveFromEventList+0xb4>)
 8008042:	6013      	str	r3, [r2, #0]
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008048:	4613      	mov	r3, r2
 800804a:	009b      	lsls	r3, r3, #2
 800804c:	4413      	add	r3, r2
 800804e:	009b      	lsls	r3, r3, #2
 8008050:	4a13      	ldr	r2, [pc, #76]	@ (80080a0 <xTaskRemoveFromEventList+0xb8>)
 8008052:	441a      	add	r2, r3
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	3304      	adds	r3, #4
 8008058:	4619      	mov	r1, r3
 800805a:	4610      	mov	r0, r2
 800805c:	f7fe fd65 	bl	8006b2a <vListInsertEnd>
 8008060:	e005      	b.n	800806e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	3318      	adds	r3, #24
 8008066:	4619      	mov	r1, r3
 8008068:	480e      	ldr	r0, [pc, #56]	@ (80080a4 <xTaskRemoveFromEventList+0xbc>)
 800806a:	f7fe fd5e 	bl	8006b2a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008072:	4b0d      	ldr	r3, [pc, #52]	@ (80080a8 <xTaskRemoveFromEventList+0xc0>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008078:	429a      	cmp	r2, r3
 800807a:	d905      	bls.n	8008088 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800807c:	2301      	movs	r3, #1
 800807e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008080:	4b0a      	ldr	r3, [pc, #40]	@ (80080ac <xTaskRemoveFromEventList+0xc4>)
 8008082:	2201      	movs	r2, #1
 8008084:	601a      	str	r2, [r3, #0]
 8008086:	e001      	b.n	800808c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008088:	2300      	movs	r3, #0
 800808a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800808c:	697b      	ldr	r3, [r7, #20]
}
 800808e:	4618      	mov	r0, r3
 8008090:	3718      	adds	r7, #24
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	200007bc 	.word	0x200007bc
 800809c:	2000079c 	.word	0x2000079c
 80080a0:	20000698 	.word	0x20000698
 80080a4:	20000754 	.word	0x20000754
 80080a8:	20000694 	.word	0x20000694
 80080ac:	200007a8 	.word	0x200007a8

080080b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80080b8:	4b06      	ldr	r3, [pc, #24]	@ (80080d4 <vTaskInternalSetTimeOutState+0x24>)
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80080c0:	4b05      	ldr	r3, [pc, #20]	@ (80080d8 <vTaskInternalSetTimeOutState+0x28>)
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	605a      	str	r2, [r3, #4]
}
 80080c8:	bf00      	nop
 80080ca:	370c      	adds	r7, #12
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr
 80080d4:	200007ac 	.word	0x200007ac
 80080d8:	20000798 	.word	0x20000798

080080dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b088      	sub	sp, #32
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d10b      	bne.n	8008104 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80080ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080f0:	f383 8811 	msr	BASEPRI, r3
 80080f4:	f3bf 8f6f 	isb	sy
 80080f8:	f3bf 8f4f 	dsb	sy
 80080fc:	613b      	str	r3, [r7, #16]
}
 80080fe:	bf00      	nop
 8008100:	bf00      	nop
 8008102:	e7fd      	b.n	8008100 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d10b      	bne.n	8008122 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800810a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800810e:	f383 8811 	msr	BASEPRI, r3
 8008112:	f3bf 8f6f 	isb	sy
 8008116:	f3bf 8f4f 	dsb	sy
 800811a:	60fb      	str	r3, [r7, #12]
}
 800811c:	bf00      	nop
 800811e:	bf00      	nop
 8008120:	e7fd      	b.n	800811e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008122:	f000 fc79 	bl	8008a18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008126:	4b1d      	ldr	r3, [pc, #116]	@ (800819c <xTaskCheckForTimeOut+0xc0>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	69ba      	ldr	r2, [r7, #24]
 8008132:	1ad3      	subs	r3, r2, r3
 8008134:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800813e:	d102      	bne.n	8008146 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008140:	2300      	movs	r3, #0
 8008142:	61fb      	str	r3, [r7, #28]
 8008144:	e023      	b.n	800818e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	4b15      	ldr	r3, [pc, #84]	@ (80081a0 <xTaskCheckForTimeOut+0xc4>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	429a      	cmp	r2, r3
 8008150:	d007      	beq.n	8008162 <xTaskCheckForTimeOut+0x86>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	69ba      	ldr	r2, [r7, #24]
 8008158:	429a      	cmp	r2, r3
 800815a:	d302      	bcc.n	8008162 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800815c:	2301      	movs	r3, #1
 800815e:	61fb      	str	r3, [r7, #28]
 8008160:	e015      	b.n	800818e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	697a      	ldr	r2, [r7, #20]
 8008168:	429a      	cmp	r2, r3
 800816a:	d20b      	bcs.n	8008184 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	1ad2      	subs	r2, r2, r3
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f7ff ff99 	bl	80080b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800817e:	2300      	movs	r3, #0
 8008180:	61fb      	str	r3, [r7, #28]
 8008182:	e004      	b.n	800818e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	2200      	movs	r2, #0
 8008188:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800818a:	2301      	movs	r3, #1
 800818c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800818e:	f000 fc75 	bl	8008a7c <vPortExitCritical>

	return xReturn;
 8008192:	69fb      	ldr	r3, [r7, #28]
}
 8008194:	4618      	mov	r0, r3
 8008196:	3720      	adds	r7, #32
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}
 800819c:	20000798 	.word	0x20000798
 80081a0:	200007ac 	.word	0x200007ac

080081a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80081a4:	b480      	push	{r7}
 80081a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80081a8:	4b03      	ldr	r3, [pc, #12]	@ (80081b8 <vTaskMissedYield+0x14>)
 80081aa:	2201      	movs	r2, #1
 80081ac:	601a      	str	r2, [r3, #0]
}
 80081ae:	bf00      	nop
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr
 80081b8:	200007a8 	.word	0x200007a8

080081bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80081c4:	f000 f852 	bl	800826c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80081c8:	4b06      	ldr	r3, [pc, #24]	@ (80081e4 <prvIdleTask+0x28>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d9f9      	bls.n	80081c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80081d0:	4b05      	ldr	r3, [pc, #20]	@ (80081e8 <prvIdleTask+0x2c>)
 80081d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081d6:	601a      	str	r2, [r3, #0]
 80081d8:	f3bf 8f4f 	dsb	sy
 80081dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80081e0:	e7f0      	b.n	80081c4 <prvIdleTask+0x8>
 80081e2:	bf00      	nop
 80081e4:	20000698 	.word	0x20000698
 80081e8:	e000ed04 	.word	0xe000ed04

080081ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b082      	sub	sp, #8
 80081f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081f2:	2300      	movs	r3, #0
 80081f4:	607b      	str	r3, [r7, #4]
 80081f6:	e00c      	b.n	8008212 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	4613      	mov	r3, r2
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	4413      	add	r3, r2
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	4a12      	ldr	r2, [pc, #72]	@ (800824c <prvInitialiseTaskLists+0x60>)
 8008204:	4413      	add	r3, r2
 8008206:	4618      	mov	r0, r3
 8008208:	f7fe fc62 	bl	8006ad0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	3301      	adds	r3, #1
 8008210:	607b      	str	r3, [r7, #4]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2b06      	cmp	r3, #6
 8008216:	d9ef      	bls.n	80081f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008218:	480d      	ldr	r0, [pc, #52]	@ (8008250 <prvInitialiseTaskLists+0x64>)
 800821a:	f7fe fc59 	bl	8006ad0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800821e:	480d      	ldr	r0, [pc, #52]	@ (8008254 <prvInitialiseTaskLists+0x68>)
 8008220:	f7fe fc56 	bl	8006ad0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008224:	480c      	ldr	r0, [pc, #48]	@ (8008258 <prvInitialiseTaskLists+0x6c>)
 8008226:	f7fe fc53 	bl	8006ad0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800822a:	480c      	ldr	r0, [pc, #48]	@ (800825c <prvInitialiseTaskLists+0x70>)
 800822c:	f7fe fc50 	bl	8006ad0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008230:	480b      	ldr	r0, [pc, #44]	@ (8008260 <prvInitialiseTaskLists+0x74>)
 8008232:	f7fe fc4d 	bl	8006ad0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008236:	4b0b      	ldr	r3, [pc, #44]	@ (8008264 <prvInitialiseTaskLists+0x78>)
 8008238:	4a05      	ldr	r2, [pc, #20]	@ (8008250 <prvInitialiseTaskLists+0x64>)
 800823a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800823c:	4b0a      	ldr	r3, [pc, #40]	@ (8008268 <prvInitialiseTaskLists+0x7c>)
 800823e:	4a05      	ldr	r2, [pc, #20]	@ (8008254 <prvInitialiseTaskLists+0x68>)
 8008240:	601a      	str	r2, [r3, #0]
}
 8008242:	bf00      	nop
 8008244:	3708      	adds	r7, #8
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	20000698 	.word	0x20000698
 8008250:	20000724 	.word	0x20000724
 8008254:	20000738 	.word	0x20000738
 8008258:	20000754 	.word	0x20000754
 800825c:	20000768 	.word	0x20000768
 8008260:	20000780 	.word	0x20000780
 8008264:	2000074c 	.word	0x2000074c
 8008268:	20000750 	.word	0x20000750

0800826c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008272:	e019      	b.n	80082a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008274:	f000 fbd0 	bl	8008a18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008278:	4b10      	ldr	r3, [pc, #64]	@ (80082bc <prvCheckTasksWaitingTermination+0x50>)
 800827a:	68db      	ldr	r3, [r3, #12]
 800827c:	68db      	ldr	r3, [r3, #12]
 800827e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	3304      	adds	r3, #4
 8008284:	4618      	mov	r0, r3
 8008286:	f7fe fcad 	bl	8006be4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800828a:	4b0d      	ldr	r3, [pc, #52]	@ (80082c0 <prvCheckTasksWaitingTermination+0x54>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	3b01      	subs	r3, #1
 8008290:	4a0b      	ldr	r2, [pc, #44]	@ (80082c0 <prvCheckTasksWaitingTermination+0x54>)
 8008292:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008294:	4b0b      	ldr	r3, [pc, #44]	@ (80082c4 <prvCheckTasksWaitingTermination+0x58>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	3b01      	subs	r3, #1
 800829a:	4a0a      	ldr	r2, [pc, #40]	@ (80082c4 <prvCheckTasksWaitingTermination+0x58>)
 800829c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800829e:	f000 fbed 	bl	8008a7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 f810 	bl	80082c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80082a8:	4b06      	ldr	r3, [pc, #24]	@ (80082c4 <prvCheckTasksWaitingTermination+0x58>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d1e1      	bne.n	8008274 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80082b0:	bf00      	nop
 80082b2:	bf00      	nop
 80082b4:	3708      	adds	r7, #8
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	bf00      	nop
 80082bc:	20000768 	.word	0x20000768
 80082c0:	20000794 	.word	0x20000794
 80082c4:	2000077c 	.word	0x2000077c

080082c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d108      	bne.n	80082ec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082de:	4618      	mov	r0, r3
 80082e0:	f000 fd8a 	bl	8008df8 <vPortFree>
				vPortFree( pxTCB );
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 fd87 	bl	8008df8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80082ea:	e019      	b.n	8008320 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d103      	bne.n	80082fe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 fd7e 	bl	8008df8 <vPortFree>
	}
 80082fc:	e010      	b.n	8008320 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008304:	2b02      	cmp	r3, #2
 8008306:	d00b      	beq.n	8008320 <prvDeleteTCB+0x58>
	__asm volatile
 8008308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800830c:	f383 8811 	msr	BASEPRI, r3
 8008310:	f3bf 8f6f 	isb	sy
 8008314:	f3bf 8f4f 	dsb	sy
 8008318:	60fb      	str	r3, [r7, #12]
}
 800831a:	bf00      	nop
 800831c:	bf00      	nop
 800831e:	e7fd      	b.n	800831c <prvDeleteTCB+0x54>
	}
 8008320:	bf00      	nop
 8008322:	3710      	adds	r7, #16
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008328:	b480      	push	{r7}
 800832a:	b083      	sub	sp, #12
 800832c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800832e:	4b0c      	ldr	r3, [pc, #48]	@ (8008360 <prvResetNextTaskUnblockTime+0x38>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d104      	bne.n	8008342 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008338:	4b0a      	ldr	r3, [pc, #40]	@ (8008364 <prvResetNextTaskUnblockTime+0x3c>)
 800833a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800833e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008340:	e008      	b.n	8008354 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008342:	4b07      	ldr	r3, [pc, #28]	@ (8008360 <prvResetNextTaskUnblockTime+0x38>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	68db      	ldr	r3, [r3, #12]
 800834a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	4a04      	ldr	r2, [pc, #16]	@ (8008364 <prvResetNextTaskUnblockTime+0x3c>)
 8008352:	6013      	str	r3, [r2, #0]
}
 8008354:	bf00      	nop
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr
 8008360:	2000074c 	.word	0x2000074c
 8008364:	200007b4 	.word	0x200007b4

08008368 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008368:	b480      	push	{r7}
 800836a:	b083      	sub	sp, #12
 800836c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800836e:	4b0b      	ldr	r3, [pc, #44]	@ (800839c <xTaskGetSchedulerState+0x34>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d102      	bne.n	800837c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008376:	2301      	movs	r3, #1
 8008378:	607b      	str	r3, [r7, #4]
 800837a:	e008      	b.n	800838e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800837c:	4b08      	ldr	r3, [pc, #32]	@ (80083a0 <xTaskGetSchedulerState+0x38>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d102      	bne.n	800838a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008384:	2302      	movs	r3, #2
 8008386:	607b      	str	r3, [r7, #4]
 8008388:	e001      	b.n	800838e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800838a:	2300      	movs	r3, #0
 800838c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800838e:	687b      	ldr	r3, [r7, #4]
	}
 8008390:	4618      	mov	r0, r3
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr
 800839c:	200007a0 	.word	0x200007a0
 80083a0:	200007bc 	.word	0x200007bc

080083a4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80083b0:	2300      	movs	r3, #0
 80083b2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d05e      	beq.n	8008478 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083be:	4b31      	ldr	r3, [pc, #196]	@ (8008484 <xTaskPriorityInherit+0xe0>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d24e      	bcs.n	8008466 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	699b      	ldr	r3, [r3, #24]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	db06      	blt.n	80083de <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083d0:	4b2c      	ldr	r3, [pc, #176]	@ (8008484 <xTaskPriorityInherit+0xe0>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083d6:	f1c3 0207 	rsb	r2, r3, #7
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	6959      	ldr	r1, [r3, #20]
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083e6:	4613      	mov	r3, r2
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	4413      	add	r3, r2
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	4a26      	ldr	r2, [pc, #152]	@ (8008488 <xTaskPriorityInherit+0xe4>)
 80083f0:	4413      	add	r3, r2
 80083f2:	4299      	cmp	r1, r3
 80083f4:	d12f      	bne.n	8008456 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	3304      	adds	r3, #4
 80083fa:	4618      	mov	r0, r3
 80083fc:	f7fe fbf2 	bl	8006be4 <uxListRemove>
 8008400:	4603      	mov	r3, r0
 8008402:	2b00      	cmp	r3, #0
 8008404:	d10a      	bne.n	800841c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800840a:	2201      	movs	r2, #1
 800840c:	fa02 f303 	lsl.w	r3, r2, r3
 8008410:	43da      	mvns	r2, r3
 8008412:	4b1e      	ldr	r3, [pc, #120]	@ (800848c <xTaskPriorityInherit+0xe8>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4013      	ands	r3, r2
 8008418:	4a1c      	ldr	r2, [pc, #112]	@ (800848c <xTaskPriorityInherit+0xe8>)
 800841a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800841c:	4b19      	ldr	r3, [pc, #100]	@ (8008484 <xTaskPriorityInherit+0xe0>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800842a:	2201      	movs	r2, #1
 800842c:	409a      	lsls	r2, r3
 800842e:	4b17      	ldr	r3, [pc, #92]	@ (800848c <xTaskPriorityInherit+0xe8>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4313      	orrs	r3, r2
 8008434:	4a15      	ldr	r2, [pc, #84]	@ (800848c <xTaskPriorityInherit+0xe8>)
 8008436:	6013      	str	r3, [r2, #0]
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800843c:	4613      	mov	r3, r2
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	4413      	add	r3, r2
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	4a10      	ldr	r2, [pc, #64]	@ (8008488 <xTaskPriorityInherit+0xe4>)
 8008446:	441a      	add	r2, r3
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	3304      	adds	r3, #4
 800844c:	4619      	mov	r1, r3
 800844e:	4610      	mov	r0, r2
 8008450:	f7fe fb6b 	bl	8006b2a <vListInsertEnd>
 8008454:	e004      	b.n	8008460 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008456:	4b0b      	ldr	r3, [pc, #44]	@ (8008484 <xTaskPriorityInherit+0xe0>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008460:	2301      	movs	r3, #1
 8008462:	60fb      	str	r3, [r7, #12]
 8008464:	e008      	b.n	8008478 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800846a:	4b06      	ldr	r3, [pc, #24]	@ (8008484 <xTaskPriorityInherit+0xe0>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008470:	429a      	cmp	r2, r3
 8008472:	d201      	bcs.n	8008478 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008474:	2301      	movs	r3, #1
 8008476:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008478:	68fb      	ldr	r3, [r7, #12]
	}
 800847a:	4618      	mov	r0, r3
 800847c:	3710      	adds	r7, #16
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop
 8008484:	20000694 	.word	0x20000694
 8008488:	20000698 	.word	0x20000698
 800848c:	2000079c 	.word	0x2000079c

08008490 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008490:	b580      	push	{r7, lr}
 8008492:	b086      	sub	sp, #24
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800849c:	2300      	movs	r3, #0
 800849e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d070      	beq.n	8008588 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80084a6:	4b3b      	ldr	r3, [pc, #236]	@ (8008594 <xTaskPriorityDisinherit+0x104>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	693a      	ldr	r2, [r7, #16]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d00b      	beq.n	80084c8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80084b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084b4:	f383 8811 	msr	BASEPRI, r3
 80084b8:	f3bf 8f6f 	isb	sy
 80084bc:	f3bf 8f4f 	dsb	sy
 80084c0:	60fb      	str	r3, [r7, #12]
}
 80084c2:	bf00      	nop
 80084c4:	bf00      	nop
 80084c6:	e7fd      	b.n	80084c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d10b      	bne.n	80084e8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80084d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084d4:	f383 8811 	msr	BASEPRI, r3
 80084d8:	f3bf 8f6f 	isb	sy
 80084dc:	f3bf 8f4f 	dsb	sy
 80084e0:	60bb      	str	r3, [r7, #8]
}
 80084e2:	bf00      	nop
 80084e4:	bf00      	nop
 80084e6:	e7fd      	b.n	80084e4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084ec:	1e5a      	subs	r2, r3, #1
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d044      	beq.n	8008588 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008502:	2b00      	cmp	r3, #0
 8008504:	d140      	bne.n	8008588 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	3304      	adds	r3, #4
 800850a:	4618      	mov	r0, r3
 800850c:	f7fe fb6a 	bl	8006be4 <uxListRemove>
 8008510:	4603      	mov	r3, r0
 8008512:	2b00      	cmp	r3, #0
 8008514:	d115      	bne.n	8008542 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800851a:	491f      	ldr	r1, [pc, #124]	@ (8008598 <xTaskPriorityDisinherit+0x108>)
 800851c:	4613      	mov	r3, r2
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	4413      	add	r3, r2
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	440b      	add	r3, r1
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d10a      	bne.n	8008542 <xTaskPriorityDisinherit+0xb2>
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008530:	2201      	movs	r2, #1
 8008532:	fa02 f303 	lsl.w	r3, r2, r3
 8008536:	43da      	mvns	r2, r3
 8008538:	4b18      	ldr	r3, [pc, #96]	@ (800859c <xTaskPriorityDisinherit+0x10c>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4013      	ands	r3, r2
 800853e:	4a17      	ldr	r2, [pc, #92]	@ (800859c <xTaskPriorityDisinherit+0x10c>)
 8008540:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800854e:	f1c3 0207 	rsb	r2, r3, #7
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800855a:	2201      	movs	r2, #1
 800855c:	409a      	lsls	r2, r3
 800855e:	4b0f      	ldr	r3, [pc, #60]	@ (800859c <xTaskPriorityDisinherit+0x10c>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4313      	orrs	r3, r2
 8008564:	4a0d      	ldr	r2, [pc, #52]	@ (800859c <xTaskPriorityDisinherit+0x10c>)
 8008566:	6013      	str	r3, [r2, #0]
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800856c:	4613      	mov	r3, r2
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	4413      	add	r3, r2
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	4a08      	ldr	r2, [pc, #32]	@ (8008598 <xTaskPriorityDisinherit+0x108>)
 8008576:	441a      	add	r2, r3
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	3304      	adds	r3, #4
 800857c:	4619      	mov	r1, r3
 800857e:	4610      	mov	r0, r2
 8008580:	f7fe fad3 	bl	8006b2a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008584:	2301      	movs	r3, #1
 8008586:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008588:	697b      	ldr	r3, [r7, #20]
	}
 800858a:	4618      	mov	r0, r3
 800858c:	3718      	adds	r7, #24
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	20000694 	.word	0x20000694
 8008598:	20000698 	.word	0x20000698
 800859c:	2000079c 	.word	0x2000079c

080085a0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b088      	sub	sp, #32
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80085ae:	2301      	movs	r3, #1
 80085b0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d079      	beq.n	80086ac <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80085b8:	69bb      	ldr	r3, [r7, #24]
 80085ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d10b      	bne.n	80085d8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80085c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085c4:	f383 8811 	msr	BASEPRI, r3
 80085c8:	f3bf 8f6f 	isb	sy
 80085cc:	f3bf 8f4f 	dsb	sy
 80085d0:	60fb      	str	r3, [r7, #12]
}
 80085d2:	bf00      	nop
 80085d4:	bf00      	nop
 80085d6:	e7fd      	b.n	80085d4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80085d8:	69bb      	ldr	r3, [r7, #24]
 80085da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085dc:	683a      	ldr	r2, [r7, #0]
 80085de:	429a      	cmp	r2, r3
 80085e0:	d902      	bls.n	80085e8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	61fb      	str	r3, [r7, #28]
 80085e6:	e002      	b.n	80085ee <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80085e8:	69bb      	ldr	r3, [r7, #24]
 80085ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085ec:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085f2:	69fa      	ldr	r2, [r7, #28]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d059      	beq.n	80086ac <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80085f8:	69bb      	ldr	r3, [r7, #24]
 80085fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085fc:	697a      	ldr	r2, [r7, #20]
 80085fe:	429a      	cmp	r2, r3
 8008600:	d154      	bne.n	80086ac <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008602:	4b2c      	ldr	r3, [pc, #176]	@ (80086b4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	69ba      	ldr	r2, [r7, #24]
 8008608:	429a      	cmp	r2, r3
 800860a:	d10b      	bne.n	8008624 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800860c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008610:	f383 8811 	msr	BASEPRI, r3
 8008614:	f3bf 8f6f 	isb	sy
 8008618:	f3bf 8f4f 	dsb	sy
 800861c:	60bb      	str	r3, [r7, #8]
}
 800861e:	bf00      	nop
 8008620:	bf00      	nop
 8008622:	e7fd      	b.n	8008620 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008624:	69bb      	ldr	r3, [r7, #24]
 8008626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008628:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800862a:	69bb      	ldr	r3, [r7, #24]
 800862c:	69fa      	ldr	r2, [r7, #28]
 800862e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008630:	69bb      	ldr	r3, [r7, #24]
 8008632:	699b      	ldr	r3, [r3, #24]
 8008634:	2b00      	cmp	r3, #0
 8008636:	db04      	blt.n	8008642 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008638:	69fb      	ldr	r3, [r7, #28]
 800863a:	f1c3 0207 	rsb	r2, r3, #7
 800863e:	69bb      	ldr	r3, [r7, #24]
 8008640:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008642:	69bb      	ldr	r3, [r7, #24]
 8008644:	6959      	ldr	r1, [r3, #20]
 8008646:	693a      	ldr	r2, [r7, #16]
 8008648:	4613      	mov	r3, r2
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	4413      	add	r3, r2
 800864e:	009b      	lsls	r3, r3, #2
 8008650:	4a19      	ldr	r2, [pc, #100]	@ (80086b8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008652:	4413      	add	r3, r2
 8008654:	4299      	cmp	r1, r3
 8008656:	d129      	bne.n	80086ac <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008658:	69bb      	ldr	r3, [r7, #24]
 800865a:	3304      	adds	r3, #4
 800865c:	4618      	mov	r0, r3
 800865e:	f7fe fac1 	bl	8006be4 <uxListRemove>
 8008662:	4603      	mov	r3, r0
 8008664:	2b00      	cmp	r3, #0
 8008666:	d10a      	bne.n	800867e <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008668:	69bb      	ldr	r3, [r7, #24]
 800866a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800866c:	2201      	movs	r2, #1
 800866e:	fa02 f303 	lsl.w	r3, r2, r3
 8008672:	43da      	mvns	r2, r3
 8008674:	4b11      	ldr	r3, [pc, #68]	@ (80086bc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4013      	ands	r3, r2
 800867a:	4a10      	ldr	r2, [pc, #64]	@ (80086bc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800867c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800867e:	69bb      	ldr	r3, [r7, #24]
 8008680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008682:	2201      	movs	r2, #1
 8008684:	409a      	lsls	r2, r3
 8008686:	4b0d      	ldr	r3, [pc, #52]	@ (80086bc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4313      	orrs	r3, r2
 800868c:	4a0b      	ldr	r2, [pc, #44]	@ (80086bc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800868e:	6013      	str	r3, [r2, #0]
 8008690:	69bb      	ldr	r3, [r7, #24]
 8008692:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008694:	4613      	mov	r3, r2
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	4413      	add	r3, r2
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	4a06      	ldr	r2, [pc, #24]	@ (80086b8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800869e:	441a      	add	r2, r3
 80086a0:	69bb      	ldr	r3, [r7, #24]
 80086a2:	3304      	adds	r3, #4
 80086a4:	4619      	mov	r1, r3
 80086a6:	4610      	mov	r0, r2
 80086a8:	f7fe fa3f 	bl	8006b2a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80086ac:	bf00      	nop
 80086ae:	3720      	adds	r7, #32
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	20000694 	.word	0x20000694
 80086b8:	20000698 	.word	0x20000698
 80086bc:	2000079c 	.word	0x2000079c

080086c0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80086c0:	b480      	push	{r7}
 80086c2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80086c4:	4b07      	ldr	r3, [pc, #28]	@ (80086e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d004      	beq.n	80086d6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80086cc:	4b05      	ldr	r3, [pc, #20]	@ (80086e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80086d2:	3201      	adds	r2, #1
 80086d4:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80086d6:	4b03      	ldr	r3, [pc, #12]	@ (80086e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80086d8:	681b      	ldr	r3, [r3, #0]
	}
 80086da:	4618      	mov	r0, r3
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr
 80086e4:	20000694 	.word	0x20000694

080086e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80086f2:	4b29      	ldr	r3, [pc, #164]	@ (8008798 <prvAddCurrentTaskToDelayedList+0xb0>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086f8:	4b28      	ldr	r3, [pc, #160]	@ (800879c <prvAddCurrentTaskToDelayedList+0xb4>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	3304      	adds	r3, #4
 80086fe:	4618      	mov	r0, r3
 8008700:	f7fe fa70 	bl	8006be4 <uxListRemove>
 8008704:	4603      	mov	r3, r0
 8008706:	2b00      	cmp	r3, #0
 8008708:	d10b      	bne.n	8008722 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800870a:	4b24      	ldr	r3, [pc, #144]	@ (800879c <prvAddCurrentTaskToDelayedList+0xb4>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008710:	2201      	movs	r2, #1
 8008712:	fa02 f303 	lsl.w	r3, r2, r3
 8008716:	43da      	mvns	r2, r3
 8008718:	4b21      	ldr	r3, [pc, #132]	@ (80087a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4013      	ands	r3, r2
 800871e:	4a20      	ldr	r2, [pc, #128]	@ (80087a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008720:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008728:	d10a      	bne.n	8008740 <prvAddCurrentTaskToDelayedList+0x58>
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d007      	beq.n	8008740 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008730:	4b1a      	ldr	r3, [pc, #104]	@ (800879c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	3304      	adds	r3, #4
 8008736:	4619      	mov	r1, r3
 8008738:	481a      	ldr	r0, [pc, #104]	@ (80087a4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800873a:	f7fe f9f6 	bl	8006b2a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800873e:	e026      	b.n	800878e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008740:	68fa      	ldr	r2, [r7, #12]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	4413      	add	r3, r2
 8008746:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008748:	4b14      	ldr	r3, [pc, #80]	@ (800879c <prvAddCurrentTaskToDelayedList+0xb4>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	68ba      	ldr	r2, [r7, #8]
 800874e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008750:	68ba      	ldr	r2, [r7, #8]
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	429a      	cmp	r2, r3
 8008756:	d209      	bcs.n	800876c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008758:	4b13      	ldr	r3, [pc, #76]	@ (80087a8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	4b0f      	ldr	r3, [pc, #60]	@ (800879c <prvAddCurrentTaskToDelayedList+0xb4>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	3304      	adds	r3, #4
 8008762:	4619      	mov	r1, r3
 8008764:	4610      	mov	r0, r2
 8008766:	f7fe fa04 	bl	8006b72 <vListInsert>
}
 800876a:	e010      	b.n	800878e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800876c:	4b0f      	ldr	r3, [pc, #60]	@ (80087ac <prvAddCurrentTaskToDelayedList+0xc4>)
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	4b0a      	ldr	r3, [pc, #40]	@ (800879c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	3304      	adds	r3, #4
 8008776:	4619      	mov	r1, r3
 8008778:	4610      	mov	r0, r2
 800877a:	f7fe f9fa 	bl	8006b72 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800877e:	4b0c      	ldr	r3, [pc, #48]	@ (80087b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	68ba      	ldr	r2, [r7, #8]
 8008784:	429a      	cmp	r2, r3
 8008786:	d202      	bcs.n	800878e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008788:	4a09      	ldr	r2, [pc, #36]	@ (80087b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	6013      	str	r3, [r2, #0]
}
 800878e:	bf00      	nop
 8008790:	3710      	adds	r7, #16
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}
 8008796:	bf00      	nop
 8008798:	20000798 	.word	0x20000798
 800879c:	20000694 	.word	0x20000694
 80087a0:	2000079c 	.word	0x2000079c
 80087a4:	20000780 	.word	0x20000780
 80087a8:	20000750 	.word	0x20000750
 80087ac:	2000074c 	.word	0x2000074c
 80087b0:	200007b4 	.word	0x200007b4

080087b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80087b4:	b480      	push	{r7}
 80087b6:	b085      	sub	sp, #20
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	3b04      	subs	r3, #4
 80087c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80087cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	3b04      	subs	r3, #4
 80087d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	f023 0201 	bic.w	r2, r3, #1
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	3b04      	subs	r3, #4
 80087e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80087e4:	4a0c      	ldr	r2, [pc, #48]	@ (8008818 <pxPortInitialiseStack+0x64>)
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	3b14      	subs	r3, #20
 80087ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	3b04      	subs	r3, #4
 80087fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f06f 0202 	mvn.w	r2, #2
 8008802:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	3b20      	subs	r3, #32
 8008808:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800880a:	68fb      	ldr	r3, [r7, #12]
}
 800880c:	4618      	mov	r0, r3
 800880e:	3714      	adds	r7, #20
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr
 8008818:	0800881d 	.word	0x0800881d

0800881c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800881c:	b480      	push	{r7}
 800881e:	b085      	sub	sp, #20
 8008820:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008822:	2300      	movs	r3, #0
 8008824:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008826:	4b13      	ldr	r3, [pc, #76]	@ (8008874 <prvTaskExitError+0x58>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800882e:	d00b      	beq.n	8008848 <prvTaskExitError+0x2c>
	__asm volatile
 8008830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008834:	f383 8811 	msr	BASEPRI, r3
 8008838:	f3bf 8f6f 	isb	sy
 800883c:	f3bf 8f4f 	dsb	sy
 8008840:	60fb      	str	r3, [r7, #12]
}
 8008842:	bf00      	nop
 8008844:	bf00      	nop
 8008846:	e7fd      	b.n	8008844 <prvTaskExitError+0x28>
	__asm volatile
 8008848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800884c:	f383 8811 	msr	BASEPRI, r3
 8008850:	f3bf 8f6f 	isb	sy
 8008854:	f3bf 8f4f 	dsb	sy
 8008858:	60bb      	str	r3, [r7, #8]
}
 800885a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800885c:	bf00      	nop
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d0fc      	beq.n	800885e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008864:	bf00      	nop
 8008866:	bf00      	nop
 8008868:	3714      	adds	r7, #20
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr
 8008872:	bf00      	nop
 8008874:	2000000c 	.word	0x2000000c
	...

08008880 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008880:	4b07      	ldr	r3, [pc, #28]	@ (80088a0 <pxCurrentTCBConst2>)
 8008882:	6819      	ldr	r1, [r3, #0]
 8008884:	6808      	ldr	r0, [r1, #0]
 8008886:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800888a:	f380 8809 	msr	PSP, r0
 800888e:	f3bf 8f6f 	isb	sy
 8008892:	f04f 0000 	mov.w	r0, #0
 8008896:	f380 8811 	msr	BASEPRI, r0
 800889a:	4770      	bx	lr
 800889c:	f3af 8000 	nop.w

080088a0 <pxCurrentTCBConst2>:
 80088a0:	20000694 	.word	0x20000694
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80088a4:	bf00      	nop
 80088a6:	bf00      	nop

080088a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80088a8:	4808      	ldr	r0, [pc, #32]	@ (80088cc <prvPortStartFirstTask+0x24>)
 80088aa:	6800      	ldr	r0, [r0, #0]
 80088ac:	6800      	ldr	r0, [r0, #0]
 80088ae:	f380 8808 	msr	MSP, r0
 80088b2:	f04f 0000 	mov.w	r0, #0
 80088b6:	f380 8814 	msr	CONTROL, r0
 80088ba:	b662      	cpsie	i
 80088bc:	b661      	cpsie	f
 80088be:	f3bf 8f4f 	dsb	sy
 80088c2:	f3bf 8f6f 	isb	sy
 80088c6:	df00      	svc	0
 80088c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80088ca:	bf00      	nop
 80088cc:	e000ed08 	.word	0xe000ed08

080088d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b086      	sub	sp, #24
 80088d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80088d6:	4b47      	ldr	r3, [pc, #284]	@ (80089f4 <xPortStartScheduler+0x124>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a47      	ldr	r2, [pc, #284]	@ (80089f8 <xPortStartScheduler+0x128>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d10b      	bne.n	80088f8 <xPortStartScheduler+0x28>
	__asm volatile
 80088e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088e4:	f383 8811 	msr	BASEPRI, r3
 80088e8:	f3bf 8f6f 	isb	sy
 80088ec:	f3bf 8f4f 	dsb	sy
 80088f0:	60fb      	str	r3, [r7, #12]
}
 80088f2:	bf00      	nop
 80088f4:	bf00      	nop
 80088f6:	e7fd      	b.n	80088f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80088f8:	4b3e      	ldr	r3, [pc, #248]	@ (80089f4 <xPortStartScheduler+0x124>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a3f      	ldr	r2, [pc, #252]	@ (80089fc <xPortStartScheduler+0x12c>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d10b      	bne.n	800891a <xPortStartScheduler+0x4a>
	__asm volatile
 8008902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008906:	f383 8811 	msr	BASEPRI, r3
 800890a:	f3bf 8f6f 	isb	sy
 800890e:	f3bf 8f4f 	dsb	sy
 8008912:	613b      	str	r3, [r7, #16]
}
 8008914:	bf00      	nop
 8008916:	bf00      	nop
 8008918:	e7fd      	b.n	8008916 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800891a:	4b39      	ldr	r3, [pc, #228]	@ (8008a00 <xPortStartScheduler+0x130>)
 800891c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	b2db      	uxtb	r3, r3
 8008924:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	22ff      	movs	r2, #255	@ 0xff
 800892a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	b2db      	uxtb	r3, r3
 8008932:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008934:	78fb      	ldrb	r3, [r7, #3]
 8008936:	b2db      	uxtb	r3, r3
 8008938:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800893c:	b2da      	uxtb	r2, r3
 800893e:	4b31      	ldr	r3, [pc, #196]	@ (8008a04 <xPortStartScheduler+0x134>)
 8008940:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008942:	4b31      	ldr	r3, [pc, #196]	@ (8008a08 <xPortStartScheduler+0x138>)
 8008944:	2207      	movs	r2, #7
 8008946:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008948:	e009      	b.n	800895e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800894a:	4b2f      	ldr	r3, [pc, #188]	@ (8008a08 <xPortStartScheduler+0x138>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	3b01      	subs	r3, #1
 8008950:	4a2d      	ldr	r2, [pc, #180]	@ (8008a08 <xPortStartScheduler+0x138>)
 8008952:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008954:	78fb      	ldrb	r3, [r7, #3]
 8008956:	b2db      	uxtb	r3, r3
 8008958:	005b      	lsls	r3, r3, #1
 800895a:	b2db      	uxtb	r3, r3
 800895c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800895e:	78fb      	ldrb	r3, [r7, #3]
 8008960:	b2db      	uxtb	r3, r3
 8008962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008966:	2b80      	cmp	r3, #128	@ 0x80
 8008968:	d0ef      	beq.n	800894a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800896a:	4b27      	ldr	r3, [pc, #156]	@ (8008a08 <xPortStartScheduler+0x138>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f1c3 0307 	rsb	r3, r3, #7
 8008972:	2b04      	cmp	r3, #4
 8008974:	d00b      	beq.n	800898e <xPortStartScheduler+0xbe>
	__asm volatile
 8008976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800897a:	f383 8811 	msr	BASEPRI, r3
 800897e:	f3bf 8f6f 	isb	sy
 8008982:	f3bf 8f4f 	dsb	sy
 8008986:	60bb      	str	r3, [r7, #8]
}
 8008988:	bf00      	nop
 800898a:	bf00      	nop
 800898c:	e7fd      	b.n	800898a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800898e:	4b1e      	ldr	r3, [pc, #120]	@ (8008a08 <xPortStartScheduler+0x138>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	021b      	lsls	r3, r3, #8
 8008994:	4a1c      	ldr	r2, [pc, #112]	@ (8008a08 <xPortStartScheduler+0x138>)
 8008996:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008998:	4b1b      	ldr	r3, [pc, #108]	@ (8008a08 <xPortStartScheduler+0x138>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80089a0:	4a19      	ldr	r2, [pc, #100]	@ (8008a08 <xPortStartScheduler+0x138>)
 80089a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	b2da      	uxtb	r2, r3
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80089ac:	4b17      	ldr	r3, [pc, #92]	@ (8008a0c <xPortStartScheduler+0x13c>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a16      	ldr	r2, [pc, #88]	@ (8008a0c <xPortStartScheduler+0x13c>)
 80089b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80089b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80089b8:	4b14      	ldr	r3, [pc, #80]	@ (8008a0c <xPortStartScheduler+0x13c>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a13      	ldr	r2, [pc, #76]	@ (8008a0c <xPortStartScheduler+0x13c>)
 80089be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80089c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80089c4:	f000 f8da 	bl	8008b7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80089c8:	4b11      	ldr	r3, [pc, #68]	@ (8008a10 <xPortStartScheduler+0x140>)
 80089ca:	2200      	movs	r2, #0
 80089cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80089ce:	f000 f8f9 	bl	8008bc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80089d2:	4b10      	ldr	r3, [pc, #64]	@ (8008a14 <xPortStartScheduler+0x144>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a0f      	ldr	r2, [pc, #60]	@ (8008a14 <xPortStartScheduler+0x144>)
 80089d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80089dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80089de:	f7ff ff63 	bl	80088a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80089e2:	f7ff fa7f 	bl	8007ee4 <vTaskSwitchContext>
	prvTaskExitError();
 80089e6:	f7ff ff19 	bl	800881c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80089ea:	2300      	movs	r3, #0
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3718      	adds	r7, #24
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}
 80089f4:	e000ed00 	.word	0xe000ed00
 80089f8:	410fc271 	.word	0x410fc271
 80089fc:	410fc270 	.word	0x410fc270
 8008a00:	e000e400 	.word	0xe000e400
 8008a04:	200007c0 	.word	0x200007c0
 8008a08:	200007c4 	.word	0x200007c4
 8008a0c:	e000ed20 	.word	0xe000ed20
 8008a10:	2000000c 	.word	0x2000000c
 8008a14:	e000ef34 	.word	0xe000ef34

08008a18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b083      	sub	sp, #12
 8008a1c:	af00      	add	r7, sp, #0
	__asm volatile
 8008a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a22:	f383 8811 	msr	BASEPRI, r3
 8008a26:	f3bf 8f6f 	isb	sy
 8008a2a:	f3bf 8f4f 	dsb	sy
 8008a2e:	607b      	str	r3, [r7, #4]
}
 8008a30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008a32:	4b10      	ldr	r3, [pc, #64]	@ (8008a74 <vPortEnterCritical+0x5c>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	3301      	adds	r3, #1
 8008a38:	4a0e      	ldr	r2, [pc, #56]	@ (8008a74 <vPortEnterCritical+0x5c>)
 8008a3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8008a74 <vPortEnterCritical+0x5c>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d110      	bne.n	8008a66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008a44:	4b0c      	ldr	r3, [pc, #48]	@ (8008a78 <vPortEnterCritical+0x60>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d00b      	beq.n	8008a66 <vPortEnterCritical+0x4e>
	__asm volatile
 8008a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a52:	f383 8811 	msr	BASEPRI, r3
 8008a56:	f3bf 8f6f 	isb	sy
 8008a5a:	f3bf 8f4f 	dsb	sy
 8008a5e:	603b      	str	r3, [r7, #0]
}
 8008a60:	bf00      	nop
 8008a62:	bf00      	nop
 8008a64:	e7fd      	b.n	8008a62 <vPortEnterCritical+0x4a>
	}
}
 8008a66:	bf00      	nop
 8008a68:	370c      	adds	r7, #12
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop
 8008a74:	2000000c 	.word	0x2000000c
 8008a78:	e000ed04 	.word	0xe000ed04

08008a7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008a82:	4b12      	ldr	r3, [pc, #72]	@ (8008acc <vPortExitCritical+0x50>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d10b      	bne.n	8008aa2 <vPortExitCritical+0x26>
	__asm volatile
 8008a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a8e:	f383 8811 	msr	BASEPRI, r3
 8008a92:	f3bf 8f6f 	isb	sy
 8008a96:	f3bf 8f4f 	dsb	sy
 8008a9a:	607b      	str	r3, [r7, #4]
}
 8008a9c:	bf00      	nop
 8008a9e:	bf00      	nop
 8008aa0:	e7fd      	b.n	8008a9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8008acc <vPortExitCritical+0x50>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	3b01      	subs	r3, #1
 8008aa8:	4a08      	ldr	r2, [pc, #32]	@ (8008acc <vPortExitCritical+0x50>)
 8008aaa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008aac:	4b07      	ldr	r3, [pc, #28]	@ (8008acc <vPortExitCritical+0x50>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d105      	bne.n	8008ac0 <vPortExitCritical+0x44>
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	f383 8811 	msr	BASEPRI, r3
}
 8008abe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008ac0:	bf00      	nop
 8008ac2:	370c      	adds	r7, #12
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr
 8008acc:	2000000c 	.word	0x2000000c

08008ad0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008ad0:	f3ef 8009 	mrs	r0, PSP
 8008ad4:	f3bf 8f6f 	isb	sy
 8008ad8:	4b15      	ldr	r3, [pc, #84]	@ (8008b30 <pxCurrentTCBConst>)
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	f01e 0f10 	tst.w	lr, #16
 8008ae0:	bf08      	it	eq
 8008ae2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008ae6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aea:	6010      	str	r0, [r2, #0]
 8008aec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008af0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008af4:	f380 8811 	msr	BASEPRI, r0
 8008af8:	f3bf 8f4f 	dsb	sy
 8008afc:	f3bf 8f6f 	isb	sy
 8008b00:	f7ff f9f0 	bl	8007ee4 <vTaskSwitchContext>
 8008b04:	f04f 0000 	mov.w	r0, #0
 8008b08:	f380 8811 	msr	BASEPRI, r0
 8008b0c:	bc09      	pop	{r0, r3}
 8008b0e:	6819      	ldr	r1, [r3, #0]
 8008b10:	6808      	ldr	r0, [r1, #0]
 8008b12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b16:	f01e 0f10 	tst.w	lr, #16
 8008b1a:	bf08      	it	eq
 8008b1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008b20:	f380 8809 	msr	PSP, r0
 8008b24:	f3bf 8f6f 	isb	sy
 8008b28:	4770      	bx	lr
 8008b2a:	bf00      	nop
 8008b2c:	f3af 8000 	nop.w

08008b30 <pxCurrentTCBConst>:
 8008b30:	20000694 	.word	0x20000694
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008b34:	bf00      	nop
 8008b36:	bf00      	nop

08008b38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b082      	sub	sp, #8
 8008b3c:	af00      	add	r7, sp, #0
	__asm volatile
 8008b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b42:	f383 8811 	msr	BASEPRI, r3
 8008b46:	f3bf 8f6f 	isb	sy
 8008b4a:	f3bf 8f4f 	dsb	sy
 8008b4e:	607b      	str	r3, [r7, #4]
}
 8008b50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008b52:	f7ff f90d 	bl	8007d70 <xTaskIncrementTick>
 8008b56:	4603      	mov	r3, r0
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d003      	beq.n	8008b64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008b5c:	4b06      	ldr	r3, [pc, #24]	@ (8008b78 <SysTick_Handler+0x40>)
 8008b5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b62:	601a      	str	r2, [r3, #0]
 8008b64:	2300      	movs	r3, #0
 8008b66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	f383 8811 	msr	BASEPRI, r3
}
 8008b6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008b70:	bf00      	nop
 8008b72:	3708      	adds	r7, #8
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}
 8008b78:	e000ed04 	.word	0xe000ed04

08008b7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008b80:	4b0b      	ldr	r3, [pc, #44]	@ (8008bb0 <vPortSetupTimerInterrupt+0x34>)
 8008b82:	2200      	movs	r2, #0
 8008b84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008b86:	4b0b      	ldr	r3, [pc, #44]	@ (8008bb4 <vPortSetupTimerInterrupt+0x38>)
 8008b88:	2200      	movs	r2, #0
 8008b8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8008bb8 <vPortSetupTimerInterrupt+0x3c>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a0a      	ldr	r2, [pc, #40]	@ (8008bbc <vPortSetupTimerInterrupt+0x40>)
 8008b92:	fba2 2303 	umull	r2, r3, r2, r3
 8008b96:	099b      	lsrs	r3, r3, #6
 8008b98:	4a09      	ldr	r2, [pc, #36]	@ (8008bc0 <vPortSetupTimerInterrupt+0x44>)
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008b9e:	4b04      	ldr	r3, [pc, #16]	@ (8008bb0 <vPortSetupTimerInterrupt+0x34>)
 8008ba0:	2207      	movs	r2, #7
 8008ba2:	601a      	str	r2, [r3, #0]
}
 8008ba4:	bf00      	nop
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr
 8008bae:	bf00      	nop
 8008bb0:	e000e010 	.word	0xe000e010
 8008bb4:	e000e018 	.word	0xe000e018
 8008bb8:	20000000 	.word	0x20000000
 8008bbc:	10624dd3 	.word	0x10624dd3
 8008bc0:	e000e014 	.word	0xe000e014

08008bc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008bc4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008bd4 <vPortEnableVFP+0x10>
 8008bc8:	6801      	ldr	r1, [r0, #0]
 8008bca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008bce:	6001      	str	r1, [r0, #0]
 8008bd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008bd2:	bf00      	nop
 8008bd4:	e000ed88 	.word	0xe000ed88

08008bd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008bd8:	b480      	push	{r7}
 8008bda:	b085      	sub	sp, #20
 8008bdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008bde:	f3ef 8305 	mrs	r3, IPSR
 8008be2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2b0f      	cmp	r3, #15
 8008be8:	d915      	bls.n	8008c16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008bea:	4a18      	ldr	r2, [pc, #96]	@ (8008c4c <vPortValidateInterruptPriority+0x74>)
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	4413      	add	r3, r2
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008bf4:	4b16      	ldr	r3, [pc, #88]	@ (8008c50 <vPortValidateInterruptPriority+0x78>)
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	7afa      	ldrb	r2, [r7, #11]
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d20b      	bcs.n	8008c16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c02:	f383 8811 	msr	BASEPRI, r3
 8008c06:	f3bf 8f6f 	isb	sy
 8008c0a:	f3bf 8f4f 	dsb	sy
 8008c0e:	607b      	str	r3, [r7, #4]
}
 8008c10:	bf00      	nop
 8008c12:	bf00      	nop
 8008c14:	e7fd      	b.n	8008c12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008c16:	4b0f      	ldr	r3, [pc, #60]	@ (8008c54 <vPortValidateInterruptPriority+0x7c>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8008c58 <vPortValidateInterruptPriority+0x80>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d90b      	bls.n	8008c3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c2a:	f383 8811 	msr	BASEPRI, r3
 8008c2e:	f3bf 8f6f 	isb	sy
 8008c32:	f3bf 8f4f 	dsb	sy
 8008c36:	603b      	str	r3, [r7, #0]
}
 8008c38:	bf00      	nop
 8008c3a:	bf00      	nop
 8008c3c:	e7fd      	b.n	8008c3a <vPortValidateInterruptPriority+0x62>
	}
 8008c3e:	bf00      	nop
 8008c40:	3714      	adds	r7, #20
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr
 8008c4a:	bf00      	nop
 8008c4c:	e000e3f0 	.word	0xe000e3f0
 8008c50:	200007c0 	.word	0x200007c0
 8008c54:	e000ed0c 	.word	0xe000ed0c
 8008c58:	200007c4 	.word	0x200007c4

08008c5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b08a      	sub	sp, #40	@ 0x28
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008c64:	2300      	movs	r3, #0
 8008c66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008c68:	f7fe ffc6 	bl	8007bf8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008c6c:	4b5c      	ldr	r3, [pc, #368]	@ (8008de0 <pvPortMalloc+0x184>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d101      	bne.n	8008c78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008c74:	f000 f924 	bl	8008ec0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008c78:	4b5a      	ldr	r3, [pc, #360]	@ (8008de4 <pvPortMalloc+0x188>)
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	4013      	ands	r3, r2
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	f040 8095 	bne.w	8008db0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d01e      	beq.n	8008cca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008c8c:	2208      	movs	r2, #8
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	4413      	add	r3, r2
 8008c92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f003 0307 	and.w	r3, r3, #7
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d015      	beq.n	8008cca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f023 0307 	bic.w	r3, r3, #7
 8008ca4:	3308      	adds	r3, #8
 8008ca6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f003 0307 	and.w	r3, r3, #7
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d00b      	beq.n	8008cca <pvPortMalloc+0x6e>
	__asm volatile
 8008cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cb6:	f383 8811 	msr	BASEPRI, r3
 8008cba:	f3bf 8f6f 	isb	sy
 8008cbe:	f3bf 8f4f 	dsb	sy
 8008cc2:	617b      	str	r3, [r7, #20]
}
 8008cc4:	bf00      	nop
 8008cc6:	bf00      	nop
 8008cc8:	e7fd      	b.n	8008cc6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d06f      	beq.n	8008db0 <pvPortMalloc+0x154>
 8008cd0:	4b45      	ldr	r3, [pc, #276]	@ (8008de8 <pvPortMalloc+0x18c>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	687a      	ldr	r2, [r7, #4]
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d86a      	bhi.n	8008db0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008cda:	4b44      	ldr	r3, [pc, #272]	@ (8008dec <pvPortMalloc+0x190>)
 8008cdc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008cde:	4b43      	ldr	r3, [pc, #268]	@ (8008dec <pvPortMalloc+0x190>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ce4:	e004      	b.n	8008cf0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ce8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d903      	bls.n	8008d02 <pvPortMalloc+0xa6>
 8008cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d1f1      	bne.n	8008ce6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008d02:	4b37      	ldr	r3, [pc, #220]	@ (8008de0 <pvPortMalloc+0x184>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d051      	beq.n	8008db0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008d0c:	6a3b      	ldr	r3, [r7, #32]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	2208      	movs	r2, #8
 8008d12:	4413      	add	r3, r2
 8008d14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	6a3b      	ldr	r3, [r7, #32]
 8008d1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d20:	685a      	ldr	r2, [r3, #4]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	1ad2      	subs	r2, r2, r3
 8008d26:	2308      	movs	r3, #8
 8008d28:	005b      	lsls	r3, r3, #1
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d920      	bls.n	8008d70 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008d2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	4413      	add	r3, r2
 8008d34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d36:	69bb      	ldr	r3, [r7, #24]
 8008d38:	f003 0307 	and.w	r3, r3, #7
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d00b      	beq.n	8008d58 <pvPortMalloc+0xfc>
	__asm volatile
 8008d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d44:	f383 8811 	msr	BASEPRI, r3
 8008d48:	f3bf 8f6f 	isb	sy
 8008d4c:	f3bf 8f4f 	dsb	sy
 8008d50:	613b      	str	r3, [r7, #16]
}
 8008d52:	bf00      	nop
 8008d54:	bf00      	nop
 8008d56:	e7fd      	b.n	8008d54 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d5a:	685a      	ldr	r2, [r3, #4]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	1ad2      	subs	r2, r2, r3
 8008d60:	69bb      	ldr	r3, [r7, #24]
 8008d62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008d6a:	69b8      	ldr	r0, [r7, #24]
 8008d6c:	f000 f90a 	bl	8008f84 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008d70:	4b1d      	ldr	r3, [pc, #116]	@ (8008de8 <pvPortMalloc+0x18c>)
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d76:	685b      	ldr	r3, [r3, #4]
 8008d78:	1ad3      	subs	r3, r2, r3
 8008d7a:	4a1b      	ldr	r2, [pc, #108]	@ (8008de8 <pvPortMalloc+0x18c>)
 8008d7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008d7e:	4b1a      	ldr	r3, [pc, #104]	@ (8008de8 <pvPortMalloc+0x18c>)
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	4b1b      	ldr	r3, [pc, #108]	@ (8008df0 <pvPortMalloc+0x194>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d203      	bcs.n	8008d92 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008d8a:	4b17      	ldr	r3, [pc, #92]	@ (8008de8 <pvPortMalloc+0x18c>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a18      	ldr	r2, [pc, #96]	@ (8008df0 <pvPortMalloc+0x194>)
 8008d90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d94:	685a      	ldr	r2, [r3, #4]
 8008d96:	4b13      	ldr	r3, [pc, #76]	@ (8008de4 <pvPortMalloc+0x188>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	431a      	orrs	r2, r3
 8008d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da2:	2200      	movs	r2, #0
 8008da4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008da6:	4b13      	ldr	r3, [pc, #76]	@ (8008df4 <pvPortMalloc+0x198>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	3301      	adds	r3, #1
 8008dac:	4a11      	ldr	r2, [pc, #68]	@ (8008df4 <pvPortMalloc+0x198>)
 8008dae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008db0:	f7fe ff30 	bl	8007c14 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008db4:	69fb      	ldr	r3, [r7, #28]
 8008db6:	f003 0307 	and.w	r3, r3, #7
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d00b      	beq.n	8008dd6 <pvPortMalloc+0x17a>
	__asm volatile
 8008dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dc2:	f383 8811 	msr	BASEPRI, r3
 8008dc6:	f3bf 8f6f 	isb	sy
 8008dca:	f3bf 8f4f 	dsb	sy
 8008dce:	60fb      	str	r3, [r7, #12]
}
 8008dd0:	bf00      	nop
 8008dd2:	bf00      	nop
 8008dd4:	e7fd      	b.n	8008dd2 <pvPortMalloc+0x176>
	return pvReturn;
 8008dd6:	69fb      	ldr	r3, [r7, #28]
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3728      	adds	r7, #40	@ 0x28
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}
 8008de0:	200043d0 	.word	0x200043d0
 8008de4:	200043e4 	.word	0x200043e4
 8008de8:	200043d4 	.word	0x200043d4
 8008dec:	200043c8 	.word	0x200043c8
 8008df0:	200043d8 	.word	0x200043d8
 8008df4:	200043dc 	.word	0x200043dc

08008df8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b086      	sub	sp, #24
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d04f      	beq.n	8008eaa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008e0a:	2308      	movs	r3, #8
 8008e0c:	425b      	negs	r3, r3
 8008e0e:	697a      	ldr	r2, [r7, #20]
 8008e10:	4413      	add	r3, r2
 8008e12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	685a      	ldr	r2, [r3, #4]
 8008e1c:	4b25      	ldr	r3, [pc, #148]	@ (8008eb4 <vPortFree+0xbc>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4013      	ands	r3, r2
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d10b      	bne.n	8008e3e <vPortFree+0x46>
	__asm volatile
 8008e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e2a:	f383 8811 	msr	BASEPRI, r3
 8008e2e:	f3bf 8f6f 	isb	sy
 8008e32:	f3bf 8f4f 	dsb	sy
 8008e36:	60fb      	str	r3, [r7, #12]
}
 8008e38:	bf00      	nop
 8008e3a:	bf00      	nop
 8008e3c:	e7fd      	b.n	8008e3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d00b      	beq.n	8008e5e <vPortFree+0x66>
	__asm volatile
 8008e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e4a:	f383 8811 	msr	BASEPRI, r3
 8008e4e:	f3bf 8f6f 	isb	sy
 8008e52:	f3bf 8f4f 	dsb	sy
 8008e56:	60bb      	str	r3, [r7, #8]
}
 8008e58:	bf00      	nop
 8008e5a:	bf00      	nop
 8008e5c:	e7fd      	b.n	8008e5a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	685a      	ldr	r2, [r3, #4]
 8008e62:	4b14      	ldr	r3, [pc, #80]	@ (8008eb4 <vPortFree+0xbc>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4013      	ands	r3, r2
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d01e      	beq.n	8008eaa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d11a      	bne.n	8008eaa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	685a      	ldr	r2, [r3, #4]
 8008e78:	4b0e      	ldr	r3, [pc, #56]	@ (8008eb4 <vPortFree+0xbc>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	43db      	mvns	r3, r3
 8008e7e:	401a      	ands	r2, r3
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008e84:	f7fe feb8 	bl	8007bf8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	685a      	ldr	r2, [r3, #4]
 8008e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8008eb8 <vPortFree+0xc0>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4413      	add	r3, r2
 8008e92:	4a09      	ldr	r2, [pc, #36]	@ (8008eb8 <vPortFree+0xc0>)
 8008e94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008e96:	6938      	ldr	r0, [r7, #16]
 8008e98:	f000 f874 	bl	8008f84 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008e9c:	4b07      	ldr	r3, [pc, #28]	@ (8008ebc <vPortFree+0xc4>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	4a06      	ldr	r2, [pc, #24]	@ (8008ebc <vPortFree+0xc4>)
 8008ea4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008ea6:	f7fe feb5 	bl	8007c14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008eaa:	bf00      	nop
 8008eac:	3718      	adds	r7, #24
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	200043e4 	.word	0x200043e4
 8008eb8:	200043d4 	.word	0x200043d4
 8008ebc:	200043e0 	.word	0x200043e0

08008ec0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b085      	sub	sp, #20
 8008ec4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008ec6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008eca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008ecc:	4b27      	ldr	r3, [pc, #156]	@ (8008f6c <prvHeapInit+0xac>)
 8008ece:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f003 0307 	and.w	r3, r3, #7
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d00c      	beq.n	8008ef4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	3307      	adds	r3, #7
 8008ede:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f023 0307 	bic.w	r3, r3, #7
 8008ee6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008ee8:	68ba      	ldr	r2, [r7, #8]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	1ad3      	subs	r3, r2, r3
 8008eee:	4a1f      	ldr	r2, [pc, #124]	@ (8008f6c <prvHeapInit+0xac>)
 8008ef0:	4413      	add	r3, r2
 8008ef2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008ef8:	4a1d      	ldr	r2, [pc, #116]	@ (8008f70 <prvHeapInit+0xb0>)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008efe:	4b1c      	ldr	r3, [pc, #112]	@ (8008f70 <prvHeapInit+0xb0>)
 8008f00:	2200      	movs	r2, #0
 8008f02:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	68ba      	ldr	r2, [r7, #8]
 8008f08:	4413      	add	r3, r2
 8008f0a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008f0c:	2208      	movs	r2, #8
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	1a9b      	subs	r3, r3, r2
 8008f12:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f023 0307 	bic.w	r3, r3, #7
 8008f1a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	4a15      	ldr	r2, [pc, #84]	@ (8008f74 <prvHeapInit+0xb4>)
 8008f20:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008f22:	4b14      	ldr	r3, [pc, #80]	@ (8008f74 <prvHeapInit+0xb4>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2200      	movs	r2, #0
 8008f28:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008f2a:	4b12      	ldr	r3, [pc, #72]	@ (8008f74 <prvHeapInit+0xb4>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	68fa      	ldr	r2, [r7, #12]
 8008f3a:	1ad2      	subs	r2, r2, r3
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008f40:	4b0c      	ldr	r3, [pc, #48]	@ (8008f74 <prvHeapInit+0xb4>)
 8008f42:	681a      	ldr	r2, [r3, #0]
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	4a0a      	ldr	r2, [pc, #40]	@ (8008f78 <prvHeapInit+0xb8>)
 8008f4e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	4a09      	ldr	r2, [pc, #36]	@ (8008f7c <prvHeapInit+0xbc>)
 8008f56:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008f58:	4b09      	ldr	r3, [pc, #36]	@ (8008f80 <prvHeapInit+0xc0>)
 8008f5a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008f5e:	601a      	str	r2, [r3, #0]
}
 8008f60:	bf00      	nop
 8008f62:	3714      	adds	r7, #20
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr
 8008f6c:	200007c8 	.word	0x200007c8
 8008f70:	200043c8 	.word	0x200043c8
 8008f74:	200043d0 	.word	0x200043d0
 8008f78:	200043d8 	.word	0x200043d8
 8008f7c:	200043d4 	.word	0x200043d4
 8008f80:	200043e4 	.word	0x200043e4

08008f84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008f84:	b480      	push	{r7}
 8008f86:	b085      	sub	sp, #20
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008f8c:	4b28      	ldr	r3, [pc, #160]	@ (8009030 <prvInsertBlockIntoFreeList+0xac>)
 8008f8e:	60fb      	str	r3, [r7, #12]
 8008f90:	e002      	b.n	8008f98 <prvInsertBlockIntoFreeList+0x14>
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	60fb      	str	r3, [r7, #12]
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d8f7      	bhi.n	8008f92 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	68ba      	ldr	r2, [r7, #8]
 8008fac:	4413      	add	r3, r2
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d108      	bne.n	8008fc6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	685a      	ldr	r2, [r3, #4]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	441a      	add	r2, r3
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	68ba      	ldr	r2, [r7, #8]
 8008fd0:	441a      	add	r2, r3
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d118      	bne.n	800900c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681a      	ldr	r2, [r3, #0]
 8008fde:	4b15      	ldr	r3, [pc, #84]	@ (8009034 <prvInsertBlockIntoFreeList+0xb0>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d00d      	beq.n	8009002 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	685a      	ldr	r2, [r3, #4]
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	441a      	add	r2, r3
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	601a      	str	r2, [r3, #0]
 8009000:	e008      	b.n	8009014 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009002:	4b0c      	ldr	r3, [pc, #48]	@ (8009034 <prvInsertBlockIntoFreeList+0xb0>)
 8009004:	681a      	ldr	r2, [r3, #0]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	601a      	str	r2, [r3, #0]
 800900a:	e003      	b.n	8009014 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009014:	68fa      	ldr	r2, [r7, #12]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	429a      	cmp	r2, r3
 800901a:	d002      	beq.n	8009022 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	687a      	ldr	r2, [r7, #4]
 8009020:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009022:	bf00      	nop
 8009024:	3714      	adds	r7, #20
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr
 800902e:	bf00      	nop
 8009030:	200043c8 	.word	0x200043c8
 8009034:	200043d0 	.word	0x200043d0

08009038 <atoi>:
 8009038:	220a      	movs	r2, #10
 800903a:	2100      	movs	r1, #0
 800903c:	f001 bde6 	b.w	800ac0c <strtol>

08009040 <__cvt>:
 8009040:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009044:	ec57 6b10 	vmov	r6, r7, d0
 8009048:	2f00      	cmp	r7, #0
 800904a:	460c      	mov	r4, r1
 800904c:	4619      	mov	r1, r3
 800904e:	463b      	mov	r3, r7
 8009050:	bfbb      	ittet	lt
 8009052:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009056:	461f      	movlt	r7, r3
 8009058:	2300      	movge	r3, #0
 800905a:	232d      	movlt	r3, #45	@ 0x2d
 800905c:	700b      	strb	r3, [r1, #0]
 800905e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009060:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009064:	4691      	mov	r9, r2
 8009066:	f023 0820 	bic.w	r8, r3, #32
 800906a:	bfbc      	itt	lt
 800906c:	4632      	movlt	r2, r6
 800906e:	4616      	movlt	r6, r2
 8009070:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009074:	d005      	beq.n	8009082 <__cvt+0x42>
 8009076:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800907a:	d100      	bne.n	800907e <__cvt+0x3e>
 800907c:	3401      	adds	r4, #1
 800907e:	2102      	movs	r1, #2
 8009080:	e000      	b.n	8009084 <__cvt+0x44>
 8009082:	2103      	movs	r1, #3
 8009084:	ab03      	add	r3, sp, #12
 8009086:	9301      	str	r3, [sp, #4]
 8009088:	ab02      	add	r3, sp, #8
 800908a:	9300      	str	r3, [sp, #0]
 800908c:	ec47 6b10 	vmov	d0, r6, r7
 8009090:	4653      	mov	r3, sl
 8009092:	4622      	mov	r2, r4
 8009094:	f001 ff4c 	bl	800af30 <_dtoa_r>
 8009098:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800909c:	4605      	mov	r5, r0
 800909e:	d119      	bne.n	80090d4 <__cvt+0x94>
 80090a0:	f019 0f01 	tst.w	r9, #1
 80090a4:	d00e      	beq.n	80090c4 <__cvt+0x84>
 80090a6:	eb00 0904 	add.w	r9, r0, r4
 80090aa:	2200      	movs	r2, #0
 80090ac:	2300      	movs	r3, #0
 80090ae:	4630      	mov	r0, r6
 80090b0:	4639      	mov	r1, r7
 80090b2:	f7f7 fd39 	bl	8000b28 <__aeabi_dcmpeq>
 80090b6:	b108      	cbz	r0, 80090bc <__cvt+0x7c>
 80090b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80090bc:	2230      	movs	r2, #48	@ 0x30
 80090be:	9b03      	ldr	r3, [sp, #12]
 80090c0:	454b      	cmp	r3, r9
 80090c2:	d31e      	bcc.n	8009102 <__cvt+0xc2>
 80090c4:	9b03      	ldr	r3, [sp, #12]
 80090c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80090c8:	1b5b      	subs	r3, r3, r5
 80090ca:	4628      	mov	r0, r5
 80090cc:	6013      	str	r3, [r2, #0]
 80090ce:	b004      	add	sp, #16
 80090d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80090d8:	eb00 0904 	add.w	r9, r0, r4
 80090dc:	d1e5      	bne.n	80090aa <__cvt+0x6a>
 80090de:	7803      	ldrb	r3, [r0, #0]
 80090e0:	2b30      	cmp	r3, #48	@ 0x30
 80090e2:	d10a      	bne.n	80090fa <__cvt+0xba>
 80090e4:	2200      	movs	r2, #0
 80090e6:	2300      	movs	r3, #0
 80090e8:	4630      	mov	r0, r6
 80090ea:	4639      	mov	r1, r7
 80090ec:	f7f7 fd1c 	bl	8000b28 <__aeabi_dcmpeq>
 80090f0:	b918      	cbnz	r0, 80090fa <__cvt+0xba>
 80090f2:	f1c4 0401 	rsb	r4, r4, #1
 80090f6:	f8ca 4000 	str.w	r4, [sl]
 80090fa:	f8da 3000 	ldr.w	r3, [sl]
 80090fe:	4499      	add	r9, r3
 8009100:	e7d3      	b.n	80090aa <__cvt+0x6a>
 8009102:	1c59      	adds	r1, r3, #1
 8009104:	9103      	str	r1, [sp, #12]
 8009106:	701a      	strb	r2, [r3, #0]
 8009108:	e7d9      	b.n	80090be <__cvt+0x7e>

0800910a <__exponent>:
 800910a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800910c:	2900      	cmp	r1, #0
 800910e:	bfba      	itte	lt
 8009110:	4249      	neglt	r1, r1
 8009112:	232d      	movlt	r3, #45	@ 0x2d
 8009114:	232b      	movge	r3, #43	@ 0x2b
 8009116:	2909      	cmp	r1, #9
 8009118:	7002      	strb	r2, [r0, #0]
 800911a:	7043      	strb	r3, [r0, #1]
 800911c:	dd29      	ble.n	8009172 <__exponent+0x68>
 800911e:	f10d 0307 	add.w	r3, sp, #7
 8009122:	461d      	mov	r5, r3
 8009124:	270a      	movs	r7, #10
 8009126:	461a      	mov	r2, r3
 8009128:	fbb1 f6f7 	udiv	r6, r1, r7
 800912c:	fb07 1416 	mls	r4, r7, r6, r1
 8009130:	3430      	adds	r4, #48	@ 0x30
 8009132:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009136:	460c      	mov	r4, r1
 8009138:	2c63      	cmp	r4, #99	@ 0x63
 800913a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800913e:	4631      	mov	r1, r6
 8009140:	dcf1      	bgt.n	8009126 <__exponent+0x1c>
 8009142:	3130      	adds	r1, #48	@ 0x30
 8009144:	1e94      	subs	r4, r2, #2
 8009146:	f803 1c01 	strb.w	r1, [r3, #-1]
 800914a:	1c41      	adds	r1, r0, #1
 800914c:	4623      	mov	r3, r4
 800914e:	42ab      	cmp	r3, r5
 8009150:	d30a      	bcc.n	8009168 <__exponent+0x5e>
 8009152:	f10d 0309 	add.w	r3, sp, #9
 8009156:	1a9b      	subs	r3, r3, r2
 8009158:	42ac      	cmp	r4, r5
 800915a:	bf88      	it	hi
 800915c:	2300      	movhi	r3, #0
 800915e:	3302      	adds	r3, #2
 8009160:	4403      	add	r3, r0
 8009162:	1a18      	subs	r0, r3, r0
 8009164:	b003      	add	sp, #12
 8009166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009168:	f813 6b01 	ldrb.w	r6, [r3], #1
 800916c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009170:	e7ed      	b.n	800914e <__exponent+0x44>
 8009172:	2330      	movs	r3, #48	@ 0x30
 8009174:	3130      	adds	r1, #48	@ 0x30
 8009176:	7083      	strb	r3, [r0, #2]
 8009178:	70c1      	strb	r1, [r0, #3]
 800917a:	1d03      	adds	r3, r0, #4
 800917c:	e7f1      	b.n	8009162 <__exponent+0x58>
	...

08009180 <_printf_float>:
 8009180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009184:	b08d      	sub	sp, #52	@ 0x34
 8009186:	460c      	mov	r4, r1
 8009188:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800918c:	4616      	mov	r6, r2
 800918e:	461f      	mov	r7, r3
 8009190:	4605      	mov	r5, r0
 8009192:	f001 fe07 	bl	800ada4 <_localeconv_r>
 8009196:	6803      	ldr	r3, [r0, #0]
 8009198:	9304      	str	r3, [sp, #16]
 800919a:	4618      	mov	r0, r3
 800919c:	f7f7 f898 	bl	80002d0 <strlen>
 80091a0:	2300      	movs	r3, #0
 80091a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80091a4:	f8d8 3000 	ldr.w	r3, [r8]
 80091a8:	9005      	str	r0, [sp, #20]
 80091aa:	3307      	adds	r3, #7
 80091ac:	f023 0307 	bic.w	r3, r3, #7
 80091b0:	f103 0208 	add.w	r2, r3, #8
 80091b4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80091b8:	f8d4 b000 	ldr.w	fp, [r4]
 80091bc:	f8c8 2000 	str.w	r2, [r8]
 80091c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80091c4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80091c8:	9307      	str	r3, [sp, #28]
 80091ca:	f8cd 8018 	str.w	r8, [sp, #24]
 80091ce:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80091d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80091d6:	4b9c      	ldr	r3, [pc, #624]	@ (8009448 <_printf_float+0x2c8>)
 80091d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80091dc:	f7f7 fcd6 	bl	8000b8c <__aeabi_dcmpun>
 80091e0:	bb70      	cbnz	r0, 8009240 <_printf_float+0xc0>
 80091e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80091e6:	4b98      	ldr	r3, [pc, #608]	@ (8009448 <_printf_float+0x2c8>)
 80091e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80091ec:	f7f7 fcb0 	bl	8000b50 <__aeabi_dcmple>
 80091f0:	bb30      	cbnz	r0, 8009240 <_printf_float+0xc0>
 80091f2:	2200      	movs	r2, #0
 80091f4:	2300      	movs	r3, #0
 80091f6:	4640      	mov	r0, r8
 80091f8:	4649      	mov	r1, r9
 80091fa:	f7f7 fc9f 	bl	8000b3c <__aeabi_dcmplt>
 80091fe:	b110      	cbz	r0, 8009206 <_printf_float+0x86>
 8009200:	232d      	movs	r3, #45	@ 0x2d
 8009202:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009206:	4a91      	ldr	r2, [pc, #580]	@ (800944c <_printf_float+0x2cc>)
 8009208:	4b91      	ldr	r3, [pc, #580]	@ (8009450 <_printf_float+0x2d0>)
 800920a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800920e:	bf8c      	ite	hi
 8009210:	4690      	movhi	r8, r2
 8009212:	4698      	movls	r8, r3
 8009214:	2303      	movs	r3, #3
 8009216:	6123      	str	r3, [r4, #16]
 8009218:	f02b 0304 	bic.w	r3, fp, #4
 800921c:	6023      	str	r3, [r4, #0]
 800921e:	f04f 0900 	mov.w	r9, #0
 8009222:	9700      	str	r7, [sp, #0]
 8009224:	4633      	mov	r3, r6
 8009226:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009228:	4621      	mov	r1, r4
 800922a:	4628      	mov	r0, r5
 800922c:	f000 f9d2 	bl	80095d4 <_printf_common>
 8009230:	3001      	adds	r0, #1
 8009232:	f040 808d 	bne.w	8009350 <_printf_float+0x1d0>
 8009236:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800923a:	b00d      	add	sp, #52	@ 0x34
 800923c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009240:	4642      	mov	r2, r8
 8009242:	464b      	mov	r3, r9
 8009244:	4640      	mov	r0, r8
 8009246:	4649      	mov	r1, r9
 8009248:	f7f7 fca0 	bl	8000b8c <__aeabi_dcmpun>
 800924c:	b140      	cbz	r0, 8009260 <_printf_float+0xe0>
 800924e:	464b      	mov	r3, r9
 8009250:	2b00      	cmp	r3, #0
 8009252:	bfbc      	itt	lt
 8009254:	232d      	movlt	r3, #45	@ 0x2d
 8009256:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800925a:	4a7e      	ldr	r2, [pc, #504]	@ (8009454 <_printf_float+0x2d4>)
 800925c:	4b7e      	ldr	r3, [pc, #504]	@ (8009458 <_printf_float+0x2d8>)
 800925e:	e7d4      	b.n	800920a <_printf_float+0x8a>
 8009260:	6863      	ldr	r3, [r4, #4]
 8009262:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009266:	9206      	str	r2, [sp, #24]
 8009268:	1c5a      	adds	r2, r3, #1
 800926a:	d13b      	bne.n	80092e4 <_printf_float+0x164>
 800926c:	2306      	movs	r3, #6
 800926e:	6063      	str	r3, [r4, #4]
 8009270:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009274:	2300      	movs	r3, #0
 8009276:	6022      	str	r2, [r4, #0]
 8009278:	9303      	str	r3, [sp, #12]
 800927a:	ab0a      	add	r3, sp, #40	@ 0x28
 800927c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009280:	ab09      	add	r3, sp, #36	@ 0x24
 8009282:	9300      	str	r3, [sp, #0]
 8009284:	6861      	ldr	r1, [r4, #4]
 8009286:	ec49 8b10 	vmov	d0, r8, r9
 800928a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800928e:	4628      	mov	r0, r5
 8009290:	f7ff fed6 	bl	8009040 <__cvt>
 8009294:	9b06      	ldr	r3, [sp, #24]
 8009296:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009298:	2b47      	cmp	r3, #71	@ 0x47
 800929a:	4680      	mov	r8, r0
 800929c:	d129      	bne.n	80092f2 <_printf_float+0x172>
 800929e:	1cc8      	adds	r0, r1, #3
 80092a0:	db02      	blt.n	80092a8 <_printf_float+0x128>
 80092a2:	6863      	ldr	r3, [r4, #4]
 80092a4:	4299      	cmp	r1, r3
 80092a6:	dd41      	ble.n	800932c <_printf_float+0x1ac>
 80092a8:	f1aa 0a02 	sub.w	sl, sl, #2
 80092ac:	fa5f fa8a 	uxtb.w	sl, sl
 80092b0:	3901      	subs	r1, #1
 80092b2:	4652      	mov	r2, sl
 80092b4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80092b8:	9109      	str	r1, [sp, #36]	@ 0x24
 80092ba:	f7ff ff26 	bl	800910a <__exponent>
 80092be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80092c0:	1813      	adds	r3, r2, r0
 80092c2:	2a01      	cmp	r2, #1
 80092c4:	4681      	mov	r9, r0
 80092c6:	6123      	str	r3, [r4, #16]
 80092c8:	dc02      	bgt.n	80092d0 <_printf_float+0x150>
 80092ca:	6822      	ldr	r2, [r4, #0]
 80092cc:	07d2      	lsls	r2, r2, #31
 80092ce:	d501      	bpl.n	80092d4 <_printf_float+0x154>
 80092d0:	3301      	adds	r3, #1
 80092d2:	6123      	str	r3, [r4, #16]
 80092d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d0a2      	beq.n	8009222 <_printf_float+0xa2>
 80092dc:	232d      	movs	r3, #45	@ 0x2d
 80092de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80092e2:	e79e      	b.n	8009222 <_printf_float+0xa2>
 80092e4:	9a06      	ldr	r2, [sp, #24]
 80092e6:	2a47      	cmp	r2, #71	@ 0x47
 80092e8:	d1c2      	bne.n	8009270 <_printf_float+0xf0>
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d1c0      	bne.n	8009270 <_printf_float+0xf0>
 80092ee:	2301      	movs	r3, #1
 80092f0:	e7bd      	b.n	800926e <_printf_float+0xee>
 80092f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80092f6:	d9db      	bls.n	80092b0 <_printf_float+0x130>
 80092f8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80092fc:	d118      	bne.n	8009330 <_printf_float+0x1b0>
 80092fe:	2900      	cmp	r1, #0
 8009300:	6863      	ldr	r3, [r4, #4]
 8009302:	dd0b      	ble.n	800931c <_printf_float+0x19c>
 8009304:	6121      	str	r1, [r4, #16]
 8009306:	b913      	cbnz	r3, 800930e <_printf_float+0x18e>
 8009308:	6822      	ldr	r2, [r4, #0]
 800930a:	07d0      	lsls	r0, r2, #31
 800930c:	d502      	bpl.n	8009314 <_printf_float+0x194>
 800930e:	3301      	adds	r3, #1
 8009310:	440b      	add	r3, r1
 8009312:	6123      	str	r3, [r4, #16]
 8009314:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009316:	f04f 0900 	mov.w	r9, #0
 800931a:	e7db      	b.n	80092d4 <_printf_float+0x154>
 800931c:	b913      	cbnz	r3, 8009324 <_printf_float+0x1a4>
 800931e:	6822      	ldr	r2, [r4, #0]
 8009320:	07d2      	lsls	r2, r2, #31
 8009322:	d501      	bpl.n	8009328 <_printf_float+0x1a8>
 8009324:	3302      	adds	r3, #2
 8009326:	e7f4      	b.n	8009312 <_printf_float+0x192>
 8009328:	2301      	movs	r3, #1
 800932a:	e7f2      	b.n	8009312 <_printf_float+0x192>
 800932c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009330:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009332:	4299      	cmp	r1, r3
 8009334:	db05      	blt.n	8009342 <_printf_float+0x1c2>
 8009336:	6823      	ldr	r3, [r4, #0]
 8009338:	6121      	str	r1, [r4, #16]
 800933a:	07d8      	lsls	r0, r3, #31
 800933c:	d5ea      	bpl.n	8009314 <_printf_float+0x194>
 800933e:	1c4b      	adds	r3, r1, #1
 8009340:	e7e7      	b.n	8009312 <_printf_float+0x192>
 8009342:	2900      	cmp	r1, #0
 8009344:	bfd4      	ite	le
 8009346:	f1c1 0202 	rsble	r2, r1, #2
 800934a:	2201      	movgt	r2, #1
 800934c:	4413      	add	r3, r2
 800934e:	e7e0      	b.n	8009312 <_printf_float+0x192>
 8009350:	6823      	ldr	r3, [r4, #0]
 8009352:	055a      	lsls	r2, r3, #21
 8009354:	d407      	bmi.n	8009366 <_printf_float+0x1e6>
 8009356:	6923      	ldr	r3, [r4, #16]
 8009358:	4642      	mov	r2, r8
 800935a:	4631      	mov	r1, r6
 800935c:	4628      	mov	r0, r5
 800935e:	47b8      	blx	r7
 8009360:	3001      	adds	r0, #1
 8009362:	d12b      	bne.n	80093bc <_printf_float+0x23c>
 8009364:	e767      	b.n	8009236 <_printf_float+0xb6>
 8009366:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800936a:	f240 80dd 	bls.w	8009528 <_printf_float+0x3a8>
 800936e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009372:	2200      	movs	r2, #0
 8009374:	2300      	movs	r3, #0
 8009376:	f7f7 fbd7 	bl	8000b28 <__aeabi_dcmpeq>
 800937a:	2800      	cmp	r0, #0
 800937c:	d033      	beq.n	80093e6 <_printf_float+0x266>
 800937e:	4a37      	ldr	r2, [pc, #220]	@ (800945c <_printf_float+0x2dc>)
 8009380:	2301      	movs	r3, #1
 8009382:	4631      	mov	r1, r6
 8009384:	4628      	mov	r0, r5
 8009386:	47b8      	blx	r7
 8009388:	3001      	adds	r0, #1
 800938a:	f43f af54 	beq.w	8009236 <_printf_float+0xb6>
 800938e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009392:	4543      	cmp	r3, r8
 8009394:	db02      	blt.n	800939c <_printf_float+0x21c>
 8009396:	6823      	ldr	r3, [r4, #0]
 8009398:	07d8      	lsls	r0, r3, #31
 800939a:	d50f      	bpl.n	80093bc <_printf_float+0x23c>
 800939c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093a0:	4631      	mov	r1, r6
 80093a2:	4628      	mov	r0, r5
 80093a4:	47b8      	blx	r7
 80093a6:	3001      	adds	r0, #1
 80093a8:	f43f af45 	beq.w	8009236 <_printf_float+0xb6>
 80093ac:	f04f 0900 	mov.w	r9, #0
 80093b0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80093b4:	f104 0a1a 	add.w	sl, r4, #26
 80093b8:	45c8      	cmp	r8, r9
 80093ba:	dc09      	bgt.n	80093d0 <_printf_float+0x250>
 80093bc:	6823      	ldr	r3, [r4, #0]
 80093be:	079b      	lsls	r3, r3, #30
 80093c0:	f100 8103 	bmi.w	80095ca <_printf_float+0x44a>
 80093c4:	68e0      	ldr	r0, [r4, #12]
 80093c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80093c8:	4298      	cmp	r0, r3
 80093ca:	bfb8      	it	lt
 80093cc:	4618      	movlt	r0, r3
 80093ce:	e734      	b.n	800923a <_printf_float+0xba>
 80093d0:	2301      	movs	r3, #1
 80093d2:	4652      	mov	r2, sl
 80093d4:	4631      	mov	r1, r6
 80093d6:	4628      	mov	r0, r5
 80093d8:	47b8      	blx	r7
 80093da:	3001      	adds	r0, #1
 80093dc:	f43f af2b 	beq.w	8009236 <_printf_float+0xb6>
 80093e0:	f109 0901 	add.w	r9, r9, #1
 80093e4:	e7e8      	b.n	80093b8 <_printf_float+0x238>
 80093e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	dc39      	bgt.n	8009460 <_printf_float+0x2e0>
 80093ec:	4a1b      	ldr	r2, [pc, #108]	@ (800945c <_printf_float+0x2dc>)
 80093ee:	2301      	movs	r3, #1
 80093f0:	4631      	mov	r1, r6
 80093f2:	4628      	mov	r0, r5
 80093f4:	47b8      	blx	r7
 80093f6:	3001      	adds	r0, #1
 80093f8:	f43f af1d 	beq.w	8009236 <_printf_float+0xb6>
 80093fc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009400:	ea59 0303 	orrs.w	r3, r9, r3
 8009404:	d102      	bne.n	800940c <_printf_float+0x28c>
 8009406:	6823      	ldr	r3, [r4, #0]
 8009408:	07d9      	lsls	r1, r3, #31
 800940a:	d5d7      	bpl.n	80093bc <_printf_float+0x23c>
 800940c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009410:	4631      	mov	r1, r6
 8009412:	4628      	mov	r0, r5
 8009414:	47b8      	blx	r7
 8009416:	3001      	adds	r0, #1
 8009418:	f43f af0d 	beq.w	8009236 <_printf_float+0xb6>
 800941c:	f04f 0a00 	mov.w	sl, #0
 8009420:	f104 0b1a 	add.w	fp, r4, #26
 8009424:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009426:	425b      	negs	r3, r3
 8009428:	4553      	cmp	r3, sl
 800942a:	dc01      	bgt.n	8009430 <_printf_float+0x2b0>
 800942c:	464b      	mov	r3, r9
 800942e:	e793      	b.n	8009358 <_printf_float+0x1d8>
 8009430:	2301      	movs	r3, #1
 8009432:	465a      	mov	r2, fp
 8009434:	4631      	mov	r1, r6
 8009436:	4628      	mov	r0, r5
 8009438:	47b8      	blx	r7
 800943a:	3001      	adds	r0, #1
 800943c:	f43f aefb 	beq.w	8009236 <_printf_float+0xb6>
 8009440:	f10a 0a01 	add.w	sl, sl, #1
 8009444:	e7ee      	b.n	8009424 <_printf_float+0x2a4>
 8009446:	bf00      	nop
 8009448:	7fefffff 	.word	0x7fefffff
 800944c:	0800d98c 	.word	0x0800d98c
 8009450:	0800d988 	.word	0x0800d988
 8009454:	0800d994 	.word	0x0800d994
 8009458:	0800d990 	.word	0x0800d990
 800945c:	0800d998 	.word	0x0800d998
 8009460:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009462:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009466:	4553      	cmp	r3, sl
 8009468:	bfa8      	it	ge
 800946a:	4653      	movge	r3, sl
 800946c:	2b00      	cmp	r3, #0
 800946e:	4699      	mov	r9, r3
 8009470:	dc36      	bgt.n	80094e0 <_printf_float+0x360>
 8009472:	f04f 0b00 	mov.w	fp, #0
 8009476:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800947a:	f104 021a 	add.w	r2, r4, #26
 800947e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009480:	9306      	str	r3, [sp, #24]
 8009482:	eba3 0309 	sub.w	r3, r3, r9
 8009486:	455b      	cmp	r3, fp
 8009488:	dc31      	bgt.n	80094ee <_printf_float+0x36e>
 800948a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800948c:	459a      	cmp	sl, r3
 800948e:	dc3a      	bgt.n	8009506 <_printf_float+0x386>
 8009490:	6823      	ldr	r3, [r4, #0]
 8009492:	07da      	lsls	r2, r3, #31
 8009494:	d437      	bmi.n	8009506 <_printf_float+0x386>
 8009496:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009498:	ebaa 0903 	sub.w	r9, sl, r3
 800949c:	9b06      	ldr	r3, [sp, #24]
 800949e:	ebaa 0303 	sub.w	r3, sl, r3
 80094a2:	4599      	cmp	r9, r3
 80094a4:	bfa8      	it	ge
 80094a6:	4699      	movge	r9, r3
 80094a8:	f1b9 0f00 	cmp.w	r9, #0
 80094ac:	dc33      	bgt.n	8009516 <_printf_float+0x396>
 80094ae:	f04f 0800 	mov.w	r8, #0
 80094b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80094b6:	f104 0b1a 	add.w	fp, r4, #26
 80094ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094bc:	ebaa 0303 	sub.w	r3, sl, r3
 80094c0:	eba3 0309 	sub.w	r3, r3, r9
 80094c4:	4543      	cmp	r3, r8
 80094c6:	f77f af79 	ble.w	80093bc <_printf_float+0x23c>
 80094ca:	2301      	movs	r3, #1
 80094cc:	465a      	mov	r2, fp
 80094ce:	4631      	mov	r1, r6
 80094d0:	4628      	mov	r0, r5
 80094d2:	47b8      	blx	r7
 80094d4:	3001      	adds	r0, #1
 80094d6:	f43f aeae 	beq.w	8009236 <_printf_float+0xb6>
 80094da:	f108 0801 	add.w	r8, r8, #1
 80094de:	e7ec      	b.n	80094ba <_printf_float+0x33a>
 80094e0:	4642      	mov	r2, r8
 80094e2:	4631      	mov	r1, r6
 80094e4:	4628      	mov	r0, r5
 80094e6:	47b8      	blx	r7
 80094e8:	3001      	adds	r0, #1
 80094ea:	d1c2      	bne.n	8009472 <_printf_float+0x2f2>
 80094ec:	e6a3      	b.n	8009236 <_printf_float+0xb6>
 80094ee:	2301      	movs	r3, #1
 80094f0:	4631      	mov	r1, r6
 80094f2:	4628      	mov	r0, r5
 80094f4:	9206      	str	r2, [sp, #24]
 80094f6:	47b8      	blx	r7
 80094f8:	3001      	adds	r0, #1
 80094fa:	f43f ae9c 	beq.w	8009236 <_printf_float+0xb6>
 80094fe:	9a06      	ldr	r2, [sp, #24]
 8009500:	f10b 0b01 	add.w	fp, fp, #1
 8009504:	e7bb      	b.n	800947e <_printf_float+0x2fe>
 8009506:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800950a:	4631      	mov	r1, r6
 800950c:	4628      	mov	r0, r5
 800950e:	47b8      	blx	r7
 8009510:	3001      	adds	r0, #1
 8009512:	d1c0      	bne.n	8009496 <_printf_float+0x316>
 8009514:	e68f      	b.n	8009236 <_printf_float+0xb6>
 8009516:	9a06      	ldr	r2, [sp, #24]
 8009518:	464b      	mov	r3, r9
 800951a:	4442      	add	r2, r8
 800951c:	4631      	mov	r1, r6
 800951e:	4628      	mov	r0, r5
 8009520:	47b8      	blx	r7
 8009522:	3001      	adds	r0, #1
 8009524:	d1c3      	bne.n	80094ae <_printf_float+0x32e>
 8009526:	e686      	b.n	8009236 <_printf_float+0xb6>
 8009528:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800952c:	f1ba 0f01 	cmp.w	sl, #1
 8009530:	dc01      	bgt.n	8009536 <_printf_float+0x3b6>
 8009532:	07db      	lsls	r3, r3, #31
 8009534:	d536      	bpl.n	80095a4 <_printf_float+0x424>
 8009536:	2301      	movs	r3, #1
 8009538:	4642      	mov	r2, r8
 800953a:	4631      	mov	r1, r6
 800953c:	4628      	mov	r0, r5
 800953e:	47b8      	blx	r7
 8009540:	3001      	adds	r0, #1
 8009542:	f43f ae78 	beq.w	8009236 <_printf_float+0xb6>
 8009546:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800954a:	4631      	mov	r1, r6
 800954c:	4628      	mov	r0, r5
 800954e:	47b8      	blx	r7
 8009550:	3001      	adds	r0, #1
 8009552:	f43f ae70 	beq.w	8009236 <_printf_float+0xb6>
 8009556:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800955a:	2200      	movs	r2, #0
 800955c:	2300      	movs	r3, #0
 800955e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8009562:	f7f7 fae1 	bl	8000b28 <__aeabi_dcmpeq>
 8009566:	b9c0      	cbnz	r0, 800959a <_printf_float+0x41a>
 8009568:	4653      	mov	r3, sl
 800956a:	f108 0201 	add.w	r2, r8, #1
 800956e:	4631      	mov	r1, r6
 8009570:	4628      	mov	r0, r5
 8009572:	47b8      	blx	r7
 8009574:	3001      	adds	r0, #1
 8009576:	d10c      	bne.n	8009592 <_printf_float+0x412>
 8009578:	e65d      	b.n	8009236 <_printf_float+0xb6>
 800957a:	2301      	movs	r3, #1
 800957c:	465a      	mov	r2, fp
 800957e:	4631      	mov	r1, r6
 8009580:	4628      	mov	r0, r5
 8009582:	47b8      	blx	r7
 8009584:	3001      	adds	r0, #1
 8009586:	f43f ae56 	beq.w	8009236 <_printf_float+0xb6>
 800958a:	f108 0801 	add.w	r8, r8, #1
 800958e:	45d0      	cmp	r8, sl
 8009590:	dbf3      	blt.n	800957a <_printf_float+0x3fa>
 8009592:	464b      	mov	r3, r9
 8009594:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009598:	e6df      	b.n	800935a <_printf_float+0x1da>
 800959a:	f04f 0800 	mov.w	r8, #0
 800959e:	f104 0b1a 	add.w	fp, r4, #26
 80095a2:	e7f4      	b.n	800958e <_printf_float+0x40e>
 80095a4:	2301      	movs	r3, #1
 80095a6:	4642      	mov	r2, r8
 80095a8:	e7e1      	b.n	800956e <_printf_float+0x3ee>
 80095aa:	2301      	movs	r3, #1
 80095ac:	464a      	mov	r2, r9
 80095ae:	4631      	mov	r1, r6
 80095b0:	4628      	mov	r0, r5
 80095b2:	47b8      	blx	r7
 80095b4:	3001      	adds	r0, #1
 80095b6:	f43f ae3e 	beq.w	8009236 <_printf_float+0xb6>
 80095ba:	f108 0801 	add.w	r8, r8, #1
 80095be:	68e3      	ldr	r3, [r4, #12]
 80095c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80095c2:	1a5b      	subs	r3, r3, r1
 80095c4:	4543      	cmp	r3, r8
 80095c6:	dcf0      	bgt.n	80095aa <_printf_float+0x42a>
 80095c8:	e6fc      	b.n	80093c4 <_printf_float+0x244>
 80095ca:	f04f 0800 	mov.w	r8, #0
 80095ce:	f104 0919 	add.w	r9, r4, #25
 80095d2:	e7f4      	b.n	80095be <_printf_float+0x43e>

080095d4 <_printf_common>:
 80095d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095d8:	4616      	mov	r6, r2
 80095da:	4698      	mov	r8, r3
 80095dc:	688a      	ldr	r2, [r1, #8]
 80095de:	690b      	ldr	r3, [r1, #16]
 80095e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80095e4:	4293      	cmp	r3, r2
 80095e6:	bfb8      	it	lt
 80095e8:	4613      	movlt	r3, r2
 80095ea:	6033      	str	r3, [r6, #0]
 80095ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80095f0:	4607      	mov	r7, r0
 80095f2:	460c      	mov	r4, r1
 80095f4:	b10a      	cbz	r2, 80095fa <_printf_common+0x26>
 80095f6:	3301      	adds	r3, #1
 80095f8:	6033      	str	r3, [r6, #0]
 80095fa:	6823      	ldr	r3, [r4, #0]
 80095fc:	0699      	lsls	r1, r3, #26
 80095fe:	bf42      	ittt	mi
 8009600:	6833      	ldrmi	r3, [r6, #0]
 8009602:	3302      	addmi	r3, #2
 8009604:	6033      	strmi	r3, [r6, #0]
 8009606:	6825      	ldr	r5, [r4, #0]
 8009608:	f015 0506 	ands.w	r5, r5, #6
 800960c:	d106      	bne.n	800961c <_printf_common+0x48>
 800960e:	f104 0a19 	add.w	sl, r4, #25
 8009612:	68e3      	ldr	r3, [r4, #12]
 8009614:	6832      	ldr	r2, [r6, #0]
 8009616:	1a9b      	subs	r3, r3, r2
 8009618:	42ab      	cmp	r3, r5
 800961a:	dc26      	bgt.n	800966a <_printf_common+0x96>
 800961c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009620:	6822      	ldr	r2, [r4, #0]
 8009622:	3b00      	subs	r3, #0
 8009624:	bf18      	it	ne
 8009626:	2301      	movne	r3, #1
 8009628:	0692      	lsls	r2, r2, #26
 800962a:	d42b      	bmi.n	8009684 <_printf_common+0xb0>
 800962c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009630:	4641      	mov	r1, r8
 8009632:	4638      	mov	r0, r7
 8009634:	47c8      	blx	r9
 8009636:	3001      	adds	r0, #1
 8009638:	d01e      	beq.n	8009678 <_printf_common+0xa4>
 800963a:	6823      	ldr	r3, [r4, #0]
 800963c:	6922      	ldr	r2, [r4, #16]
 800963e:	f003 0306 	and.w	r3, r3, #6
 8009642:	2b04      	cmp	r3, #4
 8009644:	bf02      	ittt	eq
 8009646:	68e5      	ldreq	r5, [r4, #12]
 8009648:	6833      	ldreq	r3, [r6, #0]
 800964a:	1aed      	subeq	r5, r5, r3
 800964c:	68a3      	ldr	r3, [r4, #8]
 800964e:	bf0c      	ite	eq
 8009650:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009654:	2500      	movne	r5, #0
 8009656:	4293      	cmp	r3, r2
 8009658:	bfc4      	itt	gt
 800965a:	1a9b      	subgt	r3, r3, r2
 800965c:	18ed      	addgt	r5, r5, r3
 800965e:	2600      	movs	r6, #0
 8009660:	341a      	adds	r4, #26
 8009662:	42b5      	cmp	r5, r6
 8009664:	d11a      	bne.n	800969c <_printf_common+0xc8>
 8009666:	2000      	movs	r0, #0
 8009668:	e008      	b.n	800967c <_printf_common+0xa8>
 800966a:	2301      	movs	r3, #1
 800966c:	4652      	mov	r2, sl
 800966e:	4641      	mov	r1, r8
 8009670:	4638      	mov	r0, r7
 8009672:	47c8      	blx	r9
 8009674:	3001      	adds	r0, #1
 8009676:	d103      	bne.n	8009680 <_printf_common+0xac>
 8009678:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800967c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009680:	3501      	adds	r5, #1
 8009682:	e7c6      	b.n	8009612 <_printf_common+0x3e>
 8009684:	18e1      	adds	r1, r4, r3
 8009686:	1c5a      	adds	r2, r3, #1
 8009688:	2030      	movs	r0, #48	@ 0x30
 800968a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800968e:	4422      	add	r2, r4
 8009690:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009694:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009698:	3302      	adds	r3, #2
 800969a:	e7c7      	b.n	800962c <_printf_common+0x58>
 800969c:	2301      	movs	r3, #1
 800969e:	4622      	mov	r2, r4
 80096a0:	4641      	mov	r1, r8
 80096a2:	4638      	mov	r0, r7
 80096a4:	47c8      	blx	r9
 80096a6:	3001      	adds	r0, #1
 80096a8:	d0e6      	beq.n	8009678 <_printf_common+0xa4>
 80096aa:	3601      	adds	r6, #1
 80096ac:	e7d9      	b.n	8009662 <_printf_common+0x8e>
	...

080096b0 <_printf_i>:
 80096b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80096b4:	7e0f      	ldrb	r7, [r1, #24]
 80096b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80096b8:	2f78      	cmp	r7, #120	@ 0x78
 80096ba:	4691      	mov	r9, r2
 80096bc:	4680      	mov	r8, r0
 80096be:	460c      	mov	r4, r1
 80096c0:	469a      	mov	sl, r3
 80096c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80096c6:	d807      	bhi.n	80096d8 <_printf_i+0x28>
 80096c8:	2f62      	cmp	r7, #98	@ 0x62
 80096ca:	d80a      	bhi.n	80096e2 <_printf_i+0x32>
 80096cc:	2f00      	cmp	r7, #0
 80096ce:	f000 80d1 	beq.w	8009874 <_printf_i+0x1c4>
 80096d2:	2f58      	cmp	r7, #88	@ 0x58
 80096d4:	f000 80b8 	beq.w	8009848 <_printf_i+0x198>
 80096d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80096dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80096e0:	e03a      	b.n	8009758 <_printf_i+0xa8>
 80096e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80096e6:	2b15      	cmp	r3, #21
 80096e8:	d8f6      	bhi.n	80096d8 <_printf_i+0x28>
 80096ea:	a101      	add	r1, pc, #4	@ (adr r1, 80096f0 <_printf_i+0x40>)
 80096ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80096f0:	08009749 	.word	0x08009749
 80096f4:	0800975d 	.word	0x0800975d
 80096f8:	080096d9 	.word	0x080096d9
 80096fc:	080096d9 	.word	0x080096d9
 8009700:	080096d9 	.word	0x080096d9
 8009704:	080096d9 	.word	0x080096d9
 8009708:	0800975d 	.word	0x0800975d
 800970c:	080096d9 	.word	0x080096d9
 8009710:	080096d9 	.word	0x080096d9
 8009714:	080096d9 	.word	0x080096d9
 8009718:	080096d9 	.word	0x080096d9
 800971c:	0800985b 	.word	0x0800985b
 8009720:	08009787 	.word	0x08009787
 8009724:	08009815 	.word	0x08009815
 8009728:	080096d9 	.word	0x080096d9
 800972c:	080096d9 	.word	0x080096d9
 8009730:	0800987d 	.word	0x0800987d
 8009734:	080096d9 	.word	0x080096d9
 8009738:	08009787 	.word	0x08009787
 800973c:	080096d9 	.word	0x080096d9
 8009740:	080096d9 	.word	0x080096d9
 8009744:	0800981d 	.word	0x0800981d
 8009748:	6833      	ldr	r3, [r6, #0]
 800974a:	1d1a      	adds	r2, r3, #4
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	6032      	str	r2, [r6, #0]
 8009750:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009754:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009758:	2301      	movs	r3, #1
 800975a:	e09c      	b.n	8009896 <_printf_i+0x1e6>
 800975c:	6833      	ldr	r3, [r6, #0]
 800975e:	6820      	ldr	r0, [r4, #0]
 8009760:	1d19      	adds	r1, r3, #4
 8009762:	6031      	str	r1, [r6, #0]
 8009764:	0606      	lsls	r6, r0, #24
 8009766:	d501      	bpl.n	800976c <_printf_i+0xbc>
 8009768:	681d      	ldr	r5, [r3, #0]
 800976a:	e003      	b.n	8009774 <_printf_i+0xc4>
 800976c:	0645      	lsls	r5, r0, #25
 800976e:	d5fb      	bpl.n	8009768 <_printf_i+0xb8>
 8009770:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009774:	2d00      	cmp	r5, #0
 8009776:	da03      	bge.n	8009780 <_printf_i+0xd0>
 8009778:	232d      	movs	r3, #45	@ 0x2d
 800977a:	426d      	negs	r5, r5
 800977c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009780:	4858      	ldr	r0, [pc, #352]	@ (80098e4 <_printf_i+0x234>)
 8009782:	230a      	movs	r3, #10
 8009784:	e011      	b.n	80097aa <_printf_i+0xfa>
 8009786:	6821      	ldr	r1, [r4, #0]
 8009788:	6833      	ldr	r3, [r6, #0]
 800978a:	0608      	lsls	r0, r1, #24
 800978c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009790:	d402      	bmi.n	8009798 <_printf_i+0xe8>
 8009792:	0649      	lsls	r1, r1, #25
 8009794:	bf48      	it	mi
 8009796:	b2ad      	uxthmi	r5, r5
 8009798:	2f6f      	cmp	r7, #111	@ 0x6f
 800979a:	4852      	ldr	r0, [pc, #328]	@ (80098e4 <_printf_i+0x234>)
 800979c:	6033      	str	r3, [r6, #0]
 800979e:	bf14      	ite	ne
 80097a0:	230a      	movne	r3, #10
 80097a2:	2308      	moveq	r3, #8
 80097a4:	2100      	movs	r1, #0
 80097a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80097aa:	6866      	ldr	r6, [r4, #4]
 80097ac:	60a6      	str	r6, [r4, #8]
 80097ae:	2e00      	cmp	r6, #0
 80097b0:	db05      	blt.n	80097be <_printf_i+0x10e>
 80097b2:	6821      	ldr	r1, [r4, #0]
 80097b4:	432e      	orrs	r6, r5
 80097b6:	f021 0104 	bic.w	r1, r1, #4
 80097ba:	6021      	str	r1, [r4, #0]
 80097bc:	d04b      	beq.n	8009856 <_printf_i+0x1a6>
 80097be:	4616      	mov	r6, r2
 80097c0:	fbb5 f1f3 	udiv	r1, r5, r3
 80097c4:	fb03 5711 	mls	r7, r3, r1, r5
 80097c8:	5dc7      	ldrb	r7, [r0, r7]
 80097ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80097ce:	462f      	mov	r7, r5
 80097d0:	42bb      	cmp	r3, r7
 80097d2:	460d      	mov	r5, r1
 80097d4:	d9f4      	bls.n	80097c0 <_printf_i+0x110>
 80097d6:	2b08      	cmp	r3, #8
 80097d8:	d10b      	bne.n	80097f2 <_printf_i+0x142>
 80097da:	6823      	ldr	r3, [r4, #0]
 80097dc:	07df      	lsls	r7, r3, #31
 80097de:	d508      	bpl.n	80097f2 <_printf_i+0x142>
 80097e0:	6923      	ldr	r3, [r4, #16]
 80097e2:	6861      	ldr	r1, [r4, #4]
 80097e4:	4299      	cmp	r1, r3
 80097e6:	bfde      	ittt	le
 80097e8:	2330      	movle	r3, #48	@ 0x30
 80097ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 80097ee:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80097f2:	1b92      	subs	r2, r2, r6
 80097f4:	6122      	str	r2, [r4, #16]
 80097f6:	f8cd a000 	str.w	sl, [sp]
 80097fa:	464b      	mov	r3, r9
 80097fc:	aa03      	add	r2, sp, #12
 80097fe:	4621      	mov	r1, r4
 8009800:	4640      	mov	r0, r8
 8009802:	f7ff fee7 	bl	80095d4 <_printf_common>
 8009806:	3001      	adds	r0, #1
 8009808:	d14a      	bne.n	80098a0 <_printf_i+0x1f0>
 800980a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800980e:	b004      	add	sp, #16
 8009810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009814:	6823      	ldr	r3, [r4, #0]
 8009816:	f043 0320 	orr.w	r3, r3, #32
 800981a:	6023      	str	r3, [r4, #0]
 800981c:	4832      	ldr	r0, [pc, #200]	@ (80098e8 <_printf_i+0x238>)
 800981e:	2778      	movs	r7, #120	@ 0x78
 8009820:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009824:	6823      	ldr	r3, [r4, #0]
 8009826:	6831      	ldr	r1, [r6, #0]
 8009828:	061f      	lsls	r7, r3, #24
 800982a:	f851 5b04 	ldr.w	r5, [r1], #4
 800982e:	d402      	bmi.n	8009836 <_printf_i+0x186>
 8009830:	065f      	lsls	r7, r3, #25
 8009832:	bf48      	it	mi
 8009834:	b2ad      	uxthmi	r5, r5
 8009836:	6031      	str	r1, [r6, #0]
 8009838:	07d9      	lsls	r1, r3, #31
 800983a:	bf44      	itt	mi
 800983c:	f043 0320 	orrmi.w	r3, r3, #32
 8009840:	6023      	strmi	r3, [r4, #0]
 8009842:	b11d      	cbz	r5, 800984c <_printf_i+0x19c>
 8009844:	2310      	movs	r3, #16
 8009846:	e7ad      	b.n	80097a4 <_printf_i+0xf4>
 8009848:	4826      	ldr	r0, [pc, #152]	@ (80098e4 <_printf_i+0x234>)
 800984a:	e7e9      	b.n	8009820 <_printf_i+0x170>
 800984c:	6823      	ldr	r3, [r4, #0]
 800984e:	f023 0320 	bic.w	r3, r3, #32
 8009852:	6023      	str	r3, [r4, #0]
 8009854:	e7f6      	b.n	8009844 <_printf_i+0x194>
 8009856:	4616      	mov	r6, r2
 8009858:	e7bd      	b.n	80097d6 <_printf_i+0x126>
 800985a:	6833      	ldr	r3, [r6, #0]
 800985c:	6825      	ldr	r5, [r4, #0]
 800985e:	6961      	ldr	r1, [r4, #20]
 8009860:	1d18      	adds	r0, r3, #4
 8009862:	6030      	str	r0, [r6, #0]
 8009864:	062e      	lsls	r6, r5, #24
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	d501      	bpl.n	800986e <_printf_i+0x1be>
 800986a:	6019      	str	r1, [r3, #0]
 800986c:	e002      	b.n	8009874 <_printf_i+0x1c4>
 800986e:	0668      	lsls	r0, r5, #25
 8009870:	d5fb      	bpl.n	800986a <_printf_i+0x1ba>
 8009872:	8019      	strh	r1, [r3, #0]
 8009874:	2300      	movs	r3, #0
 8009876:	6123      	str	r3, [r4, #16]
 8009878:	4616      	mov	r6, r2
 800987a:	e7bc      	b.n	80097f6 <_printf_i+0x146>
 800987c:	6833      	ldr	r3, [r6, #0]
 800987e:	1d1a      	adds	r2, r3, #4
 8009880:	6032      	str	r2, [r6, #0]
 8009882:	681e      	ldr	r6, [r3, #0]
 8009884:	6862      	ldr	r2, [r4, #4]
 8009886:	2100      	movs	r1, #0
 8009888:	4630      	mov	r0, r6
 800988a:	f7f6 fcd1 	bl	8000230 <memchr>
 800988e:	b108      	cbz	r0, 8009894 <_printf_i+0x1e4>
 8009890:	1b80      	subs	r0, r0, r6
 8009892:	6060      	str	r0, [r4, #4]
 8009894:	6863      	ldr	r3, [r4, #4]
 8009896:	6123      	str	r3, [r4, #16]
 8009898:	2300      	movs	r3, #0
 800989a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800989e:	e7aa      	b.n	80097f6 <_printf_i+0x146>
 80098a0:	6923      	ldr	r3, [r4, #16]
 80098a2:	4632      	mov	r2, r6
 80098a4:	4649      	mov	r1, r9
 80098a6:	4640      	mov	r0, r8
 80098a8:	47d0      	blx	sl
 80098aa:	3001      	adds	r0, #1
 80098ac:	d0ad      	beq.n	800980a <_printf_i+0x15a>
 80098ae:	6823      	ldr	r3, [r4, #0]
 80098b0:	079b      	lsls	r3, r3, #30
 80098b2:	d413      	bmi.n	80098dc <_printf_i+0x22c>
 80098b4:	68e0      	ldr	r0, [r4, #12]
 80098b6:	9b03      	ldr	r3, [sp, #12]
 80098b8:	4298      	cmp	r0, r3
 80098ba:	bfb8      	it	lt
 80098bc:	4618      	movlt	r0, r3
 80098be:	e7a6      	b.n	800980e <_printf_i+0x15e>
 80098c0:	2301      	movs	r3, #1
 80098c2:	4632      	mov	r2, r6
 80098c4:	4649      	mov	r1, r9
 80098c6:	4640      	mov	r0, r8
 80098c8:	47d0      	blx	sl
 80098ca:	3001      	adds	r0, #1
 80098cc:	d09d      	beq.n	800980a <_printf_i+0x15a>
 80098ce:	3501      	adds	r5, #1
 80098d0:	68e3      	ldr	r3, [r4, #12]
 80098d2:	9903      	ldr	r1, [sp, #12]
 80098d4:	1a5b      	subs	r3, r3, r1
 80098d6:	42ab      	cmp	r3, r5
 80098d8:	dcf2      	bgt.n	80098c0 <_printf_i+0x210>
 80098da:	e7eb      	b.n	80098b4 <_printf_i+0x204>
 80098dc:	2500      	movs	r5, #0
 80098de:	f104 0619 	add.w	r6, r4, #25
 80098e2:	e7f5      	b.n	80098d0 <_printf_i+0x220>
 80098e4:	0800d99a 	.word	0x0800d99a
 80098e8:	0800d9ab 	.word	0x0800d9ab

080098ec <_scanf_float>:
 80098ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098f0:	b087      	sub	sp, #28
 80098f2:	4691      	mov	r9, r2
 80098f4:	9303      	str	r3, [sp, #12]
 80098f6:	688b      	ldr	r3, [r1, #8]
 80098f8:	1e5a      	subs	r2, r3, #1
 80098fa:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80098fe:	bf81      	itttt	hi
 8009900:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009904:	eb03 0b05 	addhi.w	fp, r3, r5
 8009908:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800990c:	608b      	strhi	r3, [r1, #8]
 800990e:	680b      	ldr	r3, [r1, #0]
 8009910:	460a      	mov	r2, r1
 8009912:	f04f 0500 	mov.w	r5, #0
 8009916:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800991a:	f842 3b1c 	str.w	r3, [r2], #28
 800991e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009922:	4680      	mov	r8, r0
 8009924:	460c      	mov	r4, r1
 8009926:	bf98      	it	ls
 8009928:	f04f 0b00 	movls.w	fp, #0
 800992c:	9201      	str	r2, [sp, #4]
 800992e:	4616      	mov	r6, r2
 8009930:	46aa      	mov	sl, r5
 8009932:	462f      	mov	r7, r5
 8009934:	9502      	str	r5, [sp, #8]
 8009936:	68a2      	ldr	r2, [r4, #8]
 8009938:	b15a      	cbz	r2, 8009952 <_scanf_float+0x66>
 800993a:	f8d9 3000 	ldr.w	r3, [r9]
 800993e:	781b      	ldrb	r3, [r3, #0]
 8009940:	2b4e      	cmp	r3, #78	@ 0x4e
 8009942:	d863      	bhi.n	8009a0c <_scanf_float+0x120>
 8009944:	2b40      	cmp	r3, #64	@ 0x40
 8009946:	d83b      	bhi.n	80099c0 <_scanf_float+0xd4>
 8009948:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800994c:	b2c8      	uxtb	r0, r1
 800994e:	280e      	cmp	r0, #14
 8009950:	d939      	bls.n	80099c6 <_scanf_float+0xda>
 8009952:	b11f      	cbz	r7, 800995c <_scanf_float+0x70>
 8009954:	6823      	ldr	r3, [r4, #0]
 8009956:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800995a:	6023      	str	r3, [r4, #0]
 800995c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8009960:	f1ba 0f01 	cmp.w	sl, #1
 8009964:	f200 8114 	bhi.w	8009b90 <_scanf_float+0x2a4>
 8009968:	9b01      	ldr	r3, [sp, #4]
 800996a:	429e      	cmp	r6, r3
 800996c:	f200 8105 	bhi.w	8009b7a <_scanf_float+0x28e>
 8009970:	2001      	movs	r0, #1
 8009972:	b007      	add	sp, #28
 8009974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009978:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800997c:	2a0d      	cmp	r2, #13
 800997e:	d8e8      	bhi.n	8009952 <_scanf_float+0x66>
 8009980:	a101      	add	r1, pc, #4	@ (adr r1, 8009988 <_scanf_float+0x9c>)
 8009982:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009986:	bf00      	nop
 8009988:	08009ad1 	.word	0x08009ad1
 800998c:	08009953 	.word	0x08009953
 8009990:	08009953 	.word	0x08009953
 8009994:	08009953 	.word	0x08009953
 8009998:	08009b2d 	.word	0x08009b2d
 800999c:	08009b07 	.word	0x08009b07
 80099a0:	08009953 	.word	0x08009953
 80099a4:	08009953 	.word	0x08009953
 80099a8:	08009adf 	.word	0x08009adf
 80099ac:	08009953 	.word	0x08009953
 80099b0:	08009953 	.word	0x08009953
 80099b4:	08009953 	.word	0x08009953
 80099b8:	08009953 	.word	0x08009953
 80099bc:	08009a9b 	.word	0x08009a9b
 80099c0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80099c4:	e7da      	b.n	800997c <_scanf_float+0x90>
 80099c6:	290e      	cmp	r1, #14
 80099c8:	d8c3      	bhi.n	8009952 <_scanf_float+0x66>
 80099ca:	a001      	add	r0, pc, #4	@ (adr r0, 80099d0 <_scanf_float+0xe4>)
 80099cc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80099d0:	08009a8b 	.word	0x08009a8b
 80099d4:	08009953 	.word	0x08009953
 80099d8:	08009a8b 	.word	0x08009a8b
 80099dc:	08009b1b 	.word	0x08009b1b
 80099e0:	08009953 	.word	0x08009953
 80099e4:	08009a2d 	.word	0x08009a2d
 80099e8:	08009a71 	.word	0x08009a71
 80099ec:	08009a71 	.word	0x08009a71
 80099f0:	08009a71 	.word	0x08009a71
 80099f4:	08009a71 	.word	0x08009a71
 80099f8:	08009a71 	.word	0x08009a71
 80099fc:	08009a71 	.word	0x08009a71
 8009a00:	08009a71 	.word	0x08009a71
 8009a04:	08009a71 	.word	0x08009a71
 8009a08:	08009a71 	.word	0x08009a71
 8009a0c:	2b6e      	cmp	r3, #110	@ 0x6e
 8009a0e:	d809      	bhi.n	8009a24 <_scanf_float+0x138>
 8009a10:	2b60      	cmp	r3, #96	@ 0x60
 8009a12:	d8b1      	bhi.n	8009978 <_scanf_float+0x8c>
 8009a14:	2b54      	cmp	r3, #84	@ 0x54
 8009a16:	d07b      	beq.n	8009b10 <_scanf_float+0x224>
 8009a18:	2b59      	cmp	r3, #89	@ 0x59
 8009a1a:	d19a      	bne.n	8009952 <_scanf_float+0x66>
 8009a1c:	2d07      	cmp	r5, #7
 8009a1e:	d198      	bne.n	8009952 <_scanf_float+0x66>
 8009a20:	2508      	movs	r5, #8
 8009a22:	e02f      	b.n	8009a84 <_scanf_float+0x198>
 8009a24:	2b74      	cmp	r3, #116	@ 0x74
 8009a26:	d073      	beq.n	8009b10 <_scanf_float+0x224>
 8009a28:	2b79      	cmp	r3, #121	@ 0x79
 8009a2a:	e7f6      	b.n	8009a1a <_scanf_float+0x12e>
 8009a2c:	6821      	ldr	r1, [r4, #0]
 8009a2e:	05c8      	lsls	r0, r1, #23
 8009a30:	d51e      	bpl.n	8009a70 <_scanf_float+0x184>
 8009a32:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009a36:	6021      	str	r1, [r4, #0]
 8009a38:	3701      	adds	r7, #1
 8009a3a:	f1bb 0f00 	cmp.w	fp, #0
 8009a3e:	d003      	beq.n	8009a48 <_scanf_float+0x15c>
 8009a40:	3201      	adds	r2, #1
 8009a42:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8009a46:	60a2      	str	r2, [r4, #8]
 8009a48:	68a3      	ldr	r3, [r4, #8]
 8009a4a:	3b01      	subs	r3, #1
 8009a4c:	60a3      	str	r3, [r4, #8]
 8009a4e:	6923      	ldr	r3, [r4, #16]
 8009a50:	3301      	adds	r3, #1
 8009a52:	6123      	str	r3, [r4, #16]
 8009a54:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009a58:	3b01      	subs	r3, #1
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	f8c9 3004 	str.w	r3, [r9, #4]
 8009a60:	f340 8082 	ble.w	8009b68 <_scanf_float+0x27c>
 8009a64:	f8d9 3000 	ldr.w	r3, [r9]
 8009a68:	3301      	adds	r3, #1
 8009a6a:	f8c9 3000 	str.w	r3, [r9]
 8009a6e:	e762      	b.n	8009936 <_scanf_float+0x4a>
 8009a70:	eb1a 0105 	adds.w	r1, sl, r5
 8009a74:	f47f af6d 	bne.w	8009952 <_scanf_float+0x66>
 8009a78:	6822      	ldr	r2, [r4, #0]
 8009a7a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009a7e:	6022      	str	r2, [r4, #0]
 8009a80:	460d      	mov	r5, r1
 8009a82:	468a      	mov	sl, r1
 8009a84:	f806 3b01 	strb.w	r3, [r6], #1
 8009a88:	e7de      	b.n	8009a48 <_scanf_float+0x15c>
 8009a8a:	6822      	ldr	r2, [r4, #0]
 8009a8c:	0610      	lsls	r0, r2, #24
 8009a8e:	f57f af60 	bpl.w	8009952 <_scanf_float+0x66>
 8009a92:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009a96:	6022      	str	r2, [r4, #0]
 8009a98:	e7f4      	b.n	8009a84 <_scanf_float+0x198>
 8009a9a:	f1ba 0f00 	cmp.w	sl, #0
 8009a9e:	d10c      	bne.n	8009aba <_scanf_float+0x1ce>
 8009aa0:	b977      	cbnz	r7, 8009ac0 <_scanf_float+0x1d4>
 8009aa2:	6822      	ldr	r2, [r4, #0]
 8009aa4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009aa8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009aac:	d108      	bne.n	8009ac0 <_scanf_float+0x1d4>
 8009aae:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009ab2:	6022      	str	r2, [r4, #0]
 8009ab4:	f04f 0a01 	mov.w	sl, #1
 8009ab8:	e7e4      	b.n	8009a84 <_scanf_float+0x198>
 8009aba:	f1ba 0f02 	cmp.w	sl, #2
 8009abe:	d050      	beq.n	8009b62 <_scanf_float+0x276>
 8009ac0:	2d01      	cmp	r5, #1
 8009ac2:	d002      	beq.n	8009aca <_scanf_float+0x1de>
 8009ac4:	2d04      	cmp	r5, #4
 8009ac6:	f47f af44 	bne.w	8009952 <_scanf_float+0x66>
 8009aca:	3501      	adds	r5, #1
 8009acc:	b2ed      	uxtb	r5, r5
 8009ace:	e7d9      	b.n	8009a84 <_scanf_float+0x198>
 8009ad0:	f1ba 0f01 	cmp.w	sl, #1
 8009ad4:	f47f af3d 	bne.w	8009952 <_scanf_float+0x66>
 8009ad8:	f04f 0a02 	mov.w	sl, #2
 8009adc:	e7d2      	b.n	8009a84 <_scanf_float+0x198>
 8009ade:	b975      	cbnz	r5, 8009afe <_scanf_float+0x212>
 8009ae0:	2f00      	cmp	r7, #0
 8009ae2:	f47f af37 	bne.w	8009954 <_scanf_float+0x68>
 8009ae6:	6822      	ldr	r2, [r4, #0]
 8009ae8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009aec:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009af0:	f040 8103 	bne.w	8009cfa <_scanf_float+0x40e>
 8009af4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009af8:	6022      	str	r2, [r4, #0]
 8009afa:	2501      	movs	r5, #1
 8009afc:	e7c2      	b.n	8009a84 <_scanf_float+0x198>
 8009afe:	2d03      	cmp	r5, #3
 8009b00:	d0e3      	beq.n	8009aca <_scanf_float+0x1de>
 8009b02:	2d05      	cmp	r5, #5
 8009b04:	e7df      	b.n	8009ac6 <_scanf_float+0x1da>
 8009b06:	2d02      	cmp	r5, #2
 8009b08:	f47f af23 	bne.w	8009952 <_scanf_float+0x66>
 8009b0c:	2503      	movs	r5, #3
 8009b0e:	e7b9      	b.n	8009a84 <_scanf_float+0x198>
 8009b10:	2d06      	cmp	r5, #6
 8009b12:	f47f af1e 	bne.w	8009952 <_scanf_float+0x66>
 8009b16:	2507      	movs	r5, #7
 8009b18:	e7b4      	b.n	8009a84 <_scanf_float+0x198>
 8009b1a:	6822      	ldr	r2, [r4, #0]
 8009b1c:	0591      	lsls	r1, r2, #22
 8009b1e:	f57f af18 	bpl.w	8009952 <_scanf_float+0x66>
 8009b22:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8009b26:	6022      	str	r2, [r4, #0]
 8009b28:	9702      	str	r7, [sp, #8]
 8009b2a:	e7ab      	b.n	8009a84 <_scanf_float+0x198>
 8009b2c:	6822      	ldr	r2, [r4, #0]
 8009b2e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009b32:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009b36:	d005      	beq.n	8009b44 <_scanf_float+0x258>
 8009b38:	0550      	lsls	r0, r2, #21
 8009b3a:	f57f af0a 	bpl.w	8009952 <_scanf_float+0x66>
 8009b3e:	2f00      	cmp	r7, #0
 8009b40:	f000 80db 	beq.w	8009cfa <_scanf_float+0x40e>
 8009b44:	0591      	lsls	r1, r2, #22
 8009b46:	bf58      	it	pl
 8009b48:	9902      	ldrpl	r1, [sp, #8]
 8009b4a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009b4e:	bf58      	it	pl
 8009b50:	1a79      	subpl	r1, r7, r1
 8009b52:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009b56:	bf58      	it	pl
 8009b58:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009b5c:	6022      	str	r2, [r4, #0]
 8009b5e:	2700      	movs	r7, #0
 8009b60:	e790      	b.n	8009a84 <_scanf_float+0x198>
 8009b62:	f04f 0a03 	mov.w	sl, #3
 8009b66:	e78d      	b.n	8009a84 <_scanf_float+0x198>
 8009b68:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009b6c:	4649      	mov	r1, r9
 8009b6e:	4640      	mov	r0, r8
 8009b70:	4798      	blx	r3
 8009b72:	2800      	cmp	r0, #0
 8009b74:	f43f aedf 	beq.w	8009936 <_scanf_float+0x4a>
 8009b78:	e6eb      	b.n	8009952 <_scanf_float+0x66>
 8009b7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009b7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009b82:	464a      	mov	r2, r9
 8009b84:	4640      	mov	r0, r8
 8009b86:	4798      	blx	r3
 8009b88:	6923      	ldr	r3, [r4, #16]
 8009b8a:	3b01      	subs	r3, #1
 8009b8c:	6123      	str	r3, [r4, #16]
 8009b8e:	e6eb      	b.n	8009968 <_scanf_float+0x7c>
 8009b90:	1e6b      	subs	r3, r5, #1
 8009b92:	2b06      	cmp	r3, #6
 8009b94:	d824      	bhi.n	8009be0 <_scanf_float+0x2f4>
 8009b96:	2d02      	cmp	r5, #2
 8009b98:	d836      	bhi.n	8009c08 <_scanf_float+0x31c>
 8009b9a:	9b01      	ldr	r3, [sp, #4]
 8009b9c:	429e      	cmp	r6, r3
 8009b9e:	f67f aee7 	bls.w	8009970 <_scanf_float+0x84>
 8009ba2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009ba6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009baa:	464a      	mov	r2, r9
 8009bac:	4640      	mov	r0, r8
 8009bae:	4798      	blx	r3
 8009bb0:	6923      	ldr	r3, [r4, #16]
 8009bb2:	3b01      	subs	r3, #1
 8009bb4:	6123      	str	r3, [r4, #16]
 8009bb6:	e7f0      	b.n	8009b9a <_scanf_float+0x2ae>
 8009bb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009bbc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009bc0:	464a      	mov	r2, r9
 8009bc2:	4640      	mov	r0, r8
 8009bc4:	4798      	blx	r3
 8009bc6:	6923      	ldr	r3, [r4, #16]
 8009bc8:	3b01      	subs	r3, #1
 8009bca:	6123      	str	r3, [r4, #16]
 8009bcc:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8009bd0:	fa5f fa8a 	uxtb.w	sl, sl
 8009bd4:	f1ba 0f02 	cmp.w	sl, #2
 8009bd8:	d1ee      	bne.n	8009bb8 <_scanf_float+0x2cc>
 8009bda:	3d03      	subs	r5, #3
 8009bdc:	b2ed      	uxtb	r5, r5
 8009bde:	1b76      	subs	r6, r6, r5
 8009be0:	6823      	ldr	r3, [r4, #0]
 8009be2:	05da      	lsls	r2, r3, #23
 8009be4:	d530      	bpl.n	8009c48 <_scanf_float+0x35c>
 8009be6:	055b      	lsls	r3, r3, #21
 8009be8:	d511      	bpl.n	8009c0e <_scanf_float+0x322>
 8009bea:	9b01      	ldr	r3, [sp, #4]
 8009bec:	429e      	cmp	r6, r3
 8009bee:	f67f aebf 	bls.w	8009970 <_scanf_float+0x84>
 8009bf2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009bf6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009bfa:	464a      	mov	r2, r9
 8009bfc:	4640      	mov	r0, r8
 8009bfe:	4798      	blx	r3
 8009c00:	6923      	ldr	r3, [r4, #16]
 8009c02:	3b01      	subs	r3, #1
 8009c04:	6123      	str	r3, [r4, #16]
 8009c06:	e7f0      	b.n	8009bea <_scanf_float+0x2fe>
 8009c08:	46aa      	mov	sl, r5
 8009c0a:	46b3      	mov	fp, r6
 8009c0c:	e7de      	b.n	8009bcc <_scanf_float+0x2e0>
 8009c0e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009c12:	6923      	ldr	r3, [r4, #16]
 8009c14:	2965      	cmp	r1, #101	@ 0x65
 8009c16:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8009c1a:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8009c1e:	6123      	str	r3, [r4, #16]
 8009c20:	d00c      	beq.n	8009c3c <_scanf_float+0x350>
 8009c22:	2945      	cmp	r1, #69	@ 0x45
 8009c24:	d00a      	beq.n	8009c3c <_scanf_float+0x350>
 8009c26:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009c2a:	464a      	mov	r2, r9
 8009c2c:	4640      	mov	r0, r8
 8009c2e:	4798      	blx	r3
 8009c30:	6923      	ldr	r3, [r4, #16]
 8009c32:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009c36:	3b01      	subs	r3, #1
 8009c38:	1eb5      	subs	r5, r6, #2
 8009c3a:	6123      	str	r3, [r4, #16]
 8009c3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009c40:	464a      	mov	r2, r9
 8009c42:	4640      	mov	r0, r8
 8009c44:	4798      	blx	r3
 8009c46:	462e      	mov	r6, r5
 8009c48:	6822      	ldr	r2, [r4, #0]
 8009c4a:	f012 0210 	ands.w	r2, r2, #16
 8009c4e:	d001      	beq.n	8009c54 <_scanf_float+0x368>
 8009c50:	2000      	movs	r0, #0
 8009c52:	e68e      	b.n	8009972 <_scanf_float+0x86>
 8009c54:	7032      	strb	r2, [r6, #0]
 8009c56:	6823      	ldr	r3, [r4, #0]
 8009c58:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009c5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c60:	d125      	bne.n	8009cae <_scanf_float+0x3c2>
 8009c62:	9b02      	ldr	r3, [sp, #8]
 8009c64:	429f      	cmp	r7, r3
 8009c66:	d00a      	beq.n	8009c7e <_scanf_float+0x392>
 8009c68:	1bda      	subs	r2, r3, r7
 8009c6a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009c6e:	429e      	cmp	r6, r3
 8009c70:	bf28      	it	cs
 8009c72:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009c76:	4922      	ldr	r1, [pc, #136]	@ (8009d00 <_scanf_float+0x414>)
 8009c78:	4630      	mov	r0, r6
 8009c7a:	f000 f87b 	bl	8009d74 <siprintf>
 8009c7e:	9901      	ldr	r1, [sp, #4]
 8009c80:	2200      	movs	r2, #0
 8009c82:	4640      	mov	r0, r8
 8009c84:	f000 ff40 	bl	800ab08 <_strtod_r>
 8009c88:	9b03      	ldr	r3, [sp, #12]
 8009c8a:	6821      	ldr	r1, [r4, #0]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f011 0f02 	tst.w	r1, #2
 8009c92:	ec57 6b10 	vmov	r6, r7, d0
 8009c96:	f103 0204 	add.w	r2, r3, #4
 8009c9a:	d015      	beq.n	8009cc8 <_scanf_float+0x3dc>
 8009c9c:	9903      	ldr	r1, [sp, #12]
 8009c9e:	600a      	str	r2, [r1, #0]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	e9c3 6700 	strd	r6, r7, [r3]
 8009ca6:	68e3      	ldr	r3, [r4, #12]
 8009ca8:	3301      	adds	r3, #1
 8009caa:	60e3      	str	r3, [r4, #12]
 8009cac:	e7d0      	b.n	8009c50 <_scanf_float+0x364>
 8009cae:	9b04      	ldr	r3, [sp, #16]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d0e4      	beq.n	8009c7e <_scanf_float+0x392>
 8009cb4:	9905      	ldr	r1, [sp, #20]
 8009cb6:	230a      	movs	r3, #10
 8009cb8:	3101      	adds	r1, #1
 8009cba:	4640      	mov	r0, r8
 8009cbc:	f000 ffa4 	bl	800ac08 <_strtol_r>
 8009cc0:	9b04      	ldr	r3, [sp, #16]
 8009cc2:	9e05      	ldr	r6, [sp, #20]
 8009cc4:	1ac2      	subs	r2, r0, r3
 8009cc6:	e7d0      	b.n	8009c6a <_scanf_float+0x37e>
 8009cc8:	f011 0f04 	tst.w	r1, #4
 8009ccc:	9903      	ldr	r1, [sp, #12]
 8009cce:	600a      	str	r2, [r1, #0]
 8009cd0:	d1e6      	bne.n	8009ca0 <_scanf_float+0x3b4>
 8009cd2:	681d      	ldr	r5, [r3, #0]
 8009cd4:	4632      	mov	r2, r6
 8009cd6:	463b      	mov	r3, r7
 8009cd8:	4630      	mov	r0, r6
 8009cda:	4639      	mov	r1, r7
 8009cdc:	f7f6 ff56 	bl	8000b8c <__aeabi_dcmpun>
 8009ce0:	b128      	cbz	r0, 8009cee <_scanf_float+0x402>
 8009ce2:	4808      	ldr	r0, [pc, #32]	@ (8009d04 <_scanf_float+0x418>)
 8009ce4:	f001 f878 	bl	800add8 <nanf>
 8009ce8:	ed85 0a00 	vstr	s0, [r5]
 8009cec:	e7db      	b.n	8009ca6 <_scanf_float+0x3ba>
 8009cee:	4630      	mov	r0, r6
 8009cf0:	4639      	mov	r1, r7
 8009cf2:	f7f6 ffa9 	bl	8000c48 <__aeabi_d2f>
 8009cf6:	6028      	str	r0, [r5, #0]
 8009cf8:	e7d5      	b.n	8009ca6 <_scanf_float+0x3ba>
 8009cfa:	2700      	movs	r7, #0
 8009cfc:	e62e      	b.n	800995c <_scanf_float+0x70>
 8009cfe:	bf00      	nop
 8009d00:	0800d9bc 	.word	0x0800d9bc
 8009d04:	0800da77 	.word	0x0800da77

08009d08 <sniprintf>:
 8009d08:	b40c      	push	{r2, r3}
 8009d0a:	b530      	push	{r4, r5, lr}
 8009d0c:	4b18      	ldr	r3, [pc, #96]	@ (8009d70 <sniprintf+0x68>)
 8009d0e:	1e0c      	subs	r4, r1, #0
 8009d10:	681d      	ldr	r5, [r3, #0]
 8009d12:	b09d      	sub	sp, #116	@ 0x74
 8009d14:	da08      	bge.n	8009d28 <sniprintf+0x20>
 8009d16:	238b      	movs	r3, #139	@ 0x8b
 8009d18:	602b      	str	r3, [r5, #0]
 8009d1a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009d1e:	b01d      	add	sp, #116	@ 0x74
 8009d20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d24:	b002      	add	sp, #8
 8009d26:	4770      	bx	lr
 8009d28:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009d2c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009d30:	f04f 0300 	mov.w	r3, #0
 8009d34:	931b      	str	r3, [sp, #108]	@ 0x6c
 8009d36:	bf14      	ite	ne
 8009d38:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8009d3c:	4623      	moveq	r3, r4
 8009d3e:	9304      	str	r3, [sp, #16]
 8009d40:	9307      	str	r3, [sp, #28]
 8009d42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009d46:	9002      	str	r0, [sp, #8]
 8009d48:	9006      	str	r0, [sp, #24]
 8009d4a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009d4e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009d50:	ab21      	add	r3, sp, #132	@ 0x84
 8009d52:	a902      	add	r1, sp, #8
 8009d54:	4628      	mov	r0, r5
 8009d56:	9301      	str	r3, [sp, #4]
 8009d58:	f002 fa4e 	bl	800c1f8 <_svfiprintf_r>
 8009d5c:	1c43      	adds	r3, r0, #1
 8009d5e:	bfbc      	itt	lt
 8009d60:	238b      	movlt	r3, #139	@ 0x8b
 8009d62:	602b      	strlt	r3, [r5, #0]
 8009d64:	2c00      	cmp	r4, #0
 8009d66:	d0da      	beq.n	8009d1e <sniprintf+0x16>
 8009d68:	9b02      	ldr	r3, [sp, #8]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	701a      	strb	r2, [r3, #0]
 8009d6e:	e7d6      	b.n	8009d1e <sniprintf+0x16>
 8009d70:	20000188 	.word	0x20000188

08009d74 <siprintf>:
 8009d74:	b40e      	push	{r1, r2, r3}
 8009d76:	b510      	push	{r4, lr}
 8009d78:	b09d      	sub	sp, #116	@ 0x74
 8009d7a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009d7c:	9002      	str	r0, [sp, #8]
 8009d7e:	9006      	str	r0, [sp, #24]
 8009d80:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009d84:	480a      	ldr	r0, [pc, #40]	@ (8009db0 <siprintf+0x3c>)
 8009d86:	9107      	str	r1, [sp, #28]
 8009d88:	9104      	str	r1, [sp, #16]
 8009d8a:	490a      	ldr	r1, [pc, #40]	@ (8009db4 <siprintf+0x40>)
 8009d8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d90:	9105      	str	r1, [sp, #20]
 8009d92:	2400      	movs	r4, #0
 8009d94:	a902      	add	r1, sp, #8
 8009d96:	6800      	ldr	r0, [r0, #0]
 8009d98:	9301      	str	r3, [sp, #4]
 8009d9a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009d9c:	f002 fa2c 	bl	800c1f8 <_svfiprintf_r>
 8009da0:	9b02      	ldr	r3, [sp, #8]
 8009da2:	701c      	strb	r4, [r3, #0]
 8009da4:	b01d      	add	sp, #116	@ 0x74
 8009da6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009daa:	b003      	add	sp, #12
 8009dac:	4770      	bx	lr
 8009dae:	bf00      	nop
 8009db0:	20000188 	.word	0x20000188
 8009db4:	ffff0208 	.word	0xffff0208

08009db8 <std>:
 8009db8:	2300      	movs	r3, #0
 8009dba:	b510      	push	{r4, lr}
 8009dbc:	4604      	mov	r4, r0
 8009dbe:	e9c0 3300 	strd	r3, r3, [r0]
 8009dc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009dc6:	6083      	str	r3, [r0, #8]
 8009dc8:	8181      	strh	r1, [r0, #12]
 8009dca:	6643      	str	r3, [r0, #100]	@ 0x64
 8009dcc:	81c2      	strh	r2, [r0, #14]
 8009dce:	6183      	str	r3, [r0, #24]
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	2208      	movs	r2, #8
 8009dd4:	305c      	adds	r0, #92	@ 0x5c
 8009dd6:	f000 ff41 	bl	800ac5c <memset>
 8009dda:	4b0d      	ldr	r3, [pc, #52]	@ (8009e10 <std+0x58>)
 8009ddc:	6263      	str	r3, [r4, #36]	@ 0x24
 8009dde:	4b0d      	ldr	r3, [pc, #52]	@ (8009e14 <std+0x5c>)
 8009de0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009de2:	4b0d      	ldr	r3, [pc, #52]	@ (8009e18 <std+0x60>)
 8009de4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009de6:	4b0d      	ldr	r3, [pc, #52]	@ (8009e1c <std+0x64>)
 8009de8:	6323      	str	r3, [r4, #48]	@ 0x30
 8009dea:	4b0d      	ldr	r3, [pc, #52]	@ (8009e20 <std+0x68>)
 8009dec:	6224      	str	r4, [r4, #32]
 8009dee:	429c      	cmp	r4, r3
 8009df0:	d006      	beq.n	8009e00 <std+0x48>
 8009df2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009df6:	4294      	cmp	r4, r2
 8009df8:	d002      	beq.n	8009e00 <std+0x48>
 8009dfa:	33d0      	adds	r3, #208	@ 0xd0
 8009dfc:	429c      	cmp	r4, r3
 8009dfe:	d105      	bne.n	8009e0c <std+0x54>
 8009e00:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e08:	f000 bfc8 	b.w	800ad9c <__retarget_lock_init_recursive>
 8009e0c:	bd10      	pop	{r4, pc}
 8009e0e:	bf00      	nop
 8009e10:	0800d02d 	.word	0x0800d02d
 8009e14:	0800d04f 	.word	0x0800d04f
 8009e18:	0800d087 	.word	0x0800d087
 8009e1c:	0800d0ab 	.word	0x0800d0ab
 8009e20:	200043e8 	.word	0x200043e8

08009e24 <stdio_exit_handler>:
 8009e24:	4a02      	ldr	r2, [pc, #8]	@ (8009e30 <stdio_exit_handler+0xc>)
 8009e26:	4903      	ldr	r1, [pc, #12]	@ (8009e34 <stdio_exit_handler+0x10>)
 8009e28:	4803      	ldr	r0, [pc, #12]	@ (8009e38 <stdio_exit_handler+0x14>)
 8009e2a:	f000 bef9 	b.w	800ac20 <_fwalk_sglue>
 8009e2e:	bf00      	nop
 8009e30:	20000010 	.word	0x20000010
 8009e34:	0800c671 	.word	0x0800c671
 8009e38:	2000018c 	.word	0x2000018c

08009e3c <cleanup_stdio>:
 8009e3c:	6841      	ldr	r1, [r0, #4]
 8009e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8009e70 <cleanup_stdio+0x34>)
 8009e40:	4299      	cmp	r1, r3
 8009e42:	b510      	push	{r4, lr}
 8009e44:	4604      	mov	r4, r0
 8009e46:	d001      	beq.n	8009e4c <cleanup_stdio+0x10>
 8009e48:	f002 fc12 	bl	800c670 <_fflush_r>
 8009e4c:	68a1      	ldr	r1, [r4, #8]
 8009e4e:	4b09      	ldr	r3, [pc, #36]	@ (8009e74 <cleanup_stdio+0x38>)
 8009e50:	4299      	cmp	r1, r3
 8009e52:	d002      	beq.n	8009e5a <cleanup_stdio+0x1e>
 8009e54:	4620      	mov	r0, r4
 8009e56:	f002 fc0b 	bl	800c670 <_fflush_r>
 8009e5a:	68e1      	ldr	r1, [r4, #12]
 8009e5c:	4b06      	ldr	r3, [pc, #24]	@ (8009e78 <cleanup_stdio+0x3c>)
 8009e5e:	4299      	cmp	r1, r3
 8009e60:	d004      	beq.n	8009e6c <cleanup_stdio+0x30>
 8009e62:	4620      	mov	r0, r4
 8009e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e68:	f002 bc02 	b.w	800c670 <_fflush_r>
 8009e6c:	bd10      	pop	{r4, pc}
 8009e6e:	bf00      	nop
 8009e70:	200043e8 	.word	0x200043e8
 8009e74:	20004450 	.word	0x20004450
 8009e78:	200044b8 	.word	0x200044b8

08009e7c <global_stdio_init.part.0>:
 8009e7c:	b510      	push	{r4, lr}
 8009e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8009eac <global_stdio_init.part.0+0x30>)
 8009e80:	4c0b      	ldr	r4, [pc, #44]	@ (8009eb0 <global_stdio_init.part.0+0x34>)
 8009e82:	4a0c      	ldr	r2, [pc, #48]	@ (8009eb4 <global_stdio_init.part.0+0x38>)
 8009e84:	601a      	str	r2, [r3, #0]
 8009e86:	4620      	mov	r0, r4
 8009e88:	2200      	movs	r2, #0
 8009e8a:	2104      	movs	r1, #4
 8009e8c:	f7ff ff94 	bl	8009db8 <std>
 8009e90:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009e94:	2201      	movs	r2, #1
 8009e96:	2109      	movs	r1, #9
 8009e98:	f7ff ff8e 	bl	8009db8 <std>
 8009e9c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009ea0:	2202      	movs	r2, #2
 8009ea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ea6:	2112      	movs	r1, #18
 8009ea8:	f7ff bf86 	b.w	8009db8 <std>
 8009eac:	20004520 	.word	0x20004520
 8009eb0:	200043e8 	.word	0x200043e8
 8009eb4:	08009e25 	.word	0x08009e25

08009eb8 <__sfp_lock_acquire>:
 8009eb8:	4801      	ldr	r0, [pc, #4]	@ (8009ec0 <__sfp_lock_acquire+0x8>)
 8009eba:	f000 bf70 	b.w	800ad9e <__retarget_lock_acquire_recursive>
 8009ebe:	bf00      	nop
 8009ec0:	20004525 	.word	0x20004525

08009ec4 <__sfp_lock_release>:
 8009ec4:	4801      	ldr	r0, [pc, #4]	@ (8009ecc <__sfp_lock_release+0x8>)
 8009ec6:	f000 bf6b 	b.w	800ada0 <__retarget_lock_release_recursive>
 8009eca:	bf00      	nop
 8009ecc:	20004525 	.word	0x20004525

08009ed0 <__sinit>:
 8009ed0:	b510      	push	{r4, lr}
 8009ed2:	4604      	mov	r4, r0
 8009ed4:	f7ff fff0 	bl	8009eb8 <__sfp_lock_acquire>
 8009ed8:	6a23      	ldr	r3, [r4, #32]
 8009eda:	b11b      	cbz	r3, 8009ee4 <__sinit+0x14>
 8009edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ee0:	f7ff bff0 	b.w	8009ec4 <__sfp_lock_release>
 8009ee4:	4b04      	ldr	r3, [pc, #16]	@ (8009ef8 <__sinit+0x28>)
 8009ee6:	6223      	str	r3, [r4, #32]
 8009ee8:	4b04      	ldr	r3, [pc, #16]	@ (8009efc <__sinit+0x2c>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d1f5      	bne.n	8009edc <__sinit+0xc>
 8009ef0:	f7ff ffc4 	bl	8009e7c <global_stdio_init.part.0>
 8009ef4:	e7f2      	b.n	8009edc <__sinit+0xc>
 8009ef6:	bf00      	nop
 8009ef8:	08009e3d 	.word	0x08009e3d
 8009efc:	20004520 	.word	0x20004520

08009f00 <sulp>:
 8009f00:	b570      	push	{r4, r5, r6, lr}
 8009f02:	4604      	mov	r4, r0
 8009f04:	460d      	mov	r5, r1
 8009f06:	ec45 4b10 	vmov	d0, r4, r5
 8009f0a:	4616      	mov	r6, r2
 8009f0c:	f002 ff50 	bl	800cdb0 <__ulp>
 8009f10:	ec51 0b10 	vmov	r0, r1, d0
 8009f14:	b17e      	cbz	r6, 8009f36 <sulp+0x36>
 8009f16:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009f1a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	dd09      	ble.n	8009f36 <sulp+0x36>
 8009f22:	051b      	lsls	r3, r3, #20
 8009f24:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009f28:	2400      	movs	r4, #0
 8009f2a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009f2e:	4622      	mov	r2, r4
 8009f30:	462b      	mov	r3, r5
 8009f32:	f7f6 fb91 	bl	8000658 <__aeabi_dmul>
 8009f36:	ec41 0b10 	vmov	d0, r0, r1
 8009f3a:	bd70      	pop	{r4, r5, r6, pc}
 8009f3c:	0000      	movs	r0, r0
	...

08009f40 <_strtod_l>:
 8009f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f44:	b09f      	sub	sp, #124	@ 0x7c
 8009f46:	460c      	mov	r4, r1
 8009f48:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	921a      	str	r2, [sp, #104]	@ 0x68
 8009f4e:	9005      	str	r0, [sp, #20]
 8009f50:	f04f 0a00 	mov.w	sl, #0
 8009f54:	f04f 0b00 	mov.w	fp, #0
 8009f58:	460a      	mov	r2, r1
 8009f5a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009f5c:	7811      	ldrb	r1, [r2, #0]
 8009f5e:	292b      	cmp	r1, #43	@ 0x2b
 8009f60:	d04a      	beq.n	8009ff8 <_strtod_l+0xb8>
 8009f62:	d838      	bhi.n	8009fd6 <_strtod_l+0x96>
 8009f64:	290d      	cmp	r1, #13
 8009f66:	d832      	bhi.n	8009fce <_strtod_l+0x8e>
 8009f68:	2908      	cmp	r1, #8
 8009f6a:	d832      	bhi.n	8009fd2 <_strtod_l+0x92>
 8009f6c:	2900      	cmp	r1, #0
 8009f6e:	d03b      	beq.n	8009fe8 <_strtod_l+0xa8>
 8009f70:	2200      	movs	r2, #0
 8009f72:	920e      	str	r2, [sp, #56]	@ 0x38
 8009f74:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009f76:	782a      	ldrb	r2, [r5, #0]
 8009f78:	2a30      	cmp	r2, #48	@ 0x30
 8009f7a:	f040 80b2 	bne.w	800a0e2 <_strtod_l+0x1a2>
 8009f7e:	786a      	ldrb	r2, [r5, #1]
 8009f80:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009f84:	2a58      	cmp	r2, #88	@ 0x58
 8009f86:	d16e      	bne.n	800a066 <_strtod_l+0x126>
 8009f88:	9302      	str	r3, [sp, #8]
 8009f8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f8c:	9301      	str	r3, [sp, #4]
 8009f8e:	ab1a      	add	r3, sp, #104	@ 0x68
 8009f90:	9300      	str	r3, [sp, #0]
 8009f92:	4a8f      	ldr	r2, [pc, #572]	@ (800a1d0 <_strtod_l+0x290>)
 8009f94:	9805      	ldr	r0, [sp, #20]
 8009f96:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009f98:	a919      	add	r1, sp, #100	@ 0x64
 8009f9a:	f001 fe01 	bl	800bba0 <__gethex>
 8009f9e:	f010 060f 	ands.w	r6, r0, #15
 8009fa2:	4604      	mov	r4, r0
 8009fa4:	d005      	beq.n	8009fb2 <_strtod_l+0x72>
 8009fa6:	2e06      	cmp	r6, #6
 8009fa8:	d128      	bne.n	8009ffc <_strtod_l+0xbc>
 8009faa:	3501      	adds	r5, #1
 8009fac:	2300      	movs	r3, #0
 8009fae:	9519      	str	r5, [sp, #100]	@ 0x64
 8009fb0:	930e      	str	r3, [sp, #56]	@ 0x38
 8009fb2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	f040 858e 	bne.w	800aad6 <_strtod_l+0xb96>
 8009fba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fbc:	b1cb      	cbz	r3, 8009ff2 <_strtod_l+0xb2>
 8009fbe:	4652      	mov	r2, sl
 8009fc0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009fc4:	ec43 2b10 	vmov	d0, r2, r3
 8009fc8:	b01f      	add	sp, #124	@ 0x7c
 8009fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fce:	2920      	cmp	r1, #32
 8009fd0:	d1ce      	bne.n	8009f70 <_strtod_l+0x30>
 8009fd2:	3201      	adds	r2, #1
 8009fd4:	e7c1      	b.n	8009f5a <_strtod_l+0x1a>
 8009fd6:	292d      	cmp	r1, #45	@ 0x2d
 8009fd8:	d1ca      	bne.n	8009f70 <_strtod_l+0x30>
 8009fda:	2101      	movs	r1, #1
 8009fdc:	910e      	str	r1, [sp, #56]	@ 0x38
 8009fde:	1c51      	adds	r1, r2, #1
 8009fe0:	9119      	str	r1, [sp, #100]	@ 0x64
 8009fe2:	7852      	ldrb	r2, [r2, #1]
 8009fe4:	2a00      	cmp	r2, #0
 8009fe6:	d1c5      	bne.n	8009f74 <_strtod_l+0x34>
 8009fe8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009fea:	9419      	str	r4, [sp, #100]	@ 0x64
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	f040 8570 	bne.w	800aad2 <_strtod_l+0xb92>
 8009ff2:	4652      	mov	r2, sl
 8009ff4:	465b      	mov	r3, fp
 8009ff6:	e7e5      	b.n	8009fc4 <_strtod_l+0x84>
 8009ff8:	2100      	movs	r1, #0
 8009ffa:	e7ef      	b.n	8009fdc <_strtod_l+0x9c>
 8009ffc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009ffe:	b13a      	cbz	r2, 800a010 <_strtod_l+0xd0>
 800a000:	2135      	movs	r1, #53	@ 0x35
 800a002:	a81c      	add	r0, sp, #112	@ 0x70
 800a004:	f002 ffce 	bl	800cfa4 <__copybits>
 800a008:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a00a:	9805      	ldr	r0, [sp, #20]
 800a00c:	f002 fba4 	bl	800c758 <_Bfree>
 800a010:	3e01      	subs	r6, #1
 800a012:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a014:	2e04      	cmp	r6, #4
 800a016:	d806      	bhi.n	800a026 <_strtod_l+0xe6>
 800a018:	e8df f006 	tbb	[pc, r6]
 800a01c:	201d0314 	.word	0x201d0314
 800a020:	14          	.byte	0x14
 800a021:	00          	.byte	0x00
 800a022:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a026:	05e1      	lsls	r1, r4, #23
 800a028:	bf48      	it	mi
 800a02a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a02e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a032:	0d1b      	lsrs	r3, r3, #20
 800a034:	051b      	lsls	r3, r3, #20
 800a036:	2b00      	cmp	r3, #0
 800a038:	d1bb      	bne.n	8009fb2 <_strtod_l+0x72>
 800a03a:	f000 fe85 	bl	800ad48 <__errno>
 800a03e:	2322      	movs	r3, #34	@ 0x22
 800a040:	6003      	str	r3, [r0, #0]
 800a042:	e7b6      	b.n	8009fb2 <_strtod_l+0x72>
 800a044:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a048:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a04c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a050:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a054:	e7e7      	b.n	800a026 <_strtod_l+0xe6>
 800a056:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800a1d8 <_strtod_l+0x298>
 800a05a:	e7e4      	b.n	800a026 <_strtod_l+0xe6>
 800a05c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a060:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a064:	e7df      	b.n	800a026 <_strtod_l+0xe6>
 800a066:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a068:	1c5a      	adds	r2, r3, #1
 800a06a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a06c:	785b      	ldrb	r3, [r3, #1]
 800a06e:	2b30      	cmp	r3, #48	@ 0x30
 800a070:	d0f9      	beq.n	800a066 <_strtod_l+0x126>
 800a072:	2b00      	cmp	r3, #0
 800a074:	d09d      	beq.n	8009fb2 <_strtod_l+0x72>
 800a076:	2301      	movs	r3, #1
 800a078:	2700      	movs	r7, #0
 800a07a:	9308      	str	r3, [sp, #32]
 800a07c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a07e:	930c      	str	r3, [sp, #48]	@ 0x30
 800a080:	970b      	str	r7, [sp, #44]	@ 0x2c
 800a082:	46b9      	mov	r9, r7
 800a084:	220a      	movs	r2, #10
 800a086:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a088:	7805      	ldrb	r5, [r0, #0]
 800a08a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a08e:	b2d9      	uxtb	r1, r3
 800a090:	2909      	cmp	r1, #9
 800a092:	d928      	bls.n	800a0e6 <_strtod_l+0x1a6>
 800a094:	494f      	ldr	r1, [pc, #316]	@ (800a1d4 <_strtod_l+0x294>)
 800a096:	2201      	movs	r2, #1
 800a098:	f000 fde8 	bl	800ac6c <strncmp>
 800a09c:	2800      	cmp	r0, #0
 800a09e:	d032      	beq.n	800a106 <_strtod_l+0x1c6>
 800a0a0:	2000      	movs	r0, #0
 800a0a2:	462a      	mov	r2, r5
 800a0a4:	900a      	str	r0, [sp, #40]	@ 0x28
 800a0a6:	464d      	mov	r5, r9
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	2a65      	cmp	r2, #101	@ 0x65
 800a0ac:	d001      	beq.n	800a0b2 <_strtod_l+0x172>
 800a0ae:	2a45      	cmp	r2, #69	@ 0x45
 800a0b0:	d114      	bne.n	800a0dc <_strtod_l+0x19c>
 800a0b2:	b91d      	cbnz	r5, 800a0bc <_strtod_l+0x17c>
 800a0b4:	9a08      	ldr	r2, [sp, #32]
 800a0b6:	4302      	orrs	r2, r0
 800a0b8:	d096      	beq.n	8009fe8 <_strtod_l+0xa8>
 800a0ba:	2500      	movs	r5, #0
 800a0bc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a0be:	1c62      	adds	r2, r4, #1
 800a0c0:	9219      	str	r2, [sp, #100]	@ 0x64
 800a0c2:	7862      	ldrb	r2, [r4, #1]
 800a0c4:	2a2b      	cmp	r2, #43	@ 0x2b
 800a0c6:	d07a      	beq.n	800a1be <_strtod_l+0x27e>
 800a0c8:	2a2d      	cmp	r2, #45	@ 0x2d
 800a0ca:	d07e      	beq.n	800a1ca <_strtod_l+0x28a>
 800a0cc:	f04f 0c00 	mov.w	ip, #0
 800a0d0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a0d4:	2909      	cmp	r1, #9
 800a0d6:	f240 8085 	bls.w	800a1e4 <_strtod_l+0x2a4>
 800a0da:	9419      	str	r4, [sp, #100]	@ 0x64
 800a0dc:	f04f 0800 	mov.w	r8, #0
 800a0e0:	e0a5      	b.n	800a22e <_strtod_l+0x2ee>
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	e7c8      	b.n	800a078 <_strtod_l+0x138>
 800a0e6:	f1b9 0f08 	cmp.w	r9, #8
 800a0ea:	bfd8      	it	le
 800a0ec:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800a0ee:	f100 0001 	add.w	r0, r0, #1
 800a0f2:	bfda      	itte	le
 800a0f4:	fb02 3301 	mlale	r3, r2, r1, r3
 800a0f8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800a0fa:	fb02 3707 	mlagt	r7, r2, r7, r3
 800a0fe:	f109 0901 	add.w	r9, r9, #1
 800a102:	9019      	str	r0, [sp, #100]	@ 0x64
 800a104:	e7bf      	b.n	800a086 <_strtod_l+0x146>
 800a106:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a108:	1c5a      	adds	r2, r3, #1
 800a10a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a10c:	785a      	ldrb	r2, [r3, #1]
 800a10e:	f1b9 0f00 	cmp.w	r9, #0
 800a112:	d03b      	beq.n	800a18c <_strtod_l+0x24c>
 800a114:	900a      	str	r0, [sp, #40]	@ 0x28
 800a116:	464d      	mov	r5, r9
 800a118:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a11c:	2b09      	cmp	r3, #9
 800a11e:	d912      	bls.n	800a146 <_strtod_l+0x206>
 800a120:	2301      	movs	r3, #1
 800a122:	e7c2      	b.n	800a0aa <_strtod_l+0x16a>
 800a124:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a126:	1c5a      	adds	r2, r3, #1
 800a128:	9219      	str	r2, [sp, #100]	@ 0x64
 800a12a:	785a      	ldrb	r2, [r3, #1]
 800a12c:	3001      	adds	r0, #1
 800a12e:	2a30      	cmp	r2, #48	@ 0x30
 800a130:	d0f8      	beq.n	800a124 <_strtod_l+0x1e4>
 800a132:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a136:	2b08      	cmp	r3, #8
 800a138:	f200 84d2 	bhi.w	800aae0 <_strtod_l+0xba0>
 800a13c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a13e:	900a      	str	r0, [sp, #40]	@ 0x28
 800a140:	2000      	movs	r0, #0
 800a142:	930c      	str	r3, [sp, #48]	@ 0x30
 800a144:	4605      	mov	r5, r0
 800a146:	3a30      	subs	r2, #48	@ 0x30
 800a148:	f100 0301 	add.w	r3, r0, #1
 800a14c:	d018      	beq.n	800a180 <_strtod_l+0x240>
 800a14e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a150:	4419      	add	r1, r3
 800a152:	910a      	str	r1, [sp, #40]	@ 0x28
 800a154:	462e      	mov	r6, r5
 800a156:	f04f 0e0a 	mov.w	lr, #10
 800a15a:	1c71      	adds	r1, r6, #1
 800a15c:	eba1 0c05 	sub.w	ip, r1, r5
 800a160:	4563      	cmp	r3, ip
 800a162:	dc15      	bgt.n	800a190 <_strtod_l+0x250>
 800a164:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800a168:	182b      	adds	r3, r5, r0
 800a16a:	2b08      	cmp	r3, #8
 800a16c:	f105 0501 	add.w	r5, r5, #1
 800a170:	4405      	add	r5, r0
 800a172:	dc1a      	bgt.n	800a1aa <_strtod_l+0x26a>
 800a174:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a176:	230a      	movs	r3, #10
 800a178:	fb03 2301 	mla	r3, r3, r1, r2
 800a17c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a17e:	2300      	movs	r3, #0
 800a180:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a182:	1c51      	adds	r1, r2, #1
 800a184:	9119      	str	r1, [sp, #100]	@ 0x64
 800a186:	7852      	ldrb	r2, [r2, #1]
 800a188:	4618      	mov	r0, r3
 800a18a:	e7c5      	b.n	800a118 <_strtod_l+0x1d8>
 800a18c:	4648      	mov	r0, r9
 800a18e:	e7ce      	b.n	800a12e <_strtod_l+0x1ee>
 800a190:	2e08      	cmp	r6, #8
 800a192:	dc05      	bgt.n	800a1a0 <_strtod_l+0x260>
 800a194:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a196:	fb0e f606 	mul.w	r6, lr, r6
 800a19a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800a19c:	460e      	mov	r6, r1
 800a19e:	e7dc      	b.n	800a15a <_strtod_l+0x21a>
 800a1a0:	2910      	cmp	r1, #16
 800a1a2:	bfd8      	it	le
 800a1a4:	fb0e f707 	mulle.w	r7, lr, r7
 800a1a8:	e7f8      	b.n	800a19c <_strtod_l+0x25c>
 800a1aa:	2b0f      	cmp	r3, #15
 800a1ac:	bfdc      	itt	le
 800a1ae:	230a      	movle	r3, #10
 800a1b0:	fb03 2707 	mlale	r7, r3, r7, r2
 800a1b4:	e7e3      	b.n	800a17e <_strtod_l+0x23e>
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	e77a      	b.n	800a0b4 <_strtod_l+0x174>
 800a1be:	f04f 0c00 	mov.w	ip, #0
 800a1c2:	1ca2      	adds	r2, r4, #2
 800a1c4:	9219      	str	r2, [sp, #100]	@ 0x64
 800a1c6:	78a2      	ldrb	r2, [r4, #2]
 800a1c8:	e782      	b.n	800a0d0 <_strtod_l+0x190>
 800a1ca:	f04f 0c01 	mov.w	ip, #1
 800a1ce:	e7f8      	b.n	800a1c2 <_strtod_l+0x282>
 800a1d0:	0800dbcc 	.word	0x0800dbcc
 800a1d4:	0800d9c1 	.word	0x0800d9c1
 800a1d8:	7ff00000 	.word	0x7ff00000
 800a1dc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a1de:	1c51      	adds	r1, r2, #1
 800a1e0:	9119      	str	r1, [sp, #100]	@ 0x64
 800a1e2:	7852      	ldrb	r2, [r2, #1]
 800a1e4:	2a30      	cmp	r2, #48	@ 0x30
 800a1e6:	d0f9      	beq.n	800a1dc <_strtod_l+0x29c>
 800a1e8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a1ec:	2908      	cmp	r1, #8
 800a1ee:	f63f af75 	bhi.w	800a0dc <_strtod_l+0x19c>
 800a1f2:	3a30      	subs	r2, #48	@ 0x30
 800a1f4:	9209      	str	r2, [sp, #36]	@ 0x24
 800a1f6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a1f8:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a1fa:	f04f 080a 	mov.w	r8, #10
 800a1fe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a200:	1c56      	adds	r6, r2, #1
 800a202:	9619      	str	r6, [sp, #100]	@ 0x64
 800a204:	7852      	ldrb	r2, [r2, #1]
 800a206:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a20a:	f1be 0f09 	cmp.w	lr, #9
 800a20e:	d939      	bls.n	800a284 <_strtod_l+0x344>
 800a210:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a212:	1a76      	subs	r6, r6, r1
 800a214:	2e08      	cmp	r6, #8
 800a216:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a21a:	dc03      	bgt.n	800a224 <_strtod_l+0x2e4>
 800a21c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a21e:	4588      	cmp	r8, r1
 800a220:	bfa8      	it	ge
 800a222:	4688      	movge	r8, r1
 800a224:	f1bc 0f00 	cmp.w	ip, #0
 800a228:	d001      	beq.n	800a22e <_strtod_l+0x2ee>
 800a22a:	f1c8 0800 	rsb	r8, r8, #0
 800a22e:	2d00      	cmp	r5, #0
 800a230:	d14e      	bne.n	800a2d0 <_strtod_l+0x390>
 800a232:	9908      	ldr	r1, [sp, #32]
 800a234:	4308      	orrs	r0, r1
 800a236:	f47f aebc 	bne.w	8009fb2 <_strtod_l+0x72>
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	f47f aed4 	bne.w	8009fe8 <_strtod_l+0xa8>
 800a240:	2a69      	cmp	r2, #105	@ 0x69
 800a242:	d028      	beq.n	800a296 <_strtod_l+0x356>
 800a244:	dc25      	bgt.n	800a292 <_strtod_l+0x352>
 800a246:	2a49      	cmp	r2, #73	@ 0x49
 800a248:	d025      	beq.n	800a296 <_strtod_l+0x356>
 800a24a:	2a4e      	cmp	r2, #78	@ 0x4e
 800a24c:	f47f aecc 	bne.w	8009fe8 <_strtod_l+0xa8>
 800a250:	499a      	ldr	r1, [pc, #616]	@ (800a4bc <_strtod_l+0x57c>)
 800a252:	a819      	add	r0, sp, #100	@ 0x64
 800a254:	f001 fec6 	bl	800bfe4 <__match>
 800a258:	2800      	cmp	r0, #0
 800a25a:	f43f aec5 	beq.w	8009fe8 <_strtod_l+0xa8>
 800a25e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a260:	781b      	ldrb	r3, [r3, #0]
 800a262:	2b28      	cmp	r3, #40	@ 0x28
 800a264:	d12e      	bne.n	800a2c4 <_strtod_l+0x384>
 800a266:	4996      	ldr	r1, [pc, #600]	@ (800a4c0 <_strtod_l+0x580>)
 800a268:	aa1c      	add	r2, sp, #112	@ 0x70
 800a26a:	a819      	add	r0, sp, #100	@ 0x64
 800a26c:	f001 fece 	bl	800c00c <__hexnan>
 800a270:	2805      	cmp	r0, #5
 800a272:	d127      	bne.n	800a2c4 <_strtod_l+0x384>
 800a274:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a276:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a27a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a27e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a282:	e696      	b.n	8009fb2 <_strtod_l+0x72>
 800a284:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a286:	fb08 2101 	mla	r1, r8, r1, r2
 800a28a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a28e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a290:	e7b5      	b.n	800a1fe <_strtod_l+0x2be>
 800a292:	2a6e      	cmp	r2, #110	@ 0x6e
 800a294:	e7da      	b.n	800a24c <_strtod_l+0x30c>
 800a296:	498b      	ldr	r1, [pc, #556]	@ (800a4c4 <_strtod_l+0x584>)
 800a298:	a819      	add	r0, sp, #100	@ 0x64
 800a29a:	f001 fea3 	bl	800bfe4 <__match>
 800a29e:	2800      	cmp	r0, #0
 800a2a0:	f43f aea2 	beq.w	8009fe8 <_strtod_l+0xa8>
 800a2a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a2a6:	4988      	ldr	r1, [pc, #544]	@ (800a4c8 <_strtod_l+0x588>)
 800a2a8:	3b01      	subs	r3, #1
 800a2aa:	a819      	add	r0, sp, #100	@ 0x64
 800a2ac:	9319      	str	r3, [sp, #100]	@ 0x64
 800a2ae:	f001 fe99 	bl	800bfe4 <__match>
 800a2b2:	b910      	cbnz	r0, 800a2ba <_strtod_l+0x37a>
 800a2b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a2b6:	3301      	adds	r3, #1
 800a2b8:	9319      	str	r3, [sp, #100]	@ 0x64
 800a2ba:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800a4d8 <_strtod_l+0x598>
 800a2be:	f04f 0a00 	mov.w	sl, #0
 800a2c2:	e676      	b.n	8009fb2 <_strtod_l+0x72>
 800a2c4:	4881      	ldr	r0, [pc, #516]	@ (800a4cc <_strtod_l+0x58c>)
 800a2c6:	f000 fd7f 	bl	800adc8 <nan>
 800a2ca:	ec5b ab10 	vmov	sl, fp, d0
 800a2ce:	e670      	b.n	8009fb2 <_strtod_l+0x72>
 800a2d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2d2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800a2d4:	eba8 0303 	sub.w	r3, r8, r3
 800a2d8:	f1b9 0f00 	cmp.w	r9, #0
 800a2dc:	bf08      	it	eq
 800a2de:	46a9      	moveq	r9, r5
 800a2e0:	2d10      	cmp	r5, #16
 800a2e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2e4:	462c      	mov	r4, r5
 800a2e6:	bfa8      	it	ge
 800a2e8:	2410      	movge	r4, #16
 800a2ea:	f7f6 f93b 	bl	8000564 <__aeabi_ui2d>
 800a2ee:	2d09      	cmp	r5, #9
 800a2f0:	4682      	mov	sl, r0
 800a2f2:	468b      	mov	fp, r1
 800a2f4:	dc13      	bgt.n	800a31e <_strtod_l+0x3de>
 800a2f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	f43f ae5a 	beq.w	8009fb2 <_strtod_l+0x72>
 800a2fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a300:	dd78      	ble.n	800a3f4 <_strtod_l+0x4b4>
 800a302:	2b16      	cmp	r3, #22
 800a304:	dc5f      	bgt.n	800a3c6 <_strtod_l+0x486>
 800a306:	4972      	ldr	r1, [pc, #456]	@ (800a4d0 <_strtod_l+0x590>)
 800a308:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a30c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a310:	4652      	mov	r2, sl
 800a312:	465b      	mov	r3, fp
 800a314:	f7f6 f9a0 	bl	8000658 <__aeabi_dmul>
 800a318:	4682      	mov	sl, r0
 800a31a:	468b      	mov	fp, r1
 800a31c:	e649      	b.n	8009fb2 <_strtod_l+0x72>
 800a31e:	4b6c      	ldr	r3, [pc, #432]	@ (800a4d0 <_strtod_l+0x590>)
 800a320:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a324:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a328:	f7f6 f996 	bl	8000658 <__aeabi_dmul>
 800a32c:	4682      	mov	sl, r0
 800a32e:	4638      	mov	r0, r7
 800a330:	468b      	mov	fp, r1
 800a332:	f7f6 f917 	bl	8000564 <__aeabi_ui2d>
 800a336:	4602      	mov	r2, r0
 800a338:	460b      	mov	r3, r1
 800a33a:	4650      	mov	r0, sl
 800a33c:	4659      	mov	r1, fp
 800a33e:	f7f5 ffd5 	bl	80002ec <__adddf3>
 800a342:	2d0f      	cmp	r5, #15
 800a344:	4682      	mov	sl, r0
 800a346:	468b      	mov	fp, r1
 800a348:	ddd5      	ble.n	800a2f6 <_strtod_l+0x3b6>
 800a34a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a34c:	1b2c      	subs	r4, r5, r4
 800a34e:	441c      	add	r4, r3
 800a350:	2c00      	cmp	r4, #0
 800a352:	f340 8093 	ble.w	800a47c <_strtod_l+0x53c>
 800a356:	f014 030f 	ands.w	r3, r4, #15
 800a35a:	d00a      	beq.n	800a372 <_strtod_l+0x432>
 800a35c:	495c      	ldr	r1, [pc, #368]	@ (800a4d0 <_strtod_l+0x590>)
 800a35e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a362:	4652      	mov	r2, sl
 800a364:	465b      	mov	r3, fp
 800a366:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a36a:	f7f6 f975 	bl	8000658 <__aeabi_dmul>
 800a36e:	4682      	mov	sl, r0
 800a370:	468b      	mov	fp, r1
 800a372:	f034 040f 	bics.w	r4, r4, #15
 800a376:	d073      	beq.n	800a460 <_strtod_l+0x520>
 800a378:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a37c:	dd49      	ble.n	800a412 <_strtod_l+0x4d2>
 800a37e:	2400      	movs	r4, #0
 800a380:	46a0      	mov	r8, r4
 800a382:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a384:	46a1      	mov	r9, r4
 800a386:	9a05      	ldr	r2, [sp, #20]
 800a388:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800a4d8 <_strtod_l+0x598>
 800a38c:	2322      	movs	r3, #34	@ 0x22
 800a38e:	6013      	str	r3, [r2, #0]
 800a390:	f04f 0a00 	mov.w	sl, #0
 800a394:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a396:	2b00      	cmp	r3, #0
 800a398:	f43f ae0b 	beq.w	8009fb2 <_strtod_l+0x72>
 800a39c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a39e:	9805      	ldr	r0, [sp, #20]
 800a3a0:	f002 f9da 	bl	800c758 <_Bfree>
 800a3a4:	9805      	ldr	r0, [sp, #20]
 800a3a6:	4649      	mov	r1, r9
 800a3a8:	f002 f9d6 	bl	800c758 <_Bfree>
 800a3ac:	9805      	ldr	r0, [sp, #20]
 800a3ae:	4641      	mov	r1, r8
 800a3b0:	f002 f9d2 	bl	800c758 <_Bfree>
 800a3b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a3b6:	9805      	ldr	r0, [sp, #20]
 800a3b8:	f002 f9ce 	bl	800c758 <_Bfree>
 800a3bc:	9805      	ldr	r0, [sp, #20]
 800a3be:	4621      	mov	r1, r4
 800a3c0:	f002 f9ca 	bl	800c758 <_Bfree>
 800a3c4:	e5f5      	b.n	8009fb2 <_strtod_l+0x72>
 800a3c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a3c8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	dbbc      	blt.n	800a34a <_strtod_l+0x40a>
 800a3d0:	4c3f      	ldr	r4, [pc, #252]	@ (800a4d0 <_strtod_l+0x590>)
 800a3d2:	f1c5 050f 	rsb	r5, r5, #15
 800a3d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a3da:	4652      	mov	r2, sl
 800a3dc:	465b      	mov	r3, fp
 800a3de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3e2:	f7f6 f939 	bl	8000658 <__aeabi_dmul>
 800a3e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3e8:	1b5d      	subs	r5, r3, r5
 800a3ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a3ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a3f2:	e78f      	b.n	800a314 <_strtod_l+0x3d4>
 800a3f4:	3316      	adds	r3, #22
 800a3f6:	dba8      	blt.n	800a34a <_strtod_l+0x40a>
 800a3f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3fa:	eba3 0808 	sub.w	r8, r3, r8
 800a3fe:	4b34      	ldr	r3, [pc, #208]	@ (800a4d0 <_strtod_l+0x590>)
 800a400:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a404:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a408:	4650      	mov	r0, sl
 800a40a:	4659      	mov	r1, fp
 800a40c:	f7f6 fa4e 	bl	80008ac <__aeabi_ddiv>
 800a410:	e782      	b.n	800a318 <_strtod_l+0x3d8>
 800a412:	2300      	movs	r3, #0
 800a414:	4f2f      	ldr	r7, [pc, #188]	@ (800a4d4 <_strtod_l+0x594>)
 800a416:	1124      	asrs	r4, r4, #4
 800a418:	4650      	mov	r0, sl
 800a41a:	4659      	mov	r1, fp
 800a41c:	461e      	mov	r6, r3
 800a41e:	2c01      	cmp	r4, #1
 800a420:	dc21      	bgt.n	800a466 <_strtod_l+0x526>
 800a422:	b10b      	cbz	r3, 800a428 <_strtod_l+0x4e8>
 800a424:	4682      	mov	sl, r0
 800a426:	468b      	mov	fp, r1
 800a428:	492a      	ldr	r1, [pc, #168]	@ (800a4d4 <_strtod_l+0x594>)
 800a42a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a42e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a432:	4652      	mov	r2, sl
 800a434:	465b      	mov	r3, fp
 800a436:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a43a:	f7f6 f90d 	bl	8000658 <__aeabi_dmul>
 800a43e:	4b26      	ldr	r3, [pc, #152]	@ (800a4d8 <_strtod_l+0x598>)
 800a440:	460a      	mov	r2, r1
 800a442:	400b      	ands	r3, r1
 800a444:	4925      	ldr	r1, [pc, #148]	@ (800a4dc <_strtod_l+0x59c>)
 800a446:	428b      	cmp	r3, r1
 800a448:	4682      	mov	sl, r0
 800a44a:	d898      	bhi.n	800a37e <_strtod_l+0x43e>
 800a44c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a450:	428b      	cmp	r3, r1
 800a452:	bf86      	itte	hi
 800a454:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800a4e0 <_strtod_l+0x5a0>
 800a458:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800a45c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a460:	2300      	movs	r3, #0
 800a462:	9308      	str	r3, [sp, #32]
 800a464:	e076      	b.n	800a554 <_strtod_l+0x614>
 800a466:	07e2      	lsls	r2, r4, #31
 800a468:	d504      	bpl.n	800a474 <_strtod_l+0x534>
 800a46a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a46e:	f7f6 f8f3 	bl	8000658 <__aeabi_dmul>
 800a472:	2301      	movs	r3, #1
 800a474:	3601      	adds	r6, #1
 800a476:	1064      	asrs	r4, r4, #1
 800a478:	3708      	adds	r7, #8
 800a47a:	e7d0      	b.n	800a41e <_strtod_l+0x4de>
 800a47c:	d0f0      	beq.n	800a460 <_strtod_l+0x520>
 800a47e:	4264      	negs	r4, r4
 800a480:	f014 020f 	ands.w	r2, r4, #15
 800a484:	d00a      	beq.n	800a49c <_strtod_l+0x55c>
 800a486:	4b12      	ldr	r3, [pc, #72]	@ (800a4d0 <_strtod_l+0x590>)
 800a488:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a48c:	4650      	mov	r0, sl
 800a48e:	4659      	mov	r1, fp
 800a490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a494:	f7f6 fa0a 	bl	80008ac <__aeabi_ddiv>
 800a498:	4682      	mov	sl, r0
 800a49a:	468b      	mov	fp, r1
 800a49c:	1124      	asrs	r4, r4, #4
 800a49e:	d0df      	beq.n	800a460 <_strtod_l+0x520>
 800a4a0:	2c1f      	cmp	r4, #31
 800a4a2:	dd1f      	ble.n	800a4e4 <_strtod_l+0x5a4>
 800a4a4:	2400      	movs	r4, #0
 800a4a6:	46a0      	mov	r8, r4
 800a4a8:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a4aa:	46a1      	mov	r9, r4
 800a4ac:	9a05      	ldr	r2, [sp, #20]
 800a4ae:	2322      	movs	r3, #34	@ 0x22
 800a4b0:	f04f 0a00 	mov.w	sl, #0
 800a4b4:	f04f 0b00 	mov.w	fp, #0
 800a4b8:	6013      	str	r3, [r2, #0]
 800a4ba:	e76b      	b.n	800a394 <_strtod_l+0x454>
 800a4bc:	0800d995 	.word	0x0800d995
 800a4c0:	0800dbb8 	.word	0x0800dbb8
 800a4c4:	0800d98d 	.word	0x0800d98d
 800a4c8:	0800da7b 	.word	0x0800da7b
 800a4cc:	0800da77 	.word	0x0800da77
 800a4d0:	0800dd40 	.word	0x0800dd40
 800a4d4:	0800dd18 	.word	0x0800dd18
 800a4d8:	7ff00000 	.word	0x7ff00000
 800a4dc:	7ca00000 	.word	0x7ca00000
 800a4e0:	7fefffff 	.word	0x7fefffff
 800a4e4:	f014 0310 	ands.w	r3, r4, #16
 800a4e8:	bf18      	it	ne
 800a4ea:	236a      	movne	r3, #106	@ 0x6a
 800a4ec:	4ea9      	ldr	r6, [pc, #676]	@ (800a794 <_strtod_l+0x854>)
 800a4ee:	9308      	str	r3, [sp, #32]
 800a4f0:	4650      	mov	r0, sl
 800a4f2:	4659      	mov	r1, fp
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	07e7      	lsls	r7, r4, #31
 800a4f8:	d504      	bpl.n	800a504 <_strtod_l+0x5c4>
 800a4fa:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a4fe:	f7f6 f8ab 	bl	8000658 <__aeabi_dmul>
 800a502:	2301      	movs	r3, #1
 800a504:	1064      	asrs	r4, r4, #1
 800a506:	f106 0608 	add.w	r6, r6, #8
 800a50a:	d1f4      	bne.n	800a4f6 <_strtod_l+0x5b6>
 800a50c:	b10b      	cbz	r3, 800a512 <_strtod_l+0x5d2>
 800a50e:	4682      	mov	sl, r0
 800a510:	468b      	mov	fp, r1
 800a512:	9b08      	ldr	r3, [sp, #32]
 800a514:	b1b3      	cbz	r3, 800a544 <_strtod_l+0x604>
 800a516:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a51a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a51e:	2b00      	cmp	r3, #0
 800a520:	4659      	mov	r1, fp
 800a522:	dd0f      	ble.n	800a544 <_strtod_l+0x604>
 800a524:	2b1f      	cmp	r3, #31
 800a526:	dd56      	ble.n	800a5d6 <_strtod_l+0x696>
 800a528:	2b34      	cmp	r3, #52	@ 0x34
 800a52a:	bfde      	ittt	le
 800a52c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800a530:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a534:	4093      	lslle	r3, r2
 800a536:	f04f 0a00 	mov.w	sl, #0
 800a53a:	bfcc      	ite	gt
 800a53c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a540:	ea03 0b01 	andle.w	fp, r3, r1
 800a544:	2200      	movs	r2, #0
 800a546:	2300      	movs	r3, #0
 800a548:	4650      	mov	r0, sl
 800a54a:	4659      	mov	r1, fp
 800a54c:	f7f6 faec 	bl	8000b28 <__aeabi_dcmpeq>
 800a550:	2800      	cmp	r0, #0
 800a552:	d1a7      	bne.n	800a4a4 <_strtod_l+0x564>
 800a554:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a556:	9300      	str	r3, [sp, #0]
 800a558:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a55a:	9805      	ldr	r0, [sp, #20]
 800a55c:	462b      	mov	r3, r5
 800a55e:	464a      	mov	r2, r9
 800a560:	f002 f962 	bl	800c828 <__s2b>
 800a564:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a566:	2800      	cmp	r0, #0
 800a568:	f43f af09 	beq.w	800a37e <_strtod_l+0x43e>
 800a56c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a56e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a570:	2a00      	cmp	r2, #0
 800a572:	eba3 0308 	sub.w	r3, r3, r8
 800a576:	bfa8      	it	ge
 800a578:	2300      	movge	r3, #0
 800a57a:	9312      	str	r3, [sp, #72]	@ 0x48
 800a57c:	2400      	movs	r4, #0
 800a57e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a582:	9316      	str	r3, [sp, #88]	@ 0x58
 800a584:	46a0      	mov	r8, r4
 800a586:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a588:	9805      	ldr	r0, [sp, #20]
 800a58a:	6859      	ldr	r1, [r3, #4]
 800a58c:	f002 f8a4 	bl	800c6d8 <_Balloc>
 800a590:	4681      	mov	r9, r0
 800a592:	2800      	cmp	r0, #0
 800a594:	f43f aef7 	beq.w	800a386 <_strtod_l+0x446>
 800a598:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a59a:	691a      	ldr	r2, [r3, #16]
 800a59c:	3202      	adds	r2, #2
 800a59e:	f103 010c 	add.w	r1, r3, #12
 800a5a2:	0092      	lsls	r2, r2, #2
 800a5a4:	300c      	adds	r0, #12
 800a5a6:	f000 fc01 	bl	800adac <memcpy>
 800a5aa:	ec4b ab10 	vmov	d0, sl, fp
 800a5ae:	9805      	ldr	r0, [sp, #20]
 800a5b0:	aa1c      	add	r2, sp, #112	@ 0x70
 800a5b2:	a91b      	add	r1, sp, #108	@ 0x6c
 800a5b4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a5b8:	f002 fc6a 	bl	800ce90 <__d2b>
 800a5bc:	901a      	str	r0, [sp, #104]	@ 0x68
 800a5be:	2800      	cmp	r0, #0
 800a5c0:	f43f aee1 	beq.w	800a386 <_strtod_l+0x446>
 800a5c4:	9805      	ldr	r0, [sp, #20]
 800a5c6:	2101      	movs	r1, #1
 800a5c8:	f002 f9c4 	bl	800c954 <__i2b>
 800a5cc:	4680      	mov	r8, r0
 800a5ce:	b948      	cbnz	r0, 800a5e4 <_strtod_l+0x6a4>
 800a5d0:	f04f 0800 	mov.w	r8, #0
 800a5d4:	e6d7      	b.n	800a386 <_strtod_l+0x446>
 800a5d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a5da:	fa02 f303 	lsl.w	r3, r2, r3
 800a5de:	ea03 0a0a 	and.w	sl, r3, sl
 800a5e2:	e7af      	b.n	800a544 <_strtod_l+0x604>
 800a5e4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a5e6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a5e8:	2d00      	cmp	r5, #0
 800a5ea:	bfab      	itete	ge
 800a5ec:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a5ee:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a5f0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a5f2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a5f4:	bfac      	ite	ge
 800a5f6:	18ef      	addge	r7, r5, r3
 800a5f8:	1b5e      	sublt	r6, r3, r5
 800a5fa:	9b08      	ldr	r3, [sp, #32]
 800a5fc:	1aed      	subs	r5, r5, r3
 800a5fe:	4415      	add	r5, r2
 800a600:	4b65      	ldr	r3, [pc, #404]	@ (800a798 <_strtod_l+0x858>)
 800a602:	3d01      	subs	r5, #1
 800a604:	429d      	cmp	r5, r3
 800a606:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a60a:	da50      	bge.n	800a6ae <_strtod_l+0x76e>
 800a60c:	1b5b      	subs	r3, r3, r5
 800a60e:	2b1f      	cmp	r3, #31
 800a610:	eba2 0203 	sub.w	r2, r2, r3
 800a614:	f04f 0101 	mov.w	r1, #1
 800a618:	dc3d      	bgt.n	800a696 <_strtod_l+0x756>
 800a61a:	fa01 f303 	lsl.w	r3, r1, r3
 800a61e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a620:	2300      	movs	r3, #0
 800a622:	9310      	str	r3, [sp, #64]	@ 0x40
 800a624:	18bd      	adds	r5, r7, r2
 800a626:	9b08      	ldr	r3, [sp, #32]
 800a628:	42af      	cmp	r7, r5
 800a62a:	4416      	add	r6, r2
 800a62c:	441e      	add	r6, r3
 800a62e:	463b      	mov	r3, r7
 800a630:	bfa8      	it	ge
 800a632:	462b      	movge	r3, r5
 800a634:	42b3      	cmp	r3, r6
 800a636:	bfa8      	it	ge
 800a638:	4633      	movge	r3, r6
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	bfc2      	ittt	gt
 800a63e:	1aed      	subgt	r5, r5, r3
 800a640:	1af6      	subgt	r6, r6, r3
 800a642:	1aff      	subgt	r7, r7, r3
 800a644:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a646:	2b00      	cmp	r3, #0
 800a648:	dd16      	ble.n	800a678 <_strtod_l+0x738>
 800a64a:	4641      	mov	r1, r8
 800a64c:	9805      	ldr	r0, [sp, #20]
 800a64e:	461a      	mov	r2, r3
 800a650:	f002 fa38 	bl	800cac4 <__pow5mult>
 800a654:	4680      	mov	r8, r0
 800a656:	2800      	cmp	r0, #0
 800a658:	d0ba      	beq.n	800a5d0 <_strtod_l+0x690>
 800a65a:	4601      	mov	r1, r0
 800a65c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a65e:	9805      	ldr	r0, [sp, #20]
 800a660:	f002 f98e 	bl	800c980 <__multiply>
 800a664:	900a      	str	r0, [sp, #40]	@ 0x28
 800a666:	2800      	cmp	r0, #0
 800a668:	f43f ae8d 	beq.w	800a386 <_strtod_l+0x446>
 800a66c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a66e:	9805      	ldr	r0, [sp, #20]
 800a670:	f002 f872 	bl	800c758 <_Bfree>
 800a674:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a676:	931a      	str	r3, [sp, #104]	@ 0x68
 800a678:	2d00      	cmp	r5, #0
 800a67a:	dc1d      	bgt.n	800a6b8 <_strtod_l+0x778>
 800a67c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a67e:	2b00      	cmp	r3, #0
 800a680:	dd23      	ble.n	800a6ca <_strtod_l+0x78a>
 800a682:	4649      	mov	r1, r9
 800a684:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a686:	9805      	ldr	r0, [sp, #20]
 800a688:	f002 fa1c 	bl	800cac4 <__pow5mult>
 800a68c:	4681      	mov	r9, r0
 800a68e:	b9e0      	cbnz	r0, 800a6ca <_strtod_l+0x78a>
 800a690:	f04f 0900 	mov.w	r9, #0
 800a694:	e677      	b.n	800a386 <_strtod_l+0x446>
 800a696:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a69a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a69e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a6a2:	35e2      	adds	r5, #226	@ 0xe2
 800a6a4:	fa01 f305 	lsl.w	r3, r1, r5
 800a6a8:	9310      	str	r3, [sp, #64]	@ 0x40
 800a6aa:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a6ac:	e7ba      	b.n	800a624 <_strtod_l+0x6e4>
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	9310      	str	r3, [sp, #64]	@ 0x40
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a6b6:	e7b5      	b.n	800a624 <_strtod_l+0x6e4>
 800a6b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a6ba:	9805      	ldr	r0, [sp, #20]
 800a6bc:	462a      	mov	r2, r5
 800a6be:	f002 fa5b 	bl	800cb78 <__lshift>
 800a6c2:	901a      	str	r0, [sp, #104]	@ 0x68
 800a6c4:	2800      	cmp	r0, #0
 800a6c6:	d1d9      	bne.n	800a67c <_strtod_l+0x73c>
 800a6c8:	e65d      	b.n	800a386 <_strtod_l+0x446>
 800a6ca:	2e00      	cmp	r6, #0
 800a6cc:	dd07      	ble.n	800a6de <_strtod_l+0x79e>
 800a6ce:	4649      	mov	r1, r9
 800a6d0:	9805      	ldr	r0, [sp, #20]
 800a6d2:	4632      	mov	r2, r6
 800a6d4:	f002 fa50 	bl	800cb78 <__lshift>
 800a6d8:	4681      	mov	r9, r0
 800a6da:	2800      	cmp	r0, #0
 800a6dc:	d0d8      	beq.n	800a690 <_strtod_l+0x750>
 800a6de:	2f00      	cmp	r7, #0
 800a6e0:	dd08      	ble.n	800a6f4 <_strtod_l+0x7b4>
 800a6e2:	4641      	mov	r1, r8
 800a6e4:	9805      	ldr	r0, [sp, #20]
 800a6e6:	463a      	mov	r2, r7
 800a6e8:	f002 fa46 	bl	800cb78 <__lshift>
 800a6ec:	4680      	mov	r8, r0
 800a6ee:	2800      	cmp	r0, #0
 800a6f0:	f43f ae49 	beq.w	800a386 <_strtod_l+0x446>
 800a6f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a6f6:	9805      	ldr	r0, [sp, #20]
 800a6f8:	464a      	mov	r2, r9
 800a6fa:	f002 fac5 	bl	800cc88 <__mdiff>
 800a6fe:	4604      	mov	r4, r0
 800a700:	2800      	cmp	r0, #0
 800a702:	f43f ae40 	beq.w	800a386 <_strtod_l+0x446>
 800a706:	68c3      	ldr	r3, [r0, #12]
 800a708:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a70a:	2300      	movs	r3, #0
 800a70c:	60c3      	str	r3, [r0, #12]
 800a70e:	4641      	mov	r1, r8
 800a710:	f002 fa9e 	bl	800cc50 <__mcmp>
 800a714:	2800      	cmp	r0, #0
 800a716:	da45      	bge.n	800a7a4 <_strtod_l+0x864>
 800a718:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a71a:	ea53 030a 	orrs.w	r3, r3, sl
 800a71e:	d16b      	bne.n	800a7f8 <_strtod_l+0x8b8>
 800a720:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a724:	2b00      	cmp	r3, #0
 800a726:	d167      	bne.n	800a7f8 <_strtod_l+0x8b8>
 800a728:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a72c:	0d1b      	lsrs	r3, r3, #20
 800a72e:	051b      	lsls	r3, r3, #20
 800a730:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a734:	d960      	bls.n	800a7f8 <_strtod_l+0x8b8>
 800a736:	6963      	ldr	r3, [r4, #20]
 800a738:	b913      	cbnz	r3, 800a740 <_strtod_l+0x800>
 800a73a:	6923      	ldr	r3, [r4, #16]
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	dd5b      	ble.n	800a7f8 <_strtod_l+0x8b8>
 800a740:	4621      	mov	r1, r4
 800a742:	2201      	movs	r2, #1
 800a744:	9805      	ldr	r0, [sp, #20]
 800a746:	f002 fa17 	bl	800cb78 <__lshift>
 800a74a:	4641      	mov	r1, r8
 800a74c:	4604      	mov	r4, r0
 800a74e:	f002 fa7f 	bl	800cc50 <__mcmp>
 800a752:	2800      	cmp	r0, #0
 800a754:	dd50      	ble.n	800a7f8 <_strtod_l+0x8b8>
 800a756:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a75a:	9a08      	ldr	r2, [sp, #32]
 800a75c:	0d1b      	lsrs	r3, r3, #20
 800a75e:	051b      	lsls	r3, r3, #20
 800a760:	2a00      	cmp	r2, #0
 800a762:	d06a      	beq.n	800a83a <_strtod_l+0x8fa>
 800a764:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a768:	d867      	bhi.n	800a83a <_strtod_l+0x8fa>
 800a76a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a76e:	f67f ae9d 	bls.w	800a4ac <_strtod_l+0x56c>
 800a772:	4b0a      	ldr	r3, [pc, #40]	@ (800a79c <_strtod_l+0x85c>)
 800a774:	4650      	mov	r0, sl
 800a776:	4659      	mov	r1, fp
 800a778:	2200      	movs	r2, #0
 800a77a:	f7f5 ff6d 	bl	8000658 <__aeabi_dmul>
 800a77e:	4b08      	ldr	r3, [pc, #32]	@ (800a7a0 <_strtod_l+0x860>)
 800a780:	400b      	ands	r3, r1
 800a782:	4682      	mov	sl, r0
 800a784:	468b      	mov	fp, r1
 800a786:	2b00      	cmp	r3, #0
 800a788:	f47f ae08 	bne.w	800a39c <_strtod_l+0x45c>
 800a78c:	9a05      	ldr	r2, [sp, #20]
 800a78e:	2322      	movs	r3, #34	@ 0x22
 800a790:	6013      	str	r3, [r2, #0]
 800a792:	e603      	b.n	800a39c <_strtod_l+0x45c>
 800a794:	0800dbe0 	.word	0x0800dbe0
 800a798:	fffffc02 	.word	0xfffffc02
 800a79c:	39500000 	.word	0x39500000
 800a7a0:	7ff00000 	.word	0x7ff00000
 800a7a4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800a7a8:	d165      	bne.n	800a876 <_strtod_l+0x936>
 800a7aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a7ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a7b0:	b35a      	cbz	r2, 800a80a <_strtod_l+0x8ca>
 800a7b2:	4a9f      	ldr	r2, [pc, #636]	@ (800aa30 <_strtod_l+0xaf0>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d12b      	bne.n	800a810 <_strtod_l+0x8d0>
 800a7b8:	9b08      	ldr	r3, [sp, #32]
 800a7ba:	4651      	mov	r1, sl
 800a7bc:	b303      	cbz	r3, 800a800 <_strtod_l+0x8c0>
 800a7be:	4b9d      	ldr	r3, [pc, #628]	@ (800aa34 <_strtod_l+0xaf4>)
 800a7c0:	465a      	mov	r2, fp
 800a7c2:	4013      	ands	r3, r2
 800a7c4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a7c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a7cc:	d81b      	bhi.n	800a806 <_strtod_l+0x8c6>
 800a7ce:	0d1b      	lsrs	r3, r3, #20
 800a7d0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a7d4:	fa02 f303 	lsl.w	r3, r2, r3
 800a7d8:	4299      	cmp	r1, r3
 800a7da:	d119      	bne.n	800a810 <_strtod_l+0x8d0>
 800a7dc:	4b96      	ldr	r3, [pc, #600]	@ (800aa38 <_strtod_l+0xaf8>)
 800a7de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	d102      	bne.n	800a7ea <_strtod_l+0x8aa>
 800a7e4:	3101      	adds	r1, #1
 800a7e6:	f43f adce 	beq.w	800a386 <_strtod_l+0x446>
 800a7ea:	4b92      	ldr	r3, [pc, #584]	@ (800aa34 <_strtod_l+0xaf4>)
 800a7ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a7ee:	401a      	ands	r2, r3
 800a7f0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a7f4:	f04f 0a00 	mov.w	sl, #0
 800a7f8:	9b08      	ldr	r3, [sp, #32]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d1b9      	bne.n	800a772 <_strtod_l+0x832>
 800a7fe:	e5cd      	b.n	800a39c <_strtod_l+0x45c>
 800a800:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a804:	e7e8      	b.n	800a7d8 <_strtod_l+0x898>
 800a806:	4613      	mov	r3, r2
 800a808:	e7e6      	b.n	800a7d8 <_strtod_l+0x898>
 800a80a:	ea53 030a 	orrs.w	r3, r3, sl
 800a80e:	d0a2      	beq.n	800a756 <_strtod_l+0x816>
 800a810:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a812:	b1db      	cbz	r3, 800a84c <_strtod_l+0x90c>
 800a814:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a816:	4213      	tst	r3, r2
 800a818:	d0ee      	beq.n	800a7f8 <_strtod_l+0x8b8>
 800a81a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a81c:	9a08      	ldr	r2, [sp, #32]
 800a81e:	4650      	mov	r0, sl
 800a820:	4659      	mov	r1, fp
 800a822:	b1bb      	cbz	r3, 800a854 <_strtod_l+0x914>
 800a824:	f7ff fb6c 	bl	8009f00 <sulp>
 800a828:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a82c:	ec53 2b10 	vmov	r2, r3, d0
 800a830:	f7f5 fd5c 	bl	80002ec <__adddf3>
 800a834:	4682      	mov	sl, r0
 800a836:	468b      	mov	fp, r1
 800a838:	e7de      	b.n	800a7f8 <_strtod_l+0x8b8>
 800a83a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a83e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a842:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a846:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a84a:	e7d5      	b.n	800a7f8 <_strtod_l+0x8b8>
 800a84c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a84e:	ea13 0f0a 	tst.w	r3, sl
 800a852:	e7e1      	b.n	800a818 <_strtod_l+0x8d8>
 800a854:	f7ff fb54 	bl	8009f00 <sulp>
 800a858:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a85c:	ec53 2b10 	vmov	r2, r3, d0
 800a860:	f7f5 fd42 	bl	80002e8 <__aeabi_dsub>
 800a864:	2200      	movs	r2, #0
 800a866:	2300      	movs	r3, #0
 800a868:	4682      	mov	sl, r0
 800a86a:	468b      	mov	fp, r1
 800a86c:	f7f6 f95c 	bl	8000b28 <__aeabi_dcmpeq>
 800a870:	2800      	cmp	r0, #0
 800a872:	d0c1      	beq.n	800a7f8 <_strtod_l+0x8b8>
 800a874:	e61a      	b.n	800a4ac <_strtod_l+0x56c>
 800a876:	4641      	mov	r1, r8
 800a878:	4620      	mov	r0, r4
 800a87a:	f002 fb61 	bl	800cf40 <__ratio>
 800a87e:	ec57 6b10 	vmov	r6, r7, d0
 800a882:	2200      	movs	r2, #0
 800a884:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a888:	4630      	mov	r0, r6
 800a88a:	4639      	mov	r1, r7
 800a88c:	f7f6 f960 	bl	8000b50 <__aeabi_dcmple>
 800a890:	2800      	cmp	r0, #0
 800a892:	d06f      	beq.n	800a974 <_strtod_l+0xa34>
 800a894:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a896:	2b00      	cmp	r3, #0
 800a898:	d17a      	bne.n	800a990 <_strtod_l+0xa50>
 800a89a:	f1ba 0f00 	cmp.w	sl, #0
 800a89e:	d158      	bne.n	800a952 <_strtod_l+0xa12>
 800a8a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d15a      	bne.n	800a960 <_strtod_l+0xa20>
 800a8aa:	4b64      	ldr	r3, [pc, #400]	@ (800aa3c <_strtod_l+0xafc>)
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	4630      	mov	r0, r6
 800a8b0:	4639      	mov	r1, r7
 800a8b2:	f7f6 f943 	bl	8000b3c <__aeabi_dcmplt>
 800a8b6:	2800      	cmp	r0, #0
 800a8b8:	d159      	bne.n	800a96e <_strtod_l+0xa2e>
 800a8ba:	4630      	mov	r0, r6
 800a8bc:	4639      	mov	r1, r7
 800a8be:	4b60      	ldr	r3, [pc, #384]	@ (800aa40 <_strtod_l+0xb00>)
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	f7f5 fec9 	bl	8000658 <__aeabi_dmul>
 800a8c6:	4606      	mov	r6, r0
 800a8c8:	460f      	mov	r7, r1
 800a8ca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a8ce:	9606      	str	r6, [sp, #24]
 800a8d0:	9307      	str	r3, [sp, #28]
 800a8d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a8d6:	4d57      	ldr	r5, [pc, #348]	@ (800aa34 <_strtod_l+0xaf4>)
 800a8d8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a8dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8de:	401d      	ands	r5, r3
 800a8e0:	4b58      	ldr	r3, [pc, #352]	@ (800aa44 <_strtod_l+0xb04>)
 800a8e2:	429d      	cmp	r5, r3
 800a8e4:	f040 80b2 	bne.w	800aa4c <_strtod_l+0xb0c>
 800a8e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8ea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a8ee:	ec4b ab10 	vmov	d0, sl, fp
 800a8f2:	f002 fa5d 	bl	800cdb0 <__ulp>
 800a8f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a8fa:	ec51 0b10 	vmov	r0, r1, d0
 800a8fe:	f7f5 feab 	bl	8000658 <__aeabi_dmul>
 800a902:	4652      	mov	r2, sl
 800a904:	465b      	mov	r3, fp
 800a906:	f7f5 fcf1 	bl	80002ec <__adddf3>
 800a90a:	460b      	mov	r3, r1
 800a90c:	4949      	ldr	r1, [pc, #292]	@ (800aa34 <_strtod_l+0xaf4>)
 800a90e:	4a4e      	ldr	r2, [pc, #312]	@ (800aa48 <_strtod_l+0xb08>)
 800a910:	4019      	ands	r1, r3
 800a912:	4291      	cmp	r1, r2
 800a914:	4682      	mov	sl, r0
 800a916:	d942      	bls.n	800a99e <_strtod_l+0xa5e>
 800a918:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a91a:	4b47      	ldr	r3, [pc, #284]	@ (800aa38 <_strtod_l+0xaf8>)
 800a91c:	429a      	cmp	r2, r3
 800a91e:	d103      	bne.n	800a928 <_strtod_l+0x9e8>
 800a920:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a922:	3301      	adds	r3, #1
 800a924:	f43f ad2f 	beq.w	800a386 <_strtod_l+0x446>
 800a928:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800aa38 <_strtod_l+0xaf8>
 800a92c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a930:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a932:	9805      	ldr	r0, [sp, #20]
 800a934:	f001 ff10 	bl	800c758 <_Bfree>
 800a938:	9805      	ldr	r0, [sp, #20]
 800a93a:	4649      	mov	r1, r9
 800a93c:	f001 ff0c 	bl	800c758 <_Bfree>
 800a940:	9805      	ldr	r0, [sp, #20]
 800a942:	4641      	mov	r1, r8
 800a944:	f001 ff08 	bl	800c758 <_Bfree>
 800a948:	9805      	ldr	r0, [sp, #20]
 800a94a:	4621      	mov	r1, r4
 800a94c:	f001 ff04 	bl	800c758 <_Bfree>
 800a950:	e619      	b.n	800a586 <_strtod_l+0x646>
 800a952:	f1ba 0f01 	cmp.w	sl, #1
 800a956:	d103      	bne.n	800a960 <_strtod_l+0xa20>
 800a958:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	f43f ada6 	beq.w	800a4ac <_strtod_l+0x56c>
 800a960:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800aa10 <_strtod_l+0xad0>
 800a964:	4f35      	ldr	r7, [pc, #212]	@ (800aa3c <_strtod_l+0xafc>)
 800a966:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a96a:	2600      	movs	r6, #0
 800a96c:	e7b1      	b.n	800a8d2 <_strtod_l+0x992>
 800a96e:	4f34      	ldr	r7, [pc, #208]	@ (800aa40 <_strtod_l+0xb00>)
 800a970:	2600      	movs	r6, #0
 800a972:	e7aa      	b.n	800a8ca <_strtod_l+0x98a>
 800a974:	4b32      	ldr	r3, [pc, #200]	@ (800aa40 <_strtod_l+0xb00>)
 800a976:	4630      	mov	r0, r6
 800a978:	4639      	mov	r1, r7
 800a97a:	2200      	movs	r2, #0
 800a97c:	f7f5 fe6c 	bl	8000658 <__aeabi_dmul>
 800a980:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a982:	4606      	mov	r6, r0
 800a984:	460f      	mov	r7, r1
 800a986:	2b00      	cmp	r3, #0
 800a988:	d09f      	beq.n	800a8ca <_strtod_l+0x98a>
 800a98a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a98e:	e7a0      	b.n	800a8d2 <_strtod_l+0x992>
 800a990:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800aa18 <_strtod_l+0xad8>
 800a994:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a998:	ec57 6b17 	vmov	r6, r7, d7
 800a99c:	e799      	b.n	800a8d2 <_strtod_l+0x992>
 800a99e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a9a2:	9b08      	ldr	r3, [sp, #32]
 800a9a4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d1c1      	bne.n	800a930 <_strtod_l+0x9f0>
 800a9ac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a9b0:	0d1b      	lsrs	r3, r3, #20
 800a9b2:	051b      	lsls	r3, r3, #20
 800a9b4:	429d      	cmp	r5, r3
 800a9b6:	d1bb      	bne.n	800a930 <_strtod_l+0x9f0>
 800a9b8:	4630      	mov	r0, r6
 800a9ba:	4639      	mov	r1, r7
 800a9bc:	f7f6 f9ac 	bl	8000d18 <__aeabi_d2lz>
 800a9c0:	f7f5 fe1c 	bl	80005fc <__aeabi_l2d>
 800a9c4:	4602      	mov	r2, r0
 800a9c6:	460b      	mov	r3, r1
 800a9c8:	4630      	mov	r0, r6
 800a9ca:	4639      	mov	r1, r7
 800a9cc:	f7f5 fc8c 	bl	80002e8 <__aeabi_dsub>
 800a9d0:	460b      	mov	r3, r1
 800a9d2:	4602      	mov	r2, r0
 800a9d4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a9d8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a9dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9de:	ea46 060a 	orr.w	r6, r6, sl
 800a9e2:	431e      	orrs	r6, r3
 800a9e4:	d06f      	beq.n	800aac6 <_strtod_l+0xb86>
 800a9e6:	a30e      	add	r3, pc, #56	@ (adr r3, 800aa20 <_strtod_l+0xae0>)
 800a9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ec:	f7f6 f8a6 	bl	8000b3c <__aeabi_dcmplt>
 800a9f0:	2800      	cmp	r0, #0
 800a9f2:	f47f acd3 	bne.w	800a39c <_strtod_l+0x45c>
 800a9f6:	a30c      	add	r3, pc, #48	@ (adr r3, 800aa28 <_strtod_l+0xae8>)
 800a9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa00:	f7f6 f8ba 	bl	8000b78 <__aeabi_dcmpgt>
 800aa04:	2800      	cmp	r0, #0
 800aa06:	d093      	beq.n	800a930 <_strtod_l+0x9f0>
 800aa08:	e4c8      	b.n	800a39c <_strtod_l+0x45c>
 800aa0a:	bf00      	nop
 800aa0c:	f3af 8000 	nop.w
 800aa10:	00000000 	.word	0x00000000
 800aa14:	bff00000 	.word	0xbff00000
 800aa18:	00000000 	.word	0x00000000
 800aa1c:	3ff00000 	.word	0x3ff00000
 800aa20:	94a03595 	.word	0x94a03595
 800aa24:	3fdfffff 	.word	0x3fdfffff
 800aa28:	35afe535 	.word	0x35afe535
 800aa2c:	3fe00000 	.word	0x3fe00000
 800aa30:	000fffff 	.word	0x000fffff
 800aa34:	7ff00000 	.word	0x7ff00000
 800aa38:	7fefffff 	.word	0x7fefffff
 800aa3c:	3ff00000 	.word	0x3ff00000
 800aa40:	3fe00000 	.word	0x3fe00000
 800aa44:	7fe00000 	.word	0x7fe00000
 800aa48:	7c9fffff 	.word	0x7c9fffff
 800aa4c:	9b08      	ldr	r3, [sp, #32]
 800aa4e:	b323      	cbz	r3, 800aa9a <_strtod_l+0xb5a>
 800aa50:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800aa54:	d821      	bhi.n	800aa9a <_strtod_l+0xb5a>
 800aa56:	a328      	add	r3, pc, #160	@ (adr r3, 800aaf8 <_strtod_l+0xbb8>)
 800aa58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa5c:	4630      	mov	r0, r6
 800aa5e:	4639      	mov	r1, r7
 800aa60:	f7f6 f876 	bl	8000b50 <__aeabi_dcmple>
 800aa64:	b1a0      	cbz	r0, 800aa90 <_strtod_l+0xb50>
 800aa66:	4639      	mov	r1, r7
 800aa68:	4630      	mov	r0, r6
 800aa6a:	f7f6 f8cd 	bl	8000c08 <__aeabi_d2uiz>
 800aa6e:	2801      	cmp	r0, #1
 800aa70:	bf38      	it	cc
 800aa72:	2001      	movcc	r0, #1
 800aa74:	f7f5 fd76 	bl	8000564 <__aeabi_ui2d>
 800aa78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa7a:	4606      	mov	r6, r0
 800aa7c:	460f      	mov	r7, r1
 800aa7e:	b9fb      	cbnz	r3, 800aac0 <_strtod_l+0xb80>
 800aa80:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800aa84:	9014      	str	r0, [sp, #80]	@ 0x50
 800aa86:	9315      	str	r3, [sp, #84]	@ 0x54
 800aa88:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800aa8c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800aa90:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800aa92:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800aa96:	1b5b      	subs	r3, r3, r5
 800aa98:	9311      	str	r3, [sp, #68]	@ 0x44
 800aa9a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800aa9e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800aaa2:	f002 f985 	bl	800cdb0 <__ulp>
 800aaa6:	4650      	mov	r0, sl
 800aaa8:	ec53 2b10 	vmov	r2, r3, d0
 800aaac:	4659      	mov	r1, fp
 800aaae:	f7f5 fdd3 	bl	8000658 <__aeabi_dmul>
 800aab2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800aab6:	f7f5 fc19 	bl	80002ec <__adddf3>
 800aaba:	4682      	mov	sl, r0
 800aabc:	468b      	mov	fp, r1
 800aabe:	e770      	b.n	800a9a2 <_strtod_l+0xa62>
 800aac0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800aac4:	e7e0      	b.n	800aa88 <_strtod_l+0xb48>
 800aac6:	a30e      	add	r3, pc, #56	@ (adr r3, 800ab00 <_strtod_l+0xbc0>)
 800aac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aacc:	f7f6 f836 	bl	8000b3c <__aeabi_dcmplt>
 800aad0:	e798      	b.n	800aa04 <_strtod_l+0xac4>
 800aad2:	2300      	movs	r3, #0
 800aad4:	930e      	str	r3, [sp, #56]	@ 0x38
 800aad6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800aad8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aada:	6013      	str	r3, [r2, #0]
 800aadc:	f7ff ba6d 	b.w	8009fba <_strtod_l+0x7a>
 800aae0:	2a65      	cmp	r2, #101	@ 0x65
 800aae2:	f43f ab68 	beq.w	800a1b6 <_strtod_l+0x276>
 800aae6:	2a45      	cmp	r2, #69	@ 0x45
 800aae8:	f43f ab65 	beq.w	800a1b6 <_strtod_l+0x276>
 800aaec:	2301      	movs	r3, #1
 800aaee:	f7ff bba0 	b.w	800a232 <_strtod_l+0x2f2>
 800aaf2:	bf00      	nop
 800aaf4:	f3af 8000 	nop.w
 800aaf8:	ffc00000 	.word	0xffc00000
 800aafc:	41dfffff 	.word	0x41dfffff
 800ab00:	94a03595 	.word	0x94a03595
 800ab04:	3fcfffff 	.word	0x3fcfffff

0800ab08 <_strtod_r>:
 800ab08:	4b01      	ldr	r3, [pc, #4]	@ (800ab10 <_strtod_r+0x8>)
 800ab0a:	f7ff ba19 	b.w	8009f40 <_strtod_l>
 800ab0e:	bf00      	nop
 800ab10:	2000001c 	.word	0x2000001c

0800ab14 <_strtol_l.isra.0>:
 800ab14:	2b24      	cmp	r3, #36	@ 0x24
 800ab16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab1a:	4686      	mov	lr, r0
 800ab1c:	4690      	mov	r8, r2
 800ab1e:	d801      	bhi.n	800ab24 <_strtol_l.isra.0+0x10>
 800ab20:	2b01      	cmp	r3, #1
 800ab22:	d106      	bne.n	800ab32 <_strtol_l.isra.0+0x1e>
 800ab24:	f000 f910 	bl	800ad48 <__errno>
 800ab28:	2316      	movs	r3, #22
 800ab2a:	6003      	str	r3, [r0, #0]
 800ab2c:	2000      	movs	r0, #0
 800ab2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab32:	4834      	ldr	r0, [pc, #208]	@ (800ac04 <_strtol_l.isra.0+0xf0>)
 800ab34:	460d      	mov	r5, r1
 800ab36:	462a      	mov	r2, r5
 800ab38:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab3c:	5d06      	ldrb	r6, [r0, r4]
 800ab3e:	f016 0608 	ands.w	r6, r6, #8
 800ab42:	d1f8      	bne.n	800ab36 <_strtol_l.isra.0+0x22>
 800ab44:	2c2d      	cmp	r4, #45	@ 0x2d
 800ab46:	d110      	bne.n	800ab6a <_strtol_l.isra.0+0x56>
 800ab48:	782c      	ldrb	r4, [r5, #0]
 800ab4a:	2601      	movs	r6, #1
 800ab4c:	1c95      	adds	r5, r2, #2
 800ab4e:	f033 0210 	bics.w	r2, r3, #16
 800ab52:	d115      	bne.n	800ab80 <_strtol_l.isra.0+0x6c>
 800ab54:	2c30      	cmp	r4, #48	@ 0x30
 800ab56:	d10d      	bne.n	800ab74 <_strtol_l.isra.0+0x60>
 800ab58:	782a      	ldrb	r2, [r5, #0]
 800ab5a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ab5e:	2a58      	cmp	r2, #88	@ 0x58
 800ab60:	d108      	bne.n	800ab74 <_strtol_l.isra.0+0x60>
 800ab62:	786c      	ldrb	r4, [r5, #1]
 800ab64:	3502      	adds	r5, #2
 800ab66:	2310      	movs	r3, #16
 800ab68:	e00a      	b.n	800ab80 <_strtol_l.isra.0+0x6c>
 800ab6a:	2c2b      	cmp	r4, #43	@ 0x2b
 800ab6c:	bf04      	itt	eq
 800ab6e:	782c      	ldrbeq	r4, [r5, #0]
 800ab70:	1c95      	addeq	r5, r2, #2
 800ab72:	e7ec      	b.n	800ab4e <_strtol_l.isra.0+0x3a>
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d1f6      	bne.n	800ab66 <_strtol_l.isra.0+0x52>
 800ab78:	2c30      	cmp	r4, #48	@ 0x30
 800ab7a:	bf14      	ite	ne
 800ab7c:	230a      	movne	r3, #10
 800ab7e:	2308      	moveq	r3, #8
 800ab80:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ab84:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800ab88:	2200      	movs	r2, #0
 800ab8a:	fbbc f9f3 	udiv	r9, ip, r3
 800ab8e:	4610      	mov	r0, r2
 800ab90:	fb03 ca19 	mls	sl, r3, r9, ip
 800ab94:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ab98:	2f09      	cmp	r7, #9
 800ab9a:	d80f      	bhi.n	800abbc <_strtol_l.isra.0+0xa8>
 800ab9c:	463c      	mov	r4, r7
 800ab9e:	42a3      	cmp	r3, r4
 800aba0:	dd1b      	ble.n	800abda <_strtol_l.isra.0+0xc6>
 800aba2:	1c57      	adds	r7, r2, #1
 800aba4:	d007      	beq.n	800abb6 <_strtol_l.isra.0+0xa2>
 800aba6:	4581      	cmp	r9, r0
 800aba8:	d314      	bcc.n	800abd4 <_strtol_l.isra.0+0xc0>
 800abaa:	d101      	bne.n	800abb0 <_strtol_l.isra.0+0x9c>
 800abac:	45a2      	cmp	sl, r4
 800abae:	db11      	blt.n	800abd4 <_strtol_l.isra.0+0xc0>
 800abb0:	fb00 4003 	mla	r0, r0, r3, r4
 800abb4:	2201      	movs	r2, #1
 800abb6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800abba:	e7eb      	b.n	800ab94 <_strtol_l.isra.0+0x80>
 800abbc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800abc0:	2f19      	cmp	r7, #25
 800abc2:	d801      	bhi.n	800abc8 <_strtol_l.isra.0+0xb4>
 800abc4:	3c37      	subs	r4, #55	@ 0x37
 800abc6:	e7ea      	b.n	800ab9e <_strtol_l.isra.0+0x8a>
 800abc8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800abcc:	2f19      	cmp	r7, #25
 800abce:	d804      	bhi.n	800abda <_strtol_l.isra.0+0xc6>
 800abd0:	3c57      	subs	r4, #87	@ 0x57
 800abd2:	e7e4      	b.n	800ab9e <_strtol_l.isra.0+0x8a>
 800abd4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800abd8:	e7ed      	b.n	800abb6 <_strtol_l.isra.0+0xa2>
 800abda:	1c53      	adds	r3, r2, #1
 800abdc:	d108      	bne.n	800abf0 <_strtol_l.isra.0+0xdc>
 800abde:	2322      	movs	r3, #34	@ 0x22
 800abe0:	f8ce 3000 	str.w	r3, [lr]
 800abe4:	4660      	mov	r0, ip
 800abe6:	f1b8 0f00 	cmp.w	r8, #0
 800abea:	d0a0      	beq.n	800ab2e <_strtol_l.isra.0+0x1a>
 800abec:	1e69      	subs	r1, r5, #1
 800abee:	e006      	b.n	800abfe <_strtol_l.isra.0+0xea>
 800abf0:	b106      	cbz	r6, 800abf4 <_strtol_l.isra.0+0xe0>
 800abf2:	4240      	negs	r0, r0
 800abf4:	f1b8 0f00 	cmp.w	r8, #0
 800abf8:	d099      	beq.n	800ab2e <_strtol_l.isra.0+0x1a>
 800abfa:	2a00      	cmp	r2, #0
 800abfc:	d1f6      	bne.n	800abec <_strtol_l.isra.0+0xd8>
 800abfe:	f8c8 1000 	str.w	r1, [r8]
 800ac02:	e794      	b.n	800ab2e <_strtol_l.isra.0+0x1a>
 800ac04:	0800dc09 	.word	0x0800dc09

0800ac08 <_strtol_r>:
 800ac08:	f7ff bf84 	b.w	800ab14 <_strtol_l.isra.0>

0800ac0c <strtol>:
 800ac0c:	4613      	mov	r3, r2
 800ac0e:	460a      	mov	r2, r1
 800ac10:	4601      	mov	r1, r0
 800ac12:	4802      	ldr	r0, [pc, #8]	@ (800ac1c <strtol+0x10>)
 800ac14:	6800      	ldr	r0, [r0, #0]
 800ac16:	f7ff bf7d 	b.w	800ab14 <_strtol_l.isra.0>
 800ac1a:	bf00      	nop
 800ac1c:	20000188 	.word	0x20000188

0800ac20 <_fwalk_sglue>:
 800ac20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac24:	4607      	mov	r7, r0
 800ac26:	4688      	mov	r8, r1
 800ac28:	4614      	mov	r4, r2
 800ac2a:	2600      	movs	r6, #0
 800ac2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac30:	f1b9 0901 	subs.w	r9, r9, #1
 800ac34:	d505      	bpl.n	800ac42 <_fwalk_sglue+0x22>
 800ac36:	6824      	ldr	r4, [r4, #0]
 800ac38:	2c00      	cmp	r4, #0
 800ac3a:	d1f7      	bne.n	800ac2c <_fwalk_sglue+0xc>
 800ac3c:	4630      	mov	r0, r6
 800ac3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac42:	89ab      	ldrh	r3, [r5, #12]
 800ac44:	2b01      	cmp	r3, #1
 800ac46:	d907      	bls.n	800ac58 <_fwalk_sglue+0x38>
 800ac48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac4c:	3301      	adds	r3, #1
 800ac4e:	d003      	beq.n	800ac58 <_fwalk_sglue+0x38>
 800ac50:	4629      	mov	r1, r5
 800ac52:	4638      	mov	r0, r7
 800ac54:	47c0      	blx	r8
 800ac56:	4306      	orrs	r6, r0
 800ac58:	3568      	adds	r5, #104	@ 0x68
 800ac5a:	e7e9      	b.n	800ac30 <_fwalk_sglue+0x10>

0800ac5c <memset>:
 800ac5c:	4402      	add	r2, r0
 800ac5e:	4603      	mov	r3, r0
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d100      	bne.n	800ac66 <memset+0xa>
 800ac64:	4770      	bx	lr
 800ac66:	f803 1b01 	strb.w	r1, [r3], #1
 800ac6a:	e7f9      	b.n	800ac60 <memset+0x4>

0800ac6c <strncmp>:
 800ac6c:	b510      	push	{r4, lr}
 800ac6e:	b16a      	cbz	r2, 800ac8c <strncmp+0x20>
 800ac70:	3901      	subs	r1, #1
 800ac72:	1884      	adds	r4, r0, r2
 800ac74:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac78:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ac7c:	429a      	cmp	r2, r3
 800ac7e:	d103      	bne.n	800ac88 <strncmp+0x1c>
 800ac80:	42a0      	cmp	r0, r4
 800ac82:	d001      	beq.n	800ac88 <strncmp+0x1c>
 800ac84:	2a00      	cmp	r2, #0
 800ac86:	d1f5      	bne.n	800ac74 <strncmp+0x8>
 800ac88:	1ad0      	subs	r0, r2, r3
 800ac8a:	bd10      	pop	{r4, pc}
 800ac8c:	4610      	mov	r0, r2
 800ac8e:	e7fc      	b.n	800ac8a <strncmp+0x1e>

0800ac90 <strtok>:
 800ac90:	4b16      	ldr	r3, [pc, #88]	@ (800acec <strtok+0x5c>)
 800ac92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac96:	681f      	ldr	r7, [r3, #0]
 800ac98:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800ac9a:	4605      	mov	r5, r0
 800ac9c:	460e      	mov	r6, r1
 800ac9e:	b9ec      	cbnz	r4, 800acdc <strtok+0x4c>
 800aca0:	2050      	movs	r0, #80	@ 0x50
 800aca2:	f001 fba5 	bl	800c3f0 <malloc>
 800aca6:	4602      	mov	r2, r0
 800aca8:	6478      	str	r0, [r7, #68]	@ 0x44
 800acaa:	b920      	cbnz	r0, 800acb6 <strtok+0x26>
 800acac:	4b10      	ldr	r3, [pc, #64]	@ (800acf0 <strtok+0x60>)
 800acae:	4811      	ldr	r0, [pc, #68]	@ (800acf4 <strtok+0x64>)
 800acb0:	215b      	movs	r1, #91	@ 0x5b
 800acb2:	f000 f897 	bl	800ade4 <__assert_func>
 800acb6:	e9c0 4400 	strd	r4, r4, [r0]
 800acba:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800acbe:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800acc2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800acc6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800acca:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800acce:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800acd2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800acd6:	6184      	str	r4, [r0, #24]
 800acd8:	7704      	strb	r4, [r0, #28]
 800acda:	6244      	str	r4, [r0, #36]	@ 0x24
 800acdc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800acde:	4631      	mov	r1, r6
 800ace0:	4628      	mov	r0, r5
 800ace2:	2301      	movs	r3, #1
 800ace4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ace8:	f000 b806 	b.w	800acf8 <__strtok_r>
 800acec:	20000188 	.word	0x20000188
 800acf0:	0800d9c3 	.word	0x0800d9c3
 800acf4:	0800d9da 	.word	0x0800d9da

0800acf8 <__strtok_r>:
 800acf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acfa:	4604      	mov	r4, r0
 800acfc:	b908      	cbnz	r0, 800ad02 <__strtok_r+0xa>
 800acfe:	6814      	ldr	r4, [r2, #0]
 800ad00:	b144      	cbz	r4, 800ad14 <__strtok_r+0x1c>
 800ad02:	4620      	mov	r0, r4
 800ad04:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ad08:	460f      	mov	r7, r1
 800ad0a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ad0e:	b91e      	cbnz	r6, 800ad18 <__strtok_r+0x20>
 800ad10:	b965      	cbnz	r5, 800ad2c <__strtok_r+0x34>
 800ad12:	6015      	str	r5, [r2, #0]
 800ad14:	2000      	movs	r0, #0
 800ad16:	e005      	b.n	800ad24 <__strtok_r+0x2c>
 800ad18:	42b5      	cmp	r5, r6
 800ad1a:	d1f6      	bne.n	800ad0a <__strtok_r+0x12>
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d1f0      	bne.n	800ad02 <__strtok_r+0xa>
 800ad20:	6014      	str	r4, [r2, #0]
 800ad22:	7003      	strb	r3, [r0, #0]
 800ad24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad26:	461c      	mov	r4, r3
 800ad28:	e00c      	b.n	800ad44 <__strtok_r+0x4c>
 800ad2a:	b91d      	cbnz	r5, 800ad34 <__strtok_r+0x3c>
 800ad2c:	4627      	mov	r7, r4
 800ad2e:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ad32:	460e      	mov	r6, r1
 800ad34:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ad38:	42ab      	cmp	r3, r5
 800ad3a:	d1f6      	bne.n	800ad2a <__strtok_r+0x32>
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d0f2      	beq.n	800ad26 <__strtok_r+0x2e>
 800ad40:	2300      	movs	r3, #0
 800ad42:	703b      	strb	r3, [r7, #0]
 800ad44:	6014      	str	r4, [r2, #0]
 800ad46:	e7ed      	b.n	800ad24 <__strtok_r+0x2c>

0800ad48 <__errno>:
 800ad48:	4b01      	ldr	r3, [pc, #4]	@ (800ad50 <__errno+0x8>)
 800ad4a:	6818      	ldr	r0, [r3, #0]
 800ad4c:	4770      	bx	lr
 800ad4e:	bf00      	nop
 800ad50:	20000188 	.word	0x20000188

0800ad54 <__libc_init_array>:
 800ad54:	b570      	push	{r4, r5, r6, lr}
 800ad56:	4d0d      	ldr	r5, [pc, #52]	@ (800ad8c <__libc_init_array+0x38>)
 800ad58:	4c0d      	ldr	r4, [pc, #52]	@ (800ad90 <__libc_init_array+0x3c>)
 800ad5a:	1b64      	subs	r4, r4, r5
 800ad5c:	10a4      	asrs	r4, r4, #2
 800ad5e:	2600      	movs	r6, #0
 800ad60:	42a6      	cmp	r6, r4
 800ad62:	d109      	bne.n	800ad78 <__libc_init_array+0x24>
 800ad64:	4d0b      	ldr	r5, [pc, #44]	@ (800ad94 <__libc_init_array+0x40>)
 800ad66:	4c0c      	ldr	r4, [pc, #48]	@ (800ad98 <__libc_init_array+0x44>)
 800ad68:	f002 fd6e 	bl	800d848 <_init>
 800ad6c:	1b64      	subs	r4, r4, r5
 800ad6e:	10a4      	asrs	r4, r4, #2
 800ad70:	2600      	movs	r6, #0
 800ad72:	42a6      	cmp	r6, r4
 800ad74:	d105      	bne.n	800ad82 <__libc_init_array+0x2e>
 800ad76:	bd70      	pop	{r4, r5, r6, pc}
 800ad78:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad7c:	4798      	blx	r3
 800ad7e:	3601      	adds	r6, #1
 800ad80:	e7ee      	b.n	800ad60 <__libc_init_array+0xc>
 800ad82:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad86:	4798      	blx	r3
 800ad88:	3601      	adds	r6, #1
 800ad8a:	e7f2      	b.n	800ad72 <__libc_init_array+0x1e>
 800ad8c:	0800de10 	.word	0x0800de10
 800ad90:	0800de10 	.word	0x0800de10
 800ad94:	0800de10 	.word	0x0800de10
 800ad98:	0800de14 	.word	0x0800de14

0800ad9c <__retarget_lock_init_recursive>:
 800ad9c:	4770      	bx	lr

0800ad9e <__retarget_lock_acquire_recursive>:
 800ad9e:	4770      	bx	lr

0800ada0 <__retarget_lock_release_recursive>:
 800ada0:	4770      	bx	lr
	...

0800ada4 <_localeconv_r>:
 800ada4:	4800      	ldr	r0, [pc, #0]	@ (800ada8 <_localeconv_r+0x4>)
 800ada6:	4770      	bx	lr
 800ada8:	2000010c 	.word	0x2000010c

0800adac <memcpy>:
 800adac:	440a      	add	r2, r1
 800adae:	4291      	cmp	r1, r2
 800adb0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800adb4:	d100      	bne.n	800adb8 <memcpy+0xc>
 800adb6:	4770      	bx	lr
 800adb8:	b510      	push	{r4, lr}
 800adba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800adbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800adc2:	4291      	cmp	r1, r2
 800adc4:	d1f9      	bne.n	800adba <memcpy+0xe>
 800adc6:	bd10      	pop	{r4, pc}

0800adc8 <nan>:
 800adc8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800add0 <nan+0x8>
 800adcc:	4770      	bx	lr
 800adce:	bf00      	nop
 800add0:	00000000 	.word	0x00000000
 800add4:	7ff80000 	.word	0x7ff80000

0800add8 <nanf>:
 800add8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ade0 <nanf+0x8>
 800addc:	4770      	bx	lr
 800adde:	bf00      	nop
 800ade0:	7fc00000 	.word	0x7fc00000

0800ade4 <__assert_func>:
 800ade4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ade6:	4614      	mov	r4, r2
 800ade8:	461a      	mov	r2, r3
 800adea:	4b09      	ldr	r3, [pc, #36]	@ (800ae10 <__assert_func+0x2c>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	4605      	mov	r5, r0
 800adf0:	68d8      	ldr	r0, [r3, #12]
 800adf2:	b14c      	cbz	r4, 800ae08 <__assert_func+0x24>
 800adf4:	4b07      	ldr	r3, [pc, #28]	@ (800ae14 <__assert_func+0x30>)
 800adf6:	9100      	str	r1, [sp, #0]
 800adf8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800adfc:	4906      	ldr	r1, [pc, #24]	@ (800ae18 <__assert_func+0x34>)
 800adfe:	462b      	mov	r3, r5
 800ae00:	f002 f958 	bl	800d0b4 <fiprintf>
 800ae04:	f002 fa14 	bl	800d230 <abort>
 800ae08:	4b04      	ldr	r3, [pc, #16]	@ (800ae1c <__assert_func+0x38>)
 800ae0a:	461c      	mov	r4, r3
 800ae0c:	e7f3      	b.n	800adf6 <__assert_func+0x12>
 800ae0e:	bf00      	nop
 800ae10:	20000188 	.word	0x20000188
 800ae14:	0800da3c 	.word	0x0800da3c
 800ae18:	0800da49 	.word	0x0800da49
 800ae1c:	0800da77 	.word	0x0800da77

0800ae20 <quorem>:
 800ae20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae24:	6903      	ldr	r3, [r0, #16]
 800ae26:	690c      	ldr	r4, [r1, #16]
 800ae28:	42a3      	cmp	r3, r4
 800ae2a:	4607      	mov	r7, r0
 800ae2c:	db7e      	blt.n	800af2c <quorem+0x10c>
 800ae2e:	3c01      	subs	r4, #1
 800ae30:	f101 0814 	add.w	r8, r1, #20
 800ae34:	00a3      	lsls	r3, r4, #2
 800ae36:	f100 0514 	add.w	r5, r0, #20
 800ae3a:	9300      	str	r3, [sp, #0]
 800ae3c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae40:	9301      	str	r3, [sp, #4]
 800ae42:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ae46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae4a:	3301      	adds	r3, #1
 800ae4c:	429a      	cmp	r2, r3
 800ae4e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ae52:	fbb2 f6f3 	udiv	r6, r2, r3
 800ae56:	d32e      	bcc.n	800aeb6 <quorem+0x96>
 800ae58:	f04f 0a00 	mov.w	sl, #0
 800ae5c:	46c4      	mov	ip, r8
 800ae5e:	46ae      	mov	lr, r5
 800ae60:	46d3      	mov	fp, sl
 800ae62:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ae66:	b298      	uxth	r0, r3
 800ae68:	fb06 a000 	mla	r0, r6, r0, sl
 800ae6c:	0c02      	lsrs	r2, r0, #16
 800ae6e:	0c1b      	lsrs	r3, r3, #16
 800ae70:	fb06 2303 	mla	r3, r6, r3, r2
 800ae74:	f8de 2000 	ldr.w	r2, [lr]
 800ae78:	b280      	uxth	r0, r0
 800ae7a:	b292      	uxth	r2, r2
 800ae7c:	1a12      	subs	r2, r2, r0
 800ae7e:	445a      	add	r2, fp
 800ae80:	f8de 0000 	ldr.w	r0, [lr]
 800ae84:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ae88:	b29b      	uxth	r3, r3
 800ae8a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ae8e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ae92:	b292      	uxth	r2, r2
 800ae94:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ae98:	45e1      	cmp	r9, ip
 800ae9a:	f84e 2b04 	str.w	r2, [lr], #4
 800ae9e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800aea2:	d2de      	bcs.n	800ae62 <quorem+0x42>
 800aea4:	9b00      	ldr	r3, [sp, #0]
 800aea6:	58eb      	ldr	r3, [r5, r3]
 800aea8:	b92b      	cbnz	r3, 800aeb6 <quorem+0x96>
 800aeaa:	9b01      	ldr	r3, [sp, #4]
 800aeac:	3b04      	subs	r3, #4
 800aeae:	429d      	cmp	r5, r3
 800aeb0:	461a      	mov	r2, r3
 800aeb2:	d32f      	bcc.n	800af14 <quorem+0xf4>
 800aeb4:	613c      	str	r4, [r7, #16]
 800aeb6:	4638      	mov	r0, r7
 800aeb8:	f001 feca 	bl	800cc50 <__mcmp>
 800aebc:	2800      	cmp	r0, #0
 800aebe:	db25      	blt.n	800af0c <quorem+0xec>
 800aec0:	4629      	mov	r1, r5
 800aec2:	2000      	movs	r0, #0
 800aec4:	f858 2b04 	ldr.w	r2, [r8], #4
 800aec8:	f8d1 c000 	ldr.w	ip, [r1]
 800aecc:	fa1f fe82 	uxth.w	lr, r2
 800aed0:	fa1f f38c 	uxth.w	r3, ip
 800aed4:	eba3 030e 	sub.w	r3, r3, lr
 800aed8:	4403      	add	r3, r0
 800aeda:	0c12      	lsrs	r2, r2, #16
 800aedc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800aee0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800aee4:	b29b      	uxth	r3, r3
 800aee6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aeea:	45c1      	cmp	r9, r8
 800aeec:	f841 3b04 	str.w	r3, [r1], #4
 800aef0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800aef4:	d2e6      	bcs.n	800aec4 <quorem+0xa4>
 800aef6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aefa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aefe:	b922      	cbnz	r2, 800af0a <quorem+0xea>
 800af00:	3b04      	subs	r3, #4
 800af02:	429d      	cmp	r5, r3
 800af04:	461a      	mov	r2, r3
 800af06:	d30b      	bcc.n	800af20 <quorem+0x100>
 800af08:	613c      	str	r4, [r7, #16]
 800af0a:	3601      	adds	r6, #1
 800af0c:	4630      	mov	r0, r6
 800af0e:	b003      	add	sp, #12
 800af10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af14:	6812      	ldr	r2, [r2, #0]
 800af16:	3b04      	subs	r3, #4
 800af18:	2a00      	cmp	r2, #0
 800af1a:	d1cb      	bne.n	800aeb4 <quorem+0x94>
 800af1c:	3c01      	subs	r4, #1
 800af1e:	e7c6      	b.n	800aeae <quorem+0x8e>
 800af20:	6812      	ldr	r2, [r2, #0]
 800af22:	3b04      	subs	r3, #4
 800af24:	2a00      	cmp	r2, #0
 800af26:	d1ef      	bne.n	800af08 <quorem+0xe8>
 800af28:	3c01      	subs	r4, #1
 800af2a:	e7ea      	b.n	800af02 <quorem+0xe2>
 800af2c:	2000      	movs	r0, #0
 800af2e:	e7ee      	b.n	800af0e <quorem+0xee>

0800af30 <_dtoa_r>:
 800af30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af34:	69c7      	ldr	r7, [r0, #28]
 800af36:	b097      	sub	sp, #92	@ 0x5c
 800af38:	ed8d 0b04 	vstr	d0, [sp, #16]
 800af3c:	ec55 4b10 	vmov	r4, r5, d0
 800af40:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800af42:	9107      	str	r1, [sp, #28]
 800af44:	4681      	mov	r9, r0
 800af46:	920c      	str	r2, [sp, #48]	@ 0x30
 800af48:	9311      	str	r3, [sp, #68]	@ 0x44
 800af4a:	b97f      	cbnz	r7, 800af6c <_dtoa_r+0x3c>
 800af4c:	2010      	movs	r0, #16
 800af4e:	f001 fa4f 	bl	800c3f0 <malloc>
 800af52:	4602      	mov	r2, r0
 800af54:	f8c9 001c 	str.w	r0, [r9, #28]
 800af58:	b920      	cbnz	r0, 800af64 <_dtoa_r+0x34>
 800af5a:	4ba9      	ldr	r3, [pc, #676]	@ (800b200 <_dtoa_r+0x2d0>)
 800af5c:	21ef      	movs	r1, #239	@ 0xef
 800af5e:	48a9      	ldr	r0, [pc, #676]	@ (800b204 <_dtoa_r+0x2d4>)
 800af60:	f7ff ff40 	bl	800ade4 <__assert_func>
 800af64:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800af68:	6007      	str	r7, [r0, #0]
 800af6a:	60c7      	str	r7, [r0, #12]
 800af6c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800af70:	6819      	ldr	r1, [r3, #0]
 800af72:	b159      	cbz	r1, 800af8c <_dtoa_r+0x5c>
 800af74:	685a      	ldr	r2, [r3, #4]
 800af76:	604a      	str	r2, [r1, #4]
 800af78:	2301      	movs	r3, #1
 800af7a:	4093      	lsls	r3, r2
 800af7c:	608b      	str	r3, [r1, #8]
 800af7e:	4648      	mov	r0, r9
 800af80:	f001 fbea 	bl	800c758 <_Bfree>
 800af84:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800af88:	2200      	movs	r2, #0
 800af8a:	601a      	str	r2, [r3, #0]
 800af8c:	1e2b      	subs	r3, r5, #0
 800af8e:	bfb9      	ittee	lt
 800af90:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800af94:	9305      	strlt	r3, [sp, #20]
 800af96:	2300      	movge	r3, #0
 800af98:	6033      	strge	r3, [r6, #0]
 800af9a:	9f05      	ldr	r7, [sp, #20]
 800af9c:	4b9a      	ldr	r3, [pc, #616]	@ (800b208 <_dtoa_r+0x2d8>)
 800af9e:	bfbc      	itt	lt
 800afa0:	2201      	movlt	r2, #1
 800afa2:	6032      	strlt	r2, [r6, #0]
 800afa4:	43bb      	bics	r3, r7
 800afa6:	d112      	bne.n	800afce <_dtoa_r+0x9e>
 800afa8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800afaa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800afae:	6013      	str	r3, [r2, #0]
 800afb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800afb4:	4323      	orrs	r3, r4
 800afb6:	f000 855a 	beq.w	800ba6e <_dtoa_r+0xb3e>
 800afba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800afbc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800b21c <_dtoa_r+0x2ec>
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	f000 855c 	beq.w	800ba7e <_dtoa_r+0xb4e>
 800afc6:	f10a 0303 	add.w	r3, sl, #3
 800afca:	f000 bd56 	b.w	800ba7a <_dtoa_r+0xb4a>
 800afce:	ed9d 7b04 	vldr	d7, [sp, #16]
 800afd2:	2200      	movs	r2, #0
 800afd4:	ec51 0b17 	vmov	r0, r1, d7
 800afd8:	2300      	movs	r3, #0
 800afda:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800afde:	f7f5 fda3 	bl	8000b28 <__aeabi_dcmpeq>
 800afe2:	4680      	mov	r8, r0
 800afe4:	b158      	cbz	r0, 800affe <_dtoa_r+0xce>
 800afe6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800afe8:	2301      	movs	r3, #1
 800afea:	6013      	str	r3, [r2, #0]
 800afec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800afee:	b113      	cbz	r3, 800aff6 <_dtoa_r+0xc6>
 800aff0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800aff2:	4b86      	ldr	r3, [pc, #536]	@ (800b20c <_dtoa_r+0x2dc>)
 800aff4:	6013      	str	r3, [r2, #0]
 800aff6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800b220 <_dtoa_r+0x2f0>
 800affa:	f000 bd40 	b.w	800ba7e <_dtoa_r+0xb4e>
 800affe:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800b002:	aa14      	add	r2, sp, #80	@ 0x50
 800b004:	a915      	add	r1, sp, #84	@ 0x54
 800b006:	4648      	mov	r0, r9
 800b008:	f001 ff42 	bl	800ce90 <__d2b>
 800b00c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b010:	9002      	str	r0, [sp, #8]
 800b012:	2e00      	cmp	r6, #0
 800b014:	d078      	beq.n	800b108 <_dtoa_r+0x1d8>
 800b016:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b018:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800b01c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b020:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b024:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b028:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b02c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b030:	4619      	mov	r1, r3
 800b032:	2200      	movs	r2, #0
 800b034:	4b76      	ldr	r3, [pc, #472]	@ (800b210 <_dtoa_r+0x2e0>)
 800b036:	f7f5 f957 	bl	80002e8 <__aeabi_dsub>
 800b03a:	a36b      	add	r3, pc, #428	@ (adr r3, 800b1e8 <_dtoa_r+0x2b8>)
 800b03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b040:	f7f5 fb0a 	bl	8000658 <__aeabi_dmul>
 800b044:	a36a      	add	r3, pc, #424	@ (adr r3, 800b1f0 <_dtoa_r+0x2c0>)
 800b046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b04a:	f7f5 f94f 	bl	80002ec <__adddf3>
 800b04e:	4604      	mov	r4, r0
 800b050:	4630      	mov	r0, r6
 800b052:	460d      	mov	r5, r1
 800b054:	f7f5 fa96 	bl	8000584 <__aeabi_i2d>
 800b058:	a367      	add	r3, pc, #412	@ (adr r3, 800b1f8 <_dtoa_r+0x2c8>)
 800b05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b05e:	f7f5 fafb 	bl	8000658 <__aeabi_dmul>
 800b062:	4602      	mov	r2, r0
 800b064:	460b      	mov	r3, r1
 800b066:	4620      	mov	r0, r4
 800b068:	4629      	mov	r1, r5
 800b06a:	f7f5 f93f 	bl	80002ec <__adddf3>
 800b06e:	4604      	mov	r4, r0
 800b070:	460d      	mov	r5, r1
 800b072:	f7f5 fda1 	bl	8000bb8 <__aeabi_d2iz>
 800b076:	2200      	movs	r2, #0
 800b078:	4607      	mov	r7, r0
 800b07a:	2300      	movs	r3, #0
 800b07c:	4620      	mov	r0, r4
 800b07e:	4629      	mov	r1, r5
 800b080:	f7f5 fd5c 	bl	8000b3c <__aeabi_dcmplt>
 800b084:	b140      	cbz	r0, 800b098 <_dtoa_r+0x168>
 800b086:	4638      	mov	r0, r7
 800b088:	f7f5 fa7c 	bl	8000584 <__aeabi_i2d>
 800b08c:	4622      	mov	r2, r4
 800b08e:	462b      	mov	r3, r5
 800b090:	f7f5 fd4a 	bl	8000b28 <__aeabi_dcmpeq>
 800b094:	b900      	cbnz	r0, 800b098 <_dtoa_r+0x168>
 800b096:	3f01      	subs	r7, #1
 800b098:	2f16      	cmp	r7, #22
 800b09a:	d852      	bhi.n	800b142 <_dtoa_r+0x212>
 800b09c:	4b5d      	ldr	r3, [pc, #372]	@ (800b214 <_dtoa_r+0x2e4>)
 800b09e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b0aa:	f7f5 fd47 	bl	8000b3c <__aeabi_dcmplt>
 800b0ae:	2800      	cmp	r0, #0
 800b0b0:	d049      	beq.n	800b146 <_dtoa_r+0x216>
 800b0b2:	3f01      	subs	r7, #1
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	9310      	str	r3, [sp, #64]	@ 0x40
 800b0b8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b0ba:	1b9b      	subs	r3, r3, r6
 800b0bc:	1e5a      	subs	r2, r3, #1
 800b0be:	bf45      	ittet	mi
 800b0c0:	f1c3 0301 	rsbmi	r3, r3, #1
 800b0c4:	9300      	strmi	r3, [sp, #0]
 800b0c6:	2300      	movpl	r3, #0
 800b0c8:	2300      	movmi	r3, #0
 800b0ca:	9206      	str	r2, [sp, #24]
 800b0cc:	bf54      	ite	pl
 800b0ce:	9300      	strpl	r3, [sp, #0]
 800b0d0:	9306      	strmi	r3, [sp, #24]
 800b0d2:	2f00      	cmp	r7, #0
 800b0d4:	db39      	blt.n	800b14a <_dtoa_r+0x21a>
 800b0d6:	9b06      	ldr	r3, [sp, #24]
 800b0d8:	970d      	str	r7, [sp, #52]	@ 0x34
 800b0da:	443b      	add	r3, r7
 800b0dc:	9306      	str	r3, [sp, #24]
 800b0de:	2300      	movs	r3, #0
 800b0e0:	9308      	str	r3, [sp, #32]
 800b0e2:	9b07      	ldr	r3, [sp, #28]
 800b0e4:	2b09      	cmp	r3, #9
 800b0e6:	d863      	bhi.n	800b1b0 <_dtoa_r+0x280>
 800b0e8:	2b05      	cmp	r3, #5
 800b0ea:	bfc4      	itt	gt
 800b0ec:	3b04      	subgt	r3, #4
 800b0ee:	9307      	strgt	r3, [sp, #28]
 800b0f0:	9b07      	ldr	r3, [sp, #28]
 800b0f2:	f1a3 0302 	sub.w	r3, r3, #2
 800b0f6:	bfcc      	ite	gt
 800b0f8:	2400      	movgt	r4, #0
 800b0fa:	2401      	movle	r4, #1
 800b0fc:	2b03      	cmp	r3, #3
 800b0fe:	d863      	bhi.n	800b1c8 <_dtoa_r+0x298>
 800b100:	e8df f003 	tbb	[pc, r3]
 800b104:	2b375452 	.word	0x2b375452
 800b108:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b10c:	441e      	add	r6, r3
 800b10e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b112:	2b20      	cmp	r3, #32
 800b114:	bfc1      	itttt	gt
 800b116:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b11a:	409f      	lslgt	r7, r3
 800b11c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b120:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b124:	bfd6      	itet	le
 800b126:	f1c3 0320 	rsble	r3, r3, #32
 800b12a:	ea47 0003 	orrgt.w	r0, r7, r3
 800b12e:	fa04 f003 	lslle.w	r0, r4, r3
 800b132:	f7f5 fa17 	bl	8000564 <__aeabi_ui2d>
 800b136:	2201      	movs	r2, #1
 800b138:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b13c:	3e01      	subs	r6, #1
 800b13e:	9212      	str	r2, [sp, #72]	@ 0x48
 800b140:	e776      	b.n	800b030 <_dtoa_r+0x100>
 800b142:	2301      	movs	r3, #1
 800b144:	e7b7      	b.n	800b0b6 <_dtoa_r+0x186>
 800b146:	9010      	str	r0, [sp, #64]	@ 0x40
 800b148:	e7b6      	b.n	800b0b8 <_dtoa_r+0x188>
 800b14a:	9b00      	ldr	r3, [sp, #0]
 800b14c:	1bdb      	subs	r3, r3, r7
 800b14e:	9300      	str	r3, [sp, #0]
 800b150:	427b      	negs	r3, r7
 800b152:	9308      	str	r3, [sp, #32]
 800b154:	2300      	movs	r3, #0
 800b156:	930d      	str	r3, [sp, #52]	@ 0x34
 800b158:	e7c3      	b.n	800b0e2 <_dtoa_r+0x1b2>
 800b15a:	2301      	movs	r3, #1
 800b15c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b15e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b160:	eb07 0b03 	add.w	fp, r7, r3
 800b164:	f10b 0301 	add.w	r3, fp, #1
 800b168:	2b01      	cmp	r3, #1
 800b16a:	9303      	str	r3, [sp, #12]
 800b16c:	bfb8      	it	lt
 800b16e:	2301      	movlt	r3, #1
 800b170:	e006      	b.n	800b180 <_dtoa_r+0x250>
 800b172:	2301      	movs	r3, #1
 800b174:	9309      	str	r3, [sp, #36]	@ 0x24
 800b176:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b178:	2b00      	cmp	r3, #0
 800b17a:	dd28      	ble.n	800b1ce <_dtoa_r+0x29e>
 800b17c:	469b      	mov	fp, r3
 800b17e:	9303      	str	r3, [sp, #12]
 800b180:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800b184:	2100      	movs	r1, #0
 800b186:	2204      	movs	r2, #4
 800b188:	f102 0514 	add.w	r5, r2, #20
 800b18c:	429d      	cmp	r5, r3
 800b18e:	d926      	bls.n	800b1de <_dtoa_r+0x2ae>
 800b190:	6041      	str	r1, [r0, #4]
 800b192:	4648      	mov	r0, r9
 800b194:	f001 faa0 	bl	800c6d8 <_Balloc>
 800b198:	4682      	mov	sl, r0
 800b19a:	2800      	cmp	r0, #0
 800b19c:	d142      	bne.n	800b224 <_dtoa_r+0x2f4>
 800b19e:	4b1e      	ldr	r3, [pc, #120]	@ (800b218 <_dtoa_r+0x2e8>)
 800b1a0:	4602      	mov	r2, r0
 800b1a2:	f240 11af 	movw	r1, #431	@ 0x1af
 800b1a6:	e6da      	b.n	800af5e <_dtoa_r+0x2e>
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	e7e3      	b.n	800b174 <_dtoa_r+0x244>
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	e7d5      	b.n	800b15c <_dtoa_r+0x22c>
 800b1b0:	2401      	movs	r4, #1
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	9307      	str	r3, [sp, #28]
 800b1b6:	9409      	str	r4, [sp, #36]	@ 0x24
 800b1b8:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800b1bc:	2200      	movs	r2, #0
 800b1be:	f8cd b00c 	str.w	fp, [sp, #12]
 800b1c2:	2312      	movs	r3, #18
 800b1c4:	920c      	str	r2, [sp, #48]	@ 0x30
 800b1c6:	e7db      	b.n	800b180 <_dtoa_r+0x250>
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1cc:	e7f4      	b.n	800b1b8 <_dtoa_r+0x288>
 800b1ce:	f04f 0b01 	mov.w	fp, #1
 800b1d2:	f8cd b00c 	str.w	fp, [sp, #12]
 800b1d6:	465b      	mov	r3, fp
 800b1d8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800b1dc:	e7d0      	b.n	800b180 <_dtoa_r+0x250>
 800b1de:	3101      	adds	r1, #1
 800b1e0:	0052      	lsls	r2, r2, #1
 800b1e2:	e7d1      	b.n	800b188 <_dtoa_r+0x258>
 800b1e4:	f3af 8000 	nop.w
 800b1e8:	636f4361 	.word	0x636f4361
 800b1ec:	3fd287a7 	.word	0x3fd287a7
 800b1f0:	8b60c8b3 	.word	0x8b60c8b3
 800b1f4:	3fc68a28 	.word	0x3fc68a28
 800b1f8:	509f79fb 	.word	0x509f79fb
 800b1fc:	3fd34413 	.word	0x3fd34413
 800b200:	0800d9c3 	.word	0x0800d9c3
 800b204:	0800da85 	.word	0x0800da85
 800b208:	7ff00000 	.word	0x7ff00000
 800b20c:	0800d999 	.word	0x0800d999
 800b210:	3ff80000 	.word	0x3ff80000
 800b214:	0800dd40 	.word	0x0800dd40
 800b218:	0800dadd 	.word	0x0800dadd
 800b21c:	0800da81 	.word	0x0800da81
 800b220:	0800d998 	.word	0x0800d998
 800b224:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b228:	6018      	str	r0, [r3, #0]
 800b22a:	9b03      	ldr	r3, [sp, #12]
 800b22c:	2b0e      	cmp	r3, #14
 800b22e:	f200 80a1 	bhi.w	800b374 <_dtoa_r+0x444>
 800b232:	2c00      	cmp	r4, #0
 800b234:	f000 809e 	beq.w	800b374 <_dtoa_r+0x444>
 800b238:	2f00      	cmp	r7, #0
 800b23a:	dd33      	ble.n	800b2a4 <_dtoa_r+0x374>
 800b23c:	4b9c      	ldr	r3, [pc, #624]	@ (800b4b0 <_dtoa_r+0x580>)
 800b23e:	f007 020f 	and.w	r2, r7, #15
 800b242:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b246:	ed93 7b00 	vldr	d7, [r3]
 800b24a:	05f8      	lsls	r0, r7, #23
 800b24c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800b250:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b254:	d516      	bpl.n	800b284 <_dtoa_r+0x354>
 800b256:	4b97      	ldr	r3, [pc, #604]	@ (800b4b4 <_dtoa_r+0x584>)
 800b258:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b25c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b260:	f7f5 fb24 	bl	80008ac <__aeabi_ddiv>
 800b264:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b268:	f004 040f 	and.w	r4, r4, #15
 800b26c:	2603      	movs	r6, #3
 800b26e:	4d91      	ldr	r5, [pc, #580]	@ (800b4b4 <_dtoa_r+0x584>)
 800b270:	b954      	cbnz	r4, 800b288 <_dtoa_r+0x358>
 800b272:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b276:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b27a:	f7f5 fb17 	bl	80008ac <__aeabi_ddiv>
 800b27e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b282:	e028      	b.n	800b2d6 <_dtoa_r+0x3a6>
 800b284:	2602      	movs	r6, #2
 800b286:	e7f2      	b.n	800b26e <_dtoa_r+0x33e>
 800b288:	07e1      	lsls	r1, r4, #31
 800b28a:	d508      	bpl.n	800b29e <_dtoa_r+0x36e>
 800b28c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b290:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b294:	f7f5 f9e0 	bl	8000658 <__aeabi_dmul>
 800b298:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b29c:	3601      	adds	r6, #1
 800b29e:	1064      	asrs	r4, r4, #1
 800b2a0:	3508      	adds	r5, #8
 800b2a2:	e7e5      	b.n	800b270 <_dtoa_r+0x340>
 800b2a4:	f000 80af 	beq.w	800b406 <_dtoa_r+0x4d6>
 800b2a8:	427c      	negs	r4, r7
 800b2aa:	4b81      	ldr	r3, [pc, #516]	@ (800b4b0 <_dtoa_r+0x580>)
 800b2ac:	4d81      	ldr	r5, [pc, #516]	@ (800b4b4 <_dtoa_r+0x584>)
 800b2ae:	f004 020f 	and.w	r2, r4, #15
 800b2b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b2be:	f7f5 f9cb 	bl	8000658 <__aeabi_dmul>
 800b2c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b2c6:	1124      	asrs	r4, r4, #4
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	2602      	movs	r6, #2
 800b2cc:	2c00      	cmp	r4, #0
 800b2ce:	f040 808f 	bne.w	800b3f0 <_dtoa_r+0x4c0>
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d1d3      	bne.n	800b27e <_dtoa_r+0x34e>
 800b2d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b2d8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	f000 8094 	beq.w	800b40a <_dtoa_r+0x4da>
 800b2e2:	4b75      	ldr	r3, [pc, #468]	@ (800b4b8 <_dtoa_r+0x588>)
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	4620      	mov	r0, r4
 800b2e8:	4629      	mov	r1, r5
 800b2ea:	f7f5 fc27 	bl	8000b3c <__aeabi_dcmplt>
 800b2ee:	2800      	cmp	r0, #0
 800b2f0:	f000 808b 	beq.w	800b40a <_dtoa_r+0x4da>
 800b2f4:	9b03      	ldr	r3, [sp, #12]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	f000 8087 	beq.w	800b40a <_dtoa_r+0x4da>
 800b2fc:	f1bb 0f00 	cmp.w	fp, #0
 800b300:	dd34      	ble.n	800b36c <_dtoa_r+0x43c>
 800b302:	4620      	mov	r0, r4
 800b304:	4b6d      	ldr	r3, [pc, #436]	@ (800b4bc <_dtoa_r+0x58c>)
 800b306:	2200      	movs	r2, #0
 800b308:	4629      	mov	r1, r5
 800b30a:	f7f5 f9a5 	bl	8000658 <__aeabi_dmul>
 800b30e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b312:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800b316:	3601      	adds	r6, #1
 800b318:	465c      	mov	r4, fp
 800b31a:	4630      	mov	r0, r6
 800b31c:	f7f5 f932 	bl	8000584 <__aeabi_i2d>
 800b320:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b324:	f7f5 f998 	bl	8000658 <__aeabi_dmul>
 800b328:	4b65      	ldr	r3, [pc, #404]	@ (800b4c0 <_dtoa_r+0x590>)
 800b32a:	2200      	movs	r2, #0
 800b32c:	f7f4 ffde 	bl	80002ec <__adddf3>
 800b330:	4605      	mov	r5, r0
 800b332:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b336:	2c00      	cmp	r4, #0
 800b338:	d16a      	bne.n	800b410 <_dtoa_r+0x4e0>
 800b33a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b33e:	4b61      	ldr	r3, [pc, #388]	@ (800b4c4 <_dtoa_r+0x594>)
 800b340:	2200      	movs	r2, #0
 800b342:	f7f4 ffd1 	bl	80002e8 <__aeabi_dsub>
 800b346:	4602      	mov	r2, r0
 800b348:	460b      	mov	r3, r1
 800b34a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b34e:	462a      	mov	r2, r5
 800b350:	4633      	mov	r3, r6
 800b352:	f7f5 fc11 	bl	8000b78 <__aeabi_dcmpgt>
 800b356:	2800      	cmp	r0, #0
 800b358:	f040 8298 	bne.w	800b88c <_dtoa_r+0x95c>
 800b35c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b360:	462a      	mov	r2, r5
 800b362:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b366:	f7f5 fbe9 	bl	8000b3c <__aeabi_dcmplt>
 800b36a:	bb38      	cbnz	r0, 800b3bc <_dtoa_r+0x48c>
 800b36c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800b370:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b374:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b376:	2b00      	cmp	r3, #0
 800b378:	f2c0 8157 	blt.w	800b62a <_dtoa_r+0x6fa>
 800b37c:	2f0e      	cmp	r7, #14
 800b37e:	f300 8154 	bgt.w	800b62a <_dtoa_r+0x6fa>
 800b382:	4b4b      	ldr	r3, [pc, #300]	@ (800b4b0 <_dtoa_r+0x580>)
 800b384:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b388:	ed93 7b00 	vldr	d7, [r3]
 800b38c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b38e:	2b00      	cmp	r3, #0
 800b390:	ed8d 7b00 	vstr	d7, [sp]
 800b394:	f280 80e5 	bge.w	800b562 <_dtoa_r+0x632>
 800b398:	9b03      	ldr	r3, [sp, #12]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	f300 80e1 	bgt.w	800b562 <_dtoa_r+0x632>
 800b3a0:	d10c      	bne.n	800b3bc <_dtoa_r+0x48c>
 800b3a2:	4b48      	ldr	r3, [pc, #288]	@ (800b4c4 <_dtoa_r+0x594>)
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	ec51 0b17 	vmov	r0, r1, d7
 800b3aa:	f7f5 f955 	bl	8000658 <__aeabi_dmul>
 800b3ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b3b2:	f7f5 fbd7 	bl	8000b64 <__aeabi_dcmpge>
 800b3b6:	2800      	cmp	r0, #0
 800b3b8:	f000 8266 	beq.w	800b888 <_dtoa_r+0x958>
 800b3bc:	2400      	movs	r4, #0
 800b3be:	4625      	mov	r5, r4
 800b3c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b3c2:	4656      	mov	r6, sl
 800b3c4:	ea6f 0803 	mvn.w	r8, r3
 800b3c8:	2700      	movs	r7, #0
 800b3ca:	4621      	mov	r1, r4
 800b3cc:	4648      	mov	r0, r9
 800b3ce:	f001 f9c3 	bl	800c758 <_Bfree>
 800b3d2:	2d00      	cmp	r5, #0
 800b3d4:	f000 80bd 	beq.w	800b552 <_dtoa_r+0x622>
 800b3d8:	b12f      	cbz	r7, 800b3e6 <_dtoa_r+0x4b6>
 800b3da:	42af      	cmp	r7, r5
 800b3dc:	d003      	beq.n	800b3e6 <_dtoa_r+0x4b6>
 800b3de:	4639      	mov	r1, r7
 800b3e0:	4648      	mov	r0, r9
 800b3e2:	f001 f9b9 	bl	800c758 <_Bfree>
 800b3e6:	4629      	mov	r1, r5
 800b3e8:	4648      	mov	r0, r9
 800b3ea:	f001 f9b5 	bl	800c758 <_Bfree>
 800b3ee:	e0b0      	b.n	800b552 <_dtoa_r+0x622>
 800b3f0:	07e2      	lsls	r2, r4, #31
 800b3f2:	d505      	bpl.n	800b400 <_dtoa_r+0x4d0>
 800b3f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b3f8:	f7f5 f92e 	bl	8000658 <__aeabi_dmul>
 800b3fc:	3601      	adds	r6, #1
 800b3fe:	2301      	movs	r3, #1
 800b400:	1064      	asrs	r4, r4, #1
 800b402:	3508      	adds	r5, #8
 800b404:	e762      	b.n	800b2cc <_dtoa_r+0x39c>
 800b406:	2602      	movs	r6, #2
 800b408:	e765      	b.n	800b2d6 <_dtoa_r+0x3a6>
 800b40a:	9c03      	ldr	r4, [sp, #12]
 800b40c:	46b8      	mov	r8, r7
 800b40e:	e784      	b.n	800b31a <_dtoa_r+0x3ea>
 800b410:	4b27      	ldr	r3, [pc, #156]	@ (800b4b0 <_dtoa_r+0x580>)
 800b412:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b414:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b418:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b41c:	4454      	add	r4, sl
 800b41e:	2900      	cmp	r1, #0
 800b420:	d054      	beq.n	800b4cc <_dtoa_r+0x59c>
 800b422:	4929      	ldr	r1, [pc, #164]	@ (800b4c8 <_dtoa_r+0x598>)
 800b424:	2000      	movs	r0, #0
 800b426:	f7f5 fa41 	bl	80008ac <__aeabi_ddiv>
 800b42a:	4633      	mov	r3, r6
 800b42c:	462a      	mov	r2, r5
 800b42e:	f7f4 ff5b 	bl	80002e8 <__aeabi_dsub>
 800b432:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b436:	4656      	mov	r6, sl
 800b438:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b43c:	f7f5 fbbc 	bl	8000bb8 <__aeabi_d2iz>
 800b440:	4605      	mov	r5, r0
 800b442:	f7f5 f89f 	bl	8000584 <__aeabi_i2d>
 800b446:	4602      	mov	r2, r0
 800b448:	460b      	mov	r3, r1
 800b44a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b44e:	f7f4 ff4b 	bl	80002e8 <__aeabi_dsub>
 800b452:	3530      	adds	r5, #48	@ 0x30
 800b454:	4602      	mov	r2, r0
 800b456:	460b      	mov	r3, r1
 800b458:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b45c:	f806 5b01 	strb.w	r5, [r6], #1
 800b460:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b464:	f7f5 fb6a 	bl	8000b3c <__aeabi_dcmplt>
 800b468:	2800      	cmp	r0, #0
 800b46a:	d172      	bne.n	800b552 <_dtoa_r+0x622>
 800b46c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b470:	4911      	ldr	r1, [pc, #68]	@ (800b4b8 <_dtoa_r+0x588>)
 800b472:	2000      	movs	r0, #0
 800b474:	f7f4 ff38 	bl	80002e8 <__aeabi_dsub>
 800b478:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b47c:	f7f5 fb5e 	bl	8000b3c <__aeabi_dcmplt>
 800b480:	2800      	cmp	r0, #0
 800b482:	f040 80b4 	bne.w	800b5ee <_dtoa_r+0x6be>
 800b486:	42a6      	cmp	r6, r4
 800b488:	f43f af70 	beq.w	800b36c <_dtoa_r+0x43c>
 800b48c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b490:	4b0a      	ldr	r3, [pc, #40]	@ (800b4bc <_dtoa_r+0x58c>)
 800b492:	2200      	movs	r2, #0
 800b494:	f7f5 f8e0 	bl	8000658 <__aeabi_dmul>
 800b498:	4b08      	ldr	r3, [pc, #32]	@ (800b4bc <_dtoa_r+0x58c>)
 800b49a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b49e:	2200      	movs	r2, #0
 800b4a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b4a4:	f7f5 f8d8 	bl	8000658 <__aeabi_dmul>
 800b4a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b4ac:	e7c4      	b.n	800b438 <_dtoa_r+0x508>
 800b4ae:	bf00      	nop
 800b4b0:	0800dd40 	.word	0x0800dd40
 800b4b4:	0800dd18 	.word	0x0800dd18
 800b4b8:	3ff00000 	.word	0x3ff00000
 800b4bc:	40240000 	.word	0x40240000
 800b4c0:	401c0000 	.word	0x401c0000
 800b4c4:	40140000 	.word	0x40140000
 800b4c8:	3fe00000 	.word	0x3fe00000
 800b4cc:	4631      	mov	r1, r6
 800b4ce:	4628      	mov	r0, r5
 800b4d0:	f7f5 f8c2 	bl	8000658 <__aeabi_dmul>
 800b4d4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b4d8:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b4da:	4656      	mov	r6, sl
 800b4dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b4e0:	f7f5 fb6a 	bl	8000bb8 <__aeabi_d2iz>
 800b4e4:	4605      	mov	r5, r0
 800b4e6:	f7f5 f84d 	bl	8000584 <__aeabi_i2d>
 800b4ea:	4602      	mov	r2, r0
 800b4ec:	460b      	mov	r3, r1
 800b4ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b4f2:	f7f4 fef9 	bl	80002e8 <__aeabi_dsub>
 800b4f6:	3530      	adds	r5, #48	@ 0x30
 800b4f8:	f806 5b01 	strb.w	r5, [r6], #1
 800b4fc:	4602      	mov	r2, r0
 800b4fe:	460b      	mov	r3, r1
 800b500:	42a6      	cmp	r6, r4
 800b502:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b506:	f04f 0200 	mov.w	r2, #0
 800b50a:	d124      	bne.n	800b556 <_dtoa_r+0x626>
 800b50c:	4baf      	ldr	r3, [pc, #700]	@ (800b7cc <_dtoa_r+0x89c>)
 800b50e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b512:	f7f4 feeb 	bl	80002ec <__adddf3>
 800b516:	4602      	mov	r2, r0
 800b518:	460b      	mov	r3, r1
 800b51a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b51e:	f7f5 fb2b 	bl	8000b78 <__aeabi_dcmpgt>
 800b522:	2800      	cmp	r0, #0
 800b524:	d163      	bne.n	800b5ee <_dtoa_r+0x6be>
 800b526:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b52a:	49a8      	ldr	r1, [pc, #672]	@ (800b7cc <_dtoa_r+0x89c>)
 800b52c:	2000      	movs	r0, #0
 800b52e:	f7f4 fedb 	bl	80002e8 <__aeabi_dsub>
 800b532:	4602      	mov	r2, r0
 800b534:	460b      	mov	r3, r1
 800b536:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b53a:	f7f5 faff 	bl	8000b3c <__aeabi_dcmplt>
 800b53e:	2800      	cmp	r0, #0
 800b540:	f43f af14 	beq.w	800b36c <_dtoa_r+0x43c>
 800b544:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b546:	1e73      	subs	r3, r6, #1
 800b548:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b54a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b54e:	2b30      	cmp	r3, #48	@ 0x30
 800b550:	d0f8      	beq.n	800b544 <_dtoa_r+0x614>
 800b552:	4647      	mov	r7, r8
 800b554:	e03b      	b.n	800b5ce <_dtoa_r+0x69e>
 800b556:	4b9e      	ldr	r3, [pc, #632]	@ (800b7d0 <_dtoa_r+0x8a0>)
 800b558:	f7f5 f87e 	bl	8000658 <__aeabi_dmul>
 800b55c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b560:	e7bc      	b.n	800b4dc <_dtoa_r+0x5ac>
 800b562:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b566:	4656      	mov	r6, sl
 800b568:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b56c:	4620      	mov	r0, r4
 800b56e:	4629      	mov	r1, r5
 800b570:	f7f5 f99c 	bl	80008ac <__aeabi_ddiv>
 800b574:	f7f5 fb20 	bl	8000bb8 <__aeabi_d2iz>
 800b578:	4680      	mov	r8, r0
 800b57a:	f7f5 f803 	bl	8000584 <__aeabi_i2d>
 800b57e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b582:	f7f5 f869 	bl	8000658 <__aeabi_dmul>
 800b586:	4602      	mov	r2, r0
 800b588:	460b      	mov	r3, r1
 800b58a:	4620      	mov	r0, r4
 800b58c:	4629      	mov	r1, r5
 800b58e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b592:	f7f4 fea9 	bl	80002e8 <__aeabi_dsub>
 800b596:	f806 4b01 	strb.w	r4, [r6], #1
 800b59a:	9d03      	ldr	r5, [sp, #12]
 800b59c:	eba6 040a 	sub.w	r4, r6, sl
 800b5a0:	42a5      	cmp	r5, r4
 800b5a2:	4602      	mov	r2, r0
 800b5a4:	460b      	mov	r3, r1
 800b5a6:	d133      	bne.n	800b610 <_dtoa_r+0x6e0>
 800b5a8:	f7f4 fea0 	bl	80002ec <__adddf3>
 800b5ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b5b0:	4604      	mov	r4, r0
 800b5b2:	460d      	mov	r5, r1
 800b5b4:	f7f5 fae0 	bl	8000b78 <__aeabi_dcmpgt>
 800b5b8:	b9c0      	cbnz	r0, 800b5ec <_dtoa_r+0x6bc>
 800b5ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b5be:	4620      	mov	r0, r4
 800b5c0:	4629      	mov	r1, r5
 800b5c2:	f7f5 fab1 	bl	8000b28 <__aeabi_dcmpeq>
 800b5c6:	b110      	cbz	r0, 800b5ce <_dtoa_r+0x69e>
 800b5c8:	f018 0f01 	tst.w	r8, #1
 800b5cc:	d10e      	bne.n	800b5ec <_dtoa_r+0x6bc>
 800b5ce:	9902      	ldr	r1, [sp, #8]
 800b5d0:	4648      	mov	r0, r9
 800b5d2:	f001 f8c1 	bl	800c758 <_Bfree>
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	7033      	strb	r3, [r6, #0]
 800b5da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b5dc:	3701      	adds	r7, #1
 800b5de:	601f      	str	r7, [r3, #0]
 800b5e0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	f000 824b 	beq.w	800ba7e <_dtoa_r+0xb4e>
 800b5e8:	601e      	str	r6, [r3, #0]
 800b5ea:	e248      	b.n	800ba7e <_dtoa_r+0xb4e>
 800b5ec:	46b8      	mov	r8, r7
 800b5ee:	4633      	mov	r3, r6
 800b5f0:	461e      	mov	r6, r3
 800b5f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b5f6:	2a39      	cmp	r2, #57	@ 0x39
 800b5f8:	d106      	bne.n	800b608 <_dtoa_r+0x6d8>
 800b5fa:	459a      	cmp	sl, r3
 800b5fc:	d1f8      	bne.n	800b5f0 <_dtoa_r+0x6c0>
 800b5fe:	2230      	movs	r2, #48	@ 0x30
 800b600:	f108 0801 	add.w	r8, r8, #1
 800b604:	f88a 2000 	strb.w	r2, [sl]
 800b608:	781a      	ldrb	r2, [r3, #0]
 800b60a:	3201      	adds	r2, #1
 800b60c:	701a      	strb	r2, [r3, #0]
 800b60e:	e7a0      	b.n	800b552 <_dtoa_r+0x622>
 800b610:	4b6f      	ldr	r3, [pc, #444]	@ (800b7d0 <_dtoa_r+0x8a0>)
 800b612:	2200      	movs	r2, #0
 800b614:	f7f5 f820 	bl	8000658 <__aeabi_dmul>
 800b618:	2200      	movs	r2, #0
 800b61a:	2300      	movs	r3, #0
 800b61c:	4604      	mov	r4, r0
 800b61e:	460d      	mov	r5, r1
 800b620:	f7f5 fa82 	bl	8000b28 <__aeabi_dcmpeq>
 800b624:	2800      	cmp	r0, #0
 800b626:	d09f      	beq.n	800b568 <_dtoa_r+0x638>
 800b628:	e7d1      	b.n	800b5ce <_dtoa_r+0x69e>
 800b62a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b62c:	2a00      	cmp	r2, #0
 800b62e:	f000 80ea 	beq.w	800b806 <_dtoa_r+0x8d6>
 800b632:	9a07      	ldr	r2, [sp, #28]
 800b634:	2a01      	cmp	r2, #1
 800b636:	f300 80cd 	bgt.w	800b7d4 <_dtoa_r+0x8a4>
 800b63a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b63c:	2a00      	cmp	r2, #0
 800b63e:	f000 80c1 	beq.w	800b7c4 <_dtoa_r+0x894>
 800b642:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b646:	9c08      	ldr	r4, [sp, #32]
 800b648:	9e00      	ldr	r6, [sp, #0]
 800b64a:	9a00      	ldr	r2, [sp, #0]
 800b64c:	441a      	add	r2, r3
 800b64e:	9200      	str	r2, [sp, #0]
 800b650:	9a06      	ldr	r2, [sp, #24]
 800b652:	2101      	movs	r1, #1
 800b654:	441a      	add	r2, r3
 800b656:	4648      	mov	r0, r9
 800b658:	9206      	str	r2, [sp, #24]
 800b65a:	f001 f97b 	bl	800c954 <__i2b>
 800b65e:	4605      	mov	r5, r0
 800b660:	b166      	cbz	r6, 800b67c <_dtoa_r+0x74c>
 800b662:	9b06      	ldr	r3, [sp, #24]
 800b664:	2b00      	cmp	r3, #0
 800b666:	dd09      	ble.n	800b67c <_dtoa_r+0x74c>
 800b668:	42b3      	cmp	r3, r6
 800b66a:	9a00      	ldr	r2, [sp, #0]
 800b66c:	bfa8      	it	ge
 800b66e:	4633      	movge	r3, r6
 800b670:	1ad2      	subs	r2, r2, r3
 800b672:	9200      	str	r2, [sp, #0]
 800b674:	9a06      	ldr	r2, [sp, #24]
 800b676:	1af6      	subs	r6, r6, r3
 800b678:	1ad3      	subs	r3, r2, r3
 800b67a:	9306      	str	r3, [sp, #24]
 800b67c:	9b08      	ldr	r3, [sp, #32]
 800b67e:	b30b      	cbz	r3, 800b6c4 <_dtoa_r+0x794>
 800b680:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b682:	2b00      	cmp	r3, #0
 800b684:	f000 80c6 	beq.w	800b814 <_dtoa_r+0x8e4>
 800b688:	2c00      	cmp	r4, #0
 800b68a:	f000 80c0 	beq.w	800b80e <_dtoa_r+0x8de>
 800b68e:	4629      	mov	r1, r5
 800b690:	4622      	mov	r2, r4
 800b692:	4648      	mov	r0, r9
 800b694:	f001 fa16 	bl	800cac4 <__pow5mult>
 800b698:	9a02      	ldr	r2, [sp, #8]
 800b69a:	4601      	mov	r1, r0
 800b69c:	4605      	mov	r5, r0
 800b69e:	4648      	mov	r0, r9
 800b6a0:	f001 f96e 	bl	800c980 <__multiply>
 800b6a4:	9902      	ldr	r1, [sp, #8]
 800b6a6:	4680      	mov	r8, r0
 800b6a8:	4648      	mov	r0, r9
 800b6aa:	f001 f855 	bl	800c758 <_Bfree>
 800b6ae:	9b08      	ldr	r3, [sp, #32]
 800b6b0:	1b1b      	subs	r3, r3, r4
 800b6b2:	9308      	str	r3, [sp, #32]
 800b6b4:	f000 80b1 	beq.w	800b81a <_dtoa_r+0x8ea>
 800b6b8:	9a08      	ldr	r2, [sp, #32]
 800b6ba:	4641      	mov	r1, r8
 800b6bc:	4648      	mov	r0, r9
 800b6be:	f001 fa01 	bl	800cac4 <__pow5mult>
 800b6c2:	9002      	str	r0, [sp, #8]
 800b6c4:	2101      	movs	r1, #1
 800b6c6:	4648      	mov	r0, r9
 800b6c8:	f001 f944 	bl	800c954 <__i2b>
 800b6cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b6ce:	4604      	mov	r4, r0
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	f000 81d8 	beq.w	800ba86 <_dtoa_r+0xb56>
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	4601      	mov	r1, r0
 800b6da:	4648      	mov	r0, r9
 800b6dc:	f001 f9f2 	bl	800cac4 <__pow5mult>
 800b6e0:	9b07      	ldr	r3, [sp, #28]
 800b6e2:	2b01      	cmp	r3, #1
 800b6e4:	4604      	mov	r4, r0
 800b6e6:	f300 809f 	bgt.w	800b828 <_dtoa_r+0x8f8>
 800b6ea:	9b04      	ldr	r3, [sp, #16]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	f040 8097 	bne.w	800b820 <_dtoa_r+0x8f0>
 800b6f2:	9b05      	ldr	r3, [sp, #20]
 800b6f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	f040 8093 	bne.w	800b824 <_dtoa_r+0x8f4>
 800b6fe:	9b05      	ldr	r3, [sp, #20]
 800b700:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b704:	0d1b      	lsrs	r3, r3, #20
 800b706:	051b      	lsls	r3, r3, #20
 800b708:	b133      	cbz	r3, 800b718 <_dtoa_r+0x7e8>
 800b70a:	9b00      	ldr	r3, [sp, #0]
 800b70c:	3301      	adds	r3, #1
 800b70e:	9300      	str	r3, [sp, #0]
 800b710:	9b06      	ldr	r3, [sp, #24]
 800b712:	3301      	adds	r3, #1
 800b714:	9306      	str	r3, [sp, #24]
 800b716:	2301      	movs	r3, #1
 800b718:	9308      	str	r3, [sp, #32]
 800b71a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	f000 81b8 	beq.w	800ba92 <_dtoa_r+0xb62>
 800b722:	6923      	ldr	r3, [r4, #16]
 800b724:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b728:	6918      	ldr	r0, [r3, #16]
 800b72a:	f001 f8c7 	bl	800c8bc <__hi0bits>
 800b72e:	f1c0 0020 	rsb	r0, r0, #32
 800b732:	9b06      	ldr	r3, [sp, #24]
 800b734:	4418      	add	r0, r3
 800b736:	f010 001f 	ands.w	r0, r0, #31
 800b73a:	f000 8082 	beq.w	800b842 <_dtoa_r+0x912>
 800b73e:	f1c0 0320 	rsb	r3, r0, #32
 800b742:	2b04      	cmp	r3, #4
 800b744:	dd73      	ble.n	800b82e <_dtoa_r+0x8fe>
 800b746:	9b00      	ldr	r3, [sp, #0]
 800b748:	f1c0 001c 	rsb	r0, r0, #28
 800b74c:	4403      	add	r3, r0
 800b74e:	9300      	str	r3, [sp, #0]
 800b750:	9b06      	ldr	r3, [sp, #24]
 800b752:	4403      	add	r3, r0
 800b754:	4406      	add	r6, r0
 800b756:	9306      	str	r3, [sp, #24]
 800b758:	9b00      	ldr	r3, [sp, #0]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	dd05      	ble.n	800b76a <_dtoa_r+0x83a>
 800b75e:	9902      	ldr	r1, [sp, #8]
 800b760:	461a      	mov	r2, r3
 800b762:	4648      	mov	r0, r9
 800b764:	f001 fa08 	bl	800cb78 <__lshift>
 800b768:	9002      	str	r0, [sp, #8]
 800b76a:	9b06      	ldr	r3, [sp, #24]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	dd05      	ble.n	800b77c <_dtoa_r+0x84c>
 800b770:	4621      	mov	r1, r4
 800b772:	461a      	mov	r2, r3
 800b774:	4648      	mov	r0, r9
 800b776:	f001 f9ff 	bl	800cb78 <__lshift>
 800b77a:	4604      	mov	r4, r0
 800b77c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d061      	beq.n	800b846 <_dtoa_r+0x916>
 800b782:	9802      	ldr	r0, [sp, #8]
 800b784:	4621      	mov	r1, r4
 800b786:	f001 fa63 	bl	800cc50 <__mcmp>
 800b78a:	2800      	cmp	r0, #0
 800b78c:	da5b      	bge.n	800b846 <_dtoa_r+0x916>
 800b78e:	2300      	movs	r3, #0
 800b790:	9902      	ldr	r1, [sp, #8]
 800b792:	220a      	movs	r2, #10
 800b794:	4648      	mov	r0, r9
 800b796:	f001 f801 	bl	800c79c <__multadd>
 800b79a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b79c:	9002      	str	r0, [sp, #8]
 800b79e:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	f000 8177 	beq.w	800ba96 <_dtoa_r+0xb66>
 800b7a8:	4629      	mov	r1, r5
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	220a      	movs	r2, #10
 800b7ae:	4648      	mov	r0, r9
 800b7b0:	f000 fff4 	bl	800c79c <__multadd>
 800b7b4:	f1bb 0f00 	cmp.w	fp, #0
 800b7b8:	4605      	mov	r5, r0
 800b7ba:	dc6f      	bgt.n	800b89c <_dtoa_r+0x96c>
 800b7bc:	9b07      	ldr	r3, [sp, #28]
 800b7be:	2b02      	cmp	r3, #2
 800b7c0:	dc49      	bgt.n	800b856 <_dtoa_r+0x926>
 800b7c2:	e06b      	b.n	800b89c <_dtoa_r+0x96c>
 800b7c4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b7c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b7ca:	e73c      	b.n	800b646 <_dtoa_r+0x716>
 800b7cc:	3fe00000 	.word	0x3fe00000
 800b7d0:	40240000 	.word	0x40240000
 800b7d4:	9b03      	ldr	r3, [sp, #12]
 800b7d6:	1e5c      	subs	r4, r3, #1
 800b7d8:	9b08      	ldr	r3, [sp, #32]
 800b7da:	42a3      	cmp	r3, r4
 800b7dc:	db09      	blt.n	800b7f2 <_dtoa_r+0x8c2>
 800b7de:	1b1c      	subs	r4, r3, r4
 800b7e0:	9b03      	ldr	r3, [sp, #12]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	f6bf af30 	bge.w	800b648 <_dtoa_r+0x718>
 800b7e8:	9b00      	ldr	r3, [sp, #0]
 800b7ea:	9a03      	ldr	r2, [sp, #12]
 800b7ec:	1a9e      	subs	r6, r3, r2
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	e72b      	b.n	800b64a <_dtoa_r+0x71a>
 800b7f2:	9b08      	ldr	r3, [sp, #32]
 800b7f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b7f6:	9408      	str	r4, [sp, #32]
 800b7f8:	1ae3      	subs	r3, r4, r3
 800b7fa:	441a      	add	r2, r3
 800b7fc:	9e00      	ldr	r6, [sp, #0]
 800b7fe:	9b03      	ldr	r3, [sp, #12]
 800b800:	920d      	str	r2, [sp, #52]	@ 0x34
 800b802:	2400      	movs	r4, #0
 800b804:	e721      	b.n	800b64a <_dtoa_r+0x71a>
 800b806:	9c08      	ldr	r4, [sp, #32]
 800b808:	9e00      	ldr	r6, [sp, #0]
 800b80a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b80c:	e728      	b.n	800b660 <_dtoa_r+0x730>
 800b80e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b812:	e751      	b.n	800b6b8 <_dtoa_r+0x788>
 800b814:	9a08      	ldr	r2, [sp, #32]
 800b816:	9902      	ldr	r1, [sp, #8]
 800b818:	e750      	b.n	800b6bc <_dtoa_r+0x78c>
 800b81a:	f8cd 8008 	str.w	r8, [sp, #8]
 800b81e:	e751      	b.n	800b6c4 <_dtoa_r+0x794>
 800b820:	2300      	movs	r3, #0
 800b822:	e779      	b.n	800b718 <_dtoa_r+0x7e8>
 800b824:	9b04      	ldr	r3, [sp, #16]
 800b826:	e777      	b.n	800b718 <_dtoa_r+0x7e8>
 800b828:	2300      	movs	r3, #0
 800b82a:	9308      	str	r3, [sp, #32]
 800b82c:	e779      	b.n	800b722 <_dtoa_r+0x7f2>
 800b82e:	d093      	beq.n	800b758 <_dtoa_r+0x828>
 800b830:	9a00      	ldr	r2, [sp, #0]
 800b832:	331c      	adds	r3, #28
 800b834:	441a      	add	r2, r3
 800b836:	9200      	str	r2, [sp, #0]
 800b838:	9a06      	ldr	r2, [sp, #24]
 800b83a:	441a      	add	r2, r3
 800b83c:	441e      	add	r6, r3
 800b83e:	9206      	str	r2, [sp, #24]
 800b840:	e78a      	b.n	800b758 <_dtoa_r+0x828>
 800b842:	4603      	mov	r3, r0
 800b844:	e7f4      	b.n	800b830 <_dtoa_r+0x900>
 800b846:	9b03      	ldr	r3, [sp, #12]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	46b8      	mov	r8, r7
 800b84c:	dc20      	bgt.n	800b890 <_dtoa_r+0x960>
 800b84e:	469b      	mov	fp, r3
 800b850:	9b07      	ldr	r3, [sp, #28]
 800b852:	2b02      	cmp	r3, #2
 800b854:	dd1e      	ble.n	800b894 <_dtoa_r+0x964>
 800b856:	f1bb 0f00 	cmp.w	fp, #0
 800b85a:	f47f adb1 	bne.w	800b3c0 <_dtoa_r+0x490>
 800b85e:	4621      	mov	r1, r4
 800b860:	465b      	mov	r3, fp
 800b862:	2205      	movs	r2, #5
 800b864:	4648      	mov	r0, r9
 800b866:	f000 ff99 	bl	800c79c <__multadd>
 800b86a:	4601      	mov	r1, r0
 800b86c:	4604      	mov	r4, r0
 800b86e:	9802      	ldr	r0, [sp, #8]
 800b870:	f001 f9ee 	bl	800cc50 <__mcmp>
 800b874:	2800      	cmp	r0, #0
 800b876:	f77f ada3 	ble.w	800b3c0 <_dtoa_r+0x490>
 800b87a:	4656      	mov	r6, sl
 800b87c:	2331      	movs	r3, #49	@ 0x31
 800b87e:	f806 3b01 	strb.w	r3, [r6], #1
 800b882:	f108 0801 	add.w	r8, r8, #1
 800b886:	e59f      	b.n	800b3c8 <_dtoa_r+0x498>
 800b888:	9c03      	ldr	r4, [sp, #12]
 800b88a:	46b8      	mov	r8, r7
 800b88c:	4625      	mov	r5, r4
 800b88e:	e7f4      	b.n	800b87a <_dtoa_r+0x94a>
 800b890:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b894:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b896:	2b00      	cmp	r3, #0
 800b898:	f000 8101 	beq.w	800ba9e <_dtoa_r+0xb6e>
 800b89c:	2e00      	cmp	r6, #0
 800b89e:	dd05      	ble.n	800b8ac <_dtoa_r+0x97c>
 800b8a0:	4629      	mov	r1, r5
 800b8a2:	4632      	mov	r2, r6
 800b8a4:	4648      	mov	r0, r9
 800b8a6:	f001 f967 	bl	800cb78 <__lshift>
 800b8aa:	4605      	mov	r5, r0
 800b8ac:	9b08      	ldr	r3, [sp, #32]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d05c      	beq.n	800b96c <_dtoa_r+0xa3c>
 800b8b2:	6869      	ldr	r1, [r5, #4]
 800b8b4:	4648      	mov	r0, r9
 800b8b6:	f000 ff0f 	bl	800c6d8 <_Balloc>
 800b8ba:	4606      	mov	r6, r0
 800b8bc:	b928      	cbnz	r0, 800b8ca <_dtoa_r+0x99a>
 800b8be:	4b82      	ldr	r3, [pc, #520]	@ (800bac8 <_dtoa_r+0xb98>)
 800b8c0:	4602      	mov	r2, r0
 800b8c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b8c6:	f7ff bb4a 	b.w	800af5e <_dtoa_r+0x2e>
 800b8ca:	692a      	ldr	r2, [r5, #16]
 800b8cc:	3202      	adds	r2, #2
 800b8ce:	0092      	lsls	r2, r2, #2
 800b8d0:	f105 010c 	add.w	r1, r5, #12
 800b8d4:	300c      	adds	r0, #12
 800b8d6:	f7ff fa69 	bl	800adac <memcpy>
 800b8da:	2201      	movs	r2, #1
 800b8dc:	4631      	mov	r1, r6
 800b8de:	4648      	mov	r0, r9
 800b8e0:	f001 f94a 	bl	800cb78 <__lshift>
 800b8e4:	f10a 0301 	add.w	r3, sl, #1
 800b8e8:	9300      	str	r3, [sp, #0]
 800b8ea:	eb0a 030b 	add.w	r3, sl, fp
 800b8ee:	9308      	str	r3, [sp, #32]
 800b8f0:	9b04      	ldr	r3, [sp, #16]
 800b8f2:	f003 0301 	and.w	r3, r3, #1
 800b8f6:	462f      	mov	r7, r5
 800b8f8:	9306      	str	r3, [sp, #24]
 800b8fa:	4605      	mov	r5, r0
 800b8fc:	9b00      	ldr	r3, [sp, #0]
 800b8fe:	9802      	ldr	r0, [sp, #8]
 800b900:	4621      	mov	r1, r4
 800b902:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800b906:	f7ff fa8b 	bl	800ae20 <quorem>
 800b90a:	4603      	mov	r3, r0
 800b90c:	3330      	adds	r3, #48	@ 0x30
 800b90e:	9003      	str	r0, [sp, #12]
 800b910:	4639      	mov	r1, r7
 800b912:	9802      	ldr	r0, [sp, #8]
 800b914:	9309      	str	r3, [sp, #36]	@ 0x24
 800b916:	f001 f99b 	bl	800cc50 <__mcmp>
 800b91a:	462a      	mov	r2, r5
 800b91c:	9004      	str	r0, [sp, #16]
 800b91e:	4621      	mov	r1, r4
 800b920:	4648      	mov	r0, r9
 800b922:	f001 f9b1 	bl	800cc88 <__mdiff>
 800b926:	68c2      	ldr	r2, [r0, #12]
 800b928:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b92a:	4606      	mov	r6, r0
 800b92c:	bb02      	cbnz	r2, 800b970 <_dtoa_r+0xa40>
 800b92e:	4601      	mov	r1, r0
 800b930:	9802      	ldr	r0, [sp, #8]
 800b932:	f001 f98d 	bl	800cc50 <__mcmp>
 800b936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b938:	4602      	mov	r2, r0
 800b93a:	4631      	mov	r1, r6
 800b93c:	4648      	mov	r0, r9
 800b93e:	920c      	str	r2, [sp, #48]	@ 0x30
 800b940:	9309      	str	r3, [sp, #36]	@ 0x24
 800b942:	f000 ff09 	bl	800c758 <_Bfree>
 800b946:	9b07      	ldr	r3, [sp, #28]
 800b948:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b94a:	9e00      	ldr	r6, [sp, #0]
 800b94c:	ea42 0103 	orr.w	r1, r2, r3
 800b950:	9b06      	ldr	r3, [sp, #24]
 800b952:	4319      	orrs	r1, r3
 800b954:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b956:	d10d      	bne.n	800b974 <_dtoa_r+0xa44>
 800b958:	2b39      	cmp	r3, #57	@ 0x39
 800b95a:	d027      	beq.n	800b9ac <_dtoa_r+0xa7c>
 800b95c:	9a04      	ldr	r2, [sp, #16]
 800b95e:	2a00      	cmp	r2, #0
 800b960:	dd01      	ble.n	800b966 <_dtoa_r+0xa36>
 800b962:	9b03      	ldr	r3, [sp, #12]
 800b964:	3331      	adds	r3, #49	@ 0x31
 800b966:	f88b 3000 	strb.w	r3, [fp]
 800b96a:	e52e      	b.n	800b3ca <_dtoa_r+0x49a>
 800b96c:	4628      	mov	r0, r5
 800b96e:	e7b9      	b.n	800b8e4 <_dtoa_r+0x9b4>
 800b970:	2201      	movs	r2, #1
 800b972:	e7e2      	b.n	800b93a <_dtoa_r+0xa0a>
 800b974:	9904      	ldr	r1, [sp, #16]
 800b976:	2900      	cmp	r1, #0
 800b978:	db04      	blt.n	800b984 <_dtoa_r+0xa54>
 800b97a:	9807      	ldr	r0, [sp, #28]
 800b97c:	4301      	orrs	r1, r0
 800b97e:	9806      	ldr	r0, [sp, #24]
 800b980:	4301      	orrs	r1, r0
 800b982:	d120      	bne.n	800b9c6 <_dtoa_r+0xa96>
 800b984:	2a00      	cmp	r2, #0
 800b986:	ddee      	ble.n	800b966 <_dtoa_r+0xa36>
 800b988:	9902      	ldr	r1, [sp, #8]
 800b98a:	9300      	str	r3, [sp, #0]
 800b98c:	2201      	movs	r2, #1
 800b98e:	4648      	mov	r0, r9
 800b990:	f001 f8f2 	bl	800cb78 <__lshift>
 800b994:	4621      	mov	r1, r4
 800b996:	9002      	str	r0, [sp, #8]
 800b998:	f001 f95a 	bl	800cc50 <__mcmp>
 800b99c:	2800      	cmp	r0, #0
 800b99e:	9b00      	ldr	r3, [sp, #0]
 800b9a0:	dc02      	bgt.n	800b9a8 <_dtoa_r+0xa78>
 800b9a2:	d1e0      	bne.n	800b966 <_dtoa_r+0xa36>
 800b9a4:	07da      	lsls	r2, r3, #31
 800b9a6:	d5de      	bpl.n	800b966 <_dtoa_r+0xa36>
 800b9a8:	2b39      	cmp	r3, #57	@ 0x39
 800b9aa:	d1da      	bne.n	800b962 <_dtoa_r+0xa32>
 800b9ac:	2339      	movs	r3, #57	@ 0x39
 800b9ae:	f88b 3000 	strb.w	r3, [fp]
 800b9b2:	4633      	mov	r3, r6
 800b9b4:	461e      	mov	r6, r3
 800b9b6:	3b01      	subs	r3, #1
 800b9b8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b9bc:	2a39      	cmp	r2, #57	@ 0x39
 800b9be:	d04e      	beq.n	800ba5e <_dtoa_r+0xb2e>
 800b9c0:	3201      	adds	r2, #1
 800b9c2:	701a      	strb	r2, [r3, #0]
 800b9c4:	e501      	b.n	800b3ca <_dtoa_r+0x49a>
 800b9c6:	2a00      	cmp	r2, #0
 800b9c8:	dd03      	ble.n	800b9d2 <_dtoa_r+0xaa2>
 800b9ca:	2b39      	cmp	r3, #57	@ 0x39
 800b9cc:	d0ee      	beq.n	800b9ac <_dtoa_r+0xa7c>
 800b9ce:	3301      	adds	r3, #1
 800b9d0:	e7c9      	b.n	800b966 <_dtoa_r+0xa36>
 800b9d2:	9a00      	ldr	r2, [sp, #0]
 800b9d4:	9908      	ldr	r1, [sp, #32]
 800b9d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b9da:	428a      	cmp	r2, r1
 800b9dc:	d028      	beq.n	800ba30 <_dtoa_r+0xb00>
 800b9de:	9902      	ldr	r1, [sp, #8]
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	220a      	movs	r2, #10
 800b9e4:	4648      	mov	r0, r9
 800b9e6:	f000 fed9 	bl	800c79c <__multadd>
 800b9ea:	42af      	cmp	r7, r5
 800b9ec:	9002      	str	r0, [sp, #8]
 800b9ee:	f04f 0300 	mov.w	r3, #0
 800b9f2:	f04f 020a 	mov.w	r2, #10
 800b9f6:	4639      	mov	r1, r7
 800b9f8:	4648      	mov	r0, r9
 800b9fa:	d107      	bne.n	800ba0c <_dtoa_r+0xadc>
 800b9fc:	f000 fece 	bl	800c79c <__multadd>
 800ba00:	4607      	mov	r7, r0
 800ba02:	4605      	mov	r5, r0
 800ba04:	9b00      	ldr	r3, [sp, #0]
 800ba06:	3301      	adds	r3, #1
 800ba08:	9300      	str	r3, [sp, #0]
 800ba0a:	e777      	b.n	800b8fc <_dtoa_r+0x9cc>
 800ba0c:	f000 fec6 	bl	800c79c <__multadd>
 800ba10:	4629      	mov	r1, r5
 800ba12:	4607      	mov	r7, r0
 800ba14:	2300      	movs	r3, #0
 800ba16:	220a      	movs	r2, #10
 800ba18:	4648      	mov	r0, r9
 800ba1a:	f000 febf 	bl	800c79c <__multadd>
 800ba1e:	4605      	mov	r5, r0
 800ba20:	e7f0      	b.n	800ba04 <_dtoa_r+0xad4>
 800ba22:	f1bb 0f00 	cmp.w	fp, #0
 800ba26:	bfcc      	ite	gt
 800ba28:	465e      	movgt	r6, fp
 800ba2a:	2601      	movle	r6, #1
 800ba2c:	4456      	add	r6, sl
 800ba2e:	2700      	movs	r7, #0
 800ba30:	9902      	ldr	r1, [sp, #8]
 800ba32:	9300      	str	r3, [sp, #0]
 800ba34:	2201      	movs	r2, #1
 800ba36:	4648      	mov	r0, r9
 800ba38:	f001 f89e 	bl	800cb78 <__lshift>
 800ba3c:	4621      	mov	r1, r4
 800ba3e:	9002      	str	r0, [sp, #8]
 800ba40:	f001 f906 	bl	800cc50 <__mcmp>
 800ba44:	2800      	cmp	r0, #0
 800ba46:	dcb4      	bgt.n	800b9b2 <_dtoa_r+0xa82>
 800ba48:	d102      	bne.n	800ba50 <_dtoa_r+0xb20>
 800ba4a:	9b00      	ldr	r3, [sp, #0]
 800ba4c:	07db      	lsls	r3, r3, #31
 800ba4e:	d4b0      	bmi.n	800b9b2 <_dtoa_r+0xa82>
 800ba50:	4633      	mov	r3, r6
 800ba52:	461e      	mov	r6, r3
 800ba54:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ba58:	2a30      	cmp	r2, #48	@ 0x30
 800ba5a:	d0fa      	beq.n	800ba52 <_dtoa_r+0xb22>
 800ba5c:	e4b5      	b.n	800b3ca <_dtoa_r+0x49a>
 800ba5e:	459a      	cmp	sl, r3
 800ba60:	d1a8      	bne.n	800b9b4 <_dtoa_r+0xa84>
 800ba62:	2331      	movs	r3, #49	@ 0x31
 800ba64:	f108 0801 	add.w	r8, r8, #1
 800ba68:	f88a 3000 	strb.w	r3, [sl]
 800ba6c:	e4ad      	b.n	800b3ca <_dtoa_r+0x49a>
 800ba6e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ba70:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800bacc <_dtoa_r+0xb9c>
 800ba74:	b11b      	cbz	r3, 800ba7e <_dtoa_r+0xb4e>
 800ba76:	f10a 0308 	add.w	r3, sl, #8
 800ba7a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ba7c:	6013      	str	r3, [r2, #0]
 800ba7e:	4650      	mov	r0, sl
 800ba80:	b017      	add	sp, #92	@ 0x5c
 800ba82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba86:	9b07      	ldr	r3, [sp, #28]
 800ba88:	2b01      	cmp	r3, #1
 800ba8a:	f77f ae2e 	ble.w	800b6ea <_dtoa_r+0x7ba>
 800ba8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ba90:	9308      	str	r3, [sp, #32]
 800ba92:	2001      	movs	r0, #1
 800ba94:	e64d      	b.n	800b732 <_dtoa_r+0x802>
 800ba96:	f1bb 0f00 	cmp.w	fp, #0
 800ba9a:	f77f aed9 	ble.w	800b850 <_dtoa_r+0x920>
 800ba9e:	4656      	mov	r6, sl
 800baa0:	9802      	ldr	r0, [sp, #8]
 800baa2:	4621      	mov	r1, r4
 800baa4:	f7ff f9bc 	bl	800ae20 <quorem>
 800baa8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800baac:	f806 3b01 	strb.w	r3, [r6], #1
 800bab0:	eba6 020a 	sub.w	r2, r6, sl
 800bab4:	4593      	cmp	fp, r2
 800bab6:	ddb4      	ble.n	800ba22 <_dtoa_r+0xaf2>
 800bab8:	9902      	ldr	r1, [sp, #8]
 800baba:	2300      	movs	r3, #0
 800babc:	220a      	movs	r2, #10
 800babe:	4648      	mov	r0, r9
 800bac0:	f000 fe6c 	bl	800c79c <__multadd>
 800bac4:	9002      	str	r0, [sp, #8]
 800bac6:	e7eb      	b.n	800baa0 <_dtoa_r+0xb70>
 800bac8:	0800dadd 	.word	0x0800dadd
 800bacc:	0800da78 	.word	0x0800da78

0800bad0 <rshift>:
 800bad0:	6903      	ldr	r3, [r0, #16]
 800bad2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bad6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bada:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bade:	f100 0414 	add.w	r4, r0, #20
 800bae2:	dd45      	ble.n	800bb70 <rshift+0xa0>
 800bae4:	f011 011f 	ands.w	r1, r1, #31
 800bae8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800baec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800baf0:	d10c      	bne.n	800bb0c <rshift+0x3c>
 800baf2:	f100 0710 	add.w	r7, r0, #16
 800baf6:	4629      	mov	r1, r5
 800baf8:	42b1      	cmp	r1, r6
 800bafa:	d334      	bcc.n	800bb66 <rshift+0x96>
 800bafc:	1a9b      	subs	r3, r3, r2
 800bafe:	009b      	lsls	r3, r3, #2
 800bb00:	1eea      	subs	r2, r5, #3
 800bb02:	4296      	cmp	r6, r2
 800bb04:	bf38      	it	cc
 800bb06:	2300      	movcc	r3, #0
 800bb08:	4423      	add	r3, r4
 800bb0a:	e015      	b.n	800bb38 <rshift+0x68>
 800bb0c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bb10:	f1c1 0820 	rsb	r8, r1, #32
 800bb14:	40cf      	lsrs	r7, r1
 800bb16:	f105 0e04 	add.w	lr, r5, #4
 800bb1a:	46a1      	mov	r9, r4
 800bb1c:	4576      	cmp	r6, lr
 800bb1e:	46f4      	mov	ip, lr
 800bb20:	d815      	bhi.n	800bb4e <rshift+0x7e>
 800bb22:	1a9a      	subs	r2, r3, r2
 800bb24:	0092      	lsls	r2, r2, #2
 800bb26:	3a04      	subs	r2, #4
 800bb28:	3501      	adds	r5, #1
 800bb2a:	42ae      	cmp	r6, r5
 800bb2c:	bf38      	it	cc
 800bb2e:	2200      	movcc	r2, #0
 800bb30:	18a3      	adds	r3, r4, r2
 800bb32:	50a7      	str	r7, [r4, r2]
 800bb34:	b107      	cbz	r7, 800bb38 <rshift+0x68>
 800bb36:	3304      	adds	r3, #4
 800bb38:	1b1a      	subs	r2, r3, r4
 800bb3a:	42a3      	cmp	r3, r4
 800bb3c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bb40:	bf08      	it	eq
 800bb42:	2300      	moveq	r3, #0
 800bb44:	6102      	str	r2, [r0, #16]
 800bb46:	bf08      	it	eq
 800bb48:	6143      	streq	r3, [r0, #20]
 800bb4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb4e:	f8dc c000 	ldr.w	ip, [ip]
 800bb52:	fa0c fc08 	lsl.w	ip, ip, r8
 800bb56:	ea4c 0707 	orr.w	r7, ip, r7
 800bb5a:	f849 7b04 	str.w	r7, [r9], #4
 800bb5e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bb62:	40cf      	lsrs	r7, r1
 800bb64:	e7da      	b.n	800bb1c <rshift+0x4c>
 800bb66:	f851 cb04 	ldr.w	ip, [r1], #4
 800bb6a:	f847 cf04 	str.w	ip, [r7, #4]!
 800bb6e:	e7c3      	b.n	800baf8 <rshift+0x28>
 800bb70:	4623      	mov	r3, r4
 800bb72:	e7e1      	b.n	800bb38 <rshift+0x68>

0800bb74 <__hexdig_fun>:
 800bb74:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800bb78:	2b09      	cmp	r3, #9
 800bb7a:	d802      	bhi.n	800bb82 <__hexdig_fun+0xe>
 800bb7c:	3820      	subs	r0, #32
 800bb7e:	b2c0      	uxtb	r0, r0
 800bb80:	4770      	bx	lr
 800bb82:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800bb86:	2b05      	cmp	r3, #5
 800bb88:	d801      	bhi.n	800bb8e <__hexdig_fun+0x1a>
 800bb8a:	3847      	subs	r0, #71	@ 0x47
 800bb8c:	e7f7      	b.n	800bb7e <__hexdig_fun+0xa>
 800bb8e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800bb92:	2b05      	cmp	r3, #5
 800bb94:	d801      	bhi.n	800bb9a <__hexdig_fun+0x26>
 800bb96:	3827      	subs	r0, #39	@ 0x27
 800bb98:	e7f1      	b.n	800bb7e <__hexdig_fun+0xa>
 800bb9a:	2000      	movs	r0, #0
 800bb9c:	4770      	bx	lr
	...

0800bba0 <__gethex>:
 800bba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bba4:	b085      	sub	sp, #20
 800bba6:	468a      	mov	sl, r1
 800bba8:	9302      	str	r3, [sp, #8]
 800bbaa:	680b      	ldr	r3, [r1, #0]
 800bbac:	9001      	str	r0, [sp, #4]
 800bbae:	4690      	mov	r8, r2
 800bbb0:	1c9c      	adds	r4, r3, #2
 800bbb2:	46a1      	mov	r9, r4
 800bbb4:	f814 0b01 	ldrb.w	r0, [r4], #1
 800bbb8:	2830      	cmp	r0, #48	@ 0x30
 800bbba:	d0fa      	beq.n	800bbb2 <__gethex+0x12>
 800bbbc:	eba9 0303 	sub.w	r3, r9, r3
 800bbc0:	f1a3 0b02 	sub.w	fp, r3, #2
 800bbc4:	f7ff ffd6 	bl	800bb74 <__hexdig_fun>
 800bbc8:	4605      	mov	r5, r0
 800bbca:	2800      	cmp	r0, #0
 800bbcc:	d168      	bne.n	800bca0 <__gethex+0x100>
 800bbce:	49a0      	ldr	r1, [pc, #640]	@ (800be50 <__gethex+0x2b0>)
 800bbd0:	2201      	movs	r2, #1
 800bbd2:	4648      	mov	r0, r9
 800bbd4:	f7ff f84a 	bl	800ac6c <strncmp>
 800bbd8:	4607      	mov	r7, r0
 800bbda:	2800      	cmp	r0, #0
 800bbdc:	d167      	bne.n	800bcae <__gethex+0x10e>
 800bbde:	f899 0001 	ldrb.w	r0, [r9, #1]
 800bbe2:	4626      	mov	r6, r4
 800bbe4:	f7ff ffc6 	bl	800bb74 <__hexdig_fun>
 800bbe8:	2800      	cmp	r0, #0
 800bbea:	d062      	beq.n	800bcb2 <__gethex+0x112>
 800bbec:	4623      	mov	r3, r4
 800bbee:	7818      	ldrb	r0, [r3, #0]
 800bbf0:	2830      	cmp	r0, #48	@ 0x30
 800bbf2:	4699      	mov	r9, r3
 800bbf4:	f103 0301 	add.w	r3, r3, #1
 800bbf8:	d0f9      	beq.n	800bbee <__gethex+0x4e>
 800bbfa:	f7ff ffbb 	bl	800bb74 <__hexdig_fun>
 800bbfe:	fab0 f580 	clz	r5, r0
 800bc02:	096d      	lsrs	r5, r5, #5
 800bc04:	f04f 0b01 	mov.w	fp, #1
 800bc08:	464a      	mov	r2, r9
 800bc0a:	4616      	mov	r6, r2
 800bc0c:	3201      	adds	r2, #1
 800bc0e:	7830      	ldrb	r0, [r6, #0]
 800bc10:	f7ff ffb0 	bl	800bb74 <__hexdig_fun>
 800bc14:	2800      	cmp	r0, #0
 800bc16:	d1f8      	bne.n	800bc0a <__gethex+0x6a>
 800bc18:	498d      	ldr	r1, [pc, #564]	@ (800be50 <__gethex+0x2b0>)
 800bc1a:	2201      	movs	r2, #1
 800bc1c:	4630      	mov	r0, r6
 800bc1e:	f7ff f825 	bl	800ac6c <strncmp>
 800bc22:	2800      	cmp	r0, #0
 800bc24:	d13f      	bne.n	800bca6 <__gethex+0x106>
 800bc26:	b944      	cbnz	r4, 800bc3a <__gethex+0x9a>
 800bc28:	1c74      	adds	r4, r6, #1
 800bc2a:	4622      	mov	r2, r4
 800bc2c:	4616      	mov	r6, r2
 800bc2e:	3201      	adds	r2, #1
 800bc30:	7830      	ldrb	r0, [r6, #0]
 800bc32:	f7ff ff9f 	bl	800bb74 <__hexdig_fun>
 800bc36:	2800      	cmp	r0, #0
 800bc38:	d1f8      	bne.n	800bc2c <__gethex+0x8c>
 800bc3a:	1ba4      	subs	r4, r4, r6
 800bc3c:	00a7      	lsls	r7, r4, #2
 800bc3e:	7833      	ldrb	r3, [r6, #0]
 800bc40:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800bc44:	2b50      	cmp	r3, #80	@ 0x50
 800bc46:	d13e      	bne.n	800bcc6 <__gethex+0x126>
 800bc48:	7873      	ldrb	r3, [r6, #1]
 800bc4a:	2b2b      	cmp	r3, #43	@ 0x2b
 800bc4c:	d033      	beq.n	800bcb6 <__gethex+0x116>
 800bc4e:	2b2d      	cmp	r3, #45	@ 0x2d
 800bc50:	d034      	beq.n	800bcbc <__gethex+0x11c>
 800bc52:	1c71      	adds	r1, r6, #1
 800bc54:	2400      	movs	r4, #0
 800bc56:	7808      	ldrb	r0, [r1, #0]
 800bc58:	f7ff ff8c 	bl	800bb74 <__hexdig_fun>
 800bc5c:	1e43      	subs	r3, r0, #1
 800bc5e:	b2db      	uxtb	r3, r3
 800bc60:	2b18      	cmp	r3, #24
 800bc62:	d830      	bhi.n	800bcc6 <__gethex+0x126>
 800bc64:	f1a0 0210 	sub.w	r2, r0, #16
 800bc68:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bc6c:	f7ff ff82 	bl	800bb74 <__hexdig_fun>
 800bc70:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800bc74:	fa5f fc8c 	uxtb.w	ip, ip
 800bc78:	f1bc 0f18 	cmp.w	ip, #24
 800bc7c:	f04f 030a 	mov.w	r3, #10
 800bc80:	d91e      	bls.n	800bcc0 <__gethex+0x120>
 800bc82:	b104      	cbz	r4, 800bc86 <__gethex+0xe6>
 800bc84:	4252      	negs	r2, r2
 800bc86:	4417      	add	r7, r2
 800bc88:	f8ca 1000 	str.w	r1, [sl]
 800bc8c:	b1ed      	cbz	r5, 800bcca <__gethex+0x12a>
 800bc8e:	f1bb 0f00 	cmp.w	fp, #0
 800bc92:	bf0c      	ite	eq
 800bc94:	2506      	moveq	r5, #6
 800bc96:	2500      	movne	r5, #0
 800bc98:	4628      	mov	r0, r5
 800bc9a:	b005      	add	sp, #20
 800bc9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bca0:	2500      	movs	r5, #0
 800bca2:	462c      	mov	r4, r5
 800bca4:	e7b0      	b.n	800bc08 <__gethex+0x68>
 800bca6:	2c00      	cmp	r4, #0
 800bca8:	d1c7      	bne.n	800bc3a <__gethex+0x9a>
 800bcaa:	4627      	mov	r7, r4
 800bcac:	e7c7      	b.n	800bc3e <__gethex+0x9e>
 800bcae:	464e      	mov	r6, r9
 800bcb0:	462f      	mov	r7, r5
 800bcb2:	2501      	movs	r5, #1
 800bcb4:	e7c3      	b.n	800bc3e <__gethex+0x9e>
 800bcb6:	2400      	movs	r4, #0
 800bcb8:	1cb1      	adds	r1, r6, #2
 800bcba:	e7cc      	b.n	800bc56 <__gethex+0xb6>
 800bcbc:	2401      	movs	r4, #1
 800bcbe:	e7fb      	b.n	800bcb8 <__gethex+0x118>
 800bcc0:	fb03 0002 	mla	r0, r3, r2, r0
 800bcc4:	e7ce      	b.n	800bc64 <__gethex+0xc4>
 800bcc6:	4631      	mov	r1, r6
 800bcc8:	e7de      	b.n	800bc88 <__gethex+0xe8>
 800bcca:	eba6 0309 	sub.w	r3, r6, r9
 800bcce:	3b01      	subs	r3, #1
 800bcd0:	4629      	mov	r1, r5
 800bcd2:	2b07      	cmp	r3, #7
 800bcd4:	dc0a      	bgt.n	800bcec <__gethex+0x14c>
 800bcd6:	9801      	ldr	r0, [sp, #4]
 800bcd8:	f000 fcfe 	bl	800c6d8 <_Balloc>
 800bcdc:	4604      	mov	r4, r0
 800bcde:	b940      	cbnz	r0, 800bcf2 <__gethex+0x152>
 800bce0:	4b5c      	ldr	r3, [pc, #368]	@ (800be54 <__gethex+0x2b4>)
 800bce2:	4602      	mov	r2, r0
 800bce4:	21e4      	movs	r1, #228	@ 0xe4
 800bce6:	485c      	ldr	r0, [pc, #368]	@ (800be58 <__gethex+0x2b8>)
 800bce8:	f7ff f87c 	bl	800ade4 <__assert_func>
 800bcec:	3101      	adds	r1, #1
 800bcee:	105b      	asrs	r3, r3, #1
 800bcf0:	e7ef      	b.n	800bcd2 <__gethex+0x132>
 800bcf2:	f100 0a14 	add.w	sl, r0, #20
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	4655      	mov	r5, sl
 800bcfa:	469b      	mov	fp, r3
 800bcfc:	45b1      	cmp	r9, r6
 800bcfe:	d337      	bcc.n	800bd70 <__gethex+0x1d0>
 800bd00:	f845 bb04 	str.w	fp, [r5], #4
 800bd04:	eba5 050a 	sub.w	r5, r5, sl
 800bd08:	10ad      	asrs	r5, r5, #2
 800bd0a:	6125      	str	r5, [r4, #16]
 800bd0c:	4658      	mov	r0, fp
 800bd0e:	f000 fdd5 	bl	800c8bc <__hi0bits>
 800bd12:	016d      	lsls	r5, r5, #5
 800bd14:	f8d8 6000 	ldr.w	r6, [r8]
 800bd18:	1a2d      	subs	r5, r5, r0
 800bd1a:	42b5      	cmp	r5, r6
 800bd1c:	dd54      	ble.n	800bdc8 <__gethex+0x228>
 800bd1e:	1bad      	subs	r5, r5, r6
 800bd20:	4629      	mov	r1, r5
 800bd22:	4620      	mov	r0, r4
 800bd24:	f001 f961 	bl	800cfea <__any_on>
 800bd28:	4681      	mov	r9, r0
 800bd2a:	b178      	cbz	r0, 800bd4c <__gethex+0x1ac>
 800bd2c:	1e6b      	subs	r3, r5, #1
 800bd2e:	1159      	asrs	r1, r3, #5
 800bd30:	f003 021f 	and.w	r2, r3, #31
 800bd34:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bd38:	f04f 0901 	mov.w	r9, #1
 800bd3c:	fa09 f202 	lsl.w	r2, r9, r2
 800bd40:	420a      	tst	r2, r1
 800bd42:	d003      	beq.n	800bd4c <__gethex+0x1ac>
 800bd44:	454b      	cmp	r3, r9
 800bd46:	dc36      	bgt.n	800bdb6 <__gethex+0x216>
 800bd48:	f04f 0902 	mov.w	r9, #2
 800bd4c:	4629      	mov	r1, r5
 800bd4e:	4620      	mov	r0, r4
 800bd50:	f7ff febe 	bl	800bad0 <rshift>
 800bd54:	442f      	add	r7, r5
 800bd56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bd5a:	42bb      	cmp	r3, r7
 800bd5c:	da42      	bge.n	800bde4 <__gethex+0x244>
 800bd5e:	9801      	ldr	r0, [sp, #4]
 800bd60:	4621      	mov	r1, r4
 800bd62:	f000 fcf9 	bl	800c758 <_Bfree>
 800bd66:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bd68:	2300      	movs	r3, #0
 800bd6a:	6013      	str	r3, [r2, #0]
 800bd6c:	25a3      	movs	r5, #163	@ 0xa3
 800bd6e:	e793      	b.n	800bc98 <__gethex+0xf8>
 800bd70:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800bd74:	2a2e      	cmp	r2, #46	@ 0x2e
 800bd76:	d012      	beq.n	800bd9e <__gethex+0x1fe>
 800bd78:	2b20      	cmp	r3, #32
 800bd7a:	d104      	bne.n	800bd86 <__gethex+0x1e6>
 800bd7c:	f845 bb04 	str.w	fp, [r5], #4
 800bd80:	f04f 0b00 	mov.w	fp, #0
 800bd84:	465b      	mov	r3, fp
 800bd86:	7830      	ldrb	r0, [r6, #0]
 800bd88:	9303      	str	r3, [sp, #12]
 800bd8a:	f7ff fef3 	bl	800bb74 <__hexdig_fun>
 800bd8e:	9b03      	ldr	r3, [sp, #12]
 800bd90:	f000 000f 	and.w	r0, r0, #15
 800bd94:	4098      	lsls	r0, r3
 800bd96:	ea4b 0b00 	orr.w	fp, fp, r0
 800bd9a:	3304      	adds	r3, #4
 800bd9c:	e7ae      	b.n	800bcfc <__gethex+0x15c>
 800bd9e:	45b1      	cmp	r9, r6
 800bda0:	d8ea      	bhi.n	800bd78 <__gethex+0x1d8>
 800bda2:	492b      	ldr	r1, [pc, #172]	@ (800be50 <__gethex+0x2b0>)
 800bda4:	9303      	str	r3, [sp, #12]
 800bda6:	2201      	movs	r2, #1
 800bda8:	4630      	mov	r0, r6
 800bdaa:	f7fe ff5f 	bl	800ac6c <strncmp>
 800bdae:	9b03      	ldr	r3, [sp, #12]
 800bdb0:	2800      	cmp	r0, #0
 800bdb2:	d1e1      	bne.n	800bd78 <__gethex+0x1d8>
 800bdb4:	e7a2      	b.n	800bcfc <__gethex+0x15c>
 800bdb6:	1ea9      	subs	r1, r5, #2
 800bdb8:	4620      	mov	r0, r4
 800bdba:	f001 f916 	bl	800cfea <__any_on>
 800bdbe:	2800      	cmp	r0, #0
 800bdc0:	d0c2      	beq.n	800bd48 <__gethex+0x1a8>
 800bdc2:	f04f 0903 	mov.w	r9, #3
 800bdc6:	e7c1      	b.n	800bd4c <__gethex+0x1ac>
 800bdc8:	da09      	bge.n	800bdde <__gethex+0x23e>
 800bdca:	1b75      	subs	r5, r6, r5
 800bdcc:	4621      	mov	r1, r4
 800bdce:	9801      	ldr	r0, [sp, #4]
 800bdd0:	462a      	mov	r2, r5
 800bdd2:	f000 fed1 	bl	800cb78 <__lshift>
 800bdd6:	1b7f      	subs	r7, r7, r5
 800bdd8:	4604      	mov	r4, r0
 800bdda:	f100 0a14 	add.w	sl, r0, #20
 800bdde:	f04f 0900 	mov.w	r9, #0
 800bde2:	e7b8      	b.n	800bd56 <__gethex+0x1b6>
 800bde4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bde8:	42bd      	cmp	r5, r7
 800bdea:	dd6f      	ble.n	800becc <__gethex+0x32c>
 800bdec:	1bed      	subs	r5, r5, r7
 800bdee:	42ae      	cmp	r6, r5
 800bdf0:	dc34      	bgt.n	800be5c <__gethex+0x2bc>
 800bdf2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bdf6:	2b02      	cmp	r3, #2
 800bdf8:	d022      	beq.n	800be40 <__gethex+0x2a0>
 800bdfa:	2b03      	cmp	r3, #3
 800bdfc:	d024      	beq.n	800be48 <__gethex+0x2a8>
 800bdfe:	2b01      	cmp	r3, #1
 800be00:	d115      	bne.n	800be2e <__gethex+0x28e>
 800be02:	42ae      	cmp	r6, r5
 800be04:	d113      	bne.n	800be2e <__gethex+0x28e>
 800be06:	2e01      	cmp	r6, #1
 800be08:	d10b      	bne.n	800be22 <__gethex+0x282>
 800be0a:	9a02      	ldr	r2, [sp, #8]
 800be0c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800be10:	6013      	str	r3, [r2, #0]
 800be12:	2301      	movs	r3, #1
 800be14:	6123      	str	r3, [r4, #16]
 800be16:	f8ca 3000 	str.w	r3, [sl]
 800be1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be1c:	2562      	movs	r5, #98	@ 0x62
 800be1e:	601c      	str	r4, [r3, #0]
 800be20:	e73a      	b.n	800bc98 <__gethex+0xf8>
 800be22:	1e71      	subs	r1, r6, #1
 800be24:	4620      	mov	r0, r4
 800be26:	f001 f8e0 	bl	800cfea <__any_on>
 800be2a:	2800      	cmp	r0, #0
 800be2c:	d1ed      	bne.n	800be0a <__gethex+0x26a>
 800be2e:	9801      	ldr	r0, [sp, #4]
 800be30:	4621      	mov	r1, r4
 800be32:	f000 fc91 	bl	800c758 <_Bfree>
 800be36:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800be38:	2300      	movs	r3, #0
 800be3a:	6013      	str	r3, [r2, #0]
 800be3c:	2550      	movs	r5, #80	@ 0x50
 800be3e:	e72b      	b.n	800bc98 <__gethex+0xf8>
 800be40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be42:	2b00      	cmp	r3, #0
 800be44:	d1f3      	bne.n	800be2e <__gethex+0x28e>
 800be46:	e7e0      	b.n	800be0a <__gethex+0x26a>
 800be48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d1dd      	bne.n	800be0a <__gethex+0x26a>
 800be4e:	e7ee      	b.n	800be2e <__gethex+0x28e>
 800be50:	0800d9c1 	.word	0x0800d9c1
 800be54:	0800dadd 	.word	0x0800dadd
 800be58:	0800daee 	.word	0x0800daee
 800be5c:	1e6f      	subs	r7, r5, #1
 800be5e:	f1b9 0f00 	cmp.w	r9, #0
 800be62:	d130      	bne.n	800bec6 <__gethex+0x326>
 800be64:	b127      	cbz	r7, 800be70 <__gethex+0x2d0>
 800be66:	4639      	mov	r1, r7
 800be68:	4620      	mov	r0, r4
 800be6a:	f001 f8be 	bl	800cfea <__any_on>
 800be6e:	4681      	mov	r9, r0
 800be70:	117a      	asrs	r2, r7, #5
 800be72:	2301      	movs	r3, #1
 800be74:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800be78:	f007 071f 	and.w	r7, r7, #31
 800be7c:	40bb      	lsls	r3, r7
 800be7e:	4213      	tst	r3, r2
 800be80:	4629      	mov	r1, r5
 800be82:	4620      	mov	r0, r4
 800be84:	bf18      	it	ne
 800be86:	f049 0902 	orrne.w	r9, r9, #2
 800be8a:	f7ff fe21 	bl	800bad0 <rshift>
 800be8e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800be92:	1b76      	subs	r6, r6, r5
 800be94:	2502      	movs	r5, #2
 800be96:	f1b9 0f00 	cmp.w	r9, #0
 800be9a:	d047      	beq.n	800bf2c <__gethex+0x38c>
 800be9c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bea0:	2b02      	cmp	r3, #2
 800bea2:	d015      	beq.n	800bed0 <__gethex+0x330>
 800bea4:	2b03      	cmp	r3, #3
 800bea6:	d017      	beq.n	800bed8 <__gethex+0x338>
 800bea8:	2b01      	cmp	r3, #1
 800beaa:	d109      	bne.n	800bec0 <__gethex+0x320>
 800beac:	f019 0f02 	tst.w	r9, #2
 800beb0:	d006      	beq.n	800bec0 <__gethex+0x320>
 800beb2:	f8da 3000 	ldr.w	r3, [sl]
 800beb6:	ea49 0903 	orr.w	r9, r9, r3
 800beba:	f019 0f01 	tst.w	r9, #1
 800bebe:	d10e      	bne.n	800bede <__gethex+0x33e>
 800bec0:	f045 0510 	orr.w	r5, r5, #16
 800bec4:	e032      	b.n	800bf2c <__gethex+0x38c>
 800bec6:	f04f 0901 	mov.w	r9, #1
 800beca:	e7d1      	b.n	800be70 <__gethex+0x2d0>
 800becc:	2501      	movs	r5, #1
 800bece:	e7e2      	b.n	800be96 <__gethex+0x2f6>
 800bed0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bed2:	f1c3 0301 	rsb	r3, r3, #1
 800bed6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bed8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d0f0      	beq.n	800bec0 <__gethex+0x320>
 800bede:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bee2:	f104 0314 	add.w	r3, r4, #20
 800bee6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800beea:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800beee:	f04f 0c00 	mov.w	ip, #0
 800bef2:	4618      	mov	r0, r3
 800bef4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bef8:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800befc:	d01b      	beq.n	800bf36 <__gethex+0x396>
 800befe:	3201      	adds	r2, #1
 800bf00:	6002      	str	r2, [r0, #0]
 800bf02:	2d02      	cmp	r5, #2
 800bf04:	f104 0314 	add.w	r3, r4, #20
 800bf08:	d13c      	bne.n	800bf84 <__gethex+0x3e4>
 800bf0a:	f8d8 2000 	ldr.w	r2, [r8]
 800bf0e:	3a01      	subs	r2, #1
 800bf10:	42b2      	cmp	r2, r6
 800bf12:	d109      	bne.n	800bf28 <__gethex+0x388>
 800bf14:	1171      	asrs	r1, r6, #5
 800bf16:	2201      	movs	r2, #1
 800bf18:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bf1c:	f006 061f 	and.w	r6, r6, #31
 800bf20:	fa02 f606 	lsl.w	r6, r2, r6
 800bf24:	421e      	tst	r6, r3
 800bf26:	d13a      	bne.n	800bf9e <__gethex+0x3fe>
 800bf28:	f045 0520 	orr.w	r5, r5, #32
 800bf2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf2e:	601c      	str	r4, [r3, #0]
 800bf30:	9b02      	ldr	r3, [sp, #8]
 800bf32:	601f      	str	r7, [r3, #0]
 800bf34:	e6b0      	b.n	800bc98 <__gethex+0xf8>
 800bf36:	4299      	cmp	r1, r3
 800bf38:	f843 cc04 	str.w	ip, [r3, #-4]
 800bf3c:	d8d9      	bhi.n	800bef2 <__gethex+0x352>
 800bf3e:	68a3      	ldr	r3, [r4, #8]
 800bf40:	459b      	cmp	fp, r3
 800bf42:	db17      	blt.n	800bf74 <__gethex+0x3d4>
 800bf44:	6861      	ldr	r1, [r4, #4]
 800bf46:	9801      	ldr	r0, [sp, #4]
 800bf48:	3101      	adds	r1, #1
 800bf4a:	f000 fbc5 	bl	800c6d8 <_Balloc>
 800bf4e:	4681      	mov	r9, r0
 800bf50:	b918      	cbnz	r0, 800bf5a <__gethex+0x3ba>
 800bf52:	4b1a      	ldr	r3, [pc, #104]	@ (800bfbc <__gethex+0x41c>)
 800bf54:	4602      	mov	r2, r0
 800bf56:	2184      	movs	r1, #132	@ 0x84
 800bf58:	e6c5      	b.n	800bce6 <__gethex+0x146>
 800bf5a:	6922      	ldr	r2, [r4, #16]
 800bf5c:	3202      	adds	r2, #2
 800bf5e:	f104 010c 	add.w	r1, r4, #12
 800bf62:	0092      	lsls	r2, r2, #2
 800bf64:	300c      	adds	r0, #12
 800bf66:	f7fe ff21 	bl	800adac <memcpy>
 800bf6a:	4621      	mov	r1, r4
 800bf6c:	9801      	ldr	r0, [sp, #4]
 800bf6e:	f000 fbf3 	bl	800c758 <_Bfree>
 800bf72:	464c      	mov	r4, r9
 800bf74:	6923      	ldr	r3, [r4, #16]
 800bf76:	1c5a      	adds	r2, r3, #1
 800bf78:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bf7c:	6122      	str	r2, [r4, #16]
 800bf7e:	2201      	movs	r2, #1
 800bf80:	615a      	str	r2, [r3, #20]
 800bf82:	e7be      	b.n	800bf02 <__gethex+0x362>
 800bf84:	6922      	ldr	r2, [r4, #16]
 800bf86:	455a      	cmp	r2, fp
 800bf88:	dd0b      	ble.n	800bfa2 <__gethex+0x402>
 800bf8a:	2101      	movs	r1, #1
 800bf8c:	4620      	mov	r0, r4
 800bf8e:	f7ff fd9f 	bl	800bad0 <rshift>
 800bf92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bf96:	3701      	adds	r7, #1
 800bf98:	42bb      	cmp	r3, r7
 800bf9a:	f6ff aee0 	blt.w	800bd5e <__gethex+0x1be>
 800bf9e:	2501      	movs	r5, #1
 800bfa0:	e7c2      	b.n	800bf28 <__gethex+0x388>
 800bfa2:	f016 061f 	ands.w	r6, r6, #31
 800bfa6:	d0fa      	beq.n	800bf9e <__gethex+0x3fe>
 800bfa8:	4453      	add	r3, sl
 800bfaa:	f1c6 0620 	rsb	r6, r6, #32
 800bfae:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bfb2:	f000 fc83 	bl	800c8bc <__hi0bits>
 800bfb6:	42b0      	cmp	r0, r6
 800bfb8:	dbe7      	blt.n	800bf8a <__gethex+0x3ea>
 800bfba:	e7f0      	b.n	800bf9e <__gethex+0x3fe>
 800bfbc:	0800dadd 	.word	0x0800dadd

0800bfc0 <L_shift>:
 800bfc0:	f1c2 0208 	rsb	r2, r2, #8
 800bfc4:	0092      	lsls	r2, r2, #2
 800bfc6:	b570      	push	{r4, r5, r6, lr}
 800bfc8:	f1c2 0620 	rsb	r6, r2, #32
 800bfcc:	6843      	ldr	r3, [r0, #4]
 800bfce:	6804      	ldr	r4, [r0, #0]
 800bfd0:	fa03 f506 	lsl.w	r5, r3, r6
 800bfd4:	432c      	orrs	r4, r5
 800bfd6:	40d3      	lsrs	r3, r2
 800bfd8:	6004      	str	r4, [r0, #0]
 800bfda:	f840 3f04 	str.w	r3, [r0, #4]!
 800bfde:	4288      	cmp	r0, r1
 800bfe0:	d3f4      	bcc.n	800bfcc <L_shift+0xc>
 800bfe2:	bd70      	pop	{r4, r5, r6, pc}

0800bfe4 <__match>:
 800bfe4:	b530      	push	{r4, r5, lr}
 800bfe6:	6803      	ldr	r3, [r0, #0]
 800bfe8:	3301      	adds	r3, #1
 800bfea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bfee:	b914      	cbnz	r4, 800bff6 <__match+0x12>
 800bff0:	6003      	str	r3, [r0, #0]
 800bff2:	2001      	movs	r0, #1
 800bff4:	bd30      	pop	{r4, r5, pc}
 800bff6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bffa:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800bffe:	2d19      	cmp	r5, #25
 800c000:	bf98      	it	ls
 800c002:	3220      	addls	r2, #32
 800c004:	42a2      	cmp	r2, r4
 800c006:	d0f0      	beq.n	800bfea <__match+0x6>
 800c008:	2000      	movs	r0, #0
 800c00a:	e7f3      	b.n	800bff4 <__match+0x10>

0800c00c <__hexnan>:
 800c00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c010:	680b      	ldr	r3, [r1, #0]
 800c012:	6801      	ldr	r1, [r0, #0]
 800c014:	115e      	asrs	r6, r3, #5
 800c016:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c01a:	f013 031f 	ands.w	r3, r3, #31
 800c01e:	b087      	sub	sp, #28
 800c020:	bf18      	it	ne
 800c022:	3604      	addne	r6, #4
 800c024:	2500      	movs	r5, #0
 800c026:	1f37      	subs	r7, r6, #4
 800c028:	4682      	mov	sl, r0
 800c02a:	4690      	mov	r8, r2
 800c02c:	9301      	str	r3, [sp, #4]
 800c02e:	f846 5c04 	str.w	r5, [r6, #-4]
 800c032:	46b9      	mov	r9, r7
 800c034:	463c      	mov	r4, r7
 800c036:	9502      	str	r5, [sp, #8]
 800c038:	46ab      	mov	fp, r5
 800c03a:	784a      	ldrb	r2, [r1, #1]
 800c03c:	1c4b      	adds	r3, r1, #1
 800c03e:	9303      	str	r3, [sp, #12]
 800c040:	b342      	cbz	r2, 800c094 <__hexnan+0x88>
 800c042:	4610      	mov	r0, r2
 800c044:	9105      	str	r1, [sp, #20]
 800c046:	9204      	str	r2, [sp, #16]
 800c048:	f7ff fd94 	bl	800bb74 <__hexdig_fun>
 800c04c:	2800      	cmp	r0, #0
 800c04e:	d151      	bne.n	800c0f4 <__hexnan+0xe8>
 800c050:	9a04      	ldr	r2, [sp, #16]
 800c052:	9905      	ldr	r1, [sp, #20]
 800c054:	2a20      	cmp	r2, #32
 800c056:	d818      	bhi.n	800c08a <__hexnan+0x7e>
 800c058:	9b02      	ldr	r3, [sp, #8]
 800c05a:	459b      	cmp	fp, r3
 800c05c:	dd13      	ble.n	800c086 <__hexnan+0x7a>
 800c05e:	454c      	cmp	r4, r9
 800c060:	d206      	bcs.n	800c070 <__hexnan+0x64>
 800c062:	2d07      	cmp	r5, #7
 800c064:	dc04      	bgt.n	800c070 <__hexnan+0x64>
 800c066:	462a      	mov	r2, r5
 800c068:	4649      	mov	r1, r9
 800c06a:	4620      	mov	r0, r4
 800c06c:	f7ff ffa8 	bl	800bfc0 <L_shift>
 800c070:	4544      	cmp	r4, r8
 800c072:	d952      	bls.n	800c11a <__hexnan+0x10e>
 800c074:	2300      	movs	r3, #0
 800c076:	f1a4 0904 	sub.w	r9, r4, #4
 800c07a:	f844 3c04 	str.w	r3, [r4, #-4]
 800c07e:	f8cd b008 	str.w	fp, [sp, #8]
 800c082:	464c      	mov	r4, r9
 800c084:	461d      	mov	r5, r3
 800c086:	9903      	ldr	r1, [sp, #12]
 800c088:	e7d7      	b.n	800c03a <__hexnan+0x2e>
 800c08a:	2a29      	cmp	r2, #41	@ 0x29
 800c08c:	d157      	bne.n	800c13e <__hexnan+0x132>
 800c08e:	3102      	adds	r1, #2
 800c090:	f8ca 1000 	str.w	r1, [sl]
 800c094:	f1bb 0f00 	cmp.w	fp, #0
 800c098:	d051      	beq.n	800c13e <__hexnan+0x132>
 800c09a:	454c      	cmp	r4, r9
 800c09c:	d206      	bcs.n	800c0ac <__hexnan+0xa0>
 800c09e:	2d07      	cmp	r5, #7
 800c0a0:	dc04      	bgt.n	800c0ac <__hexnan+0xa0>
 800c0a2:	462a      	mov	r2, r5
 800c0a4:	4649      	mov	r1, r9
 800c0a6:	4620      	mov	r0, r4
 800c0a8:	f7ff ff8a 	bl	800bfc0 <L_shift>
 800c0ac:	4544      	cmp	r4, r8
 800c0ae:	d936      	bls.n	800c11e <__hexnan+0x112>
 800c0b0:	f1a8 0204 	sub.w	r2, r8, #4
 800c0b4:	4623      	mov	r3, r4
 800c0b6:	f853 1b04 	ldr.w	r1, [r3], #4
 800c0ba:	f842 1f04 	str.w	r1, [r2, #4]!
 800c0be:	429f      	cmp	r7, r3
 800c0c0:	d2f9      	bcs.n	800c0b6 <__hexnan+0xaa>
 800c0c2:	1b3b      	subs	r3, r7, r4
 800c0c4:	f023 0303 	bic.w	r3, r3, #3
 800c0c8:	3304      	adds	r3, #4
 800c0ca:	3401      	adds	r4, #1
 800c0cc:	3e03      	subs	r6, #3
 800c0ce:	42b4      	cmp	r4, r6
 800c0d0:	bf88      	it	hi
 800c0d2:	2304      	movhi	r3, #4
 800c0d4:	4443      	add	r3, r8
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	f843 2b04 	str.w	r2, [r3], #4
 800c0dc:	429f      	cmp	r7, r3
 800c0de:	d2fb      	bcs.n	800c0d8 <__hexnan+0xcc>
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	b91b      	cbnz	r3, 800c0ec <__hexnan+0xe0>
 800c0e4:	4547      	cmp	r7, r8
 800c0e6:	d128      	bne.n	800c13a <__hexnan+0x12e>
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	603b      	str	r3, [r7, #0]
 800c0ec:	2005      	movs	r0, #5
 800c0ee:	b007      	add	sp, #28
 800c0f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0f4:	3501      	adds	r5, #1
 800c0f6:	2d08      	cmp	r5, #8
 800c0f8:	f10b 0b01 	add.w	fp, fp, #1
 800c0fc:	dd06      	ble.n	800c10c <__hexnan+0x100>
 800c0fe:	4544      	cmp	r4, r8
 800c100:	d9c1      	bls.n	800c086 <__hexnan+0x7a>
 800c102:	2300      	movs	r3, #0
 800c104:	f844 3c04 	str.w	r3, [r4, #-4]
 800c108:	2501      	movs	r5, #1
 800c10a:	3c04      	subs	r4, #4
 800c10c:	6822      	ldr	r2, [r4, #0]
 800c10e:	f000 000f 	and.w	r0, r0, #15
 800c112:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c116:	6020      	str	r0, [r4, #0]
 800c118:	e7b5      	b.n	800c086 <__hexnan+0x7a>
 800c11a:	2508      	movs	r5, #8
 800c11c:	e7b3      	b.n	800c086 <__hexnan+0x7a>
 800c11e:	9b01      	ldr	r3, [sp, #4]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d0dd      	beq.n	800c0e0 <__hexnan+0xd4>
 800c124:	f1c3 0320 	rsb	r3, r3, #32
 800c128:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c12c:	40da      	lsrs	r2, r3
 800c12e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c132:	4013      	ands	r3, r2
 800c134:	f846 3c04 	str.w	r3, [r6, #-4]
 800c138:	e7d2      	b.n	800c0e0 <__hexnan+0xd4>
 800c13a:	3f04      	subs	r7, #4
 800c13c:	e7d0      	b.n	800c0e0 <__hexnan+0xd4>
 800c13e:	2004      	movs	r0, #4
 800c140:	e7d5      	b.n	800c0ee <__hexnan+0xe2>

0800c142 <__ssputs_r>:
 800c142:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c146:	688e      	ldr	r6, [r1, #8]
 800c148:	461f      	mov	r7, r3
 800c14a:	42be      	cmp	r6, r7
 800c14c:	680b      	ldr	r3, [r1, #0]
 800c14e:	4682      	mov	sl, r0
 800c150:	460c      	mov	r4, r1
 800c152:	4690      	mov	r8, r2
 800c154:	d82d      	bhi.n	800c1b2 <__ssputs_r+0x70>
 800c156:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c15a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c15e:	d026      	beq.n	800c1ae <__ssputs_r+0x6c>
 800c160:	6965      	ldr	r5, [r4, #20]
 800c162:	6909      	ldr	r1, [r1, #16]
 800c164:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c168:	eba3 0901 	sub.w	r9, r3, r1
 800c16c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c170:	1c7b      	adds	r3, r7, #1
 800c172:	444b      	add	r3, r9
 800c174:	106d      	asrs	r5, r5, #1
 800c176:	429d      	cmp	r5, r3
 800c178:	bf38      	it	cc
 800c17a:	461d      	movcc	r5, r3
 800c17c:	0553      	lsls	r3, r2, #21
 800c17e:	d527      	bpl.n	800c1d0 <__ssputs_r+0x8e>
 800c180:	4629      	mov	r1, r5
 800c182:	f000 f95f 	bl	800c444 <_malloc_r>
 800c186:	4606      	mov	r6, r0
 800c188:	b360      	cbz	r0, 800c1e4 <__ssputs_r+0xa2>
 800c18a:	6921      	ldr	r1, [r4, #16]
 800c18c:	464a      	mov	r2, r9
 800c18e:	f7fe fe0d 	bl	800adac <memcpy>
 800c192:	89a3      	ldrh	r3, [r4, #12]
 800c194:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c198:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c19c:	81a3      	strh	r3, [r4, #12]
 800c19e:	6126      	str	r6, [r4, #16]
 800c1a0:	6165      	str	r5, [r4, #20]
 800c1a2:	444e      	add	r6, r9
 800c1a4:	eba5 0509 	sub.w	r5, r5, r9
 800c1a8:	6026      	str	r6, [r4, #0]
 800c1aa:	60a5      	str	r5, [r4, #8]
 800c1ac:	463e      	mov	r6, r7
 800c1ae:	42be      	cmp	r6, r7
 800c1b0:	d900      	bls.n	800c1b4 <__ssputs_r+0x72>
 800c1b2:	463e      	mov	r6, r7
 800c1b4:	6820      	ldr	r0, [r4, #0]
 800c1b6:	4632      	mov	r2, r6
 800c1b8:	4641      	mov	r1, r8
 800c1ba:	f000 ffc8 	bl	800d14e <memmove>
 800c1be:	68a3      	ldr	r3, [r4, #8]
 800c1c0:	1b9b      	subs	r3, r3, r6
 800c1c2:	60a3      	str	r3, [r4, #8]
 800c1c4:	6823      	ldr	r3, [r4, #0]
 800c1c6:	4433      	add	r3, r6
 800c1c8:	6023      	str	r3, [r4, #0]
 800c1ca:	2000      	movs	r0, #0
 800c1cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1d0:	462a      	mov	r2, r5
 800c1d2:	f000 ff81 	bl	800d0d8 <_realloc_r>
 800c1d6:	4606      	mov	r6, r0
 800c1d8:	2800      	cmp	r0, #0
 800c1da:	d1e0      	bne.n	800c19e <__ssputs_r+0x5c>
 800c1dc:	6921      	ldr	r1, [r4, #16]
 800c1de:	4650      	mov	r0, sl
 800c1e0:	f001 f842 	bl	800d268 <_free_r>
 800c1e4:	230c      	movs	r3, #12
 800c1e6:	f8ca 3000 	str.w	r3, [sl]
 800c1ea:	89a3      	ldrh	r3, [r4, #12]
 800c1ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1f0:	81a3      	strh	r3, [r4, #12]
 800c1f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c1f6:	e7e9      	b.n	800c1cc <__ssputs_r+0x8a>

0800c1f8 <_svfiprintf_r>:
 800c1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1fc:	4698      	mov	r8, r3
 800c1fe:	898b      	ldrh	r3, [r1, #12]
 800c200:	061b      	lsls	r3, r3, #24
 800c202:	b09d      	sub	sp, #116	@ 0x74
 800c204:	4607      	mov	r7, r0
 800c206:	460d      	mov	r5, r1
 800c208:	4614      	mov	r4, r2
 800c20a:	d510      	bpl.n	800c22e <_svfiprintf_r+0x36>
 800c20c:	690b      	ldr	r3, [r1, #16]
 800c20e:	b973      	cbnz	r3, 800c22e <_svfiprintf_r+0x36>
 800c210:	2140      	movs	r1, #64	@ 0x40
 800c212:	f000 f917 	bl	800c444 <_malloc_r>
 800c216:	6028      	str	r0, [r5, #0]
 800c218:	6128      	str	r0, [r5, #16]
 800c21a:	b930      	cbnz	r0, 800c22a <_svfiprintf_r+0x32>
 800c21c:	230c      	movs	r3, #12
 800c21e:	603b      	str	r3, [r7, #0]
 800c220:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c224:	b01d      	add	sp, #116	@ 0x74
 800c226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c22a:	2340      	movs	r3, #64	@ 0x40
 800c22c:	616b      	str	r3, [r5, #20]
 800c22e:	2300      	movs	r3, #0
 800c230:	9309      	str	r3, [sp, #36]	@ 0x24
 800c232:	2320      	movs	r3, #32
 800c234:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c238:	f8cd 800c 	str.w	r8, [sp, #12]
 800c23c:	2330      	movs	r3, #48	@ 0x30
 800c23e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c3dc <_svfiprintf_r+0x1e4>
 800c242:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c246:	f04f 0901 	mov.w	r9, #1
 800c24a:	4623      	mov	r3, r4
 800c24c:	469a      	mov	sl, r3
 800c24e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c252:	b10a      	cbz	r2, 800c258 <_svfiprintf_r+0x60>
 800c254:	2a25      	cmp	r2, #37	@ 0x25
 800c256:	d1f9      	bne.n	800c24c <_svfiprintf_r+0x54>
 800c258:	ebba 0b04 	subs.w	fp, sl, r4
 800c25c:	d00b      	beq.n	800c276 <_svfiprintf_r+0x7e>
 800c25e:	465b      	mov	r3, fp
 800c260:	4622      	mov	r2, r4
 800c262:	4629      	mov	r1, r5
 800c264:	4638      	mov	r0, r7
 800c266:	f7ff ff6c 	bl	800c142 <__ssputs_r>
 800c26a:	3001      	adds	r0, #1
 800c26c:	f000 80a7 	beq.w	800c3be <_svfiprintf_r+0x1c6>
 800c270:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c272:	445a      	add	r2, fp
 800c274:	9209      	str	r2, [sp, #36]	@ 0x24
 800c276:	f89a 3000 	ldrb.w	r3, [sl]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	f000 809f 	beq.w	800c3be <_svfiprintf_r+0x1c6>
 800c280:	2300      	movs	r3, #0
 800c282:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c286:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c28a:	f10a 0a01 	add.w	sl, sl, #1
 800c28e:	9304      	str	r3, [sp, #16]
 800c290:	9307      	str	r3, [sp, #28]
 800c292:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c296:	931a      	str	r3, [sp, #104]	@ 0x68
 800c298:	4654      	mov	r4, sl
 800c29a:	2205      	movs	r2, #5
 800c29c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2a0:	484e      	ldr	r0, [pc, #312]	@ (800c3dc <_svfiprintf_r+0x1e4>)
 800c2a2:	f7f3 ffc5 	bl	8000230 <memchr>
 800c2a6:	9a04      	ldr	r2, [sp, #16]
 800c2a8:	b9d8      	cbnz	r0, 800c2e2 <_svfiprintf_r+0xea>
 800c2aa:	06d0      	lsls	r0, r2, #27
 800c2ac:	bf44      	itt	mi
 800c2ae:	2320      	movmi	r3, #32
 800c2b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c2b4:	0711      	lsls	r1, r2, #28
 800c2b6:	bf44      	itt	mi
 800c2b8:	232b      	movmi	r3, #43	@ 0x2b
 800c2ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c2be:	f89a 3000 	ldrb.w	r3, [sl]
 800c2c2:	2b2a      	cmp	r3, #42	@ 0x2a
 800c2c4:	d015      	beq.n	800c2f2 <_svfiprintf_r+0xfa>
 800c2c6:	9a07      	ldr	r2, [sp, #28]
 800c2c8:	4654      	mov	r4, sl
 800c2ca:	2000      	movs	r0, #0
 800c2cc:	f04f 0c0a 	mov.w	ip, #10
 800c2d0:	4621      	mov	r1, r4
 800c2d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2d6:	3b30      	subs	r3, #48	@ 0x30
 800c2d8:	2b09      	cmp	r3, #9
 800c2da:	d94b      	bls.n	800c374 <_svfiprintf_r+0x17c>
 800c2dc:	b1b0      	cbz	r0, 800c30c <_svfiprintf_r+0x114>
 800c2de:	9207      	str	r2, [sp, #28]
 800c2e0:	e014      	b.n	800c30c <_svfiprintf_r+0x114>
 800c2e2:	eba0 0308 	sub.w	r3, r0, r8
 800c2e6:	fa09 f303 	lsl.w	r3, r9, r3
 800c2ea:	4313      	orrs	r3, r2
 800c2ec:	9304      	str	r3, [sp, #16]
 800c2ee:	46a2      	mov	sl, r4
 800c2f0:	e7d2      	b.n	800c298 <_svfiprintf_r+0xa0>
 800c2f2:	9b03      	ldr	r3, [sp, #12]
 800c2f4:	1d19      	adds	r1, r3, #4
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	9103      	str	r1, [sp, #12]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	bfbb      	ittet	lt
 800c2fe:	425b      	neglt	r3, r3
 800c300:	f042 0202 	orrlt.w	r2, r2, #2
 800c304:	9307      	strge	r3, [sp, #28]
 800c306:	9307      	strlt	r3, [sp, #28]
 800c308:	bfb8      	it	lt
 800c30a:	9204      	strlt	r2, [sp, #16]
 800c30c:	7823      	ldrb	r3, [r4, #0]
 800c30e:	2b2e      	cmp	r3, #46	@ 0x2e
 800c310:	d10a      	bne.n	800c328 <_svfiprintf_r+0x130>
 800c312:	7863      	ldrb	r3, [r4, #1]
 800c314:	2b2a      	cmp	r3, #42	@ 0x2a
 800c316:	d132      	bne.n	800c37e <_svfiprintf_r+0x186>
 800c318:	9b03      	ldr	r3, [sp, #12]
 800c31a:	1d1a      	adds	r2, r3, #4
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	9203      	str	r2, [sp, #12]
 800c320:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c324:	3402      	adds	r4, #2
 800c326:	9305      	str	r3, [sp, #20]
 800c328:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c3ec <_svfiprintf_r+0x1f4>
 800c32c:	7821      	ldrb	r1, [r4, #0]
 800c32e:	2203      	movs	r2, #3
 800c330:	4650      	mov	r0, sl
 800c332:	f7f3 ff7d 	bl	8000230 <memchr>
 800c336:	b138      	cbz	r0, 800c348 <_svfiprintf_r+0x150>
 800c338:	9b04      	ldr	r3, [sp, #16]
 800c33a:	eba0 000a 	sub.w	r0, r0, sl
 800c33e:	2240      	movs	r2, #64	@ 0x40
 800c340:	4082      	lsls	r2, r0
 800c342:	4313      	orrs	r3, r2
 800c344:	3401      	adds	r4, #1
 800c346:	9304      	str	r3, [sp, #16]
 800c348:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c34c:	4824      	ldr	r0, [pc, #144]	@ (800c3e0 <_svfiprintf_r+0x1e8>)
 800c34e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c352:	2206      	movs	r2, #6
 800c354:	f7f3 ff6c 	bl	8000230 <memchr>
 800c358:	2800      	cmp	r0, #0
 800c35a:	d036      	beq.n	800c3ca <_svfiprintf_r+0x1d2>
 800c35c:	4b21      	ldr	r3, [pc, #132]	@ (800c3e4 <_svfiprintf_r+0x1ec>)
 800c35e:	bb1b      	cbnz	r3, 800c3a8 <_svfiprintf_r+0x1b0>
 800c360:	9b03      	ldr	r3, [sp, #12]
 800c362:	3307      	adds	r3, #7
 800c364:	f023 0307 	bic.w	r3, r3, #7
 800c368:	3308      	adds	r3, #8
 800c36a:	9303      	str	r3, [sp, #12]
 800c36c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c36e:	4433      	add	r3, r6
 800c370:	9309      	str	r3, [sp, #36]	@ 0x24
 800c372:	e76a      	b.n	800c24a <_svfiprintf_r+0x52>
 800c374:	fb0c 3202 	mla	r2, ip, r2, r3
 800c378:	460c      	mov	r4, r1
 800c37a:	2001      	movs	r0, #1
 800c37c:	e7a8      	b.n	800c2d0 <_svfiprintf_r+0xd8>
 800c37e:	2300      	movs	r3, #0
 800c380:	3401      	adds	r4, #1
 800c382:	9305      	str	r3, [sp, #20]
 800c384:	4619      	mov	r1, r3
 800c386:	f04f 0c0a 	mov.w	ip, #10
 800c38a:	4620      	mov	r0, r4
 800c38c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c390:	3a30      	subs	r2, #48	@ 0x30
 800c392:	2a09      	cmp	r2, #9
 800c394:	d903      	bls.n	800c39e <_svfiprintf_r+0x1a6>
 800c396:	2b00      	cmp	r3, #0
 800c398:	d0c6      	beq.n	800c328 <_svfiprintf_r+0x130>
 800c39a:	9105      	str	r1, [sp, #20]
 800c39c:	e7c4      	b.n	800c328 <_svfiprintf_r+0x130>
 800c39e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3a2:	4604      	mov	r4, r0
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	e7f0      	b.n	800c38a <_svfiprintf_r+0x192>
 800c3a8:	ab03      	add	r3, sp, #12
 800c3aa:	9300      	str	r3, [sp, #0]
 800c3ac:	462a      	mov	r2, r5
 800c3ae:	4b0e      	ldr	r3, [pc, #56]	@ (800c3e8 <_svfiprintf_r+0x1f0>)
 800c3b0:	a904      	add	r1, sp, #16
 800c3b2:	4638      	mov	r0, r7
 800c3b4:	f7fc fee4 	bl	8009180 <_printf_float>
 800c3b8:	1c42      	adds	r2, r0, #1
 800c3ba:	4606      	mov	r6, r0
 800c3bc:	d1d6      	bne.n	800c36c <_svfiprintf_r+0x174>
 800c3be:	89ab      	ldrh	r3, [r5, #12]
 800c3c0:	065b      	lsls	r3, r3, #25
 800c3c2:	f53f af2d 	bmi.w	800c220 <_svfiprintf_r+0x28>
 800c3c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c3c8:	e72c      	b.n	800c224 <_svfiprintf_r+0x2c>
 800c3ca:	ab03      	add	r3, sp, #12
 800c3cc:	9300      	str	r3, [sp, #0]
 800c3ce:	462a      	mov	r2, r5
 800c3d0:	4b05      	ldr	r3, [pc, #20]	@ (800c3e8 <_svfiprintf_r+0x1f0>)
 800c3d2:	a904      	add	r1, sp, #16
 800c3d4:	4638      	mov	r0, r7
 800c3d6:	f7fd f96b 	bl	80096b0 <_printf_i>
 800c3da:	e7ed      	b.n	800c3b8 <_svfiprintf_r+0x1c0>
 800c3dc:	0800db4e 	.word	0x0800db4e
 800c3e0:	0800db58 	.word	0x0800db58
 800c3e4:	08009181 	.word	0x08009181
 800c3e8:	0800c143 	.word	0x0800c143
 800c3ec:	0800db54 	.word	0x0800db54

0800c3f0 <malloc>:
 800c3f0:	4b02      	ldr	r3, [pc, #8]	@ (800c3fc <malloc+0xc>)
 800c3f2:	4601      	mov	r1, r0
 800c3f4:	6818      	ldr	r0, [r3, #0]
 800c3f6:	f000 b825 	b.w	800c444 <_malloc_r>
 800c3fa:	bf00      	nop
 800c3fc:	20000188 	.word	0x20000188

0800c400 <sbrk_aligned>:
 800c400:	b570      	push	{r4, r5, r6, lr}
 800c402:	4e0f      	ldr	r6, [pc, #60]	@ (800c440 <sbrk_aligned+0x40>)
 800c404:	460c      	mov	r4, r1
 800c406:	6831      	ldr	r1, [r6, #0]
 800c408:	4605      	mov	r5, r0
 800c40a:	b911      	cbnz	r1, 800c412 <sbrk_aligned+0x12>
 800c40c:	f000 fede 	bl	800d1cc <_sbrk_r>
 800c410:	6030      	str	r0, [r6, #0]
 800c412:	4621      	mov	r1, r4
 800c414:	4628      	mov	r0, r5
 800c416:	f000 fed9 	bl	800d1cc <_sbrk_r>
 800c41a:	1c43      	adds	r3, r0, #1
 800c41c:	d103      	bne.n	800c426 <sbrk_aligned+0x26>
 800c41e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c422:	4620      	mov	r0, r4
 800c424:	bd70      	pop	{r4, r5, r6, pc}
 800c426:	1cc4      	adds	r4, r0, #3
 800c428:	f024 0403 	bic.w	r4, r4, #3
 800c42c:	42a0      	cmp	r0, r4
 800c42e:	d0f8      	beq.n	800c422 <sbrk_aligned+0x22>
 800c430:	1a21      	subs	r1, r4, r0
 800c432:	4628      	mov	r0, r5
 800c434:	f000 feca 	bl	800d1cc <_sbrk_r>
 800c438:	3001      	adds	r0, #1
 800c43a:	d1f2      	bne.n	800c422 <sbrk_aligned+0x22>
 800c43c:	e7ef      	b.n	800c41e <sbrk_aligned+0x1e>
 800c43e:	bf00      	nop
 800c440:	20004528 	.word	0x20004528

0800c444 <_malloc_r>:
 800c444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c448:	1ccd      	adds	r5, r1, #3
 800c44a:	f025 0503 	bic.w	r5, r5, #3
 800c44e:	3508      	adds	r5, #8
 800c450:	2d0c      	cmp	r5, #12
 800c452:	bf38      	it	cc
 800c454:	250c      	movcc	r5, #12
 800c456:	2d00      	cmp	r5, #0
 800c458:	4606      	mov	r6, r0
 800c45a:	db01      	blt.n	800c460 <_malloc_r+0x1c>
 800c45c:	42a9      	cmp	r1, r5
 800c45e:	d904      	bls.n	800c46a <_malloc_r+0x26>
 800c460:	230c      	movs	r3, #12
 800c462:	6033      	str	r3, [r6, #0]
 800c464:	2000      	movs	r0, #0
 800c466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c46a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c540 <_malloc_r+0xfc>
 800c46e:	f000 f927 	bl	800c6c0 <__malloc_lock>
 800c472:	f8d8 3000 	ldr.w	r3, [r8]
 800c476:	461c      	mov	r4, r3
 800c478:	bb44      	cbnz	r4, 800c4cc <_malloc_r+0x88>
 800c47a:	4629      	mov	r1, r5
 800c47c:	4630      	mov	r0, r6
 800c47e:	f7ff ffbf 	bl	800c400 <sbrk_aligned>
 800c482:	1c43      	adds	r3, r0, #1
 800c484:	4604      	mov	r4, r0
 800c486:	d158      	bne.n	800c53a <_malloc_r+0xf6>
 800c488:	f8d8 4000 	ldr.w	r4, [r8]
 800c48c:	4627      	mov	r7, r4
 800c48e:	2f00      	cmp	r7, #0
 800c490:	d143      	bne.n	800c51a <_malloc_r+0xd6>
 800c492:	2c00      	cmp	r4, #0
 800c494:	d04b      	beq.n	800c52e <_malloc_r+0xea>
 800c496:	6823      	ldr	r3, [r4, #0]
 800c498:	4639      	mov	r1, r7
 800c49a:	4630      	mov	r0, r6
 800c49c:	eb04 0903 	add.w	r9, r4, r3
 800c4a0:	f000 fe94 	bl	800d1cc <_sbrk_r>
 800c4a4:	4581      	cmp	r9, r0
 800c4a6:	d142      	bne.n	800c52e <_malloc_r+0xea>
 800c4a8:	6821      	ldr	r1, [r4, #0]
 800c4aa:	1a6d      	subs	r5, r5, r1
 800c4ac:	4629      	mov	r1, r5
 800c4ae:	4630      	mov	r0, r6
 800c4b0:	f7ff ffa6 	bl	800c400 <sbrk_aligned>
 800c4b4:	3001      	adds	r0, #1
 800c4b6:	d03a      	beq.n	800c52e <_malloc_r+0xea>
 800c4b8:	6823      	ldr	r3, [r4, #0]
 800c4ba:	442b      	add	r3, r5
 800c4bc:	6023      	str	r3, [r4, #0]
 800c4be:	f8d8 3000 	ldr.w	r3, [r8]
 800c4c2:	685a      	ldr	r2, [r3, #4]
 800c4c4:	bb62      	cbnz	r2, 800c520 <_malloc_r+0xdc>
 800c4c6:	f8c8 7000 	str.w	r7, [r8]
 800c4ca:	e00f      	b.n	800c4ec <_malloc_r+0xa8>
 800c4cc:	6822      	ldr	r2, [r4, #0]
 800c4ce:	1b52      	subs	r2, r2, r5
 800c4d0:	d420      	bmi.n	800c514 <_malloc_r+0xd0>
 800c4d2:	2a0b      	cmp	r2, #11
 800c4d4:	d917      	bls.n	800c506 <_malloc_r+0xc2>
 800c4d6:	1961      	adds	r1, r4, r5
 800c4d8:	42a3      	cmp	r3, r4
 800c4da:	6025      	str	r5, [r4, #0]
 800c4dc:	bf18      	it	ne
 800c4de:	6059      	strne	r1, [r3, #4]
 800c4e0:	6863      	ldr	r3, [r4, #4]
 800c4e2:	bf08      	it	eq
 800c4e4:	f8c8 1000 	streq.w	r1, [r8]
 800c4e8:	5162      	str	r2, [r4, r5]
 800c4ea:	604b      	str	r3, [r1, #4]
 800c4ec:	4630      	mov	r0, r6
 800c4ee:	f000 f8ed 	bl	800c6cc <__malloc_unlock>
 800c4f2:	f104 000b 	add.w	r0, r4, #11
 800c4f6:	1d23      	adds	r3, r4, #4
 800c4f8:	f020 0007 	bic.w	r0, r0, #7
 800c4fc:	1ac2      	subs	r2, r0, r3
 800c4fe:	bf1c      	itt	ne
 800c500:	1a1b      	subne	r3, r3, r0
 800c502:	50a3      	strne	r3, [r4, r2]
 800c504:	e7af      	b.n	800c466 <_malloc_r+0x22>
 800c506:	6862      	ldr	r2, [r4, #4]
 800c508:	42a3      	cmp	r3, r4
 800c50a:	bf0c      	ite	eq
 800c50c:	f8c8 2000 	streq.w	r2, [r8]
 800c510:	605a      	strne	r2, [r3, #4]
 800c512:	e7eb      	b.n	800c4ec <_malloc_r+0xa8>
 800c514:	4623      	mov	r3, r4
 800c516:	6864      	ldr	r4, [r4, #4]
 800c518:	e7ae      	b.n	800c478 <_malloc_r+0x34>
 800c51a:	463c      	mov	r4, r7
 800c51c:	687f      	ldr	r7, [r7, #4]
 800c51e:	e7b6      	b.n	800c48e <_malloc_r+0x4a>
 800c520:	461a      	mov	r2, r3
 800c522:	685b      	ldr	r3, [r3, #4]
 800c524:	42a3      	cmp	r3, r4
 800c526:	d1fb      	bne.n	800c520 <_malloc_r+0xdc>
 800c528:	2300      	movs	r3, #0
 800c52a:	6053      	str	r3, [r2, #4]
 800c52c:	e7de      	b.n	800c4ec <_malloc_r+0xa8>
 800c52e:	230c      	movs	r3, #12
 800c530:	6033      	str	r3, [r6, #0]
 800c532:	4630      	mov	r0, r6
 800c534:	f000 f8ca 	bl	800c6cc <__malloc_unlock>
 800c538:	e794      	b.n	800c464 <_malloc_r+0x20>
 800c53a:	6005      	str	r5, [r0, #0]
 800c53c:	e7d6      	b.n	800c4ec <_malloc_r+0xa8>
 800c53e:	bf00      	nop
 800c540:	2000452c 	.word	0x2000452c

0800c544 <__ascii_mbtowc>:
 800c544:	b082      	sub	sp, #8
 800c546:	b901      	cbnz	r1, 800c54a <__ascii_mbtowc+0x6>
 800c548:	a901      	add	r1, sp, #4
 800c54a:	b142      	cbz	r2, 800c55e <__ascii_mbtowc+0x1a>
 800c54c:	b14b      	cbz	r3, 800c562 <__ascii_mbtowc+0x1e>
 800c54e:	7813      	ldrb	r3, [r2, #0]
 800c550:	600b      	str	r3, [r1, #0]
 800c552:	7812      	ldrb	r2, [r2, #0]
 800c554:	1e10      	subs	r0, r2, #0
 800c556:	bf18      	it	ne
 800c558:	2001      	movne	r0, #1
 800c55a:	b002      	add	sp, #8
 800c55c:	4770      	bx	lr
 800c55e:	4610      	mov	r0, r2
 800c560:	e7fb      	b.n	800c55a <__ascii_mbtowc+0x16>
 800c562:	f06f 0001 	mvn.w	r0, #1
 800c566:	e7f8      	b.n	800c55a <__ascii_mbtowc+0x16>

0800c568 <__sflush_r>:
 800c568:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c56c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c570:	0716      	lsls	r6, r2, #28
 800c572:	4605      	mov	r5, r0
 800c574:	460c      	mov	r4, r1
 800c576:	d454      	bmi.n	800c622 <__sflush_r+0xba>
 800c578:	684b      	ldr	r3, [r1, #4]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	dc02      	bgt.n	800c584 <__sflush_r+0x1c>
 800c57e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c580:	2b00      	cmp	r3, #0
 800c582:	dd48      	ble.n	800c616 <__sflush_r+0xae>
 800c584:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c586:	2e00      	cmp	r6, #0
 800c588:	d045      	beq.n	800c616 <__sflush_r+0xae>
 800c58a:	2300      	movs	r3, #0
 800c58c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c590:	682f      	ldr	r7, [r5, #0]
 800c592:	6a21      	ldr	r1, [r4, #32]
 800c594:	602b      	str	r3, [r5, #0]
 800c596:	d030      	beq.n	800c5fa <__sflush_r+0x92>
 800c598:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c59a:	89a3      	ldrh	r3, [r4, #12]
 800c59c:	0759      	lsls	r1, r3, #29
 800c59e:	d505      	bpl.n	800c5ac <__sflush_r+0x44>
 800c5a0:	6863      	ldr	r3, [r4, #4]
 800c5a2:	1ad2      	subs	r2, r2, r3
 800c5a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c5a6:	b10b      	cbz	r3, 800c5ac <__sflush_r+0x44>
 800c5a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c5aa:	1ad2      	subs	r2, r2, r3
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c5b0:	6a21      	ldr	r1, [r4, #32]
 800c5b2:	4628      	mov	r0, r5
 800c5b4:	47b0      	blx	r6
 800c5b6:	1c43      	adds	r3, r0, #1
 800c5b8:	89a3      	ldrh	r3, [r4, #12]
 800c5ba:	d106      	bne.n	800c5ca <__sflush_r+0x62>
 800c5bc:	6829      	ldr	r1, [r5, #0]
 800c5be:	291d      	cmp	r1, #29
 800c5c0:	d82b      	bhi.n	800c61a <__sflush_r+0xb2>
 800c5c2:	4a2a      	ldr	r2, [pc, #168]	@ (800c66c <__sflush_r+0x104>)
 800c5c4:	40ca      	lsrs	r2, r1
 800c5c6:	07d6      	lsls	r6, r2, #31
 800c5c8:	d527      	bpl.n	800c61a <__sflush_r+0xb2>
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	6062      	str	r2, [r4, #4]
 800c5ce:	04d9      	lsls	r1, r3, #19
 800c5d0:	6922      	ldr	r2, [r4, #16]
 800c5d2:	6022      	str	r2, [r4, #0]
 800c5d4:	d504      	bpl.n	800c5e0 <__sflush_r+0x78>
 800c5d6:	1c42      	adds	r2, r0, #1
 800c5d8:	d101      	bne.n	800c5de <__sflush_r+0x76>
 800c5da:	682b      	ldr	r3, [r5, #0]
 800c5dc:	b903      	cbnz	r3, 800c5e0 <__sflush_r+0x78>
 800c5de:	6560      	str	r0, [r4, #84]	@ 0x54
 800c5e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c5e2:	602f      	str	r7, [r5, #0]
 800c5e4:	b1b9      	cbz	r1, 800c616 <__sflush_r+0xae>
 800c5e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c5ea:	4299      	cmp	r1, r3
 800c5ec:	d002      	beq.n	800c5f4 <__sflush_r+0x8c>
 800c5ee:	4628      	mov	r0, r5
 800c5f0:	f000 fe3a 	bl	800d268 <_free_r>
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	6363      	str	r3, [r4, #52]	@ 0x34
 800c5f8:	e00d      	b.n	800c616 <__sflush_r+0xae>
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	4628      	mov	r0, r5
 800c5fe:	47b0      	blx	r6
 800c600:	4602      	mov	r2, r0
 800c602:	1c50      	adds	r0, r2, #1
 800c604:	d1c9      	bne.n	800c59a <__sflush_r+0x32>
 800c606:	682b      	ldr	r3, [r5, #0]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d0c6      	beq.n	800c59a <__sflush_r+0x32>
 800c60c:	2b1d      	cmp	r3, #29
 800c60e:	d001      	beq.n	800c614 <__sflush_r+0xac>
 800c610:	2b16      	cmp	r3, #22
 800c612:	d11e      	bne.n	800c652 <__sflush_r+0xea>
 800c614:	602f      	str	r7, [r5, #0]
 800c616:	2000      	movs	r0, #0
 800c618:	e022      	b.n	800c660 <__sflush_r+0xf8>
 800c61a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c61e:	b21b      	sxth	r3, r3
 800c620:	e01b      	b.n	800c65a <__sflush_r+0xf2>
 800c622:	690f      	ldr	r7, [r1, #16]
 800c624:	2f00      	cmp	r7, #0
 800c626:	d0f6      	beq.n	800c616 <__sflush_r+0xae>
 800c628:	0793      	lsls	r3, r2, #30
 800c62a:	680e      	ldr	r6, [r1, #0]
 800c62c:	bf08      	it	eq
 800c62e:	694b      	ldreq	r3, [r1, #20]
 800c630:	600f      	str	r7, [r1, #0]
 800c632:	bf18      	it	ne
 800c634:	2300      	movne	r3, #0
 800c636:	eba6 0807 	sub.w	r8, r6, r7
 800c63a:	608b      	str	r3, [r1, #8]
 800c63c:	f1b8 0f00 	cmp.w	r8, #0
 800c640:	dde9      	ble.n	800c616 <__sflush_r+0xae>
 800c642:	6a21      	ldr	r1, [r4, #32]
 800c644:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c646:	4643      	mov	r3, r8
 800c648:	463a      	mov	r2, r7
 800c64a:	4628      	mov	r0, r5
 800c64c:	47b0      	blx	r6
 800c64e:	2800      	cmp	r0, #0
 800c650:	dc08      	bgt.n	800c664 <__sflush_r+0xfc>
 800c652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c656:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c65a:	81a3      	strh	r3, [r4, #12]
 800c65c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c664:	4407      	add	r7, r0
 800c666:	eba8 0800 	sub.w	r8, r8, r0
 800c66a:	e7e7      	b.n	800c63c <__sflush_r+0xd4>
 800c66c:	20400001 	.word	0x20400001

0800c670 <_fflush_r>:
 800c670:	b538      	push	{r3, r4, r5, lr}
 800c672:	690b      	ldr	r3, [r1, #16]
 800c674:	4605      	mov	r5, r0
 800c676:	460c      	mov	r4, r1
 800c678:	b913      	cbnz	r3, 800c680 <_fflush_r+0x10>
 800c67a:	2500      	movs	r5, #0
 800c67c:	4628      	mov	r0, r5
 800c67e:	bd38      	pop	{r3, r4, r5, pc}
 800c680:	b118      	cbz	r0, 800c68a <_fflush_r+0x1a>
 800c682:	6a03      	ldr	r3, [r0, #32]
 800c684:	b90b      	cbnz	r3, 800c68a <_fflush_r+0x1a>
 800c686:	f7fd fc23 	bl	8009ed0 <__sinit>
 800c68a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d0f3      	beq.n	800c67a <_fflush_r+0xa>
 800c692:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c694:	07d0      	lsls	r0, r2, #31
 800c696:	d404      	bmi.n	800c6a2 <_fflush_r+0x32>
 800c698:	0599      	lsls	r1, r3, #22
 800c69a:	d402      	bmi.n	800c6a2 <_fflush_r+0x32>
 800c69c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c69e:	f7fe fb7e 	bl	800ad9e <__retarget_lock_acquire_recursive>
 800c6a2:	4628      	mov	r0, r5
 800c6a4:	4621      	mov	r1, r4
 800c6a6:	f7ff ff5f 	bl	800c568 <__sflush_r>
 800c6aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c6ac:	07da      	lsls	r2, r3, #31
 800c6ae:	4605      	mov	r5, r0
 800c6b0:	d4e4      	bmi.n	800c67c <_fflush_r+0xc>
 800c6b2:	89a3      	ldrh	r3, [r4, #12]
 800c6b4:	059b      	lsls	r3, r3, #22
 800c6b6:	d4e1      	bmi.n	800c67c <_fflush_r+0xc>
 800c6b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c6ba:	f7fe fb71 	bl	800ada0 <__retarget_lock_release_recursive>
 800c6be:	e7dd      	b.n	800c67c <_fflush_r+0xc>

0800c6c0 <__malloc_lock>:
 800c6c0:	4801      	ldr	r0, [pc, #4]	@ (800c6c8 <__malloc_lock+0x8>)
 800c6c2:	f7fe bb6c 	b.w	800ad9e <__retarget_lock_acquire_recursive>
 800c6c6:	bf00      	nop
 800c6c8:	20004524 	.word	0x20004524

0800c6cc <__malloc_unlock>:
 800c6cc:	4801      	ldr	r0, [pc, #4]	@ (800c6d4 <__malloc_unlock+0x8>)
 800c6ce:	f7fe bb67 	b.w	800ada0 <__retarget_lock_release_recursive>
 800c6d2:	bf00      	nop
 800c6d4:	20004524 	.word	0x20004524

0800c6d8 <_Balloc>:
 800c6d8:	b570      	push	{r4, r5, r6, lr}
 800c6da:	69c6      	ldr	r6, [r0, #28]
 800c6dc:	4604      	mov	r4, r0
 800c6de:	460d      	mov	r5, r1
 800c6e0:	b976      	cbnz	r6, 800c700 <_Balloc+0x28>
 800c6e2:	2010      	movs	r0, #16
 800c6e4:	f7ff fe84 	bl	800c3f0 <malloc>
 800c6e8:	4602      	mov	r2, r0
 800c6ea:	61e0      	str	r0, [r4, #28]
 800c6ec:	b920      	cbnz	r0, 800c6f8 <_Balloc+0x20>
 800c6ee:	4b18      	ldr	r3, [pc, #96]	@ (800c750 <_Balloc+0x78>)
 800c6f0:	4818      	ldr	r0, [pc, #96]	@ (800c754 <_Balloc+0x7c>)
 800c6f2:	216b      	movs	r1, #107	@ 0x6b
 800c6f4:	f7fe fb76 	bl	800ade4 <__assert_func>
 800c6f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c6fc:	6006      	str	r6, [r0, #0]
 800c6fe:	60c6      	str	r6, [r0, #12]
 800c700:	69e6      	ldr	r6, [r4, #28]
 800c702:	68f3      	ldr	r3, [r6, #12]
 800c704:	b183      	cbz	r3, 800c728 <_Balloc+0x50>
 800c706:	69e3      	ldr	r3, [r4, #28]
 800c708:	68db      	ldr	r3, [r3, #12]
 800c70a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c70e:	b9b8      	cbnz	r0, 800c740 <_Balloc+0x68>
 800c710:	2101      	movs	r1, #1
 800c712:	fa01 f605 	lsl.w	r6, r1, r5
 800c716:	1d72      	adds	r2, r6, #5
 800c718:	0092      	lsls	r2, r2, #2
 800c71a:	4620      	mov	r0, r4
 800c71c:	f000 fd8f 	bl	800d23e <_calloc_r>
 800c720:	b160      	cbz	r0, 800c73c <_Balloc+0x64>
 800c722:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c726:	e00e      	b.n	800c746 <_Balloc+0x6e>
 800c728:	2221      	movs	r2, #33	@ 0x21
 800c72a:	2104      	movs	r1, #4
 800c72c:	4620      	mov	r0, r4
 800c72e:	f000 fd86 	bl	800d23e <_calloc_r>
 800c732:	69e3      	ldr	r3, [r4, #28]
 800c734:	60f0      	str	r0, [r6, #12]
 800c736:	68db      	ldr	r3, [r3, #12]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d1e4      	bne.n	800c706 <_Balloc+0x2e>
 800c73c:	2000      	movs	r0, #0
 800c73e:	bd70      	pop	{r4, r5, r6, pc}
 800c740:	6802      	ldr	r2, [r0, #0]
 800c742:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c746:	2300      	movs	r3, #0
 800c748:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c74c:	e7f7      	b.n	800c73e <_Balloc+0x66>
 800c74e:	bf00      	nop
 800c750:	0800d9c3 	.word	0x0800d9c3
 800c754:	0800db5f 	.word	0x0800db5f

0800c758 <_Bfree>:
 800c758:	b570      	push	{r4, r5, r6, lr}
 800c75a:	69c6      	ldr	r6, [r0, #28]
 800c75c:	4605      	mov	r5, r0
 800c75e:	460c      	mov	r4, r1
 800c760:	b976      	cbnz	r6, 800c780 <_Bfree+0x28>
 800c762:	2010      	movs	r0, #16
 800c764:	f7ff fe44 	bl	800c3f0 <malloc>
 800c768:	4602      	mov	r2, r0
 800c76a:	61e8      	str	r0, [r5, #28]
 800c76c:	b920      	cbnz	r0, 800c778 <_Bfree+0x20>
 800c76e:	4b09      	ldr	r3, [pc, #36]	@ (800c794 <_Bfree+0x3c>)
 800c770:	4809      	ldr	r0, [pc, #36]	@ (800c798 <_Bfree+0x40>)
 800c772:	218f      	movs	r1, #143	@ 0x8f
 800c774:	f7fe fb36 	bl	800ade4 <__assert_func>
 800c778:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c77c:	6006      	str	r6, [r0, #0]
 800c77e:	60c6      	str	r6, [r0, #12]
 800c780:	b13c      	cbz	r4, 800c792 <_Bfree+0x3a>
 800c782:	69eb      	ldr	r3, [r5, #28]
 800c784:	6862      	ldr	r2, [r4, #4]
 800c786:	68db      	ldr	r3, [r3, #12]
 800c788:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c78c:	6021      	str	r1, [r4, #0]
 800c78e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c792:	bd70      	pop	{r4, r5, r6, pc}
 800c794:	0800d9c3 	.word	0x0800d9c3
 800c798:	0800db5f 	.word	0x0800db5f

0800c79c <__multadd>:
 800c79c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7a0:	690d      	ldr	r5, [r1, #16]
 800c7a2:	4607      	mov	r7, r0
 800c7a4:	460c      	mov	r4, r1
 800c7a6:	461e      	mov	r6, r3
 800c7a8:	f101 0c14 	add.w	ip, r1, #20
 800c7ac:	2000      	movs	r0, #0
 800c7ae:	f8dc 3000 	ldr.w	r3, [ip]
 800c7b2:	b299      	uxth	r1, r3
 800c7b4:	fb02 6101 	mla	r1, r2, r1, r6
 800c7b8:	0c1e      	lsrs	r6, r3, #16
 800c7ba:	0c0b      	lsrs	r3, r1, #16
 800c7bc:	fb02 3306 	mla	r3, r2, r6, r3
 800c7c0:	b289      	uxth	r1, r1
 800c7c2:	3001      	adds	r0, #1
 800c7c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c7c8:	4285      	cmp	r5, r0
 800c7ca:	f84c 1b04 	str.w	r1, [ip], #4
 800c7ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c7d2:	dcec      	bgt.n	800c7ae <__multadd+0x12>
 800c7d4:	b30e      	cbz	r6, 800c81a <__multadd+0x7e>
 800c7d6:	68a3      	ldr	r3, [r4, #8]
 800c7d8:	42ab      	cmp	r3, r5
 800c7da:	dc19      	bgt.n	800c810 <__multadd+0x74>
 800c7dc:	6861      	ldr	r1, [r4, #4]
 800c7de:	4638      	mov	r0, r7
 800c7e0:	3101      	adds	r1, #1
 800c7e2:	f7ff ff79 	bl	800c6d8 <_Balloc>
 800c7e6:	4680      	mov	r8, r0
 800c7e8:	b928      	cbnz	r0, 800c7f6 <__multadd+0x5a>
 800c7ea:	4602      	mov	r2, r0
 800c7ec:	4b0c      	ldr	r3, [pc, #48]	@ (800c820 <__multadd+0x84>)
 800c7ee:	480d      	ldr	r0, [pc, #52]	@ (800c824 <__multadd+0x88>)
 800c7f0:	21ba      	movs	r1, #186	@ 0xba
 800c7f2:	f7fe faf7 	bl	800ade4 <__assert_func>
 800c7f6:	6922      	ldr	r2, [r4, #16]
 800c7f8:	3202      	adds	r2, #2
 800c7fa:	f104 010c 	add.w	r1, r4, #12
 800c7fe:	0092      	lsls	r2, r2, #2
 800c800:	300c      	adds	r0, #12
 800c802:	f7fe fad3 	bl	800adac <memcpy>
 800c806:	4621      	mov	r1, r4
 800c808:	4638      	mov	r0, r7
 800c80a:	f7ff ffa5 	bl	800c758 <_Bfree>
 800c80e:	4644      	mov	r4, r8
 800c810:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c814:	3501      	adds	r5, #1
 800c816:	615e      	str	r6, [r3, #20]
 800c818:	6125      	str	r5, [r4, #16]
 800c81a:	4620      	mov	r0, r4
 800c81c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c820:	0800dadd 	.word	0x0800dadd
 800c824:	0800db5f 	.word	0x0800db5f

0800c828 <__s2b>:
 800c828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c82c:	460c      	mov	r4, r1
 800c82e:	4615      	mov	r5, r2
 800c830:	461f      	mov	r7, r3
 800c832:	2209      	movs	r2, #9
 800c834:	3308      	adds	r3, #8
 800c836:	4606      	mov	r6, r0
 800c838:	fb93 f3f2 	sdiv	r3, r3, r2
 800c83c:	2100      	movs	r1, #0
 800c83e:	2201      	movs	r2, #1
 800c840:	429a      	cmp	r2, r3
 800c842:	db09      	blt.n	800c858 <__s2b+0x30>
 800c844:	4630      	mov	r0, r6
 800c846:	f7ff ff47 	bl	800c6d8 <_Balloc>
 800c84a:	b940      	cbnz	r0, 800c85e <__s2b+0x36>
 800c84c:	4602      	mov	r2, r0
 800c84e:	4b19      	ldr	r3, [pc, #100]	@ (800c8b4 <__s2b+0x8c>)
 800c850:	4819      	ldr	r0, [pc, #100]	@ (800c8b8 <__s2b+0x90>)
 800c852:	21d3      	movs	r1, #211	@ 0xd3
 800c854:	f7fe fac6 	bl	800ade4 <__assert_func>
 800c858:	0052      	lsls	r2, r2, #1
 800c85a:	3101      	adds	r1, #1
 800c85c:	e7f0      	b.n	800c840 <__s2b+0x18>
 800c85e:	9b08      	ldr	r3, [sp, #32]
 800c860:	6143      	str	r3, [r0, #20]
 800c862:	2d09      	cmp	r5, #9
 800c864:	f04f 0301 	mov.w	r3, #1
 800c868:	6103      	str	r3, [r0, #16]
 800c86a:	dd16      	ble.n	800c89a <__s2b+0x72>
 800c86c:	f104 0909 	add.w	r9, r4, #9
 800c870:	46c8      	mov	r8, r9
 800c872:	442c      	add	r4, r5
 800c874:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c878:	4601      	mov	r1, r0
 800c87a:	3b30      	subs	r3, #48	@ 0x30
 800c87c:	220a      	movs	r2, #10
 800c87e:	4630      	mov	r0, r6
 800c880:	f7ff ff8c 	bl	800c79c <__multadd>
 800c884:	45a0      	cmp	r8, r4
 800c886:	d1f5      	bne.n	800c874 <__s2b+0x4c>
 800c888:	f1a5 0408 	sub.w	r4, r5, #8
 800c88c:	444c      	add	r4, r9
 800c88e:	1b2d      	subs	r5, r5, r4
 800c890:	1963      	adds	r3, r4, r5
 800c892:	42bb      	cmp	r3, r7
 800c894:	db04      	blt.n	800c8a0 <__s2b+0x78>
 800c896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c89a:	340a      	adds	r4, #10
 800c89c:	2509      	movs	r5, #9
 800c89e:	e7f6      	b.n	800c88e <__s2b+0x66>
 800c8a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c8a4:	4601      	mov	r1, r0
 800c8a6:	3b30      	subs	r3, #48	@ 0x30
 800c8a8:	220a      	movs	r2, #10
 800c8aa:	4630      	mov	r0, r6
 800c8ac:	f7ff ff76 	bl	800c79c <__multadd>
 800c8b0:	e7ee      	b.n	800c890 <__s2b+0x68>
 800c8b2:	bf00      	nop
 800c8b4:	0800dadd 	.word	0x0800dadd
 800c8b8:	0800db5f 	.word	0x0800db5f

0800c8bc <__hi0bits>:
 800c8bc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	bf36      	itet	cc
 800c8c4:	0403      	lslcc	r3, r0, #16
 800c8c6:	2000      	movcs	r0, #0
 800c8c8:	2010      	movcc	r0, #16
 800c8ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c8ce:	bf3c      	itt	cc
 800c8d0:	021b      	lslcc	r3, r3, #8
 800c8d2:	3008      	addcc	r0, #8
 800c8d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c8d8:	bf3c      	itt	cc
 800c8da:	011b      	lslcc	r3, r3, #4
 800c8dc:	3004      	addcc	r0, #4
 800c8de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c8e2:	bf3c      	itt	cc
 800c8e4:	009b      	lslcc	r3, r3, #2
 800c8e6:	3002      	addcc	r0, #2
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	db05      	blt.n	800c8f8 <__hi0bits+0x3c>
 800c8ec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c8f0:	f100 0001 	add.w	r0, r0, #1
 800c8f4:	bf08      	it	eq
 800c8f6:	2020      	moveq	r0, #32
 800c8f8:	4770      	bx	lr

0800c8fa <__lo0bits>:
 800c8fa:	6803      	ldr	r3, [r0, #0]
 800c8fc:	4602      	mov	r2, r0
 800c8fe:	f013 0007 	ands.w	r0, r3, #7
 800c902:	d00b      	beq.n	800c91c <__lo0bits+0x22>
 800c904:	07d9      	lsls	r1, r3, #31
 800c906:	d421      	bmi.n	800c94c <__lo0bits+0x52>
 800c908:	0798      	lsls	r0, r3, #30
 800c90a:	bf49      	itett	mi
 800c90c:	085b      	lsrmi	r3, r3, #1
 800c90e:	089b      	lsrpl	r3, r3, #2
 800c910:	2001      	movmi	r0, #1
 800c912:	6013      	strmi	r3, [r2, #0]
 800c914:	bf5c      	itt	pl
 800c916:	6013      	strpl	r3, [r2, #0]
 800c918:	2002      	movpl	r0, #2
 800c91a:	4770      	bx	lr
 800c91c:	b299      	uxth	r1, r3
 800c91e:	b909      	cbnz	r1, 800c924 <__lo0bits+0x2a>
 800c920:	0c1b      	lsrs	r3, r3, #16
 800c922:	2010      	movs	r0, #16
 800c924:	b2d9      	uxtb	r1, r3
 800c926:	b909      	cbnz	r1, 800c92c <__lo0bits+0x32>
 800c928:	3008      	adds	r0, #8
 800c92a:	0a1b      	lsrs	r3, r3, #8
 800c92c:	0719      	lsls	r1, r3, #28
 800c92e:	bf04      	itt	eq
 800c930:	091b      	lsreq	r3, r3, #4
 800c932:	3004      	addeq	r0, #4
 800c934:	0799      	lsls	r1, r3, #30
 800c936:	bf04      	itt	eq
 800c938:	089b      	lsreq	r3, r3, #2
 800c93a:	3002      	addeq	r0, #2
 800c93c:	07d9      	lsls	r1, r3, #31
 800c93e:	d403      	bmi.n	800c948 <__lo0bits+0x4e>
 800c940:	085b      	lsrs	r3, r3, #1
 800c942:	f100 0001 	add.w	r0, r0, #1
 800c946:	d003      	beq.n	800c950 <__lo0bits+0x56>
 800c948:	6013      	str	r3, [r2, #0]
 800c94a:	4770      	bx	lr
 800c94c:	2000      	movs	r0, #0
 800c94e:	4770      	bx	lr
 800c950:	2020      	movs	r0, #32
 800c952:	4770      	bx	lr

0800c954 <__i2b>:
 800c954:	b510      	push	{r4, lr}
 800c956:	460c      	mov	r4, r1
 800c958:	2101      	movs	r1, #1
 800c95a:	f7ff febd 	bl	800c6d8 <_Balloc>
 800c95e:	4602      	mov	r2, r0
 800c960:	b928      	cbnz	r0, 800c96e <__i2b+0x1a>
 800c962:	4b05      	ldr	r3, [pc, #20]	@ (800c978 <__i2b+0x24>)
 800c964:	4805      	ldr	r0, [pc, #20]	@ (800c97c <__i2b+0x28>)
 800c966:	f240 1145 	movw	r1, #325	@ 0x145
 800c96a:	f7fe fa3b 	bl	800ade4 <__assert_func>
 800c96e:	2301      	movs	r3, #1
 800c970:	6144      	str	r4, [r0, #20]
 800c972:	6103      	str	r3, [r0, #16]
 800c974:	bd10      	pop	{r4, pc}
 800c976:	bf00      	nop
 800c978:	0800dadd 	.word	0x0800dadd
 800c97c:	0800db5f 	.word	0x0800db5f

0800c980 <__multiply>:
 800c980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c984:	4617      	mov	r7, r2
 800c986:	690a      	ldr	r2, [r1, #16]
 800c988:	693b      	ldr	r3, [r7, #16]
 800c98a:	429a      	cmp	r2, r3
 800c98c:	bfa8      	it	ge
 800c98e:	463b      	movge	r3, r7
 800c990:	4689      	mov	r9, r1
 800c992:	bfa4      	itt	ge
 800c994:	460f      	movge	r7, r1
 800c996:	4699      	movge	r9, r3
 800c998:	693d      	ldr	r5, [r7, #16]
 800c99a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c99e:	68bb      	ldr	r3, [r7, #8]
 800c9a0:	6879      	ldr	r1, [r7, #4]
 800c9a2:	eb05 060a 	add.w	r6, r5, sl
 800c9a6:	42b3      	cmp	r3, r6
 800c9a8:	b085      	sub	sp, #20
 800c9aa:	bfb8      	it	lt
 800c9ac:	3101      	addlt	r1, #1
 800c9ae:	f7ff fe93 	bl	800c6d8 <_Balloc>
 800c9b2:	b930      	cbnz	r0, 800c9c2 <__multiply+0x42>
 800c9b4:	4602      	mov	r2, r0
 800c9b6:	4b41      	ldr	r3, [pc, #260]	@ (800cabc <__multiply+0x13c>)
 800c9b8:	4841      	ldr	r0, [pc, #260]	@ (800cac0 <__multiply+0x140>)
 800c9ba:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c9be:	f7fe fa11 	bl	800ade4 <__assert_func>
 800c9c2:	f100 0414 	add.w	r4, r0, #20
 800c9c6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c9ca:	4623      	mov	r3, r4
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	4573      	cmp	r3, lr
 800c9d0:	d320      	bcc.n	800ca14 <__multiply+0x94>
 800c9d2:	f107 0814 	add.w	r8, r7, #20
 800c9d6:	f109 0114 	add.w	r1, r9, #20
 800c9da:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c9de:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c9e2:	9302      	str	r3, [sp, #8]
 800c9e4:	1beb      	subs	r3, r5, r7
 800c9e6:	3b15      	subs	r3, #21
 800c9e8:	f023 0303 	bic.w	r3, r3, #3
 800c9ec:	3304      	adds	r3, #4
 800c9ee:	3715      	adds	r7, #21
 800c9f0:	42bd      	cmp	r5, r7
 800c9f2:	bf38      	it	cc
 800c9f4:	2304      	movcc	r3, #4
 800c9f6:	9301      	str	r3, [sp, #4]
 800c9f8:	9b02      	ldr	r3, [sp, #8]
 800c9fa:	9103      	str	r1, [sp, #12]
 800c9fc:	428b      	cmp	r3, r1
 800c9fe:	d80c      	bhi.n	800ca1a <__multiply+0x9a>
 800ca00:	2e00      	cmp	r6, #0
 800ca02:	dd03      	ble.n	800ca0c <__multiply+0x8c>
 800ca04:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d055      	beq.n	800cab8 <__multiply+0x138>
 800ca0c:	6106      	str	r6, [r0, #16]
 800ca0e:	b005      	add	sp, #20
 800ca10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca14:	f843 2b04 	str.w	r2, [r3], #4
 800ca18:	e7d9      	b.n	800c9ce <__multiply+0x4e>
 800ca1a:	f8b1 a000 	ldrh.w	sl, [r1]
 800ca1e:	f1ba 0f00 	cmp.w	sl, #0
 800ca22:	d01f      	beq.n	800ca64 <__multiply+0xe4>
 800ca24:	46c4      	mov	ip, r8
 800ca26:	46a1      	mov	r9, r4
 800ca28:	2700      	movs	r7, #0
 800ca2a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ca2e:	f8d9 3000 	ldr.w	r3, [r9]
 800ca32:	fa1f fb82 	uxth.w	fp, r2
 800ca36:	b29b      	uxth	r3, r3
 800ca38:	fb0a 330b 	mla	r3, sl, fp, r3
 800ca3c:	443b      	add	r3, r7
 800ca3e:	f8d9 7000 	ldr.w	r7, [r9]
 800ca42:	0c12      	lsrs	r2, r2, #16
 800ca44:	0c3f      	lsrs	r7, r7, #16
 800ca46:	fb0a 7202 	mla	r2, sl, r2, r7
 800ca4a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ca4e:	b29b      	uxth	r3, r3
 800ca50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ca54:	4565      	cmp	r5, ip
 800ca56:	f849 3b04 	str.w	r3, [r9], #4
 800ca5a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ca5e:	d8e4      	bhi.n	800ca2a <__multiply+0xaa>
 800ca60:	9b01      	ldr	r3, [sp, #4]
 800ca62:	50e7      	str	r7, [r4, r3]
 800ca64:	9b03      	ldr	r3, [sp, #12]
 800ca66:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ca6a:	3104      	adds	r1, #4
 800ca6c:	f1b9 0f00 	cmp.w	r9, #0
 800ca70:	d020      	beq.n	800cab4 <__multiply+0x134>
 800ca72:	6823      	ldr	r3, [r4, #0]
 800ca74:	4647      	mov	r7, r8
 800ca76:	46a4      	mov	ip, r4
 800ca78:	f04f 0a00 	mov.w	sl, #0
 800ca7c:	f8b7 b000 	ldrh.w	fp, [r7]
 800ca80:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800ca84:	fb09 220b 	mla	r2, r9, fp, r2
 800ca88:	4452      	add	r2, sl
 800ca8a:	b29b      	uxth	r3, r3
 800ca8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ca90:	f84c 3b04 	str.w	r3, [ip], #4
 800ca94:	f857 3b04 	ldr.w	r3, [r7], #4
 800ca98:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ca9c:	f8bc 3000 	ldrh.w	r3, [ip]
 800caa0:	fb09 330a 	mla	r3, r9, sl, r3
 800caa4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800caa8:	42bd      	cmp	r5, r7
 800caaa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800caae:	d8e5      	bhi.n	800ca7c <__multiply+0xfc>
 800cab0:	9a01      	ldr	r2, [sp, #4]
 800cab2:	50a3      	str	r3, [r4, r2]
 800cab4:	3404      	adds	r4, #4
 800cab6:	e79f      	b.n	800c9f8 <__multiply+0x78>
 800cab8:	3e01      	subs	r6, #1
 800caba:	e7a1      	b.n	800ca00 <__multiply+0x80>
 800cabc:	0800dadd 	.word	0x0800dadd
 800cac0:	0800db5f 	.word	0x0800db5f

0800cac4 <__pow5mult>:
 800cac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cac8:	4615      	mov	r5, r2
 800caca:	f012 0203 	ands.w	r2, r2, #3
 800cace:	4607      	mov	r7, r0
 800cad0:	460e      	mov	r6, r1
 800cad2:	d007      	beq.n	800cae4 <__pow5mult+0x20>
 800cad4:	4c25      	ldr	r4, [pc, #148]	@ (800cb6c <__pow5mult+0xa8>)
 800cad6:	3a01      	subs	r2, #1
 800cad8:	2300      	movs	r3, #0
 800cada:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cade:	f7ff fe5d 	bl	800c79c <__multadd>
 800cae2:	4606      	mov	r6, r0
 800cae4:	10ad      	asrs	r5, r5, #2
 800cae6:	d03d      	beq.n	800cb64 <__pow5mult+0xa0>
 800cae8:	69fc      	ldr	r4, [r7, #28]
 800caea:	b97c      	cbnz	r4, 800cb0c <__pow5mult+0x48>
 800caec:	2010      	movs	r0, #16
 800caee:	f7ff fc7f 	bl	800c3f0 <malloc>
 800caf2:	4602      	mov	r2, r0
 800caf4:	61f8      	str	r0, [r7, #28]
 800caf6:	b928      	cbnz	r0, 800cb04 <__pow5mult+0x40>
 800caf8:	4b1d      	ldr	r3, [pc, #116]	@ (800cb70 <__pow5mult+0xac>)
 800cafa:	481e      	ldr	r0, [pc, #120]	@ (800cb74 <__pow5mult+0xb0>)
 800cafc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cb00:	f7fe f970 	bl	800ade4 <__assert_func>
 800cb04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cb08:	6004      	str	r4, [r0, #0]
 800cb0a:	60c4      	str	r4, [r0, #12]
 800cb0c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cb10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cb14:	b94c      	cbnz	r4, 800cb2a <__pow5mult+0x66>
 800cb16:	f240 2171 	movw	r1, #625	@ 0x271
 800cb1a:	4638      	mov	r0, r7
 800cb1c:	f7ff ff1a 	bl	800c954 <__i2b>
 800cb20:	2300      	movs	r3, #0
 800cb22:	f8c8 0008 	str.w	r0, [r8, #8]
 800cb26:	4604      	mov	r4, r0
 800cb28:	6003      	str	r3, [r0, #0]
 800cb2a:	f04f 0900 	mov.w	r9, #0
 800cb2e:	07eb      	lsls	r3, r5, #31
 800cb30:	d50a      	bpl.n	800cb48 <__pow5mult+0x84>
 800cb32:	4631      	mov	r1, r6
 800cb34:	4622      	mov	r2, r4
 800cb36:	4638      	mov	r0, r7
 800cb38:	f7ff ff22 	bl	800c980 <__multiply>
 800cb3c:	4631      	mov	r1, r6
 800cb3e:	4680      	mov	r8, r0
 800cb40:	4638      	mov	r0, r7
 800cb42:	f7ff fe09 	bl	800c758 <_Bfree>
 800cb46:	4646      	mov	r6, r8
 800cb48:	106d      	asrs	r5, r5, #1
 800cb4a:	d00b      	beq.n	800cb64 <__pow5mult+0xa0>
 800cb4c:	6820      	ldr	r0, [r4, #0]
 800cb4e:	b938      	cbnz	r0, 800cb60 <__pow5mult+0x9c>
 800cb50:	4622      	mov	r2, r4
 800cb52:	4621      	mov	r1, r4
 800cb54:	4638      	mov	r0, r7
 800cb56:	f7ff ff13 	bl	800c980 <__multiply>
 800cb5a:	6020      	str	r0, [r4, #0]
 800cb5c:	f8c0 9000 	str.w	r9, [r0]
 800cb60:	4604      	mov	r4, r0
 800cb62:	e7e4      	b.n	800cb2e <__pow5mult+0x6a>
 800cb64:	4630      	mov	r0, r6
 800cb66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb6a:	bf00      	nop
 800cb6c:	0800dd0c 	.word	0x0800dd0c
 800cb70:	0800d9c3 	.word	0x0800d9c3
 800cb74:	0800db5f 	.word	0x0800db5f

0800cb78 <__lshift>:
 800cb78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb7c:	460c      	mov	r4, r1
 800cb7e:	6849      	ldr	r1, [r1, #4]
 800cb80:	6923      	ldr	r3, [r4, #16]
 800cb82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cb86:	68a3      	ldr	r3, [r4, #8]
 800cb88:	4607      	mov	r7, r0
 800cb8a:	4691      	mov	r9, r2
 800cb8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cb90:	f108 0601 	add.w	r6, r8, #1
 800cb94:	42b3      	cmp	r3, r6
 800cb96:	db0b      	blt.n	800cbb0 <__lshift+0x38>
 800cb98:	4638      	mov	r0, r7
 800cb9a:	f7ff fd9d 	bl	800c6d8 <_Balloc>
 800cb9e:	4605      	mov	r5, r0
 800cba0:	b948      	cbnz	r0, 800cbb6 <__lshift+0x3e>
 800cba2:	4602      	mov	r2, r0
 800cba4:	4b28      	ldr	r3, [pc, #160]	@ (800cc48 <__lshift+0xd0>)
 800cba6:	4829      	ldr	r0, [pc, #164]	@ (800cc4c <__lshift+0xd4>)
 800cba8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cbac:	f7fe f91a 	bl	800ade4 <__assert_func>
 800cbb0:	3101      	adds	r1, #1
 800cbb2:	005b      	lsls	r3, r3, #1
 800cbb4:	e7ee      	b.n	800cb94 <__lshift+0x1c>
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	f100 0114 	add.w	r1, r0, #20
 800cbbc:	f100 0210 	add.w	r2, r0, #16
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	4553      	cmp	r3, sl
 800cbc4:	db33      	blt.n	800cc2e <__lshift+0xb6>
 800cbc6:	6920      	ldr	r0, [r4, #16]
 800cbc8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cbcc:	f104 0314 	add.w	r3, r4, #20
 800cbd0:	f019 091f 	ands.w	r9, r9, #31
 800cbd4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cbd8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cbdc:	d02b      	beq.n	800cc36 <__lshift+0xbe>
 800cbde:	f1c9 0e20 	rsb	lr, r9, #32
 800cbe2:	468a      	mov	sl, r1
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	6818      	ldr	r0, [r3, #0]
 800cbe8:	fa00 f009 	lsl.w	r0, r0, r9
 800cbec:	4310      	orrs	r0, r2
 800cbee:	f84a 0b04 	str.w	r0, [sl], #4
 800cbf2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbf6:	459c      	cmp	ip, r3
 800cbf8:	fa22 f20e 	lsr.w	r2, r2, lr
 800cbfc:	d8f3      	bhi.n	800cbe6 <__lshift+0x6e>
 800cbfe:	ebac 0304 	sub.w	r3, ip, r4
 800cc02:	3b15      	subs	r3, #21
 800cc04:	f023 0303 	bic.w	r3, r3, #3
 800cc08:	3304      	adds	r3, #4
 800cc0a:	f104 0015 	add.w	r0, r4, #21
 800cc0e:	4560      	cmp	r0, ip
 800cc10:	bf88      	it	hi
 800cc12:	2304      	movhi	r3, #4
 800cc14:	50ca      	str	r2, [r1, r3]
 800cc16:	b10a      	cbz	r2, 800cc1c <__lshift+0xa4>
 800cc18:	f108 0602 	add.w	r6, r8, #2
 800cc1c:	3e01      	subs	r6, #1
 800cc1e:	4638      	mov	r0, r7
 800cc20:	612e      	str	r6, [r5, #16]
 800cc22:	4621      	mov	r1, r4
 800cc24:	f7ff fd98 	bl	800c758 <_Bfree>
 800cc28:	4628      	mov	r0, r5
 800cc2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc2e:	f842 0f04 	str.w	r0, [r2, #4]!
 800cc32:	3301      	adds	r3, #1
 800cc34:	e7c5      	b.n	800cbc2 <__lshift+0x4a>
 800cc36:	3904      	subs	r1, #4
 800cc38:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc3c:	f841 2f04 	str.w	r2, [r1, #4]!
 800cc40:	459c      	cmp	ip, r3
 800cc42:	d8f9      	bhi.n	800cc38 <__lshift+0xc0>
 800cc44:	e7ea      	b.n	800cc1c <__lshift+0xa4>
 800cc46:	bf00      	nop
 800cc48:	0800dadd 	.word	0x0800dadd
 800cc4c:	0800db5f 	.word	0x0800db5f

0800cc50 <__mcmp>:
 800cc50:	690a      	ldr	r2, [r1, #16]
 800cc52:	4603      	mov	r3, r0
 800cc54:	6900      	ldr	r0, [r0, #16]
 800cc56:	1a80      	subs	r0, r0, r2
 800cc58:	b530      	push	{r4, r5, lr}
 800cc5a:	d10e      	bne.n	800cc7a <__mcmp+0x2a>
 800cc5c:	3314      	adds	r3, #20
 800cc5e:	3114      	adds	r1, #20
 800cc60:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cc64:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cc68:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cc6c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cc70:	4295      	cmp	r5, r2
 800cc72:	d003      	beq.n	800cc7c <__mcmp+0x2c>
 800cc74:	d205      	bcs.n	800cc82 <__mcmp+0x32>
 800cc76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cc7a:	bd30      	pop	{r4, r5, pc}
 800cc7c:	42a3      	cmp	r3, r4
 800cc7e:	d3f3      	bcc.n	800cc68 <__mcmp+0x18>
 800cc80:	e7fb      	b.n	800cc7a <__mcmp+0x2a>
 800cc82:	2001      	movs	r0, #1
 800cc84:	e7f9      	b.n	800cc7a <__mcmp+0x2a>
	...

0800cc88 <__mdiff>:
 800cc88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc8c:	4689      	mov	r9, r1
 800cc8e:	4606      	mov	r6, r0
 800cc90:	4611      	mov	r1, r2
 800cc92:	4648      	mov	r0, r9
 800cc94:	4614      	mov	r4, r2
 800cc96:	f7ff ffdb 	bl	800cc50 <__mcmp>
 800cc9a:	1e05      	subs	r5, r0, #0
 800cc9c:	d112      	bne.n	800ccc4 <__mdiff+0x3c>
 800cc9e:	4629      	mov	r1, r5
 800cca0:	4630      	mov	r0, r6
 800cca2:	f7ff fd19 	bl	800c6d8 <_Balloc>
 800cca6:	4602      	mov	r2, r0
 800cca8:	b928      	cbnz	r0, 800ccb6 <__mdiff+0x2e>
 800ccaa:	4b3f      	ldr	r3, [pc, #252]	@ (800cda8 <__mdiff+0x120>)
 800ccac:	f240 2137 	movw	r1, #567	@ 0x237
 800ccb0:	483e      	ldr	r0, [pc, #248]	@ (800cdac <__mdiff+0x124>)
 800ccb2:	f7fe f897 	bl	800ade4 <__assert_func>
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ccbc:	4610      	mov	r0, r2
 800ccbe:	b003      	add	sp, #12
 800ccc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccc4:	bfbc      	itt	lt
 800ccc6:	464b      	movlt	r3, r9
 800ccc8:	46a1      	movlt	r9, r4
 800ccca:	4630      	mov	r0, r6
 800cccc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ccd0:	bfba      	itte	lt
 800ccd2:	461c      	movlt	r4, r3
 800ccd4:	2501      	movlt	r5, #1
 800ccd6:	2500      	movge	r5, #0
 800ccd8:	f7ff fcfe 	bl	800c6d8 <_Balloc>
 800ccdc:	4602      	mov	r2, r0
 800ccde:	b918      	cbnz	r0, 800cce8 <__mdiff+0x60>
 800cce0:	4b31      	ldr	r3, [pc, #196]	@ (800cda8 <__mdiff+0x120>)
 800cce2:	f240 2145 	movw	r1, #581	@ 0x245
 800cce6:	e7e3      	b.n	800ccb0 <__mdiff+0x28>
 800cce8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ccec:	6926      	ldr	r6, [r4, #16]
 800ccee:	60c5      	str	r5, [r0, #12]
 800ccf0:	f109 0310 	add.w	r3, r9, #16
 800ccf4:	f109 0514 	add.w	r5, r9, #20
 800ccf8:	f104 0e14 	add.w	lr, r4, #20
 800ccfc:	f100 0b14 	add.w	fp, r0, #20
 800cd00:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cd04:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cd08:	9301      	str	r3, [sp, #4]
 800cd0a:	46d9      	mov	r9, fp
 800cd0c:	f04f 0c00 	mov.w	ip, #0
 800cd10:	9b01      	ldr	r3, [sp, #4]
 800cd12:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cd16:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cd1a:	9301      	str	r3, [sp, #4]
 800cd1c:	fa1f f38a 	uxth.w	r3, sl
 800cd20:	4619      	mov	r1, r3
 800cd22:	b283      	uxth	r3, r0
 800cd24:	1acb      	subs	r3, r1, r3
 800cd26:	0c00      	lsrs	r0, r0, #16
 800cd28:	4463      	add	r3, ip
 800cd2a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cd2e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cd32:	b29b      	uxth	r3, r3
 800cd34:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cd38:	4576      	cmp	r6, lr
 800cd3a:	f849 3b04 	str.w	r3, [r9], #4
 800cd3e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cd42:	d8e5      	bhi.n	800cd10 <__mdiff+0x88>
 800cd44:	1b33      	subs	r3, r6, r4
 800cd46:	3b15      	subs	r3, #21
 800cd48:	f023 0303 	bic.w	r3, r3, #3
 800cd4c:	3415      	adds	r4, #21
 800cd4e:	3304      	adds	r3, #4
 800cd50:	42a6      	cmp	r6, r4
 800cd52:	bf38      	it	cc
 800cd54:	2304      	movcc	r3, #4
 800cd56:	441d      	add	r5, r3
 800cd58:	445b      	add	r3, fp
 800cd5a:	461e      	mov	r6, r3
 800cd5c:	462c      	mov	r4, r5
 800cd5e:	4544      	cmp	r4, r8
 800cd60:	d30e      	bcc.n	800cd80 <__mdiff+0xf8>
 800cd62:	f108 0103 	add.w	r1, r8, #3
 800cd66:	1b49      	subs	r1, r1, r5
 800cd68:	f021 0103 	bic.w	r1, r1, #3
 800cd6c:	3d03      	subs	r5, #3
 800cd6e:	45a8      	cmp	r8, r5
 800cd70:	bf38      	it	cc
 800cd72:	2100      	movcc	r1, #0
 800cd74:	440b      	add	r3, r1
 800cd76:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cd7a:	b191      	cbz	r1, 800cda2 <__mdiff+0x11a>
 800cd7c:	6117      	str	r7, [r2, #16]
 800cd7e:	e79d      	b.n	800ccbc <__mdiff+0x34>
 800cd80:	f854 1b04 	ldr.w	r1, [r4], #4
 800cd84:	46e6      	mov	lr, ip
 800cd86:	0c08      	lsrs	r0, r1, #16
 800cd88:	fa1c fc81 	uxtah	ip, ip, r1
 800cd8c:	4471      	add	r1, lr
 800cd8e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cd92:	b289      	uxth	r1, r1
 800cd94:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cd98:	f846 1b04 	str.w	r1, [r6], #4
 800cd9c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cda0:	e7dd      	b.n	800cd5e <__mdiff+0xd6>
 800cda2:	3f01      	subs	r7, #1
 800cda4:	e7e7      	b.n	800cd76 <__mdiff+0xee>
 800cda6:	bf00      	nop
 800cda8:	0800dadd 	.word	0x0800dadd
 800cdac:	0800db5f 	.word	0x0800db5f

0800cdb0 <__ulp>:
 800cdb0:	b082      	sub	sp, #8
 800cdb2:	ed8d 0b00 	vstr	d0, [sp]
 800cdb6:	9a01      	ldr	r2, [sp, #4]
 800cdb8:	4b0f      	ldr	r3, [pc, #60]	@ (800cdf8 <__ulp+0x48>)
 800cdba:	4013      	ands	r3, r2
 800cdbc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	dc08      	bgt.n	800cdd6 <__ulp+0x26>
 800cdc4:	425b      	negs	r3, r3
 800cdc6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800cdca:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cdce:	da04      	bge.n	800cdda <__ulp+0x2a>
 800cdd0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800cdd4:	4113      	asrs	r3, r2
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	e008      	b.n	800cdec <__ulp+0x3c>
 800cdda:	f1a2 0314 	sub.w	r3, r2, #20
 800cdde:	2b1e      	cmp	r3, #30
 800cde0:	bfda      	itte	le
 800cde2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800cde6:	40da      	lsrle	r2, r3
 800cde8:	2201      	movgt	r2, #1
 800cdea:	2300      	movs	r3, #0
 800cdec:	4619      	mov	r1, r3
 800cdee:	4610      	mov	r0, r2
 800cdf0:	ec41 0b10 	vmov	d0, r0, r1
 800cdf4:	b002      	add	sp, #8
 800cdf6:	4770      	bx	lr
 800cdf8:	7ff00000 	.word	0x7ff00000

0800cdfc <__b2d>:
 800cdfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce00:	6906      	ldr	r6, [r0, #16]
 800ce02:	f100 0814 	add.w	r8, r0, #20
 800ce06:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ce0a:	1f37      	subs	r7, r6, #4
 800ce0c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ce10:	4610      	mov	r0, r2
 800ce12:	f7ff fd53 	bl	800c8bc <__hi0bits>
 800ce16:	f1c0 0320 	rsb	r3, r0, #32
 800ce1a:	280a      	cmp	r0, #10
 800ce1c:	600b      	str	r3, [r1, #0]
 800ce1e:	491b      	ldr	r1, [pc, #108]	@ (800ce8c <__b2d+0x90>)
 800ce20:	dc15      	bgt.n	800ce4e <__b2d+0x52>
 800ce22:	f1c0 0c0b 	rsb	ip, r0, #11
 800ce26:	fa22 f30c 	lsr.w	r3, r2, ip
 800ce2a:	45b8      	cmp	r8, r7
 800ce2c:	ea43 0501 	orr.w	r5, r3, r1
 800ce30:	bf34      	ite	cc
 800ce32:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ce36:	2300      	movcs	r3, #0
 800ce38:	3015      	adds	r0, #21
 800ce3a:	fa02 f000 	lsl.w	r0, r2, r0
 800ce3e:	fa23 f30c 	lsr.w	r3, r3, ip
 800ce42:	4303      	orrs	r3, r0
 800ce44:	461c      	mov	r4, r3
 800ce46:	ec45 4b10 	vmov	d0, r4, r5
 800ce4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce4e:	45b8      	cmp	r8, r7
 800ce50:	bf3a      	itte	cc
 800ce52:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ce56:	f1a6 0708 	subcc.w	r7, r6, #8
 800ce5a:	2300      	movcs	r3, #0
 800ce5c:	380b      	subs	r0, #11
 800ce5e:	d012      	beq.n	800ce86 <__b2d+0x8a>
 800ce60:	f1c0 0120 	rsb	r1, r0, #32
 800ce64:	fa23 f401 	lsr.w	r4, r3, r1
 800ce68:	4082      	lsls	r2, r0
 800ce6a:	4322      	orrs	r2, r4
 800ce6c:	4547      	cmp	r7, r8
 800ce6e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ce72:	bf8c      	ite	hi
 800ce74:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ce78:	2200      	movls	r2, #0
 800ce7a:	4083      	lsls	r3, r0
 800ce7c:	40ca      	lsrs	r2, r1
 800ce7e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ce82:	4313      	orrs	r3, r2
 800ce84:	e7de      	b.n	800ce44 <__b2d+0x48>
 800ce86:	ea42 0501 	orr.w	r5, r2, r1
 800ce8a:	e7db      	b.n	800ce44 <__b2d+0x48>
 800ce8c:	3ff00000 	.word	0x3ff00000

0800ce90 <__d2b>:
 800ce90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ce94:	460f      	mov	r7, r1
 800ce96:	2101      	movs	r1, #1
 800ce98:	ec59 8b10 	vmov	r8, r9, d0
 800ce9c:	4616      	mov	r6, r2
 800ce9e:	f7ff fc1b 	bl	800c6d8 <_Balloc>
 800cea2:	4604      	mov	r4, r0
 800cea4:	b930      	cbnz	r0, 800ceb4 <__d2b+0x24>
 800cea6:	4602      	mov	r2, r0
 800cea8:	4b23      	ldr	r3, [pc, #140]	@ (800cf38 <__d2b+0xa8>)
 800ceaa:	4824      	ldr	r0, [pc, #144]	@ (800cf3c <__d2b+0xac>)
 800ceac:	f240 310f 	movw	r1, #783	@ 0x30f
 800ceb0:	f7fd ff98 	bl	800ade4 <__assert_func>
 800ceb4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ceb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cebc:	b10d      	cbz	r5, 800cec2 <__d2b+0x32>
 800cebe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cec2:	9301      	str	r3, [sp, #4]
 800cec4:	f1b8 0300 	subs.w	r3, r8, #0
 800cec8:	d023      	beq.n	800cf12 <__d2b+0x82>
 800ceca:	4668      	mov	r0, sp
 800cecc:	9300      	str	r3, [sp, #0]
 800cece:	f7ff fd14 	bl	800c8fa <__lo0bits>
 800ced2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ced6:	b1d0      	cbz	r0, 800cf0e <__d2b+0x7e>
 800ced8:	f1c0 0320 	rsb	r3, r0, #32
 800cedc:	fa02 f303 	lsl.w	r3, r2, r3
 800cee0:	430b      	orrs	r3, r1
 800cee2:	40c2      	lsrs	r2, r0
 800cee4:	6163      	str	r3, [r4, #20]
 800cee6:	9201      	str	r2, [sp, #4]
 800cee8:	9b01      	ldr	r3, [sp, #4]
 800ceea:	61a3      	str	r3, [r4, #24]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	bf0c      	ite	eq
 800cef0:	2201      	moveq	r2, #1
 800cef2:	2202      	movne	r2, #2
 800cef4:	6122      	str	r2, [r4, #16]
 800cef6:	b1a5      	cbz	r5, 800cf22 <__d2b+0x92>
 800cef8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cefc:	4405      	add	r5, r0
 800cefe:	603d      	str	r5, [r7, #0]
 800cf00:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cf04:	6030      	str	r0, [r6, #0]
 800cf06:	4620      	mov	r0, r4
 800cf08:	b003      	add	sp, #12
 800cf0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf0e:	6161      	str	r1, [r4, #20]
 800cf10:	e7ea      	b.n	800cee8 <__d2b+0x58>
 800cf12:	a801      	add	r0, sp, #4
 800cf14:	f7ff fcf1 	bl	800c8fa <__lo0bits>
 800cf18:	9b01      	ldr	r3, [sp, #4]
 800cf1a:	6163      	str	r3, [r4, #20]
 800cf1c:	3020      	adds	r0, #32
 800cf1e:	2201      	movs	r2, #1
 800cf20:	e7e8      	b.n	800cef4 <__d2b+0x64>
 800cf22:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cf26:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cf2a:	6038      	str	r0, [r7, #0]
 800cf2c:	6918      	ldr	r0, [r3, #16]
 800cf2e:	f7ff fcc5 	bl	800c8bc <__hi0bits>
 800cf32:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cf36:	e7e5      	b.n	800cf04 <__d2b+0x74>
 800cf38:	0800dadd 	.word	0x0800dadd
 800cf3c:	0800db5f 	.word	0x0800db5f

0800cf40 <__ratio>:
 800cf40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf44:	b085      	sub	sp, #20
 800cf46:	e9cd 1000 	strd	r1, r0, [sp]
 800cf4a:	a902      	add	r1, sp, #8
 800cf4c:	f7ff ff56 	bl	800cdfc <__b2d>
 800cf50:	9800      	ldr	r0, [sp, #0]
 800cf52:	a903      	add	r1, sp, #12
 800cf54:	ec55 4b10 	vmov	r4, r5, d0
 800cf58:	f7ff ff50 	bl	800cdfc <__b2d>
 800cf5c:	9b01      	ldr	r3, [sp, #4]
 800cf5e:	6919      	ldr	r1, [r3, #16]
 800cf60:	9b00      	ldr	r3, [sp, #0]
 800cf62:	691b      	ldr	r3, [r3, #16]
 800cf64:	1ac9      	subs	r1, r1, r3
 800cf66:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800cf6a:	1a9b      	subs	r3, r3, r2
 800cf6c:	ec5b ab10 	vmov	sl, fp, d0
 800cf70:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	bfce      	itee	gt
 800cf78:	462a      	movgt	r2, r5
 800cf7a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cf7e:	465a      	movle	r2, fp
 800cf80:	462f      	mov	r7, r5
 800cf82:	46d9      	mov	r9, fp
 800cf84:	bfcc      	ite	gt
 800cf86:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cf8a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800cf8e:	464b      	mov	r3, r9
 800cf90:	4652      	mov	r2, sl
 800cf92:	4620      	mov	r0, r4
 800cf94:	4639      	mov	r1, r7
 800cf96:	f7f3 fc89 	bl	80008ac <__aeabi_ddiv>
 800cf9a:	ec41 0b10 	vmov	d0, r0, r1
 800cf9e:	b005      	add	sp, #20
 800cfa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cfa4 <__copybits>:
 800cfa4:	3901      	subs	r1, #1
 800cfa6:	b570      	push	{r4, r5, r6, lr}
 800cfa8:	1149      	asrs	r1, r1, #5
 800cfaa:	6914      	ldr	r4, [r2, #16]
 800cfac:	3101      	adds	r1, #1
 800cfae:	f102 0314 	add.w	r3, r2, #20
 800cfb2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cfb6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cfba:	1f05      	subs	r5, r0, #4
 800cfbc:	42a3      	cmp	r3, r4
 800cfbe:	d30c      	bcc.n	800cfda <__copybits+0x36>
 800cfc0:	1aa3      	subs	r3, r4, r2
 800cfc2:	3b11      	subs	r3, #17
 800cfc4:	f023 0303 	bic.w	r3, r3, #3
 800cfc8:	3211      	adds	r2, #17
 800cfca:	42a2      	cmp	r2, r4
 800cfcc:	bf88      	it	hi
 800cfce:	2300      	movhi	r3, #0
 800cfd0:	4418      	add	r0, r3
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	4288      	cmp	r0, r1
 800cfd6:	d305      	bcc.n	800cfe4 <__copybits+0x40>
 800cfd8:	bd70      	pop	{r4, r5, r6, pc}
 800cfda:	f853 6b04 	ldr.w	r6, [r3], #4
 800cfde:	f845 6f04 	str.w	r6, [r5, #4]!
 800cfe2:	e7eb      	b.n	800cfbc <__copybits+0x18>
 800cfe4:	f840 3b04 	str.w	r3, [r0], #4
 800cfe8:	e7f4      	b.n	800cfd4 <__copybits+0x30>

0800cfea <__any_on>:
 800cfea:	f100 0214 	add.w	r2, r0, #20
 800cfee:	6900      	ldr	r0, [r0, #16]
 800cff0:	114b      	asrs	r3, r1, #5
 800cff2:	4298      	cmp	r0, r3
 800cff4:	b510      	push	{r4, lr}
 800cff6:	db11      	blt.n	800d01c <__any_on+0x32>
 800cff8:	dd0a      	ble.n	800d010 <__any_on+0x26>
 800cffa:	f011 011f 	ands.w	r1, r1, #31
 800cffe:	d007      	beq.n	800d010 <__any_on+0x26>
 800d000:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d004:	fa24 f001 	lsr.w	r0, r4, r1
 800d008:	fa00 f101 	lsl.w	r1, r0, r1
 800d00c:	428c      	cmp	r4, r1
 800d00e:	d10b      	bne.n	800d028 <__any_on+0x3e>
 800d010:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d014:	4293      	cmp	r3, r2
 800d016:	d803      	bhi.n	800d020 <__any_on+0x36>
 800d018:	2000      	movs	r0, #0
 800d01a:	bd10      	pop	{r4, pc}
 800d01c:	4603      	mov	r3, r0
 800d01e:	e7f7      	b.n	800d010 <__any_on+0x26>
 800d020:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d024:	2900      	cmp	r1, #0
 800d026:	d0f5      	beq.n	800d014 <__any_on+0x2a>
 800d028:	2001      	movs	r0, #1
 800d02a:	e7f6      	b.n	800d01a <__any_on+0x30>

0800d02c <__sread>:
 800d02c:	b510      	push	{r4, lr}
 800d02e:	460c      	mov	r4, r1
 800d030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d034:	f000 f8b8 	bl	800d1a8 <_read_r>
 800d038:	2800      	cmp	r0, #0
 800d03a:	bfab      	itete	ge
 800d03c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d03e:	89a3      	ldrhlt	r3, [r4, #12]
 800d040:	181b      	addge	r3, r3, r0
 800d042:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d046:	bfac      	ite	ge
 800d048:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d04a:	81a3      	strhlt	r3, [r4, #12]
 800d04c:	bd10      	pop	{r4, pc}

0800d04e <__swrite>:
 800d04e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d052:	461f      	mov	r7, r3
 800d054:	898b      	ldrh	r3, [r1, #12]
 800d056:	05db      	lsls	r3, r3, #23
 800d058:	4605      	mov	r5, r0
 800d05a:	460c      	mov	r4, r1
 800d05c:	4616      	mov	r6, r2
 800d05e:	d505      	bpl.n	800d06c <__swrite+0x1e>
 800d060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d064:	2302      	movs	r3, #2
 800d066:	2200      	movs	r2, #0
 800d068:	f000 f88c 	bl	800d184 <_lseek_r>
 800d06c:	89a3      	ldrh	r3, [r4, #12]
 800d06e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d072:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d076:	81a3      	strh	r3, [r4, #12]
 800d078:	4632      	mov	r2, r6
 800d07a:	463b      	mov	r3, r7
 800d07c:	4628      	mov	r0, r5
 800d07e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d082:	f000 b8b3 	b.w	800d1ec <_write_r>

0800d086 <__sseek>:
 800d086:	b510      	push	{r4, lr}
 800d088:	460c      	mov	r4, r1
 800d08a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d08e:	f000 f879 	bl	800d184 <_lseek_r>
 800d092:	1c43      	adds	r3, r0, #1
 800d094:	89a3      	ldrh	r3, [r4, #12]
 800d096:	bf15      	itete	ne
 800d098:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d09a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d09e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d0a2:	81a3      	strheq	r3, [r4, #12]
 800d0a4:	bf18      	it	ne
 800d0a6:	81a3      	strhne	r3, [r4, #12]
 800d0a8:	bd10      	pop	{r4, pc}

0800d0aa <__sclose>:
 800d0aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0ae:	f000 b8af 	b.w	800d210 <_close_r>
	...

0800d0b4 <fiprintf>:
 800d0b4:	b40e      	push	{r1, r2, r3}
 800d0b6:	b503      	push	{r0, r1, lr}
 800d0b8:	4601      	mov	r1, r0
 800d0ba:	ab03      	add	r3, sp, #12
 800d0bc:	4805      	ldr	r0, [pc, #20]	@ (800d0d4 <fiprintf+0x20>)
 800d0be:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0c2:	6800      	ldr	r0, [r0, #0]
 800d0c4:	9301      	str	r3, [sp, #4]
 800d0c6:	f000 f943 	bl	800d350 <_vfiprintf_r>
 800d0ca:	b002      	add	sp, #8
 800d0cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0d0:	b003      	add	sp, #12
 800d0d2:	4770      	bx	lr
 800d0d4:	20000188 	.word	0x20000188

0800d0d8 <_realloc_r>:
 800d0d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0dc:	4607      	mov	r7, r0
 800d0de:	4614      	mov	r4, r2
 800d0e0:	460d      	mov	r5, r1
 800d0e2:	b921      	cbnz	r1, 800d0ee <_realloc_r+0x16>
 800d0e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0e8:	4611      	mov	r1, r2
 800d0ea:	f7ff b9ab 	b.w	800c444 <_malloc_r>
 800d0ee:	b92a      	cbnz	r2, 800d0fc <_realloc_r+0x24>
 800d0f0:	f000 f8ba 	bl	800d268 <_free_r>
 800d0f4:	4625      	mov	r5, r4
 800d0f6:	4628      	mov	r0, r5
 800d0f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0fc:	f000 fa40 	bl	800d580 <_malloc_usable_size_r>
 800d100:	4284      	cmp	r4, r0
 800d102:	4606      	mov	r6, r0
 800d104:	d802      	bhi.n	800d10c <_realloc_r+0x34>
 800d106:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d10a:	d8f4      	bhi.n	800d0f6 <_realloc_r+0x1e>
 800d10c:	4621      	mov	r1, r4
 800d10e:	4638      	mov	r0, r7
 800d110:	f7ff f998 	bl	800c444 <_malloc_r>
 800d114:	4680      	mov	r8, r0
 800d116:	b908      	cbnz	r0, 800d11c <_realloc_r+0x44>
 800d118:	4645      	mov	r5, r8
 800d11a:	e7ec      	b.n	800d0f6 <_realloc_r+0x1e>
 800d11c:	42b4      	cmp	r4, r6
 800d11e:	4622      	mov	r2, r4
 800d120:	4629      	mov	r1, r5
 800d122:	bf28      	it	cs
 800d124:	4632      	movcs	r2, r6
 800d126:	f7fd fe41 	bl	800adac <memcpy>
 800d12a:	4629      	mov	r1, r5
 800d12c:	4638      	mov	r0, r7
 800d12e:	f000 f89b 	bl	800d268 <_free_r>
 800d132:	e7f1      	b.n	800d118 <_realloc_r+0x40>

0800d134 <__ascii_wctomb>:
 800d134:	4603      	mov	r3, r0
 800d136:	4608      	mov	r0, r1
 800d138:	b141      	cbz	r1, 800d14c <__ascii_wctomb+0x18>
 800d13a:	2aff      	cmp	r2, #255	@ 0xff
 800d13c:	d904      	bls.n	800d148 <__ascii_wctomb+0x14>
 800d13e:	228a      	movs	r2, #138	@ 0x8a
 800d140:	601a      	str	r2, [r3, #0]
 800d142:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d146:	4770      	bx	lr
 800d148:	700a      	strb	r2, [r1, #0]
 800d14a:	2001      	movs	r0, #1
 800d14c:	4770      	bx	lr

0800d14e <memmove>:
 800d14e:	4288      	cmp	r0, r1
 800d150:	b510      	push	{r4, lr}
 800d152:	eb01 0402 	add.w	r4, r1, r2
 800d156:	d902      	bls.n	800d15e <memmove+0x10>
 800d158:	4284      	cmp	r4, r0
 800d15a:	4623      	mov	r3, r4
 800d15c:	d807      	bhi.n	800d16e <memmove+0x20>
 800d15e:	1e43      	subs	r3, r0, #1
 800d160:	42a1      	cmp	r1, r4
 800d162:	d008      	beq.n	800d176 <memmove+0x28>
 800d164:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d168:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d16c:	e7f8      	b.n	800d160 <memmove+0x12>
 800d16e:	4402      	add	r2, r0
 800d170:	4601      	mov	r1, r0
 800d172:	428a      	cmp	r2, r1
 800d174:	d100      	bne.n	800d178 <memmove+0x2a>
 800d176:	bd10      	pop	{r4, pc}
 800d178:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d17c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d180:	e7f7      	b.n	800d172 <memmove+0x24>
	...

0800d184 <_lseek_r>:
 800d184:	b538      	push	{r3, r4, r5, lr}
 800d186:	4d07      	ldr	r5, [pc, #28]	@ (800d1a4 <_lseek_r+0x20>)
 800d188:	4604      	mov	r4, r0
 800d18a:	4608      	mov	r0, r1
 800d18c:	4611      	mov	r1, r2
 800d18e:	2200      	movs	r2, #0
 800d190:	602a      	str	r2, [r5, #0]
 800d192:	461a      	mov	r2, r3
 800d194:	f7f5 f87f 	bl	8002296 <_lseek>
 800d198:	1c43      	adds	r3, r0, #1
 800d19a:	d102      	bne.n	800d1a2 <_lseek_r+0x1e>
 800d19c:	682b      	ldr	r3, [r5, #0]
 800d19e:	b103      	cbz	r3, 800d1a2 <_lseek_r+0x1e>
 800d1a0:	6023      	str	r3, [r4, #0]
 800d1a2:	bd38      	pop	{r3, r4, r5, pc}
 800d1a4:	20004530 	.word	0x20004530

0800d1a8 <_read_r>:
 800d1a8:	b538      	push	{r3, r4, r5, lr}
 800d1aa:	4d07      	ldr	r5, [pc, #28]	@ (800d1c8 <_read_r+0x20>)
 800d1ac:	4604      	mov	r4, r0
 800d1ae:	4608      	mov	r0, r1
 800d1b0:	4611      	mov	r1, r2
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	602a      	str	r2, [r5, #0]
 800d1b6:	461a      	mov	r2, r3
 800d1b8:	f7f5 f80d 	bl	80021d6 <_read>
 800d1bc:	1c43      	adds	r3, r0, #1
 800d1be:	d102      	bne.n	800d1c6 <_read_r+0x1e>
 800d1c0:	682b      	ldr	r3, [r5, #0]
 800d1c2:	b103      	cbz	r3, 800d1c6 <_read_r+0x1e>
 800d1c4:	6023      	str	r3, [r4, #0]
 800d1c6:	bd38      	pop	{r3, r4, r5, pc}
 800d1c8:	20004530 	.word	0x20004530

0800d1cc <_sbrk_r>:
 800d1cc:	b538      	push	{r3, r4, r5, lr}
 800d1ce:	4d06      	ldr	r5, [pc, #24]	@ (800d1e8 <_sbrk_r+0x1c>)
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	4604      	mov	r4, r0
 800d1d4:	4608      	mov	r0, r1
 800d1d6:	602b      	str	r3, [r5, #0]
 800d1d8:	f7f5 f86a 	bl	80022b0 <_sbrk>
 800d1dc:	1c43      	adds	r3, r0, #1
 800d1de:	d102      	bne.n	800d1e6 <_sbrk_r+0x1a>
 800d1e0:	682b      	ldr	r3, [r5, #0]
 800d1e2:	b103      	cbz	r3, 800d1e6 <_sbrk_r+0x1a>
 800d1e4:	6023      	str	r3, [r4, #0]
 800d1e6:	bd38      	pop	{r3, r4, r5, pc}
 800d1e8:	20004530 	.word	0x20004530

0800d1ec <_write_r>:
 800d1ec:	b538      	push	{r3, r4, r5, lr}
 800d1ee:	4d07      	ldr	r5, [pc, #28]	@ (800d20c <_write_r+0x20>)
 800d1f0:	4604      	mov	r4, r0
 800d1f2:	4608      	mov	r0, r1
 800d1f4:	4611      	mov	r1, r2
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	602a      	str	r2, [r5, #0]
 800d1fa:	461a      	mov	r2, r3
 800d1fc:	f7f5 f808 	bl	8002210 <_write>
 800d200:	1c43      	adds	r3, r0, #1
 800d202:	d102      	bne.n	800d20a <_write_r+0x1e>
 800d204:	682b      	ldr	r3, [r5, #0]
 800d206:	b103      	cbz	r3, 800d20a <_write_r+0x1e>
 800d208:	6023      	str	r3, [r4, #0]
 800d20a:	bd38      	pop	{r3, r4, r5, pc}
 800d20c:	20004530 	.word	0x20004530

0800d210 <_close_r>:
 800d210:	b538      	push	{r3, r4, r5, lr}
 800d212:	4d06      	ldr	r5, [pc, #24]	@ (800d22c <_close_r+0x1c>)
 800d214:	2300      	movs	r3, #0
 800d216:	4604      	mov	r4, r0
 800d218:	4608      	mov	r0, r1
 800d21a:	602b      	str	r3, [r5, #0]
 800d21c:	f7f5 f814 	bl	8002248 <_close>
 800d220:	1c43      	adds	r3, r0, #1
 800d222:	d102      	bne.n	800d22a <_close_r+0x1a>
 800d224:	682b      	ldr	r3, [r5, #0]
 800d226:	b103      	cbz	r3, 800d22a <_close_r+0x1a>
 800d228:	6023      	str	r3, [r4, #0]
 800d22a:	bd38      	pop	{r3, r4, r5, pc}
 800d22c:	20004530 	.word	0x20004530

0800d230 <abort>:
 800d230:	b508      	push	{r3, lr}
 800d232:	2006      	movs	r0, #6
 800d234:	f000 faca 	bl	800d7cc <raise>
 800d238:	2001      	movs	r0, #1
 800d23a:	f7f4 ffc1 	bl	80021c0 <_exit>

0800d23e <_calloc_r>:
 800d23e:	b570      	push	{r4, r5, r6, lr}
 800d240:	fba1 5402 	umull	r5, r4, r1, r2
 800d244:	b934      	cbnz	r4, 800d254 <_calloc_r+0x16>
 800d246:	4629      	mov	r1, r5
 800d248:	f7ff f8fc 	bl	800c444 <_malloc_r>
 800d24c:	4606      	mov	r6, r0
 800d24e:	b928      	cbnz	r0, 800d25c <_calloc_r+0x1e>
 800d250:	4630      	mov	r0, r6
 800d252:	bd70      	pop	{r4, r5, r6, pc}
 800d254:	220c      	movs	r2, #12
 800d256:	6002      	str	r2, [r0, #0]
 800d258:	2600      	movs	r6, #0
 800d25a:	e7f9      	b.n	800d250 <_calloc_r+0x12>
 800d25c:	462a      	mov	r2, r5
 800d25e:	4621      	mov	r1, r4
 800d260:	f7fd fcfc 	bl	800ac5c <memset>
 800d264:	e7f4      	b.n	800d250 <_calloc_r+0x12>
	...

0800d268 <_free_r>:
 800d268:	b538      	push	{r3, r4, r5, lr}
 800d26a:	4605      	mov	r5, r0
 800d26c:	2900      	cmp	r1, #0
 800d26e:	d041      	beq.n	800d2f4 <_free_r+0x8c>
 800d270:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d274:	1f0c      	subs	r4, r1, #4
 800d276:	2b00      	cmp	r3, #0
 800d278:	bfb8      	it	lt
 800d27a:	18e4      	addlt	r4, r4, r3
 800d27c:	f7ff fa20 	bl	800c6c0 <__malloc_lock>
 800d280:	4a1d      	ldr	r2, [pc, #116]	@ (800d2f8 <_free_r+0x90>)
 800d282:	6813      	ldr	r3, [r2, #0]
 800d284:	b933      	cbnz	r3, 800d294 <_free_r+0x2c>
 800d286:	6063      	str	r3, [r4, #4]
 800d288:	6014      	str	r4, [r2, #0]
 800d28a:	4628      	mov	r0, r5
 800d28c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d290:	f7ff ba1c 	b.w	800c6cc <__malloc_unlock>
 800d294:	42a3      	cmp	r3, r4
 800d296:	d908      	bls.n	800d2aa <_free_r+0x42>
 800d298:	6820      	ldr	r0, [r4, #0]
 800d29a:	1821      	adds	r1, r4, r0
 800d29c:	428b      	cmp	r3, r1
 800d29e:	bf01      	itttt	eq
 800d2a0:	6819      	ldreq	r1, [r3, #0]
 800d2a2:	685b      	ldreq	r3, [r3, #4]
 800d2a4:	1809      	addeq	r1, r1, r0
 800d2a6:	6021      	streq	r1, [r4, #0]
 800d2a8:	e7ed      	b.n	800d286 <_free_r+0x1e>
 800d2aa:	461a      	mov	r2, r3
 800d2ac:	685b      	ldr	r3, [r3, #4]
 800d2ae:	b10b      	cbz	r3, 800d2b4 <_free_r+0x4c>
 800d2b0:	42a3      	cmp	r3, r4
 800d2b2:	d9fa      	bls.n	800d2aa <_free_r+0x42>
 800d2b4:	6811      	ldr	r1, [r2, #0]
 800d2b6:	1850      	adds	r0, r2, r1
 800d2b8:	42a0      	cmp	r0, r4
 800d2ba:	d10b      	bne.n	800d2d4 <_free_r+0x6c>
 800d2bc:	6820      	ldr	r0, [r4, #0]
 800d2be:	4401      	add	r1, r0
 800d2c0:	1850      	adds	r0, r2, r1
 800d2c2:	4283      	cmp	r3, r0
 800d2c4:	6011      	str	r1, [r2, #0]
 800d2c6:	d1e0      	bne.n	800d28a <_free_r+0x22>
 800d2c8:	6818      	ldr	r0, [r3, #0]
 800d2ca:	685b      	ldr	r3, [r3, #4]
 800d2cc:	6053      	str	r3, [r2, #4]
 800d2ce:	4408      	add	r0, r1
 800d2d0:	6010      	str	r0, [r2, #0]
 800d2d2:	e7da      	b.n	800d28a <_free_r+0x22>
 800d2d4:	d902      	bls.n	800d2dc <_free_r+0x74>
 800d2d6:	230c      	movs	r3, #12
 800d2d8:	602b      	str	r3, [r5, #0]
 800d2da:	e7d6      	b.n	800d28a <_free_r+0x22>
 800d2dc:	6820      	ldr	r0, [r4, #0]
 800d2de:	1821      	adds	r1, r4, r0
 800d2e0:	428b      	cmp	r3, r1
 800d2e2:	bf04      	itt	eq
 800d2e4:	6819      	ldreq	r1, [r3, #0]
 800d2e6:	685b      	ldreq	r3, [r3, #4]
 800d2e8:	6063      	str	r3, [r4, #4]
 800d2ea:	bf04      	itt	eq
 800d2ec:	1809      	addeq	r1, r1, r0
 800d2ee:	6021      	streq	r1, [r4, #0]
 800d2f0:	6054      	str	r4, [r2, #4]
 800d2f2:	e7ca      	b.n	800d28a <_free_r+0x22>
 800d2f4:	bd38      	pop	{r3, r4, r5, pc}
 800d2f6:	bf00      	nop
 800d2f8:	2000452c 	.word	0x2000452c

0800d2fc <__sfputc_r>:
 800d2fc:	6893      	ldr	r3, [r2, #8]
 800d2fe:	3b01      	subs	r3, #1
 800d300:	2b00      	cmp	r3, #0
 800d302:	b410      	push	{r4}
 800d304:	6093      	str	r3, [r2, #8]
 800d306:	da08      	bge.n	800d31a <__sfputc_r+0x1e>
 800d308:	6994      	ldr	r4, [r2, #24]
 800d30a:	42a3      	cmp	r3, r4
 800d30c:	db01      	blt.n	800d312 <__sfputc_r+0x16>
 800d30e:	290a      	cmp	r1, #10
 800d310:	d103      	bne.n	800d31a <__sfputc_r+0x1e>
 800d312:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d316:	f000 b93b 	b.w	800d590 <__swbuf_r>
 800d31a:	6813      	ldr	r3, [r2, #0]
 800d31c:	1c58      	adds	r0, r3, #1
 800d31e:	6010      	str	r0, [r2, #0]
 800d320:	7019      	strb	r1, [r3, #0]
 800d322:	4608      	mov	r0, r1
 800d324:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d328:	4770      	bx	lr

0800d32a <__sfputs_r>:
 800d32a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d32c:	4606      	mov	r6, r0
 800d32e:	460f      	mov	r7, r1
 800d330:	4614      	mov	r4, r2
 800d332:	18d5      	adds	r5, r2, r3
 800d334:	42ac      	cmp	r4, r5
 800d336:	d101      	bne.n	800d33c <__sfputs_r+0x12>
 800d338:	2000      	movs	r0, #0
 800d33a:	e007      	b.n	800d34c <__sfputs_r+0x22>
 800d33c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d340:	463a      	mov	r2, r7
 800d342:	4630      	mov	r0, r6
 800d344:	f7ff ffda 	bl	800d2fc <__sfputc_r>
 800d348:	1c43      	adds	r3, r0, #1
 800d34a:	d1f3      	bne.n	800d334 <__sfputs_r+0xa>
 800d34c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d350 <_vfiprintf_r>:
 800d350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d354:	460d      	mov	r5, r1
 800d356:	b09d      	sub	sp, #116	@ 0x74
 800d358:	4614      	mov	r4, r2
 800d35a:	4698      	mov	r8, r3
 800d35c:	4606      	mov	r6, r0
 800d35e:	b118      	cbz	r0, 800d368 <_vfiprintf_r+0x18>
 800d360:	6a03      	ldr	r3, [r0, #32]
 800d362:	b90b      	cbnz	r3, 800d368 <_vfiprintf_r+0x18>
 800d364:	f7fc fdb4 	bl	8009ed0 <__sinit>
 800d368:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d36a:	07d9      	lsls	r1, r3, #31
 800d36c:	d405      	bmi.n	800d37a <_vfiprintf_r+0x2a>
 800d36e:	89ab      	ldrh	r3, [r5, #12]
 800d370:	059a      	lsls	r2, r3, #22
 800d372:	d402      	bmi.n	800d37a <_vfiprintf_r+0x2a>
 800d374:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d376:	f7fd fd12 	bl	800ad9e <__retarget_lock_acquire_recursive>
 800d37a:	89ab      	ldrh	r3, [r5, #12]
 800d37c:	071b      	lsls	r3, r3, #28
 800d37e:	d501      	bpl.n	800d384 <_vfiprintf_r+0x34>
 800d380:	692b      	ldr	r3, [r5, #16]
 800d382:	b99b      	cbnz	r3, 800d3ac <_vfiprintf_r+0x5c>
 800d384:	4629      	mov	r1, r5
 800d386:	4630      	mov	r0, r6
 800d388:	f000 f940 	bl	800d60c <__swsetup_r>
 800d38c:	b170      	cbz	r0, 800d3ac <_vfiprintf_r+0x5c>
 800d38e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d390:	07dc      	lsls	r4, r3, #31
 800d392:	d504      	bpl.n	800d39e <_vfiprintf_r+0x4e>
 800d394:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d398:	b01d      	add	sp, #116	@ 0x74
 800d39a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d39e:	89ab      	ldrh	r3, [r5, #12]
 800d3a0:	0598      	lsls	r0, r3, #22
 800d3a2:	d4f7      	bmi.n	800d394 <_vfiprintf_r+0x44>
 800d3a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d3a6:	f7fd fcfb 	bl	800ada0 <__retarget_lock_release_recursive>
 800d3aa:	e7f3      	b.n	800d394 <_vfiprintf_r+0x44>
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3b0:	2320      	movs	r3, #32
 800d3b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d3b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d3ba:	2330      	movs	r3, #48	@ 0x30
 800d3bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d56c <_vfiprintf_r+0x21c>
 800d3c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d3c4:	f04f 0901 	mov.w	r9, #1
 800d3c8:	4623      	mov	r3, r4
 800d3ca:	469a      	mov	sl, r3
 800d3cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3d0:	b10a      	cbz	r2, 800d3d6 <_vfiprintf_r+0x86>
 800d3d2:	2a25      	cmp	r2, #37	@ 0x25
 800d3d4:	d1f9      	bne.n	800d3ca <_vfiprintf_r+0x7a>
 800d3d6:	ebba 0b04 	subs.w	fp, sl, r4
 800d3da:	d00b      	beq.n	800d3f4 <_vfiprintf_r+0xa4>
 800d3dc:	465b      	mov	r3, fp
 800d3de:	4622      	mov	r2, r4
 800d3e0:	4629      	mov	r1, r5
 800d3e2:	4630      	mov	r0, r6
 800d3e4:	f7ff ffa1 	bl	800d32a <__sfputs_r>
 800d3e8:	3001      	adds	r0, #1
 800d3ea:	f000 80a7 	beq.w	800d53c <_vfiprintf_r+0x1ec>
 800d3ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d3f0:	445a      	add	r2, fp
 800d3f2:	9209      	str	r2, [sp, #36]	@ 0x24
 800d3f4:	f89a 3000 	ldrb.w	r3, [sl]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	f000 809f 	beq.w	800d53c <_vfiprintf_r+0x1ec>
 800d3fe:	2300      	movs	r3, #0
 800d400:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d404:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d408:	f10a 0a01 	add.w	sl, sl, #1
 800d40c:	9304      	str	r3, [sp, #16]
 800d40e:	9307      	str	r3, [sp, #28]
 800d410:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d414:	931a      	str	r3, [sp, #104]	@ 0x68
 800d416:	4654      	mov	r4, sl
 800d418:	2205      	movs	r2, #5
 800d41a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d41e:	4853      	ldr	r0, [pc, #332]	@ (800d56c <_vfiprintf_r+0x21c>)
 800d420:	f7f2 ff06 	bl	8000230 <memchr>
 800d424:	9a04      	ldr	r2, [sp, #16]
 800d426:	b9d8      	cbnz	r0, 800d460 <_vfiprintf_r+0x110>
 800d428:	06d1      	lsls	r1, r2, #27
 800d42a:	bf44      	itt	mi
 800d42c:	2320      	movmi	r3, #32
 800d42e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d432:	0713      	lsls	r3, r2, #28
 800d434:	bf44      	itt	mi
 800d436:	232b      	movmi	r3, #43	@ 0x2b
 800d438:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d43c:	f89a 3000 	ldrb.w	r3, [sl]
 800d440:	2b2a      	cmp	r3, #42	@ 0x2a
 800d442:	d015      	beq.n	800d470 <_vfiprintf_r+0x120>
 800d444:	9a07      	ldr	r2, [sp, #28]
 800d446:	4654      	mov	r4, sl
 800d448:	2000      	movs	r0, #0
 800d44a:	f04f 0c0a 	mov.w	ip, #10
 800d44e:	4621      	mov	r1, r4
 800d450:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d454:	3b30      	subs	r3, #48	@ 0x30
 800d456:	2b09      	cmp	r3, #9
 800d458:	d94b      	bls.n	800d4f2 <_vfiprintf_r+0x1a2>
 800d45a:	b1b0      	cbz	r0, 800d48a <_vfiprintf_r+0x13a>
 800d45c:	9207      	str	r2, [sp, #28]
 800d45e:	e014      	b.n	800d48a <_vfiprintf_r+0x13a>
 800d460:	eba0 0308 	sub.w	r3, r0, r8
 800d464:	fa09 f303 	lsl.w	r3, r9, r3
 800d468:	4313      	orrs	r3, r2
 800d46a:	9304      	str	r3, [sp, #16]
 800d46c:	46a2      	mov	sl, r4
 800d46e:	e7d2      	b.n	800d416 <_vfiprintf_r+0xc6>
 800d470:	9b03      	ldr	r3, [sp, #12]
 800d472:	1d19      	adds	r1, r3, #4
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	9103      	str	r1, [sp, #12]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	bfbb      	ittet	lt
 800d47c:	425b      	neglt	r3, r3
 800d47e:	f042 0202 	orrlt.w	r2, r2, #2
 800d482:	9307      	strge	r3, [sp, #28]
 800d484:	9307      	strlt	r3, [sp, #28]
 800d486:	bfb8      	it	lt
 800d488:	9204      	strlt	r2, [sp, #16]
 800d48a:	7823      	ldrb	r3, [r4, #0]
 800d48c:	2b2e      	cmp	r3, #46	@ 0x2e
 800d48e:	d10a      	bne.n	800d4a6 <_vfiprintf_r+0x156>
 800d490:	7863      	ldrb	r3, [r4, #1]
 800d492:	2b2a      	cmp	r3, #42	@ 0x2a
 800d494:	d132      	bne.n	800d4fc <_vfiprintf_r+0x1ac>
 800d496:	9b03      	ldr	r3, [sp, #12]
 800d498:	1d1a      	adds	r2, r3, #4
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	9203      	str	r2, [sp, #12]
 800d49e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d4a2:	3402      	adds	r4, #2
 800d4a4:	9305      	str	r3, [sp, #20]
 800d4a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d57c <_vfiprintf_r+0x22c>
 800d4aa:	7821      	ldrb	r1, [r4, #0]
 800d4ac:	2203      	movs	r2, #3
 800d4ae:	4650      	mov	r0, sl
 800d4b0:	f7f2 febe 	bl	8000230 <memchr>
 800d4b4:	b138      	cbz	r0, 800d4c6 <_vfiprintf_r+0x176>
 800d4b6:	9b04      	ldr	r3, [sp, #16]
 800d4b8:	eba0 000a 	sub.w	r0, r0, sl
 800d4bc:	2240      	movs	r2, #64	@ 0x40
 800d4be:	4082      	lsls	r2, r0
 800d4c0:	4313      	orrs	r3, r2
 800d4c2:	3401      	adds	r4, #1
 800d4c4:	9304      	str	r3, [sp, #16]
 800d4c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4ca:	4829      	ldr	r0, [pc, #164]	@ (800d570 <_vfiprintf_r+0x220>)
 800d4cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d4d0:	2206      	movs	r2, #6
 800d4d2:	f7f2 fead 	bl	8000230 <memchr>
 800d4d6:	2800      	cmp	r0, #0
 800d4d8:	d03f      	beq.n	800d55a <_vfiprintf_r+0x20a>
 800d4da:	4b26      	ldr	r3, [pc, #152]	@ (800d574 <_vfiprintf_r+0x224>)
 800d4dc:	bb1b      	cbnz	r3, 800d526 <_vfiprintf_r+0x1d6>
 800d4de:	9b03      	ldr	r3, [sp, #12]
 800d4e0:	3307      	adds	r3, #7
 800d4e2:	f023 0307 	bic.w	r3, r3, #7
 800d4e6:	3308      	adds	r3, #8
 800d4e8:	9303      	str	r3, [sp, #12]
 800d4ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4ec:	443b      	add	r3, r7
 800d4ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800d4f0:	e76a      	b.n	800d3c8 <_vfiprintf_r+0x78>
 800d4f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800d4f6:	460c      	mov	r4, r1
 800d4f8:	2001      	movs	r0, #1
 800d4fa:	e7a8      	b.n	800d44e <_vfiprintf_r+0xfe>
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	3401      	adds	r4, #1
 800d500:	9305      	str	r3, [sp, #20]
 800d502:	4619      	mov	r1, r3
 800d504:	f04f 0c0a 	mov.w	ip, #10
 800d508:	4620      	mov	r0, r4
 800d50a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d50e:	3a30      	subs	r2, #48	@ 0x30
 800d510:	2a09      	cmp	r2, #9
 800d512:	d903      	bls.n	800d51c <_vfiprintf_r+0x1cc>
 800d514:	2b00      	cmp	r3, #0
 800d516:	d0c6      	beq.n	800d4a6 <_vfiprintf_r+0x156>
 800d518:	9105      	str	r1, [sp, #20]
 800d51a:	e7c4      	b.n	800d4a6 <_vfiprintf_r+0x156>
 800d51c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d520:	4604      	mov	r4, r0
 800d522:	2301      	movs	r3, #1
 800d524:	e7f0      	b.n	800d508 <_vfiprintf_r+0x1b8>
 800d526:	ab03      	add	r3, sp, #12
 800d528:	9300      	str	r3, [sp, #0]
 800d52a:	462a      	mov	r2, r5
 800d52c:	4b12      	ldr	r3, [pc, #72]	@ (800d578 <_vfiprintf_r+0x228>)
 800d52e:	a904      	add	r1, sp, #16
 800d530:	4630      	mov	r0, r6
 800d532:	f7fb fe25 	bl	8009180 <_printf_float>
 800d536:	4607      	mov	r7, r0
 800d538:	1c78      	adds	r0, r7, #1
 800d53a:	d1d6      	bne.n	800d4ea <_vfiprintf_r+0x19a>
 800d53c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d53e:	07d9      	lsls	r1, r3, #31
 800d540:	d405      	bmi.n	800d54e <_vfiprintf_r+0x1fe>
 800d542:	89ab      	ldrh	r3, [r5, #12]
 800d544:	059a      	lsls	r2, r3, #22
 800d546:	d402      	bmi.n	800d54e <_vfiprintf_r+0x1fe>
 800d548:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d54a:	f7fd fc29 	bl	800ada0 <__retarget_lock_release_recursive>
 800d54e:	89ab      	ldrh	r3, [r5, #12]
 800d550:	065b      	lsls	r3, r3, #25
 800d552:	f53f af1f 	bmi.w	800d394 <_vfiprintf_r+0x44>
 800d556:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d558:	e71e      	b.n	800d398 <_vfiprintf_r+0x48>
 800d55a:	ab03      	add	r3, sp, #12
 800d55c:	9300      	str	r3, [sp, #0]
 800d55e:	462a      	mov	r2, r5
 800d560:	4b05      	ldr	r3, [pc, #20]	@ (800d578 <_vfiprintf_r+0x228>)
 800d562:	a904      	add	r1, sp, #16
 800d564:	4630      	mov	r0, r6
 800d566:	f7fc f8a3 	bl	80096b0 <_printf_i>
 800d56a:	e7e4      	b.n	800d536 <_vfiprintf_r+0x1e6>
 800d56c:	0800db4e 	.word	0x0800db4e
 800d570:	0800db58 	.word	0x0800db58
 800d574:	08009181 	.word	0x08009181
 800d578:	0800d32b 	.word	0x0800d32b
 800d57c:	0800db54 	.word	0x0800db54

0800d580 <_malloc_usable_size_r>:
 800d580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d584:	1f18      	subs	r0, r3, #4
 800d586:	2b00      	cmp	r3, #0
 800d588:	bfbc      	itt	lt
 800d58a:	580b      	ldrlt	r3, [r1, r0]
 800d58c:	18c0      	addlt	r0, r0, r3
 800d58e:	4770      	bx	lr

0800d590 <__swbuf_r>:
 800d590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d592:	460e      	mov	r6, r1
 800d594:	4614      	mov	r4, r2
 800d596:	4605      	mov	r5, r0
 800d598:	b118      	cbz	r0, 800d5a2 <__swbuf_r+0x12>
 800d59a:	6a03      	ldr	r3, [r0, #32]
 800d59c:	b90b      	cbnz	r3, 800d5a2 <__swbuf_r+0x12>
 800d59e:	f7fc fc97 	bl	8009ed0 <__sinit>
 800d5a2:	69a3      	ldr	r3, [r4, #24]
 800d5a4:	60a3      	str	r3, [r4, #8]
 800d5a6:	89a3      	ldrh	r3, [r4, #12]
 800d5a8:	071a      	lsls	r2, r3, #28
 800d5aa:	d501      	bpl.n	800d5b0 <__swbuf_r+0x20>
 800d5ac:	6923      	ldr	r3, [r4, #16]
 800d5ae:	b943      	cbnz	r3, 800d5c2 <__swbuf_r+0x32>
 800d5b0:	4621      	mov	r1, r4
 800d5b2:	4628      	mov	r0, r5
 800d5b4:	f000 f82a 	bl	800d60c <__swsetup_r>
 800d5b8:	b118      	cbz	r0, 800d5c2 <__swbuf_r+0x32>
 800d5ba:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800d5be:	4638      	mov	r0, r7
 800d5c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5c2:	6823      	ldr	r3, [r4, #0]
 800d5c4:	6922      	ldr	r2, [r4, #16]
 800d5c6:	1a98      	subs	r0, r3, r2
 800d5c8:	6963      	ldr	r3, [r4, #20]
 800d5ca:	b2f6      	uxtb	r6, r6
 800d5cc:	4283      	cmp	r3, r0
 800d5ce:	4637      	mov	r7, r6
 800d5d0:	dc05      	bgt.n	800d5de <__swbuf_r+0x4e>
 800d5d2:	4621      	mov	r1, r4
 800d5d4:	4628      	mov	r0, r5
 800d5d6:	f7ff f84b 	bl	800c670 <_fflush_r>
 800d5da:	2800      	cmp	r0, #0
 800d5dc:	d1ed      	bne.n	800d5ba <__swbuf_r+0x2a>
 800d5de:	68a3      	ldr	r3, [r4, #8]
 800d5e0:	3b01      	subs	r3, #1
 800d5e2:	60a3      	str	r3, [r4, #8]
 800d5e4:	6823      	ldr	r3, [r4, #0]
 800d5e6:	1c5a      	adds	r2, r3, #1
 800d5e8:	6022      	str	r2, [r4, #0]
 800d5ea:	701e      	strb	r6, [r3, #0]
 800d5ec:	6962      	ldr	r2, [r4, #20]
 800d5ee:	1c43      	adds	r3, r0, #1
 800d5f0:	429a      	cmp	r2, r3
 800d5f2:	d004      	beq.n	800d5fe <__swbuf_r+0x6e>
 800d5f4:	89a3      	ldrh	r3, [r4, #12]
 800d5f6:	07db      	lsls	r3, r3, #31
 800d5f8:	d5e1      	bpl.n	800d5be <__swbuf_r+0x2e>
 800d5fa:	2e0a      	cmp	r6, #10
 800d5fc:	d1df      	bne.n	800d5be <__swbuf_r+0x2e>
 800d5fe:	4621      	mov	r1, r4
 800d600:	4628      	mov	r0, r5
 800d602:	f7ff f835 	bl	800c670 <_fflush_r>
 800d606:	2800      	cmp	r0, #0
 800d608:	d0d9      	beq.n	800d5be <__swbuf_r+0x2e>
 800d60a:	e7d6      	b.n	800d5ba <__swbuf_r+0x2a>

0800d60c <__swsetup_r>:
 800d60c:	b538      	push	{r3, r4, r5, lr}
 800d60e:	4b29      	ldr	r3, [pc, #164]	@ (800d6b4 <__swsetup_r+0xa8>)
 800d610:	4605      	mov	r5, r0
 800d612:	6818      	ldr	r0, [r3, #0]
 800d614:	460c      	mov	r4, r1
 800d616:	b118      	cbz	r0, 800d620 <__swsetup_r+0x14>
 800d618:	6a03      	ldr	r3, [r0, #32]
 800d61a:	b90b      	cbnz	r3, 800d620 <__swsetup_r+0x14>
 800d61c:	f7fc fc58 	bl	8009ed0 <__sinit>
 800d620:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d624:	0719      	lsls	r1, r3, #28
 800d626:	d422      	bmi.n	800d66e <__swsetup_r+0x62>
 800d628:	06da      	lsls	r2, r3, #27
 800d62a:	d407      	bmi.n	800d63c <__swsetup_r+0x30>
 800d62c:	2209      	movs	r2, #9
 800d62e:	602a      	str	r2, [r5, #0]
 800d630:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d634:	81a3      	strh	r3, [r4, #12]
 800d636:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d63a:	e033      	b.n	800d6a4 <__swsetup_r+0x98>
 800d63c:	0758      	lsls	r0, r3, #29
 800d63e:	d512      	bpl.n	800d666 <__swsetup_r+0x5a>
 800d640:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d642:	b141      	cbz	r1, 800d656 <__swsetup_r+0x4a>
 800d644:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d648:	4299      	cmp	r1, r3
 800d64a:	d002      	beq.n	800d652 <__swsetup_r+0x46>
 800d64c:	4628      	mov	r0, r5
 800d64e:	f7ff fe0b 	bl	800d268 <_free_r>
 800d652:	2300      	movs	r3, #0
 800d654:	6363      	str	r3, [r4, #52]	@ 0x34
 800d656:	89a3      	ldrh	r3, [r4, #12]
 800d658:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d65c:	81a3      	strh	r3, [r4, #12]
 800d65e:	2300      	movs	r3, #0
 800d660:	6063      	str	r3, [r4, #4]
 800d662:	6923      	ldr	r3, [r4, #16]
 800d664:	6023      	str	r3, [r4, #0]
 800d666:	89a3      	ldrh	r3, [r4, #12]
 800d668:	f043 0308 	orr.w	r3, r3, #8
 800d66c:	81a3      	strh	r3, [r4, #12]
 800d66e:	6923      	ldr	r3, [r4, #16]
 800d670:	b94b      	cbnz	r3, 800d686 <__swsetup_r+0x7a>
 800d672:	89a3      	ldrh	r3, [r4, #12]
 800d674:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d678:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d67c:	d003      	beq.n	800d686 <__swsetup_r+0x7a>
 800d67e:	4621      	mov	r1, r4
 800d680:	4628      	mov	r0, r5
 800d682:	f000 f83f 	bl	800d704 <__smakebuf_r>
 800d686:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d68a:	f013 0201 	ands.w	r2, r3, #1
 800d68e:	d00a      	beq.n	800d6a6 <__swsetup_r+0x9a>
 800d690:	2200      	movs	r2, #0
 800d692:	60a2      	str	r2, [r4, #8]
 800d694:	6962      	ldr	r2, [r4, #20]
 800d696:	4252      	negs	r2, r2
 800d698:	61a2      	str	r2, [r4, #24]
 800d69a:	6922      	ldr	r2, [r4, #16]
 800d69c:	b942      	cbnz	r2, 800d6b0 <__swsetup_r+0xa4>
 800d69e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d6a2:	d1c5      	bne.n	800d630 <__swsetup_r+0x24>
 800d6a4:	bd38      	pop	{r3, r4, r5, pc}
 800d6a6:	0799      	lsls	r1, r3, #30
 800d6a8:	bf58      	it	pl
 800d6aa:	6962      	ldrpl	r2, [r4, #20]
 800d6ac:	60a2      	str	r2, [r4, #8]
 800d6ae:	e7f4      	b.n	800d69a <__swsetup_r+0x8e>
 800d6b0:	2000      	movs	r0, #0
 800d6b2:	e7f7      	b.n	800d6a4 <__swsetup_r+0x98>
 800d6b4:	20000188 	.word	0x20000188

0800d6b8 <__swhatbuf_r>:
 800d6b8:	b570      	push	{r4, r5, r6, lr}
 800d6ba:	460c      	mov	r4, r1
 800d6bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6c0:	2900      	cmp	r1, #0
 800d6c2:	b096      	sub	sp, #88	@ 0x58
 800d6c4:	4615      	mov	r5, r2
 800d6c6:	461e      	mov	r6, r3
 800d6c8:	da0d      	bge.n	800d6e6 <__swhatbuf_r+0x2e>
 800d6ca:	89a3      	ldrh	r3, [r4, #12]
 800d6cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d6d0:	f04f 0100 	mov.w	r1, #0
 800d6d4:	bf14      	ite	ne
 800d6d6:	2340      	movne	r3, #64	@ 0x40
 800d6d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d6dc:	2000      	movs	r0, #0
 800d6de:	6031      	str	r1, [r6, #0]
 800d6e0:	602b      	str	r3, [r5, #0]
 800d6e2:	b016      	add	sp, #88	@ 0x58
 800d6e4:	bd70      	pop	{r4, r5, r6, pc}
 800d6e6:	466a      	mov	r2, sp
 800d6e8:	f000 f89c 	bl	800d824 <_fstat_r>
 800d6ec:	2800      	cmp	r0, #0
 800d6ee:	dbec      	blt.n	800d6ca <__swhatbuf_r+0x12>
 800d6f0:	9901      	ldr	r1, [sp, #4]
 800d6f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d6f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d6fa:	4259      	negs	r1, r3
 800d6fc:	4159      	adcs	r1, r3
 800d6fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d702:	e7eb      	b.n	800d6dc <__swhatbuf_r+0x24>

0800d704 <__smakebuf_r>:
 800d704:	898b      	ldrh	r3, [r1, #12]
 800d706:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d708:	079d      	lsls	r5, r3, #30
 800d70a:	4606      	mov	r6, r0
 800d70c:	460c      	mov	r4, r1
 800d70e:	d507      	bpl.n	800d720 <__smakebuf_r+0x1c>
 800d710:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d714:	6023      	str	r3, [r4, #0]
 800d716:	6123      	str	r3, [r4, #16]
 800d718:	2301      	movs	r3, #1
 800d71a:	6163      	str	r3, [r4, #20]
 800d71c:	b003      	add	sp, #12
 800d71e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d720:	ab01      	add	r3, sp, #4
 800d722:	466a      	mov	r2, sp
 800d724:	f7ff ffc8 	bl	800d6b8 <__swhatbuf_r>
 800d728:	9f00      	ldr	r7, [sp, #0]
 800d72a:	4605      	mov	r5, r0
 800d72c:	4639      	mov	r1, r7
 800d72e:	4630      	mov	r0, r6
 800d730:	f7fe fe88 	bl	800c444 <_malloc_r>
 800d734:	b948      	cbnz	r0, 800d74a <__smakebuf_r+0x46>
 800d736:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d73a:	059a      	lsls	r2, r3, #22
 800d73c:	d4ee      	bmi.n	800d71c <__smakebuf_r+0x18>
 800d73e:	f023 0303 	bic.w	r3, r3, #3
 800d742:	f043 0302 	orr.w	r3, r3, #2
 800d746:	81a3      	strh	r3, [r4, #12]
 800d748:	e7e2      	b.n	800d710 <__smakebuf_r+0xc>
 800d74a:	89a3      	ldrh	r3, [r4, #12]
 800d74c:	6020      	str	r0, [r4, #0]
 800d74e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d752:	81a3      	strh	r3, [r4, #12]
 800d754:	9b01      	ldr	r3, [sp, #4]
 800d756:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d75a:	b15b      	cbz	r3, 800d774 <__smakebuf_r+0x70>
 800d75c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d760:	4630      	mov	r0, r6
 800d762:	f000 f83b 	bl	800d7dc <_isatty_r>
 800d766:	b128      	cbz	r0, 800d774 <__smakebuf_r+0x70>
 800d768:	89a3      	ldrh	r3, [r4, #12]
 800d76a:	f023 0303 	bic.w	r3, r3, #3
 800d76e:	f043 0301 	orr.w	r3, r3, #1
 800d772:	81a3      	strh	r3, [r4, #12]
 800d774:	89a3      	ldrh	r3, [r4, #12]
 800d776:	431d      	orrs	r5, r3
 800d778:	81a5      	strh	r5, [r4, #12]
 800d77a:	e7cf      	b.n	800d71c <__smakebuf_r+0x18>

0800d77c <_raise_r>:
 800d77c:	291f      	cmp	r1, #31
 800d77e:	b538      	push	{r3, r4, r5, lr}
 800d780:	4605      	mov	r5, r0
 800d782:	460c      	mov	r4, r1
 800d784:	d904      	bls.n	800d790 <_raise_r+0x14>
 800d786:	2316      	movs	r3, #22
 800d788:	6003      	str	r3, [r0, #0]
 800d78a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d78e:	bd38      	pop	{r3, r4, r5, pc}
 800d790:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d792:	b112      	cbz	r2, 800d79a <_raise_r+0x1e>
 800d794:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d798:	b94b      	cbnz	r3, 800d7ae <_raise_r+0x32>
 800d79a:	4628      	mov	r0, r5
 800d79c:	f000 f840 	bl	800d820 <_getpid_r>
 800d7a0:	4622      	mov	r2, r4
 800d7a2:	4601      	mov	r1, r0
 800d7a4:	4628      	mov	r0, r5
 800d7a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d7aa:	f000 b827 	b.w	800d7fc <_kill_r>
 800d7ae:	2b01      	cmp	r3, #1
 800d7b0:	d00a      	beq.n	800d7c8 <_raise_r+0x4c>
 800d7b2:	1c59      	adds	r1, r3, #1
 800d7b4:	d103      	bne.n	800d7be <_raise_r+0x42>
 800d7b6:	2316      	movs	r3, #22
 800d7b8:	6003      	str	r3, [r0, #0]
 800d7ba:	2001      	movs	r0, #1
 800d7bc:	e7e7      	b.n	800d78e <_raise_r+0x12>
 800d7be:	2100      	movs	r1, #0
 800d7c0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d7c4:	4620      	mov	r0, r4
 800d7c6:	4798      	blx	r3
 800d7c8:	2000      	movs	r0, #0
 800d7ca:	e7e0      	b.n	800d78e <_raise_r+0x12>

0800d7cc <raise>:
 800d7cc:	4b02      	ldr	r3, [pc, #8]	@ (800d7d8 <raise+0xc>)
 800d7ce:	4601      	mov	r1, r0
 800d7d0:	6818      	ldr	r0, [r3, #0]
 800d7d2:	f7ff bfd3 	b.w	800d77c <_raise_r>
 800d7d6:	bf00      	nop
 800d7d8:	20000188 	.word	0x20000188

0800d7dc <_isatty_r>:
 800d7dc:	b538      	push	{r3, r4, r5, lr}
 800d7de:	4d06      	ldr	r5, [pc, #24]	@ (800d7f8 <_isatty_r+0x1c>)
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	4604      	mov	r4, r0
 800d7e4:	4608      	mov	r0, r1
 800d7e6:	602b      	str	r3, [r5, #0]
 800d7e8:	f7f4 fd4a 	bl	8002280 <_isatty>
 800d7ec:	1c43      	adds	r3, r0, #1
 800d7ee:	d102      	bne.n	800d7f6 <_isatty_r+0x1a>
 800d7f0:	682b      	ldr	r3, [r5, #0]
 800d7f2:	b103      	cbz	r3, 800d7f6 <_isatty_r+0x1a>
 800d7f4:	6023      	str	r3, [r4, #0]
 800d7f6:	bd38      	pop	{r3, r4, r5, pc}
 800d7f8:	20004530 	.word	0x20004530

0800d7fc <_kill_r>:
 800d7fc:	b538      	push	{r3, r4, r5, lr}
 800d7fe:	4d07      	ldr	r5, [pc, #28]	@ (800d81c <_kill_r+0x20>)
 800d800:	2300      	movs	r3, #0
 800d802:	4604      	mov	r4, r0
 800d804:	4608      	mov	r0, r1
 800d806:	4611      	mov	r1, r2
 800d808:	602b      	str	r3, [r5, #0]
 800d80a:	f7f4 fcc9 	bl	80021a0 <_kill>
 800d80e:	1c43      	adds	r3, r0, #1
 800d810:	d102      	bne.n	800d818 <_kill_r+0x1c>
 800d812:	682b      	ldr	r3, [r5, #0]
 800d814:	b103      	cbz	r3, 800d818 <_kill_r+0x1c>
 800d816:	6023      	str	r3, [r4, #0]
 800d818:	bd38      	pop	{r3, r4, r5, pc}
 800d81a:	bf00      	nop
 800d81c:	20004530 	.word	0x20004530

0800d820 <_getpid_r>:
 800d820:	f7f4 bcb6 	b.w	8002190 <_getpid>

0800d824 <_fstat_r>:
 800d824:	b538      	push	{r3, r4, r5, lr}
 800d826:	4d07      	ldr	r5, [pc, #28]	@ (800d844 <_fstat_r+0x20>)
 800d828:	2300      	movs	r3, #0
 800d82a:	4604      	mov	r4, r0
 800d82c:	4608      	mov	r0, r1
 800d82e:	4611      	mov	r1, r2
 800d830:	602b      	str	r3, [r5, #0]
 800d832:	f7f4 fd15 	bl	8002260 <_fstat>
 800d836:	1c43      	adds	r3, r0, #1
 800d838:	d102      	bne.n	800d840 <_fstat_r+0x1c>
 800d83a:	682b      	ldr	r3, [r5, #0]
 800d83c:	b103      	cbz	r3, 800d840 <_fstat_r+0x1c>
 800d83e:	6023      	str	r3, [r4, #0]
 800d840:	bd38      	pop	{r3, r4, r5, pc}
 800d842:	bf00      	nop
 800d844:	20004530 	.word	0x20004530

0800d848 <_init>:
 800d848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d84a:	bf00      	nop
 800d84c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d84e:	bc08      	pop	{r3}
 800d850:	469e      	mov	lr, r3
 800d852:	4770      	bx	lr

0800d854 <_fini>:
 800d854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d856:	bf00      	nop
 800d858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d85a:	bc08      	pop	{r3}
 800d85c:	469e      	mov	lr, r3
 800d85e:	4770      	bx	lr
