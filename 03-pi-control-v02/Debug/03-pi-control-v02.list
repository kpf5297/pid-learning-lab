
03-pi-control-v02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d0cc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  0800d2a0  0800d2a0  0000e2a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d794  0800d794  0000f1e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d794  0800d794  0000e794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d79c  0800d79c  0000f1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d79c  0800d79c  0000e79c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d7a0  0800d7a0  0000e7a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800d7a4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043a0  200001e4  0800d988  0000f1e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004584  0800d988  0000f584  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019c8e  00000000  00000000  0000f214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004366  00000000  00000000  00028ea2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a0  00000000  00000000  0002d208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000116d  00000000  00000000  0002e8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005316  00000000  00000000  0002fa15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c13d  00000000  00000000  00034d2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e93f8  00000000  00000000  00050e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013a260  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072fc  00000000  00000000  0013a2a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  001415a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d284 	.word	0x0800d284

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	0800d284 	.word	0x0800d284

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9be 	b.w	800105c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	468e      	mov	lr, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	4688      	mov	r8, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d962      	bls.n	8000e40 <__udivmoddi4+0xdc>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	b14e      	cbz	r6, 8000d94 <__udivmoddi4+0x30>
 8000d80:	f1c6 0320 	rsb	r3, r6, #32
 8000d84:	fa01 f806 	lsl.w	r8, r1, r6
 8000d88:	fa20 f303 	lsr.w	r3, r0, r3
 8000d8c:	40b7      	lsls	r7, r6
 8000d8e:	ea43 0808 	orr.w	r8, r3, r8
 8000d92:	40b4      	lsls	r4, r6
 8000d94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d98:	fa1f fc87 	uxth.w	ip, r7
 8000d9c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000da0:	0c23      	lsrs	r3, r4, #16
 8000da2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000da6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000daa:	fb01 f20c 	mul.w	r2, r1, ip
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000db8:	f080 80ea 	bcs.w	8000f90 <__udivmoddi4+0x22c>
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	f240 80e7 	bls.w	8000f90 <__udivmoddi4+0x22c>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	443b      	add	r3, r7
 8000dc6:	1a9a      	subs	r2, r3, r2
 8000dc8:	b2a3      	uxth	r3, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dd6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dda:	459c      	cmp	ip, r3
 8000ddc:	d909      	bls.n	8000df2 <__udivmoddi4+0x8e>
 8000dde:	18fb      	adds	r3, r7, r3
 8000de0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de4:	f080 80d6 	bcs.w	8000f94 <__udivmoddi4+0x230>
 8000de8:	459c      	cmp	ip, r3
 8000dea:	f240 80d3 	bls.w	8000f94 <__udivmoddi4+0x230>
 8000dee:	443b      	add	r3, r7
 8000df0:	3802      	subs	r0, #2
 8000df2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df6:	eba3 030c 	sub.w	r3, r3, ip
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11d      	cbz	r5, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40f3      	lsrs	r3, r6
 8000e00:	2200      	movs	r2, #0
 8000e02:	e9c5 3200 	strd	r3, r2, [r5]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d905      	bls.n	8000e1a <__udivmoddi4+0xb6>
 8000e0e:	b10d      	cbz	r5, 8000e14 <__udivmoddi4+0xb0>
 8000e10:	e9c5 0100 	strd	r0, r1, [r5]
 8000e14:	2100      	movs	r1, #0
 8000e16:	4608      	mov	r0, r1
 8000e18:	e7f5      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e1a:	fab3 f183 	clz	r1, r3
 8000e1e:	2900      	cmp	r1, #0
 8000e20:	d146      	bne.n	8000eb0 <__udivmoddi4+0x14c>
 8000e22:	4573      	cmp	r3, lr
 8000e24:	d302      	bcc.n	8000e2c <__udivmoddi4+0xc8>
 8000e26:	4282      	cmp	r2, r0
 8000e28:	f200 8105 	bhi.w	8001036 <__udivmoddi4+0x2d2>
 8000e2c:	1a84      	subs	r4, r0, r2
 8000e2e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e32:	2001      	movs	r0, #1
 8000e34:	4690      	mov	r8, r2
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d0e5      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e3a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e3e:	e7e2      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	f000 8090 	beq.w	8000f66 <__udivmoddi4+0x202>
 8000e46:	fab2 f682 	clz	r6, r2
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	f040 80a4 	bne.w	8000f98 <__udivmoddi4+0x234>
 8000e50:	1a8a      	subs	r2, r1, r2
 8000e52:	0c03      	lsrs	r3, r0, #16
 8000e54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e58:	b280      	uxth	r0, r0
 8000e5a:	b2bc      	uxth	r4, r7
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e62:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e6a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x11e>
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x11c>
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	f200 80e0 	bhi.w	8001040 <__udivmoddi4+0x2dc>
 8000e80:	46c4      	mov	ip, r8
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e88:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e8c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e90:	fb02 f404 	mul.w	r4, r2, r4
 8000e94:	429c      	cmp	r4, r3
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x144>
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x142>
 8000ea0:	429c      	cmp	r4, r3
 8000ea2:	f200 80ca 	bhi.w	800103a <__udivmoddi4+0x2d6>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000eae:	e7a5      	b.n	8000dfc <__udivmoddi4+0x98>
 8000eb0:	f1c1 0620 	rsb	r6, r1, #32
 8000eb4:	408b      	lsls	r3, r1
 8000eb6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eba:	431f      	orrs	r7, r3
 8000ebc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ec0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ec4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ec8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	fa1f fc87 	uxth.w	ip, r7
 8000ed6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eda:	0c1c      	lsrs	r4, r3, #16
 8000edc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ee0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ee4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	fa02 f201 	lsl.w	r2, r2, r1
 8000eee:	d909      	bls.n	8000f04 <__udivmoddi4+0x1a0>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ef6:	f080 809c 	bcs.w	8001032 <__udivmoddi4+0x2ce>
 8000efa:	45a6      	cmp	lr, r4
 8000efc:	f240 8099 	bls.w	8001032 <__udivmoddi4+0x2ce>
 8000f00:	3802      	subs	r0, #2
 8000f02:	443c      	add	r4, r7
 8000f04:	eba4 040e 	sub.w	r4, r4, lr
 8000f08:	fa1f fe83 	uxth.w	lr, r3
 8000f0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f10:	fb09 4413 	mls	r4, r9, r3, r4
 8000f14:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f18:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f1c:	45a4      	cmp	ip, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1ce>
 8000f20:	193c      	adds	r4, r7, r4
 8000f22:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f26:	f080 8082 	bcs.w	800102e <__udivmoddi4+0x2ca>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d97f      	bls.n	800102e <__udivmoddi4+0x2ca>
 8000f2e:	3b02      	subs	r3, #2
 8000f30:	443c      	add	r4, r7
 8000f32:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f36:	eba4 040c 	sub.w	r4, r4, ip
 8000f3a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f3e:	4564      	cmp	r4, ip
 8000f40:	4673      	mov	r3, lr
 8000f42:	46e1      	mov	r9, ip
 8000f44:	d362      	bcc.n	800100c <__udivmoddi4+0x2a8>
 8000f46:	d05f      	beq.n	8001008 <__udivmoddi4+0x2a4>
 8000f48:	b15d      	cbz	r5, 8000f62 <__udivmoddi4+0x1fe>
 8000f4a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f4e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f52:	fa04 f606 	lsl.w	r6, r4, r6
 8000f56:	fa22 f301 	lsr.w	r3, r2, r1
 8000f5a:	431e      	orrs	r6, r3
 8000f5c:	40cc      	lsrs	r4, r1
 8000f5e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f62:	2100      	movs	r1, #0
 8000f64:	e74f      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000f66:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f6a:	0c01      	lsrs	r1, r0, #16
 8000f6c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f70:	b280      	uxth	r0, r0
 8000f72:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f76:	463b      	mov	r3, r7
 8000f78:	4638      	mov	r0, r7
 8000f7a:	463c      	mov	r4, r7
 8000f7c:	46b8      	mov	r8, r7
 8000f7e:	46be      	mov	lr, r7
 8000f80:	2620      	movs	r6, #32
 8000f82:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f86:	eba2 0208 	sub.w	r2, r2, r8
 8000f8a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f8e:	e766      	b.n	8000e5e <__udivmoddi4+0xfa>
 8000f90:	4601      	mov	r1, r0
 8000f92:	e718      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000f94:	4610      	mov	r0, r2
 8000f96:	e72c      	b.n	8000df2 <__udivmoddi4+0x8e>
 8000f98:	f1c6 0220 	rsb	r2, r6, #32
 8000f9c:	fa2e f302 	lsr.w	r3, lr, r2
 8000fa0:	40b7      	lsls	r7, r6
 8000fa2:	40b1      	lsls	r1, r6
 8000fa4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fa8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fac:	430a      	orrs	r2, r1
 8000fae:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fb2:	b2bc      	uxth	r4, r7
 8000fb4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fb8:	0c11      	lsrs	r1, r2, #16
 8000fba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fbe:	fb08 f904 	mul.w	r9, r8, r4
 8000fc2:	40b0      	lsls	r0, r6
 8000fc4:	4589      	cmp	r9, r1
 8000fc6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fca:	b280      	uxth	r0, r0
 8000fcc:	d93e      	bls.n	800104c <__udivmoddi4+0x2e8>
 8000fce:	1879      	adds	r1, r7, r1
 8000fd0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fd4:	d201      	bcs.n	8000fda <__udivmoddi4+0x276>
 8000fd6:	4589      	cmp	r9, r1
 8000fd8:	d81f      	bhi.n	800101a <__udivmoddi4+0x2b6>
 8000fda:	eba1 0109 	sub.w	r1, r1, r9
 8000fde:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe2:	fb09 f804 	mul.w	r8, r9, r4
 8000fe6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fea:	b292      	uxth	r2, r2
 8000fec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ff0:	4542      	cmp	r2, r8
 8000ff2:	d229      	bcs.n	8001048 <__udivmoddi4+0x2e4>
 8000ff4:	18ba      	adds	r2, r7, r2
 8000ff6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ffa:	d2c4      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8000ffc:	4542      	cmp	r2, r8
 8000ffe:	d2c2      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8001000:	f1a9 0102 	sub.w	r1, r9, #2
 8001004:	443a      	add	r2, r7
 8001006:	e7be      	b.n	8000f86 <__udivmoddi4+0x222>
 8001008:	45f0      	cmp	r8, lr
 800100a:	d29d      	bcs.n	8000f48 <__udivmoddi4+0x1e4>
 800100c:	ebbe 0302 	subs.w	r3, lr, r2
 8001010:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001014:	3801      	subs	r0, #1
 8001016:	46e1      	mov	r9, ip
 8001018:	e796      	b.n	8000f48 <__udivmoddi4+0x1e4>
 800101a:	eba7 0909 	sub.w	r9, r7, r9
 800101e:	4449      	add	r1, r9
 8001020:	f1a8 0c02 	sub.w	ip, r8, #2
 8001024:	fbb1 f9fe 	udiv	r9, r1, lr
 8001028:	fb09 f804 	mul.w	r8, r9, r4
 800102c:	e7db      	b.n	8000fe6 <__udivmoddi4+0x282>
 800102e:	4673      	mov	r3, lr
 8001030:	e77f      	b.n	8000f32 <__udivmoddi4+0x1ce>
 8001032:	4650      	mov	r0, sl
 8001034:	e766      	b.n	8000f04 <__udivmoddi4+0x1a0>
 8001036:	4608      	mov	r0, r1
 8001038:	e6fd      	b.n	8000e36 <__udivmoddi4+0xd2>
 800103a:	443b      	add	r3, r7
 800103c:	3a02      	subs	r2, #2
 800103e:	e733      	b.n	8000ea8 <__udivmoddi4+0x144>
 8001040:	f1ac 0c02 	sub.w	ip, ip, #2
 8001044:	443b      	add	r3, r7
 8001046:	e71c      	b.n	8000e82 <__udivmoddi4+0x11e>
 8001048:	4649      	mov	r1, r9
 800104a:	e79c      	b.n	8000f86 <__udivmoddi4+0x222>
 800104c:	eba1 0109 	sub.w	r1, r1, r9
 8001050:	46c4      	mov	ip, r8
 8001052:	fbb1 f9fe 	udiv	r9, r1, lr
 8001056:	fb09 f804 	mul.w	r8, r9, r4
 800105a:	e7c4      	b.n	8000fe6 <__udivmoddi4+0x282>

0800105c <__aeabi_idiv0>:
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <fault_init>:
    ts.subseconds = ticks % TICKS_PER_SECOND;
    return ts;
}

void fault_init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
    memset(&fault_state, 0, sizeof(fault_state));
 8001064:	224c      	movs	r2, #76	@ 0x4c
 8001066:	2100      	movs	r1, #0
 8001068:	4802      	ldr	r0, [pc, #8]	@ (8001074 <fault_init+0x14>)
 800106a:	f008 fd31 	bl	8009ad0 <memset>
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000200 	.word	0x20000200

08001078 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	4a07      	ldr	r2, [pc, #28]	@ (80010a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8001088:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	4a06      	ldr	r2, [pc, #24]	@ (80010a8 <vApplicationGetIdleTaskMemory+0x30>)
 800108e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2280      	movs	r2, #128	@ 0x80
 8001094:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001096:	bf00      	nop
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	2000024c 	.word	0x2000024c
 80010a8:	200002a0 	.word	0x200002a0

080010ac <log_tx>:
static QueueHandle_t log_queue = NULL;
static QueueHandle_t telemetry_queue = NULL;
static LogLevel current_level = LOG_LEVEL_INFO;

static void log_tx(const uint8_t *data, size_t len, bool telemetry)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	4613      	mov	r3, r2
 80010b8:	71fb      	strb	r3, [r7, #7]
#if LOG_TX_USE_DMA
    if (!telemetry && log_uart && log_uart->hdma_tx) {
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	f083 0301 	eor.w	r3, r3, #1
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d010      	beq.n	80010e8 <log_tx+0x3c>
 80010c6:	4b19      	ldr	r3, [pc, #100]	@ (800112c <log_tx+0x80>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d00c      	beq.n	80010e8 <log_tx+0x3c>
 80010ce:	4b17      	ldr	r3, [pc, #92]	@ (800112c <log_tx+0x80>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d007      	beq.n	80010e8 <log_tx+0x3c>
        uart_send_dma_blocking(log_uart, (uint8_t *)data, len, 100);
 80010d8:	4b14      	ldr	r3, [pc, #80]	@ (800112c <log_tx+0x80>)
 80010da:	6818      	ldr	r0, [r3, #0]
 80010dc:	2364      	movs	r3, #100	@ 0x64
 80010de:	68ba      	ldr	r2, [r7, #8]
 80010e0:	68f9      	ldr	r1, [r7, #12]
 80010e2:	f001 f97b 	bl	80023dc <uart_send_dma_blocking>
        return;
 80010e6:	e01e      	b.n	8001126 <log_tx+0x7a>
    }
#endif
#if TELEMETRY_TX_USE_DMA
    if (telemetry && log_uart && log_uart->hdma_tx) {
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d010      	beq.n	8001110 <log_tx+0x64>
 80010ee:	4b0f      	ldr	r3, [pc, #60]	@ (800112c <log_tx+0x80>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d00c      	beq.n	8001110 <log_tx+0x64>
 80010f6:	4b0d      	ldr	r3, [pc, #52]	@ (800112c <log_tx+0x80>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d007      	beq.n	8001110 <log_tx+0x64>
        uart_send_dma_blocking(log_uart, (uint8_t *)data, len, 100);
 8001100:	4b0a      	ldr	r3, [pc, #40]	@ (800112c <log_tx+0x80>)
 8001102:	6818      	ldr	r0, [r3, #0]
 8001104:	2364      	movs	r3, #100	@ 0x64
 8001106:	68ba      	ldr	r2, [r7, #8]
 8001108:	68f9      	ldr	r1, [r7, #12]
 800110a:	f001 f967 	bl	80023dc <uart_send_dma_blocking>
        return;
 800110e:	e00a      	b.n	8001126 <log_tx+0x7a>
    }
#endif
    if (log_uart)
 8001110:	4b06      	ldr	r3, [pc, #24]	@ (800112c <log_tx+0x80>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d006      	beq.n	8001126 <log_tx+0x7a>
        uart_send_blocking(log_uart, (uint8_t *)data, len, 100);
 8001118:	4b04      	ldr	r3, [pc, #16]	@ (800112c <log_tx+0x80>)
 800111a:	6818      	ldr	r0, [r3, #0]
 800111c:	2364      	movs	r3, #100	@ 0x64
 800111e:	68ba      	ldr	r2, [r7, #8]
 8001120:	68f9      	ldr	r1, [r7, #12]
 8001122:	f001 f923 	bl	800236c <uart_send_blocking>
}
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	200004a0 	.word	0x200004a0

08001130 <get_current_timestamp>:
static void log_task(void *arg);


// Fully contained timestamp stub
static Timestamp get_current_timestamp(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
    TickType_t ticks = xTaskGetTickCount();
 8001138:	f006 fb9a 	bl	8007870 <xTaskGetTickCount>
 800113c:	6178      	str	r0, [r7, #20]
    Timestamp ts;
    ts.seconds = ticks / 1000;
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	4a0d      	ldr	r2, [pc, #52]	@ (8001178 <get_current_timestamp+0x48>)
 8001142:	fba2 2303 	umull	r2, r3, r2, r3
 8001146:	099b      	lsrs	r3, r3, #6
 8001148:	60fb      	str	r3, [r7, #12]
    ts.subseconds = ticks % 1000;
 800114a:	697a      	ldr	r2, [r7, #20]
 800114c:	4b0a      	ldr	r3, [pc, #40]	@ (8001178 <get_current_timestamp+0x48>)
 800114e:	fba3 1302 	umull	r1, r3, r3, r2
 8001152:	099b      	lsrs	r3, r3, #6
 8001154:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001158:	fb01 f303 	mul.w	r3, r1, r3
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	613b      	str	r3, [r7, #16]
    return ts;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	461a      	mov	r2, r3
 8001164:	f107 030c 	add.w	r3, r7, #12
 8001168:	e893 0003 	ldmia.w	r3, {r0, r1}
 800116c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	3718      	adds	r7, #24
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	10624dd3 	.word	0x10624dd3

0800117c <log_init>:

// Public initialization
void log_init(uart_drv_t *drv)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af02      	add	r7, sp, #8
 8001182:	6078      	str	r0, [r7, #4]
#if LOGGING_ENABLED
    log_uart = drv;
 8001184:	4a13      	ldr	r2, [pc, #76]	@ (80011d4 <log_init+0x58>)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6013      	str	r3, [r2, #0]
    log_queue = xQueueCreate(LOG_QUEUE_DEPTH, sizeof(LogEntry));
 800118a:	2200      	movs	r2, #0
 800118c:	218c      	movs	r1, #140	@ 0x8c
 800118e:	2020      	movs	r0, #32
 8001190:	f005 fbea 	bl	8006968 <xQueueGenericCreate>
 8001194:	4603      	mov	r3, r0
 8001196:	4a10      	ldr	r2, [pc, #64]	@ (80011d8 <log_init+0x5c>)
 8001198:	6013      	str	r3, [r2, #0]
    telemetry_queue = xQueueCreate(16, sizeof(TelemetryPacket));
 800119a:	2200      	movs	r2, #0
 800119c:	2108      	movs	r1, #8
 800119e:	2010      	movs	r0, #16
 80011a0:	f005 fbe2 	bl	8006968 <xQueueGenericCreate>
 80011a4:	4603      	mov	r3, r0
 80011a6:	4a0d      	ldr	r2, [pc, #52]	@ (80011dc <log_init+0x60>)
 80011a8:	6013      	str	r3, [r2, #0]
    fault_init();
 80011aa:	f7ff ff59 	bl	8001060 <fault_init>

    if (log_queue) {
 80011ae:	4b0a      	ldr	r3, [pc, #40]	@ (80011d8 <log_init+0x5c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d00a      	beq.n	80011cc <log_init+0x50>
        xTaskCreate(log_task, "Logger", LOG_TASK_STACK, NULL, LOG_TASK_PRIO, NULL);
 80011b6:	2300      	movs	r3, #0
 80011b8:	9301      	str	r3, [sp, #4]
 80011ba:	2301      	movs	r3, #1
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	2300      	movs	r3, #0
 80011c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011c4:	4906      	ldr	r1, [pc, #24]	@ (80011e0 <log_init+0x64>)
 80011c6:	4807      	ldr	r0, [pc, #28]	@ (80011e4 <log_init+0x68>)
 80011c8:	f006 f8d6 	bl	8007378 <xTaskCreate>
    }
#endif
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	200004a0 	.word	0x200004a0
 80011d8:	200004a4 	.word	0x200004a4
 80011dc:	200004a8 	.word	0x200004a8
 80011e0:	0800d2a0 	.word	0x0800d2a0
 80011e4:	080012a5 	.word	0x080012a5

080011e8 <log_write>:

// Log write API (non-blocking enqueue)
void log_write(LogLevel level, const char *fmt, ...)
{
 80011e8:	b40e      	push	{r1, r2, r3}
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b0a9      	sub	sp, #164	@ 0xa4
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	4603      	mov	r3, r0
 80011f2:	73fb      	strb	r3, [r7, #15]
#if LOGGING_ENABLED
    if (level < current_level) return;
 80011f4:	4b1d      	ldr	r3, [pc, #116]	@ (800126c <log_write+0x84>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	7bfa      	ldrb	r2, [r7, #15]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d32d      	bcc.n	800125a <log_write+0x72>
    if (!log_queue) return;
 80011fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001270 <log_write+0x88>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d02b      	beq.n	800125e <log_write+0x76>

    LogEntry entry = {0};
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	228c      	movs	r2, #140	@ 0x8c
 800120c:	2100      	movs	r1, #0
 800120e:	4618      	mov	r0, r3
 8001210:	f008 fc5e 	bl	8009ad0 <memset>
    entry.ts = get_current_timestamp();
 8001214:	463b      	mov	r3, r7
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff ff8a 	bl	8001130 <get_current_timestamp>
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	463a      	mov	r2, r7
 8001222:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001226:	e883 0003 	stmia.w	r3, {r0, r1}
    entry.level = level;
 800122a:	7bfb      	ldrb	r3, [r7, #15]
 800122c:	773b      	strb	r3, [r7, #28]

    va_list args;
    va_start(args, fmt);
 800122e:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8001232:	613b      	str	r3, [r7, #16]
    vsnprintf(entry.payload, sizeof(entry.payload), fmt, args);
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	f103 0009 	add.w	r0, r3, #9
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001242:	2180      	movs	r1, #128	@ 0x80
 8001244:	f008 fc36 	bl	8009ab4 <vsniprintf>
    va_end(args);

    xQueueSend(log_queue, &entry, 0);  // No block if queue full
 8001248:	4b09      	ldr	r3, [pc, #36]	@ (8001270 <log_write+0x88>)
 800124a:	6818      	ldr	r0, [r3, #0]
 800124c:	f107 0114 	add.w	r1, r7, #20
 8001250:	2300      	movs	r3, #0
 8001252:	2200      	movs	r2, #0
 8001254:	f005 fc14 	bl	8006a80 <xQueueGenericSend>
 8001258:	e002      	b.n	8001260 <log_write+0x78>
    if (level < current_level) return;
 800125a:	bf00      	nop
 800125c:	e000      	b.n	8001260 <log_write+0x78>
    if (!log_queue) return;
 800125e:	bf00      	nop
#endif
}
 8001260:	37a4      	adds	r7, #164	@ 0xa4
 8001262:	46bd      	mov	sp, r7
 8001264:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001268:	b003      	add	sp, #12
 800126a:	4770      	bx	lr
 800126c:	20000000 	.word	0x20000000
 8001270:	200004a4 	.word	0x200004a4

08001274 <telemetry_send>:

void telemetry_send(const TelemetryPacket *pkt)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
#if LOGGING_ENABLED
    if (telemetry_queue && pkt) {
 800127c:	4b08      	ldr	r3, [pc, #32]	@ (80012a0 <telemetry_send+0x2c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d009      	beq.n	8001298 <telemetry_send+0x24>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d006      	beq.n	8001298 <telemetry_send+0x24>
        xQueueSend(telemetry_queue, pkt, 0);  // No blocking
 800128a:	4b05      	ldr	r3, [pc, #20]	@ (80012a0 <telemetry_send+0x2c>)
 800128c:	6818      	ldr	r0, [r3, #0]
 800128e:	2300      	movs	r3, #0
 8001290:	2200      	movs	r2, #0
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	f005 fbf4 	bl	8006a80 <xQueueGenericSend>
    }
#endif
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	200004a8 	.word	0x200004a8

080012a4 <log_task>:


// Logging task: drain queue and transmit
static void log_task(void *arg)
{
 80012a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012a6:	b0f9      	sub	sp, #484	@ 0x1e4
 80012a8:	af06      	add	r7, sp, #24
 80012aa:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 80012ae:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80012b2:	6018      	str	r0, [r3, #0]
    LogEntry entry;
    char out_buf[256];
    TickType_t last_fault_check = xTaskGetTickCount();
 80012b4:	f006 fadc 	bl	8007870 <xTaskGetTickCount>
 80012b8:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4

    for (;;) {
        // Process log queue first
        if (xQueueReceive(log_queue, &entry, pdMS_TO_TICKS(10)) == pdPASS) {
 80012bc:	4b55      	ldr	r3, [pc, #340]	@ (8001414 <log_task+0x170>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 80012c4:	220a      	movs	r2, #10
 80012c6:	4618      	mov	r0, r3
 80012c8:	f005 fcdc 	bl	8006c84 <xQueueReceive>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d11e      	bne.n	8001310 <log_task+0x6c>
            int len = snprintf(out_buf, sizeof(out_buf),
 80012d2:	f8d7 1118 	ldr.w	r1, [r7, #280]	@ 0x118
 80012d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
                               "[%lu.%03lu] [%d] %s\r\n",
                               entry.ts.seconds,
                               entry.ts.subseconds,
                               entry.level,
 80012da:	f897 2120 	ldrb.w	r2, [r7, #288]	@ 0x120
            int len = snprintf(out_buf, sizeof(out_buf),
 80012de:	4614      	mov	r4, r2
 80012e0:	f107 0018 	add.w	r0, r7, #24
 80012e4:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80012e8:	3209      	adds	r2, #9
 80012ea:	9202      	str	r2, [sp, #8]
 80012ec:	9401      	str	r4, [sp, #4]
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	460b      	mov	r3, r1
 80012f2:	4a49      	ldr	r2, [pc, #292]	@ (8001418 <log_task+0x174>)
 80012f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012f8:	f008 fb12 	bl	8009920 <sniprintf>
 80012fc:	f8c7 01c0 	str.w	r0, [r7, #448]	@ 0x1c0
                               entry.payload);

            log_tx((const uint8_t *)out_buf, len, false);
 8001300:	f8d7 11c0 	ldr.w	r1, [r7, #448]	@ 0x1c0
 8001304:	f107 0318 	add.w	r3, r7, #24
 8001308:	2200      	movs	r2, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fece 	bl	80010ac <log_tx>
        }

        // Then check telemetry queue
        TelemetryPacket pkt;
        if (xQueueReceive(telemetry_queue, &pkt, 0) == pdPASS) {
 8001310:	4b42      	ldr	r3, [pc, #264]	@ (800141c <log_task+0x178>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f107 0110 	add.w	r1, r7, #16
 8001318:	2200      	movs	r2, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f005 fcb2 	bl	8006c84 <xQueueReceive>
 8001320:	4603      	mov	r3, r0
 8001322:	2b01      	cmp	r3, #1
 8001324:	d139      	bne.n	800139a <log_task+0xf6>
            int len = snprintf(out_buf, sizeof(out_buf),
                               "[%lu.%03lu] TLM sensor1=%.2f sensor2=%.2f\r\n",
                               get_current_timestamp().seconds,
 8001326:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff ff00 	bl	8001130 <get_current_timestamp>
            int len = snprintf(out_buf, sizeof(out_buf),
 8001330:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001334:	603b      	str	r3, [r7, #0]
                               get_current_timestamp().subseconds,
 8001336:	f507 73d6 	add.w	r3, r7, #428	@ 0x1ac
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff fef8 	bl	8001130 <get_current_timestamp>
            int len = snprintf(out_buf, sizeof(out_buf),
 8001340:	f8d7 61b0 	ldr.w	r6, [r7, #432]	@ 0x1b0
                               pkt.brightness, pkt.duty);
 8001344:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8001348:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800134c:	681b      	ldr	r3, [r3, #0]
            int len = snprintf(out_buf, sizeof(out_buf),
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff f91a 	bl	8000588 <__aeabi_f2d>
 8001354:	4604      	mov	r4, r0
 8001356:	460d      	mov	r5, r1
                               pkt.brightness, pkt.duty);
 8001358:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800135c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001360:	685b      	ldr	r3, [r3, #4]
            int len = snprintf(out_buf, sizeof(out_buf),
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff f910 	bl	8000588 <__aeabi_f2d>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	f107 0018 	add.w	r0, r7, #24
 8001370:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001374:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001378:	9600      	str	r6, [sp, #0]
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	4a28      	ldr	r2, [pc, #160]	@ (8001420 <log_task+0x17c>)
 800137e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001382:	f008 facd 	bl	8009920 <sniprintf>
 8001386:	f8c7 01bc 	str.w	r0, [r7, #444]	@ 0x1bc

            log_tx((const uint8_t *)out_buf, len, true);
 800138a:	f8d7 11bc 	ldr.w	r1, [r7, #444]	@ 0x1bc
 800138e:	f107 0318 	add.w	r3, r7, #24
 8001392:	2201      	movs	r2, #1
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fe89 	bl	80010ac <log_tx>
        }

        TickType_t now = xTaskGetTickCount();
 800139a:	f006 fa69 	bl	8007870 <xTaskGetTickCount>
 800139e:	f8c7 01b8 	str.w	r0, [r7, #440]	@ 0x1b8
        if (now - last_fault_check >= pdMS_TO_TICKS(500)) {
 80013a2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80013a6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80013b0:	d384      	bcc.n	80012bc <log_task+0x18>
            last_fault_check = now;
 80013b2:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80013b6:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
            if (fault_state.active_mask) {
 80013ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001424 <log_task+0x180>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f43f af7c 	beq.w	80012bc <log_task+0x18>
                Timestamp ts = get_current_timestamp();
 80013c4:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 80013c8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff feaf 	bl	8001130 <get_current_timestamp>
                int len = snprintf(out_buf, sizeof(out_buf),
 80013d2:	4b14      	ldr	r3, [pc, #80]	@ (8001424 <log_task+0x180>)
 80013d4:	6819      	ldr	r1, [r3, #0]
 80013d6:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 80013da:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 80013e4:	f5a2 72e0 	sub.w	r2, r2, #448	@ 0x1c0
 80013e8:	6852      	ldr	r2, [r2, #4]
 80013ea:	f107 0018 	add.w	r0, r7, #24
 80013ee:	9201      	str	r2, [sp, #4]
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	460b      	mov	r3, r1
 80013f4:	4a0c      	ldr	r2, [pc, #48]	@ (8001428 <log_task+0x184>)
 80013f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013fa:	f008 fa91 	bl	8009920 <sniprintf>
 80013fe:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
                                   "FLT,ACTIVE=0x%08lX,TIME=%lu.%03lus\r\n",
                                   fault_state.active_mask,
                                   ts.seconds, ts.subseconds);
                log_tx((const uint8_t *)out_buf, len, false);
 8001402:	f8d7 11b4 	ldr.w	r1, [r7, #436]	@ 0x1b4
 8001406:	f107 0318 	add.w	r3, r7, #24
 800140a:	2200      	movs	r2, #0
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff fe4d 	bl	80010ac <log_tx>
    for (;;) {
 8001412:	e753      	b.n	80012bc <log_task+0x18>
 8001414:	200004a4 	.word	0x200004a4
 8001418:	0800d2a8 	.word	0x0800d2a8
 800141c:	200004a8 	.word	0x200004a8
 8001420:	0800d2c0 	.word	0x0800d2c0
 8001424:	20000200 	.word	0x20000200
 8001428:	0800d2ec 	.word	0x0800d2ec

0800142c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800142c:	b5b0      	push	{r4, r5, r7, lr}
 800142e:	b088      	sub	sp, #32
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001432:	f001 f8ab 	bl	800258c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001436:	f000 f835 	bl	80014a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800143a:	f000 f9a1 	bl	8001780 <MX_GPIO_Init>
  MX_DMA_Init();
 800143e:	f000 f977 	bl	8001730 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001442:	f000 f94b 	bl	80016dc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001446:	f000 f89f 	bl	8001588 <MX_ADC1_Init>
  MX_TIM2_Init();
 800144a:	f000 f8ef 	bl	800162c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  uart_init(&shared_uart, &huart2, &hdma_usart2_tx, &hdma_usart2_rx);
 800144e:	4b0f      	ldr	r3, [pc, #60]	@ (800148c <main+0x60>)
 8001450:	4a0f      	ldr	r2, [pc, #60]	@ (8001490 <main+0x64>)
 8001452:	4910      	ldr	r1, [pc, #64]	@ (8001494 <main+0x68>)
 8001454:	4810      	ldr	r0, [pc, #64]	@ (8001498 <main+0x6c>)
 8001456:	f000 ff2f 	bl	80022b8 <uart_init>
  log_init(&shared_uart);
 800145a:	480f      	ldr	r0, [pc, #60]	@ (8001498 <main+0x6c>)
 800145c:	f7ff fe8e 	bl	800117c <log_init>
  log_write(LOG_LEVEL_INFO, "Started");
 8001460:	490e      	ldr	r1, [pc, #56]	@ (800149c <main+0x70>)
 8001462:	2001      	movs	r0, #1
 8001464:	f7ff fec0 	bl	80011e8 <log_write>
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
//  osThreadDef(testTask, TestTask, osPriorityAboveNormal, 0, 256);
//  osThreadCreate(osThread(testTask), NULL);

    osThreadDef(PIDTask, PIDControlTask, osPriorityAboveNormal, 0, 256);
 8001468:	4b0d      	ldr	r3, [pc, #52]	@ (80014a0 <main+0x74>)
 800146a:	1d3c      	adds	r4, r7, #4
 800146c:	461d      	mov	r5, r3
 800146e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001470:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001472:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001476:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    osThreadCreate(osThread(PIDTask), NULL);
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	2100      	movs	r1, #0
 800147e:	4618      	mov	r0, r3
 8001480:	f005 f907 	bl	8006692 <osThreadCreate>


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001484:	f005 f8fe 	bl	8006684 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001488:	bf00      	nop
 800148a:	e7fd      	b.n	8001488 <main+0x5c>
 800148c:	20000584 	.word	0x20000584
 8001490:	200005e4 	.word	0x200005e4
 8001494:	2000053c 	.word	0x2000053c
 8001498:	20000644 	.word	0x20000644
 800149c:	0800d314 	.word	0x0800d314
 80014a0:	0800d324 	.word	0x0800d324

080014a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b094      	sub	sp, #80	@ 0x50
 80014a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014aa:	f107 031c 	add.w	r3, r7, #28
 80014ae:	2234      	movs	r2, #52	@ 0x34
 80014b0:	2100      	movs	r1, #0
 80014b2:	4618      	mov	r0, r3
 80014b4:	f008 fb0c 	bl	8009ad0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b8:	f107 0308 	add.w	r3, r7, #8
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c8:	2300      	movs	r3, #0
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001580 <SystemClock_Config+0xdc>)
 80014ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d0:	4a2b      	ldr	r2, [pc, #172]	@ (8001580 <SystemClock_Config+0xdc>)
 80014d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80014d8:	4b29      	ldr	r3, [pc, #164]	@ (8001580 <SystemClock_Config+0xdc>)
 80014da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014e4:	2300      	movs	r3, #0
 80014e6:	603b      	str	r3, [r7, #0]
 80014e8:	4b26      	ldr	r3, [pc, #152]	@ (8001584 <SystemClock_Config+0xe0>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a25      	ldr	r2, [pc, #148]	@ (8001584 <SystemClock_Config+0xe0>)
 80014ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80014f2:	6013      	str	r3, [r2, #0]
 80014f4:	4b23      	ldr	r3, [pc, #140]	@ (8001584 <SystemClock_Config+0xe0>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014fc:	603b      	str	r3, [r7, #0]
 80014fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001500:	2301      	movs	r3, #1
 8001502:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001504:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001508:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800150a:	2302      	movs	r3, #2
 800150c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800150e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001512:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001514:	2304      	movs	r3, #4
 8001516:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001518:	23b4      	movs	r3, #180	@ 0xb4
 800151a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800151c:	2302      	movs	r3, #2
 800151e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001520:	2302      	movs	r3, #2
 8001522:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001524:	2302      	movs	r3, #2
 8001526:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001528:	f107 031c 	add.w	r3, r7, #28
 800152c:	4618      	mov	r0, r3
 800152e:	f002 fecd 	bl	80042cc <HAL_RCC_OscConfig>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001538:	f000 fa2e 	bl	8001998 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800153c:	f002 fafa 	bl	8003b34 <HAL_PWREx_EnableOverDrive>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001546:	f000 fa27 	bl	8001998 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800154a:	230f      	movs	r3, #15
 800154c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800154e:	2302      	movs	r3, #2
 8001550:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001556:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800155a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800155c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001560:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001562:	f107 0308 	add.w	r3, r7, #8
 8001566:	2105      	movs	r1, #5
 8001568:	4618      	mov	r0, r3
 800156a:	f002 fb33 	bl	8003bd4 <HAL_RCC_ClockConfig>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001574:	f000 fa10 	bl	8001998 <Error_Handler>
  }
}
 8001578:	bf00      	nop
 800157a:	3750      	adds	r7, #80	@ 0x50
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40023800 	.word	0x40023800
 8001584:	40007000 	.word	0x40007000

08001588 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800158e:	463b      	mov	r3, r7
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800159a:	4b21      	ldr	r3, [pc, #132]	@ (8001620 <MX_ADC1_Init+0x98>)
 800159c:	4a21      	ldr	r2, [pc, #132]	@ (8001624 <MX_ADC1_Init+0x9c>)
 800159e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80015a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001620 <MX_ADC1_Init+0x98>)
 80015a2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80015a6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001620 <MX_ADC1_Init+0x98>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80015ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001620 <MX_ADC1_Init+0x98>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80015b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001620 <MX_ADC1_Init+0x98>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015ba:	4b19      	ldr	r3, [pc, #100]	@ (8001620 <MX_ADC1_Init+0x98>)
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015c2:	4b17      	ldr	r3, [pc, #92]	@ (8001620 <MX_ADC1_Init+0x98>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015c8:	4b15      	ldr	r3, [pc, #84]	@ (8001620 <MX_ADC1_Init+0x98>)
 80015ca:	4a17      	ldr	r2, [pc, #92]	@ (8001628 <MX_ADC1_Init+0xa0>)
 80015cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015ce:	4b14      	ldr	r3, [pc, #80]	@ (8001620 <MX_ADC1_Init+0x98>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80015d4:	4b12      	ldr	r3, [pc, #72]	@ (8001620 <MX_ADC1_Init+0x98>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015da:	4b11      	ldr	r3, [pc, #68]	@ (8001620 <MX_ADC1_Init+0x98>)
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001620 <MX_ADC1_Init+0x98>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015e8:	480d      	ldr	r0, [pc, #52]	@ (8001620 <MX_ADC1_Init+0x98>)
 80015ea:	f001 f835 	bl	8002658 <HAL_ADC_Init>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80015f4:	f000 f9d0 	bl	8001998 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015fc:	2301      	movs	r3, #1
 80015fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001600:	2300      	movs	r3, #0
 8001602:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001604:	463b      	mov	r3, r7
 8001606:	4619      	mov	r1, r3
 8001608:	4805      	ldr	r0, [pc, #20]	@ (8001620 <MX_ADC1_Init+0x98>)
 800160a:	f001 f9d3 	bl	80029b4 <HAL_ADC_ConfigChannel>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001614:	f000 f9c0 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001618:	bf00      	nop
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	200004ac 	.word	0x200004ac
 8001624:	40012000 	.word	0x40012000
 8001628:	0f000001 	.word	0x0f000001

0800162c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08a      	sub	sp, #40	@ 0x28
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001632:	f107 0320 	add.w	r3, r7, #32
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800163c:	1d3b      	adds	r3, r7, #4
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	60da      	str	r2, [r3, #12]
 8001648:	611a      	str	r2, [r3, #16]
 800164a:	615a      	str	r2, [r3, #20]
 800164c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800164e:	4b22      	ldr	r3, [pc, #136]	@ (80016d8 <MX_TIM2_Init+0xac>)
 8001650:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001654:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8001656:	4b20      	ldr	r3, [pc, #128]	@ (80016d8 <MX_TIM2_Init+0xac>)
 8001658:	2259      	movs	r2, #89	@ 0x59
 800165a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800165c:	4b1e      	ldr	r3, [pc, #120]	@ (80016d8 <MX_TIM2_Init+0xac>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001662:	4b1d      	ldr	r3, [pc, #116]	@ (80016d8 <MX_TIM2_Init+0xac>)
 8001664:	2263      	movs	r2, #99	@ 0x63
 8001666:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001668:	4b1b      	ldr	r3, [pc, #108]	@ (80016d8 <MX_TIM2_Init+0xac>)
 800166a:	2200      	movs	r2, #0
 800166c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800166e:	4b1a      	ldr	r3, [pc, #104]	@ (80016d8 <MX_TIM2_Init+0xac>)
 8001670:	2200      	movs	r2, #0
 8001672:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001674:	4818      	ldr	r0, [pc, #96]	@ (80016d8 <MX_TIM2_Init+0xac>)
 8001676:	f003 f991 	bl	800499c <HAL_TIM_PWM_Init>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001680:	f000 f98a 	bl	8001998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001684:	2300      	movs	r3, #0
 8001686:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001688:	2300      	movs	r3, #0
 800168a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800168c:	f107 0320 	add.w	r3, r7, #32
 8001690:	4619      	mov	r1, r3
 8001692:	4811      	ldr	r0, [pc, #68]	@ (80016d8 <MX_TIM2_Init+0xac>)
 8001694:	f003 fe02 	bl	800529c <HAL_TIMEx_MasterConfigSynchronization>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 800169e:	f000 f97b 	bl	8001998 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016a2:	2360      	movs	r3, #96	@ 0x60
 80016a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 80016a6:	2332      	movs	r3, #50	@ 0x32
 80016a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	2204      	movs	r2, #4
 80016b6:	4619      	mov	r1, r3
 80016b8:	4807      	ldr	r0, [pc, #28]	@ (80016d8 <MX_TIM2_Init+0xac>)
 80016ba:	f003 faaf 	bl	8004c1c <HAL_TIM_PWM_ConfigChannel>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80016c4:	f000 f968 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80016c8:	4803      	ldr	r0, [pc, #12]	@ (80016d8 <MX_TIM2_Init+0xac>)
 80016ca:	f000 fb29 	bl	8001d20 <HAL_TIM_MspPostInit>

}
 80016ce:	bf00      	nop
 80016d0:	3728      	adds	r7, #40	@ 0x28
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200004f4 	.word	0x200004f4

080016dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016e0:	4b11      	ldr	r3, [pc, #68]	@ (8001728 <MX_USART2_UART_Init+0x4c>)
 80016e2:	4a12      	ldr	r2, [pc, #72]	@ (800172c <MX_USART2_UART_Init+0x50>)
 80016e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016e6:	4b10      	ldr	r3, [pc, #64]	@ (8001728 <MX_USART2_UART_Init+0x4c>)
 80016e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001728 <MX_USART2_UART_Init+0x4c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001728 <MX_USART2_UART_Init+0x4c>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001728 <MX_USART2_UART_Init+0x4c>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001700:	4b09      	ldr	r3, [pc, #36]	@ (8001728 <MX_USART2_UART_Init+0x4c>)
 8001702:	220c      	movs	r2, #12
 8001704:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001706:	4b08      	ldr	r3, [pc, #32]	@ (8001728 <MX_USART2_UART_Init+0x4c>)
 8001708:	2200      	movs	r2, #0
 800170a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800170c:	4b06      	ldr	r3, [pc, #24]	@ (8001728 <MX_USART2_UART_Init+0x4c>)
 800170e:	2200      	movs	r2, #0
 8001710:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001712:	4805      	ldr	r0, [pc, #20]	@ (8001728 <MX_USART2_UART_Init+0x4c>)
 8001714:	f003 fe52 	bl	80053bc <HAL_UART_Init>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800171e:	f000 f93b 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	2000053c 	.word	0x2000053c
 800172c:	40004400 	.word	0x40004400

08001730 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	607b      	str	r3, [r7, #4]
 800173a:	4b10      	ldr	r3, [pc, #64]	@ (800177c <MX_DMA_Init+0x4c>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	4a0f      	ldr	r2, [pc, #60]	@ (800177c <MX_DMA_Init+0x4c>)
 8001740:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001744:	6313      	str	r3, [r2, #48]	@ 0x30
 8001746:	4b0d      	ldr	r3, [pc, #52]	@ (800177c <MX_DMA_Init+0x4c>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001752:	2200      	movs	r2, #0
 8001754:	2105      	movs	r1, #5
 8001756:	2010      	movs	r0, #16
 8001758:	f001 fc12 	bl	8002f80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800175c:	2010      	movs	r0, #16
 800175e:	f001 fc2b 	bl	8002fb8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001762:	2200      	movs	r2, #0
 8001764:	2105      	movs	r1, #5
 8001766:	2011      	movs	r0, #17
 8001768:	f001 fc0a 	bl	8002f80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800176c:	2011      	movs	r0, #17
 800176e:	f001 fc23 	bl	8002fb8 <HAL_NVIC_EnableIRQ>

}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40023800 	.word	0x40023800

08001780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08a      	sub	sp, #40	@ 0x28
 8001784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001786:	f107 0314 	add.w	r3, r7, #20
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]
 8001794:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	613b      	str	r3, [r7, #16]
 800179a:	4b2d      	ldr	r3, [pc, #180]	@ (8001850 <MX_GPIO_Init+0xd0>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	4a2c      	ldr	r2, [pc, #176]	@ (8001850 <MX_GPIO_Init+0xd0>)
 80017a0:	f043 0304 	orr.w	r3, r3, #4
 80017a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001850 <MX_GPIO_Init+0xd0>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	f003 0304 	and.w	r3, r3, #4
 80017ae:	613b      	str	r3, [r7, #16]
 80017b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	4b26      	ldr	r3, [pc, #152]	@ (8001850 <MX_GPIO_Init+0xd0>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	4a25      	ldr	r2, [pc, #148]	@ (8001850 <MX_GPIO_Init+0xd0>)
 80017bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c2:	4b23      	ldr	r3, [pc, #140]	@ (8001850 <MX_GPIO_Init+0xd0>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001850 <MX_GPIO_Init+0xd0>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	4a1e      	ldr	r2, [pc, #120]	@ (8001850 <MX_GPIO_Init+0xd0>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017de:	4b1c      	ldr	r3, [pc, #112]	@ (8001850 <MX_GPIO_Init+0xd0>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	607b      	str	r3, [r7, #4]
 80017ee:	4b18      	ldr	r3, [pc, #96]	@ (8001850 <MX_GPIO_Init+0xd0>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f2:	4a17      	ldr	r2, [pc, #92]	@ (8001850 <MX_GPIO_Init+0xd0>)
 80017f4:	f043 0302 	orr.w	r3, r3, #2
 80017f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fa:	4b15      	ldr	r3, [pc, #84]	@ (8001850 <MX_GPIO_Init+0xd0>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001806:	2200      	movs	r2, #0
 8001808:	2120      	movs	r1, #32
 800180a:	4812      	ldr	r0, [pc, #72]	@ (8001854 <MX_GPIO_Init+0xd4>)
 800180c:	f002 f978 	bl	8003b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001810:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001816:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800181a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	4619      	mov	r1, r3
 8001826:	480c      	ldr	r0, [pc, #48]	@ (8001858 <MX_GPIO_Init+0xd8>)
 8001828:	f001 ffd6 	bl	80037d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800182c:	2320      	movs	r3, #32
 800182e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001830:	2301      	movs	r3, #1
 8001832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001838:	2300      	movs	r3, #0
 800183a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	4619      	mov	r1, r3
 8001842:	4804      	ldr	r0, [pc, #16]	@ (8001854 <MX_GPIO_Init+0xd4>)
 8001844:	f001 ffc8 	bl	80037d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001848:	bf00      	nop
 800184a:	3728      	adds	r7, #40	@ 0x28
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40023800 	.word	0x40023800
 8001854:	40020000 	.word	0x40020000
 8001858:	40020800 	.word	0x40020800

0800185c <set_pwm_function>:
//        // Wait 100 ms before next cycle
//        vTaskDelay(pdMS_TO_TICKS(100));
//    }
//}

void set_pwm_function(uint8_t brightness) {
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	71fb      	strb	r3, [r7, #7]

	Pwm_setDuty(&pwm, (uint8_t)brightness);
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	4619      	mov	r1, r3
 800186a:	4803      	ldr	r0, [pc, #12]	@ (8001878 <set_pwm_function+0x1c>)
 800186c:	f000 f984 	bl	8001b78 <Pwm_setDuty>
}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20000664 	.word	0x20000664

0800187c <PIDControlTask>:

static void PIDControlTask(void const *arg) {
 800187c:	b580      	push	{r7, lr}
 800187e:	b088      	sub	sp, #32
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
    TelemetryPacket pkt = {0};
 8001884:	f107 030c 	add.w	r3, r7, #12
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
    photoCell_init(&sensor, true, 0, 4095);
 800188e:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001892:	2200      	movs	r2, #0
 8001894:	2101      	movs	r1, #1
 8001896:	482e      	ldr	r0, [pc, #184]	@ (8001950 <PIDControlTask+0xd4>)
 8001898:	f000 f8a0 	bl	80019dc <photoCell_init>
    photoCell_autoCalibrate(&sensor, &hadc1, set_pwm_function);
 800189c:	4a2d      	ldr	r2, [pc, #180]	@ (8001954 <PIDControlTask+0xd8>)
 800189e:	492e      	ldr	r1, [pc, #184]	@ (8001958 <PIDControlTask+0xdc>)
 80018a0:	482b      	ldr	r0, [pc, #172]	@ (8001950 <PIDControlTask+0xd4>)
 80018a2:	f000 f8bd 	bl	8001a20 <photoCell_autoCalibrate>

    for (;;) {
        uint8_t level = readSensor(&sensor, &hadc1);
 80018a6:	492c      	ldr	r1, [pc, #176]	@ (8001958 <PIDControlTask+0xdc>)
 80018a8:	4829      	ldr	r0, [pc, #164]	@ (8001950 <PIDControlTask+0xd4>)
 80018aa:	f000 f91c 	bl	8001ae6 <readSensor>
 80018ae:	4603      	mov	r3, r0
 80018b0:	76fb      	strb	r3, [r7, #27]
        float error = pid_setpoint - level;
 80018b2:	4b2a      	ldr	r3, [pc, #168]	@ (800195c <PIDControlTask+0xe0>)
 80018b4:	ed93 7a00 	vldr	s14, [r3]
 80018b8:	7efb      	ldrb	r3, [r7, #27]
 80018ba:	ee07 3a90 	vmov	s15, r3
 80018be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018c6:	edc7 7a05 	vstr	s15, [r7, #20]
        float duty  = pid_kp * error;
 80018ca:	4b25      	ldr	r3, [pc, #148]	@ (8001960 <PIDControlTask+0xe4>)
 80018cc:	edd3 7a00 	vldr	s15, [r3]
 80018d0:	ed97 7a05 	vldr	s14, [r7, #20]
 80018d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018d8:	edc7 7a07 	vstr	s15, [r7, #28]

        if (pid_enabled) {
 80018dc:	4b21      	ldr	r3, [pc, #132]	@ (8001964 <PIDControlTask+0xe8>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d02f      	beq.n	8001946 <PIDControlTask+0xca>
            if (duty < 0.0f) duty = 0.0f;
 80018e6:	edd7 7a07 	vldr	s15, [r7, #28]
 80018ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f2:	d502      	bpl.n	80018fa <PIDControlTask+0x7e>
 80018f4:	f04f 0300 	mov.w	r3, #0
 80018f8:	61fb      	str	r3, [r7, #28]
            if (duty > 100.0f) duty = 100.0f;
 80018fa:	edd7 7a07 	vldr	s15, [r7, #28]
 80018fe:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001968 <PIDControlTask+0xec>
 8001902:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800190a:	dd01      	ble.n	8001910 <PIDControlTask+0x94>
 800190c:	4b17      	ldr	r3, [pc, #92]	@ (800196c <PIDControlTask+0xf0>)
 800190e:	61fb      	str	r3, [r7, #28]
            Pwm_setDuty(&pwm, (uint8_t)duty);
 8001910:	edd7 7a07 	vldr	s15, [r7, #28]
 8001914:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001918:	edc7 7a00 	vstr	s15, [r7]
 800191c:	783b      	ldrb	r3, [r7, #0]
 800191e:	b2db      	uxtb	r3, r3
 8001920:	4619      	mov	r1, r3
 8001922:	4813      	ldr	r0, [pc, #76]	@ (8001970 <PIDControlTask+0xf4>)
 8001924:	f000 f928 	bl	8001b78 <Pwm_setDuty>

            pkt.brightness = level;
 8001928:	7efb      	ldrb	r3, [r7, #27]
 800192a:	ee07 3a90 	vmov	s15, r3
 800192e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001932:	edc7 7a03 	vstr	s15, [r7, #12]
            pkt.duty       = duty;
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	613b      	str	r3, [r7, #16]

            telemetry_send(&pkt);
 800193a:	f107 030c 	add.w	r3, r7, #12
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff fc98 	bl	8001274 <telemetry_send>
 8001944:	e7af      	b.n	80018a6 <PIDControlTask+0x2a>
        }
        else {
            Pwm_setDuty(&pwm, 0);
 8001946:	2100      	movs	r1, #0
 8001948:	4809      	ldr	r0, [pc, #36]	@ (8001970 <PIDControlTask+0xf4>)
 800194a:	f000 f915 	bl	8001b78 <Pwm_setDuty>
    for (;;) {
 800194e:	e7aa      	b.n	80018a6 <PIDControlTask+0x2a>
 8001950:	20000674 	.word	0x20000674
 8001954:	0800185d 	.word	0x0800185d
 8001958:	200004ac 	.word	0x200004ac
 800195c:	20000004 	.word	0x20000004
 8001960:	20000008 	.word	0x20000008
 8001964:	2000067e 	.word	0x2000067e
 8001968:	42c80000 	.word	0x42c80000
 800196c:	42c80000 	.word	0x42c80000
 8001970:	20000664 	.word	0x20000664

08001974 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a04      	ldr	r2, [pc, #16]	@ (8001994 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d101      	bne.n	800198a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001986:	f000 fe23 	bl	80025d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40001400 	.word	0x40001400

08001998 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800199c:	b672      	cpsid	i
}
 800199e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019a0:	bf00      	nop
 80019a2:	e7fd      	b.n	80019a0 <Error_Handler+0x8>

080019a4 <map_range>:
 * @param in_max   Maximum of the input range.
 * @param out_min  Minimum of the output range.
 * @param out_max  Maximum of the output range.
 * @return long    Mapped output value.
 */
static inline long map_range(long x, long in_min, long in_max, long out_min, long out_max) {
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
 80019b0:	603b      	str	r3, [r7, #0]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	69b9      	ldr	r1, [r7, #24]
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	1a8a      	subs	r2, r1, r2
 80019be:	fb03 f202 	mul.w	r2, r3, r2
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	1acb      	subs	r3, r1, r3
 80019c8:	fb92 f2f3 	sdiv	r2, r2, r3
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	4413      	add	r3, r2
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <photoCell_init>:
 * @param sensor      Pointer to a photoCell_t instance to initialize.
 * @param scaled      If true, the output will be scaled to a range of 0–100.
 * @param min_value   Minimum expected raw ADC value for scaling.
 * @param max_value   Maximum expected raw ADC value for scaling.
 */
void photoCell_init(photoCell_t* sensor, bool scaled, uint16_t min_value, uint16_t max_value) {
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	4608      	mov	r0, r1
 80019e6:	4611      	mov	r1, r2
 80019e8:	461a      	mov	r2, r3
 80019ea:	4603      	mov	r3, r0
 80019ec:	72fb      	strb	r3, [r7, #11]
 80019ee:	460b      	mov	r3, r1
 80019f0:	813b      	strh	r3, [r7, #8]
 80019f2:	4613      	mov	r3, r2
 80019f4:	80fb      	strh	r3, [r7, #6]
    sensor->scaled = scaled;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	7afa      	ldrb	r2, [r7, #11]
 80019fa:	701a      	strb	r2, [r3, #0]
    sensor->min_value = min_value;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	893a      	ldrh	r2, [r7, #8]
 8001a00:	805a      	strh	r2, [r3, #2]
    sensor->max_value = max_value;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	88fa      	ldrh	r2, [r7, #6]
 8001a06:	809a      	strh	r2, [r3, #4]
    sensor->current_level = 0;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	719a      	strb	r2, [r3, #6]
    sensor->last_raw_value = 0;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2200      	movs	r2, #0
 8001a12:	811a      	strh	r2, [r3, #8]
}
 8001a14:	bf00      	nop
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <photoCell_autoCalibrate>:

void photoCell_autoCalibrate(photoCell_t* sensor, ADC_HandleTypeDef* hadc, void (*set_pwm)(uint8_t)) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08a      	sub	sp, #40	@ 0x28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
    const int samples = 16;
 8001a2c:	2310      	movs	r3, #16
 8001a2e:	617b      	str	r3, [r7, #20]
    uint32_t sum_low = 0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t sum_high = 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	623b      	str	r3, [r7, #32]

    // Set LED fully ON
    set_pwm(255);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	20ff      	movs	r0, #255	@ 0xff
 8001a3c:	4798      	blx	r3
    HAL_Delay(100);  // allow sensor to settle
 8001a3e:	2064      	movs	r0, #100	@ 0x64
 8001a40:	f000 fde6 	bl	8002610 <HAL_Delay>
    for (int i = 0; i < samples; i++) {
 8001a44:	2300      	movs	r3, #0
 8001a46:	61fb      	str	r3, [r7, #28]
 8001a48:	e011      	b.n	8001a6e <photoCell_autoCalibrate+0x4e>
        HAL_ADC_Start(hadc);
 8001a4a:	68b8      	ldr	r0, [r7, #8]
 8001a4c:	f000 fe48 	bl	80026e0 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8001a50:	f04f 31ff 	mov.w	r1, #4294967295
 8001a54:	68b8      	ldr	r0, [r7, #8]
 8001a56:	f000 ff15 	bl	8002884 <HAL_ADC_PollForConversion>
        sum_high += HAL_ADC_GetValue(hadc);
 8001a5a:	68b8      	ldr	r0, [r7, #8]
 8001a5c:	f000 ff9d 	bl	800299a <HAL_ADC_GetValue>
 8001a60:	4602      	mov	r2, r0
 8001a62:	6a3b      	ldr	r3, [r7, #32]
 8001a64:	4413      	add	r3, r2
 8001a66:	623b      	str	r3, [r7, #32]
    for (int i = 0; i < samples; i++) {
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	61fb      	str	r3, [r7, #28]
 8001a6e:	69fa      	ldr	r2, [r7, #28]
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	dbe9      	blt.n	8001a4a <photoCell_autoCalibrate+0x2a>
    }

    // Set LED fully OFF
    set_pwm(0);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2000      	movs	r0, #0
 8001a7a:	4798      	blx	r3
    HAL_Delay(100);  // allow sensor to settle
 8001a7c:	2064      	movs	r0, #100	@ 0x64
 8001a7e:	f000 fdc7 	bl	8002610 <HAL_Delay>
    for (int i = 0; i < samples; i++) {
 8001a82:	2300      	movs	r3, #0
 8001a84:	61bb      	str	r3, [r7, #24]
 8001a86:	e011      	b.n	8001aac <photoCell_autoCalibrate+0x8c>
        HAL_ADC_Start(hadc);
 8001a88:	68b8      	ldr	r0, [r7, #8]
 8001a8a:	f000 fe29 	bl	80026e0 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8001a8e:	f04f 31ff 	mov.w	r1, #4294967295
 8001a92:	68b8      	ldr	r0, [r7, #8]
 8001a94:	f000 fef6 	bl	8002884 <HAL_ADC_PollForConversion>
        sum_low += HAL_ADC_GetValue(hadc);
 8001a98:	68b8      	ldr	r0, [r7, #8]
 8001a9a:	f000 ff7e 	bl	800299a <HAL_ADC_GetValue>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa2:	4413      	add	r3, r2
 8001aa4:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < samples; i++) {
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	61bb      	str	r3, [r7, #24]
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	dbe9      	blt.n	8001a88 <photoCell_autoCalibrate+0x68>
    }

    uint16_t avg_low = sum_low / samples;
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001abc:	827b      	strh	r3, [r7, #18]
    uint16_t avg_high = sum_high / samples;
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	6a3a      	ldr	r2, [r7, #32]
 8001ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac6:	823b      	strh	r3, [r7, #16]

    // Apply to sensor
    if (avg_high > avg_low + 10) {  // sanity check
 8001ac8:	8a3a      	ldrh	r2, [r7, #16]
 8001aca:	8a7b      	ldrh	r3, [r7, #18]
 8001acc:	330a      	adds	r3, #10
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	dd05      	ble.n	8001ade <photoCell_autoCalibrate+0xbe>
        sensor->min_value = avg_low;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	8a7a      	ldrh	r2, [r7, #18]
 8001ad6:	805a      	strh	r2, [r3, #2]
        sensor->max_value = avg_high;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	8a3a      	ldrh	r2, [r7, #16]
 8001adc:	809a      	strh	r2, [r3, #4]
    }
}
 8001ade:	bf00      	nop
 8001ae0:	3728      	adds	r7, #40	@ 0x28
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <readSensor>:
 * the raw and optionally scaled light level into the provided sensor instance.
 *
 * @param sensor  Pointer to a photoCell_t instance to update.
 * @return uint8_t  Scaled (0–100) or raw (0–255 clipped) light level.
 */
uint8_t readSensor(photoCell_t* sensor, ADC_HandleTypeDef* hadc) {
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b086      	sub	sp, #24
 8001aea:	af02      	add	r7, sp, #8
 8001aec:	6078      	str	r0, [r7, #4]
 8001aee:	6039      	str	r1, [r7, #0]
    HAL_ADC_Start(hadc);
 8001af0:	6838      	ldr	r0, [r7, #0]
 8001af2:	f000 fdf5 	bl	80026e0 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8001af6:	f04f 31ff 	mov.w	r1, #4294967295
 8001afa:	6838      	ldr	r0, [r7, #0]
 8001afc:	f000 fec2 	bl	8002884 <HAL_ADC_PollForConversion>
    uint16_t raw = HAL_ADC_GetValue(hadc);
 8001b00:	6838      	ldr	r0, [r7, #0]
 8001b02:	f000 ff4a 	bl	800299a <HAL_ADC_GetValue>
 8001b06:	4603      	mov	r3, r0
 8001b08:	81bb      	strh	r3, [r7, #12]

    sensor->last_raw_value = raw;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	89ba      	ldrh	r2, [r7, #12]
 8001b0e:	811a      	strh	r2, [r3, #8]

    uint8_t value;
    if (sensor->scaled) {
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d01e      	beq.n	8001b56 <readSensor+0x70>
        if (raw <= sensor->min_value) {
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	885b      	ldrh	r3, [r3, #2]
 8001b1c:	89ba      	ldrh	r2, [r7, #12]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d802      	bhi.n	8001b28 <readSensor+0x42>
            value = 0;
 8001b22:	2300      	movs	r3, #0
 8001b24:	73fb      	strb	r3, [r7, #15]
 8001b26:	e01e      	b.n	8001b66 <readSensor+0x80>
        } else if (raw >= sensor->max_value) {
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	889b      	ldrh	r3, [r3, #4]
 8001b2c:	89ba      	ldrh	r2, [r7, #12]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d302      	bcc.n	8001b38 <readSensor+0x52>
            value = 100;
 8001b32:	2364      	movs	r3, #100	@ 0x64
 8001b34:	73fb      	strb	r3, [r7, #15]
 8001b36:	e016      	b.n	8001b66 <readSensor+0x80>
        } else {
            value = (uint8_t)map_range(raw, sensor->min_value, sensor->max_value, 0, 100);
 8001b38:	89b8      	ldrh	r0, [r7, #12]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	885b      	ldrh	r3, [r3, #2]
 8001b3e:	4619      	mov	r1, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	889b      	ldrh	r3, [r3, #4]
 8001b44:	461a      	mov	r2, r3
 8001b46:	2364      	movs	r3, #100	@ 0x64
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	f7ff ff2a 	bl	80019a4 <map_range>
 8001b50:	4603      	mov	r3, r0
 8001b52:	73fb      	strb	r3, [r7, #15]
 8001b54:	e007      	b.n	8001b66 <readSensor+0x80>
        }
    } else {
        value = (raw > 255) ? 255 : (uint8_t)raw;
 8001b56:	89bb      	ldrh	r3, [r7, #12]
 8001b58:	2bff      	cmp	r3, #255	@ 0xff
 8001b5a:	d802      	bhi.n	8001b62 <readSensor+0x7c>
 8001b5c:	89bb      	ldrh	r3, [r7, #12]
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	e000      	b.n	8001b64 <readSensor+0x7e>
 8001b62:	23ff      	movs	r3, #255	@ 0xff
 8001b64:	73fb      	strb	r3, [r7, #15]
    }

    sensor->current_level = value;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	7bfa      	ldrb	r2, [r7, #15]
 8001b6a:	719a      	strb	r2, [r3, #6]
    return value;
 8001b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
	...

08001b78 <Pwm_setDuty>:

/*
 * Update the pulse width to achieve the requested duty cycle. The duty
 * value is clipped to the range 0–100%.
 */
void Pwm_setDuty(PwmChannel_t* pwm, uint8_t duty_percent) {
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	460b      	mov	r3, r1
 8001b82:	70fb      	strb	r3, [r7, #3]
    if (duty_percent > 100) duty_percent = 100;
 8001b84:	78fb      	ldrb	r3, [r7, #3]
 8001b86:	2b64      	cmp	r3, #100	@ 0x64
 8001b88:	d901      	bls.n	8001b8e <Pwm_setDuty+0x16>
 8001b8a:	2364      	movs	r3, #100	@ 0x64
 8001b8c:	70fb      	strb	r3, [r7, #3]
    pwm->duty_percent = duty_percent;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	78fa      	ldrb	r2, [r7, #3]
 8001b92:	731a      	strb	r2, [r3, #12]

    uint32_t pulse = (pwm->period * duty_percent) / 100;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	78fa      	ldrb	r2, [r7, #3]
 8001b9a:	fb02 f303 	mul.w	r3, r2, r3
 8001b9e:	4a17      	ldr	r2, [pc, #92]	@ (8001bfc <Pwm_setDuty+0x84>)
 8001ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba4:	095b      	lsrs	r3, r3, #5
 8001ba6:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_COMPARE(pwm->htim, pwm->channel, pulse);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d105      	bne.n	8001bbc <Pwm_setDuty+0x44>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001bba:	e018      	b.n	8001bee <Pwm_setDuty+0x76>
    __HAL_TIM_SET_COMPARE(pwm->htim, pwm->channel, pulse);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b04      	cmp	r3, #4
 8001bc2:	d105      	bne.n	8001bd0 <Pwm_setDuty+0x58>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001bce:	e00e      	b.n	8001bee <Pwm_setDuty+0x76>
    __HAL_TIM_SET_COMPARE(pwm->htim, pwm->channel, pulse);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2b08      	cmp	r3, #8
 8001bd6:	d105      	bne.n	8001be4 <Pwm_setDuty+0x6c>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001be2:	e004      	b.n	8001bee <Pwm_setDuty+0x76>
    __HAL_TIM_SET_COMPARE(pwm->htim, pwm->channel, pulse);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001bee:	bf00      	nop
 8001bf0:	3714      	adds	r7, #20
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	51eb851f 	.word	0x51eb851f

08001c00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	607b      	str	r3, [r7, #4]
 8001c0a:	4b12      	ldr	r3, [pc, #72]	@ (8001c54 <HAL_MspInit+0x54>)
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0e:	4a11      	ldr	r2, [pc, #68]	@ (8001c54 <HAL_MspInit+0x54>)
 8001c10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c16:	4b0f      	ldr	r3, [pc, #60]	@ (8001c54 <HAL_MspInit+0x54>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c1e:	607b      	str	r3, [r7, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	603b      	str	r3, [r7, #0]
 8001c26:	4b0b      	ldr	r3, [pc, #44]	@ (8001c54 <HAL_MspInit+0x54>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c54 <HAL_MspInit+0x54>)
 8001c2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c32:	4b08      	ldr	r3, [pc, #32]	@ (8001c54 <HAL_MspInit+0x54>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c3a:	603b      	str	r3, [r7, #0]
 8001c3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c3e:	2200      	movs	r2, #0
 8001c40:	210f      	movs	r1, #15
 8001c42:	f06f 0001 	mvn.w	r0, #1
 8001c46:	f001 f99b 	bl	8002f80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40023800 	.word	0x40023800

08001c58 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b08a      	sub	sp, #40	@ 0x28
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c60:	f107 0314 	add.w	r3, r7, #20
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a17      	ldr	r2, [pc, #92]	@ (8001cd4 <HAL_ADC_MspInit+0x7c>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d127      	bne.n	8001cca <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	613b      	str	r3, [r7, #16]
 8001c7e:	4b16      	ldr	r3, [pc, #88]	@ (8001cd8 <HAL_ADC_MspInit+0x80>)
 8001c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c82:	4a15      	ldr	r2, [pc, #84]	@ (8001cd8 <HAL_ADC_MspInit+0x80>)
 8001c84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c88:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c8a:	4b13      	ldr	r3, [pc, #76]	@ (8001cd8 <HAL_ADC_MspInit+0x80>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c92:	613b      	str	r3, [r7, #16]
 8001c94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd8 <HAL_ADC_MspInit+0x80>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9e:	4a0e      	ldr	r2, [pc, #56]	@ (8001cd8 <HAL_ADC_MspInit+0x80>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd8 <HAL_ADC_MspInit+0x80>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cbe:	f107 0314 	add.w	r3, r7, #20
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4805      	ldr	r0, [pc, #20]	@ (8001cdc <HAL_ADC_MspInit+0x84>)
 8001cc6:	f001 fd87 	bl	80037d8 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001cca:	bf00      	nop
 8001ccc:	3728      	adds	r7, #40	@ 0x28
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40012000 	.word	0x40012000
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40020000 	.word	0x40020000

08001ce0 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cf0:	d10d      	bne.n	8001d0e <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	4b09      	ldr	r3, [pc, #36]	@ (8001d1c <HAL_TIM_PWM_MspInit+0x3c>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfa:	4a08      	ldr	r2, [pc, #32]	@ (8001d1c <HAL_TIM_PWM_MspInit+0x3c>)
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d02:	4b06      	ldr	r3, [pc, #24]	@ (8001d1c <HAL_TIM_PWM_MspInit+0x3c>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001d0e:	bf00      	nop
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	40023800 	.word	0x40023800

08001d20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b088      	sub	sp, #32
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d28:	f107 030c 	add.w	r3, r7, #12
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d40:	d11d      	bne.n	8001d7e <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	60bb      	str	r3, [r7, #8]
 8001d46:	4b10      	ldr	r3, [pc, #64]	@ (8001d88 <HAL_TIM_MspPostInit+0x68>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4a:	4a0f      	ldr	r2, [pc, #60]	@ (8001d88 <HAL_TIM_MspPostInit+0x68>)
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d52:	4b0d      	ldr	r3, [pc, #52]	@ (8001d88 <HAL_TIM_MspPostInit+0x68>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	60bb      	str	r3, [r7, #8]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d62:	2302      	movs	r3, #2
 8001d64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d72:	f107 030c 	add.w	r3, r7, #12
 8001d76:	4619      	mov	r1, r3
 8001d78:	4804      	ldr	r0, [pc, #16]	@ (8001d8c <HAL_TIM_MspPostInit+0x6c>)
 8001d7a:	f001 fd2d 	bl	80037d8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001d7e:	bf00      	nop
 8001d80:	3720      	adds	r7, #32
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	40020000 	.word	0x40020000

08001d90 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08a      	sub	sp, #40	@ 0x28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d98:	f107 0314 	add.w	r3, r7, #20
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a4b      	ldr	r2, [pc, #300]	@ (8001edc <HAL_UART_MspInit+0x14c>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	f040 8090 	bne.w	8001ed4 <HAL_UART_MspInit+0x144>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001db4:	2300      	movs	r3, #0
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	4b49      	ldr	r3, [pc, #292]	@ (8001ee0 <HAL_UART_MspInit+0x150>)
 8001dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbc:	4a48      	ldr	r2, [pc, #288]	@ (8001ee0 <HAL_UART_MspInit+0x150>)
 8001dbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dc4:	4b46      	ldr	r3, [pc, #280]	@ (8001ee0 <HAL_UART_MspInit+0x150>)
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	4b42      	ldr	r3, [pc, #264]	@ (8001ee0 <HAL_UART_MspInit+0x150>)
 8001dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd8:	4a41      	ldr	r2, [pc, #260]	@ (8001ee0 <HAL_UART_MspInit+0x150>)
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	6313      	str	r3, [r2, #48]	@ 0x30
 8001de0:	4b3f      	ldr	r3, [pc, #252]	@ (8001ee0 <HAL_UART_MspInit+0x150>)
 8001de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001dec:	230c      	movs	r3, #12
 8001dee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df0:	2302      	movs	r3, #2
 8001df2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dfc:	2307      	movs	r3, #7
 8001dfe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e00:	f107 0314 	add.w	r3, r7, #20
 8001e04:	4619      	mov	r1, r3
 8001e06:	4837      	ldr	r0, [pc, #220]	@ (8001ee4 <HAL_UART_MspInit+0x154>)
 8001e08:	f001 fce6 	bl	80037d8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001e0c:	4b36      	ldr	r3, [pc, #216]	@ (8001ee8 <HAL_UART_MspInit+0x158>)
 8001e0e:	4a37      	ldr	r2, [pc, #220]	@ (8001eec <HAL_UART_MspInit+0x15c>)
 8001e10:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001e12:	4b35      	ldr	r3, [pc, #212]	@ (8001ee8 <HAL_UART_MspInit+0x158>)
 8001e14:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001e18:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e1a:	4b33      	ldr	r3, [pc, #204]	@ (8001ee8 <HAL_UART_MspInit+0x158>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e20:	4b31      	ldr	r3, [pc, #196]	@ (8001ee8 <HAL_UART_MspInit+0x158>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e26:	4b30      	ldr	r3, [pc, #192]	@ (8001ee8 <HAL_UART_MspInit+0x158>)
 8001e28:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e2c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e2e:	4b2e      	ldr	r3, [pc, #184]	@ (8001ee8 <HAL_UART_MspInit+0x158>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e34:	4b2c      	ldr	r3, [pc, #176]	@ (8001ee8 <HAL_UART_MspInit+0x158>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001e3a:	4b2b      	ldr	r3, [pc, #172]	@ (8001ee8 <HAL_UART_MspInit+0x158>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e40:	4b29      	ldr	r3, [pc, #164]	@ (8001ee8 <HAL_UART_MspInit+0x158>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e46:	4b28      	ldr	r3, [pc, #160]	@ (8001ee8 <HAL_UART_MspInit+0x158>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001e4c:	4826      	ldr	r0, [pc, #152]	@ (8001ee8 <HAL_UART_MspInit+0x158>)
 8001e4e:	f001 f8c1 	bl	8002fd4 <HAL_DMA_Init>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001e58:	f7ff fd9e 	bl	8001998 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a22      	ldr	r2, [pc, #136]	@ (8001ee8 <HAL_UART_MspInit+0x158>)
 8001e60:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001e62:	4a21      	ldr	r2, [pc, #132]	@ (8001ee8 <HAL_UART_MspInit+0x158>)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001e68:	4b21      	ldr	r3, [pc, #132]	@ (8001ef0 <HAL_UART_MspInit+0x160>)
 8001e6a:	4a22      	ldr	r2, [pc, #136]	@ (8001ef4 <HAL_UART_MspInit+0x164>)
 8001e6c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001e6e:	4b20      	ldr	r3, [pc, #128]	@ (8001ef0 <HAL_UART_MspInit+0x160>)
 8001e70:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001e74:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e76:	4b1e      	ldr	r3, [pc, #120]	@ (8001ef0 <HAL_UART_MspInit+0x160>)
 8001e78:	2240      	movs	r2, #64	@ 0x40
 8001e7a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e7c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ef0 <HAL_UART_MspInit+0x160>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e82:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef0 <HAL_UART_MspInit+0x160>)
 8001e84:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e88:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e8a:	4b19      	ldr	r3, [pc, #100]	@ (8001ef0 <HAL_UART_MspInit+0x160>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e90:	4b17      	ldr	r3, [pc, #92]	@ (8001ef0 <HAL_UART_MspInit+0x160>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001e96:	4b16      	ldr	r3, [pc, #88]	@ (8001ef0 <HAL_UART_MspInit+0x160>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e9c:	4b14      	ldr	r3, [pc, #80]	@ (8001ef0 <HAL_UART_MspInit+0x160>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ea2:	4b13      	ldr	r3, [pc, #76]	@ (8001ef0 <HAL_UART_MspInit+0x160>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001ea8:	4811      	ldr	r0, [pc, #68]	@ (8001ef0 <HAL_UART_MspInit+0x160>)
 8001eaa:	f001 f893 	bl	8002fd4 <HAL_DMA_Init>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8001eb4:	f7ff fd70 	bl	8001998 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a0d      	ldr	r2, [pc, #52]	@ (8001ef0 <HAL_UART_MspInit+0x160>)
 8001ebc:	639a      	str	r2, [r3, #56]	@ 0x38
 8001ebe:	4a0c      	ldr	r2, [pc, #48]	@ (8001ef0 <HAL_UART_MspInit+0x160>)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	2105      	movs	r1, #5
 8001ec8:	2026      	movs	r0, #38	@ 0x26
 8001eca:	f001 f859 	bl	8002f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ece:	2026      	movs	r0, #38	@ 0x26
 8001ed0:	f001 f872 	bl	8002fb8 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001ed4:	bf00      	nop
 8001ed6:	3728      	adds	r7, #40	@ 0x28
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40004400 	.word	0x40004400
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40020000 	.word	0x40020000
 8001ee8:	20000584 	.word	0x20000584
 8001eec:	40026088 	.word	0x40026088
 8001ef0:	200005e4 	.word	0x200005e4
 8001ef4:	400260a0 	.word	0x400260a0

08001ef8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b08e      	sub	sp, #56	@ 0x38
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001f00:	2300      	movs	r3, #0
 8001f02:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001f08:	2300      	movs	r3, #0
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	4b33      	ldr	r3, [pc, #204]	@ (8001fdc <HAL_InitTick+0xe4>)
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f10:	4a32      	ldr	r2, [pc, #200]	@ (8001fdc <HAL_InitTick+0xe4>)
 8001f12:	f043 0320 	orr.w	r3, r3, #32
 8001f16:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f18:	4b30      	ldr	r3, [pc, #192]	@ (8001fdc <HAL_InitTick+0xe4>)
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1c:	f003 0320 	and.w	r3, r3, #32
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f24:	f107 0210 	add.w	r2, r7, #16
 8001f28:	f107 0314 	add.w	r3, r7, #20
 8001f2c:	4611      	mov	r1, r2
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f001 ff6a 	bl	8003e08 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001f34:	6a3b      	ldr	r3, [r7, #32]
 8001f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d103      	bne.n	8001f46 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001f3e:	f001 ff3b 	bl	8003db8 <HAL_RCC_GetPCLK1Freq>
 8001f42:	6378      	str	r0, [r7, #52]	@ 0x34
 8001f44:	e004      	b.n	8001f50 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001f46:	f001 ff37 	bl	8003db8 <HAL_RCC_GetPCLK1Freq>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f52:	4a23      	ldr	r2, [pc, #140]	@ (8001fe0 <HAL_InitTick+0xe8>)
 8001f54:	fba2 2303 	umull	r2, r3, r2, r3
 8001f58:	0c9b      	lsrs	r3, r3, #18
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001f5e:	4b21      	ldr	r3, [pc, #132]	@ (8001fe4 <HAL_InitTick+0xec>)
 8001f60:	4a21      	ldr	r2, [pc, #132]	@ (8001fe8 <HAL_InitTick+0xf0>)
 8001f62:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001f64:	4b1f      	ldr	r3, [pc, #124]	@ (8001fe4 <HAL_InitTick+0xec>)
 8001f66:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f6a:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001f6c:	4a1d      	ldr	r2, [pc, #116]	@ (8001fe4 <HAL_InitTick+0xec>)
 8001f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f70:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001f72:	4b1c      	ldr	r3, [pc, #112]	@ (8001fe4 <HAL_InitTick+0xec>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f78:	4b1a      	ldr	r3, [pc, #104]	@ (8001fe4 <HAL_InitTick+0xec>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f7e:	4b19      	ldr	r3, [pc, #100]	@ (8001fe4 <HAL_InitTick+0xec>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8001f84:	4817      	ldr	r0, [pc, #92]	@ (8001fe4 <HAL_InitTick+0xec>)
 8001f86:	f002 fc3f 	bl	8004808 <HAL_TIM_Base_Init>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001f90:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d11b      	bne.n	8001fd0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8001f98:	4812      	ldr	r0, [pc, #72]	@ (8001fe4 <HAL_InitTick+0xec>)
 8001f9a:	f002 fc8f 	bl	80048bc <HAL_TIM_Base_Start_IT>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001fa4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d111      	bne.n	8001fd0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001fac:	2037      	movs	r0, #55	@ 0x37
 8001fae:	f001 f803 	bl	8002fb8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b0f      	cmp	r3, #15
 8001fb6:	d808      	bhi.n	8001fca <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	2037      	movs	r0, #55	@ 0x37
 8001fbe:	f000 ffdf 	bl	8002f80 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001fec <HAL_InitTick+0xf4>)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6013      	str	r3, [r2, #0]
 8001fc8:	e002      	b.n	8001fd0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001fd0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3738      	adds	r7, #56	@ 0x38
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	431bde83 	.word	0x431bde83
 8001fe4:	20000680 	.word	0x20000680
 8001fe8:	40001400 	.word	0x40001400
 8001fec:	20000010 	.word	0x20000010

08001ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ff4:	bf00      	nop
 8001ff6:	e7fd      	b.n	8001ff4 <NMI_Handler+0x4>

08001ff8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ffc:	bf00      	nop
 8001ffe:	e7fd      	b.n	8001ffc <HardFault_Handler+0x4>

08002000 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002004:	bf00      	nop
 8002006:	e7fd      	b.n	8002004 <MemManage_Handler+0x4>

08002008 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800200c:	bf00      	nop
 800200e:	e7fd      	b.n	800200c <BusFault_Handler+0x4>

08002010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002014:	bf00      	nop
 8002016:	e7fd      	b.n	8002014 <UsageFault_Handler+0x4>

08002018 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800201c:	bf00      	nop
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
	...

08002028 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800202c:	4802      	ldr	r0, [pc, #8]	@ (8002038 <DMA1_Stream5_IRQHandler+0x10>)
 800202e:	f001 f969 	bl	8003304 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	20000584 	.word	0x20000584

0800203c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002040:	4802      	ldr	r0, [pc, #8]	@ (800204c <DMA1_Stream6_IRQHandler+0x10>)
 8002042:	f001 f95f 	bl	8003304 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	200005e4 	.word	0x200005e4

08002050 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002054:	4802      	ldr	r0, [pc, #8]	@ (8002060 <USART2_IRQHandler+0x10>)
 8002056:	f003 fb09 	bl	800566c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	2000053c 	.word	0x2000053c

08002064 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002068:	4802      	ldr	r0, [pc, #8]	@ (8002074 <TIM7_IRQHandler+0x10>)
 800206a:	f002 fce6 	bl	8004a3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20000680 	.word	0x20000680

08002078 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  return 1;
 800207c:	2301      	movs	r3, #1
}
 800207e:	4618      	mov	r0, r3
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <_kill>:

int _kill(int pid, int sig)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002092:	f007 fd6f 	bl	8009b74 <__errno>
 8002096:	4603      	mov	r3, r0
 8002098:	2216      	movs	r2, #22
 800209a:	601a      	str	r2, [r3, #0]
  return -1;
 800209c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <_exit>:

void _exit (int status)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020b0:	f04f 31ff 	mov.w	r1, #4294967295
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f7ff ffe7 	bl	8002088 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020ba:	bf00      	nop
 80020bc:	e7fd      	b.n	80020ba <_exit+0x12>

080020be <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b086      	sub	sp, #24
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	60f8      	str	r0, [r7, #12]
 80020c6:	60b9      	str	r1, [r7, #8]
 80020c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ca:	2300      	movs	r3, #0
 80020cc:	617b      	str	r3, [r7, #20]
 80020ce:	e00a      	b.n	80020e6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020d0:	f3af 8000 	nop.w
 80020d4:	4601      	mov	r1, r0
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	1c5a      	adds	r2, r3, #1
 80020da:	60ba      	str	r2, [r7, #8]
 80020dc:	b2ca      	uxtb	r2, r1
 80020de:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	3301      	adds	r3, #1
 80020e4:	617b      	str	r3, [r7, #20]
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	dbf0      	blt.n	80020d0 <_read+0x12>
  }

  return len;
 80020ee:	687b      	ldr	r3, [r7, #4]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002104:	2300      	movs	r3, #0
 8002106:	617b      	str	r3, [r7, #20]
 8002108:	e009      	b.n	800211e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	1c5a      	adds	r2, r3, #1
 800210e:	60ba      	str	r2, [r7, #8]
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	3301      	adds	r3, #1
 800211c:	617b      	str	r3, [r7, #20]
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	429a      	cmp	r2, r3
 8002124:	dbf1      	blt.n	800210a <_write+0x12>
  }
  return len;
 8002126:	687b      	ldr	r3, [r7, #4]
}
 8002128:	4618      	mov	r0, r3
 800212a:	3718      	adds	r7, #24
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <_close>:

int _close(int file)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002138:	f04f 33ff 	mov.w	r3, #4294967295
}
 800213c:	4618      	mov	r0, r3
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002158:	605a      	str	r2, [r3, #4]
  return 0;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <_isatty>:

int _isatty(int file)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002170:	2301      	movs	r3, #1
}
 8002172:	4618      	mov	r0, r3
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800217e:	b480      	push	{r7}
 8002180:	b085      	sub	sp, #20
 8002182:	af00      	add	r7, sp, #0
 8002184:	60f8      	str	r0, [r7, #12]
 8002186:	60b9      	str	r1, [r7, #8]
 8002188:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021a0:	4a14      	ldr	r2, [pc, #80]	@ (80021f4 <_sbrk+0x5c>)
 80021a2:	4b15      	ldr	r3, [pc, #84]	@ (80021f8 <_sbrk+0x60>)
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021ac:	4b13      	ldr	r3, [pc, #76]	@ (80021fc <_sbrk+0x64>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d102      	bne.n	80021ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021b4:	4b11      	ldr	r3, [pc, #68]	@ (80021fc <_sbrk+0x64>)
 80021b6:	4a12      	ldr	r2, [pc, #72]	@ (8002200 <_sbrk+0x68>)
 80021b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ba:	4b10      	ldr	r3, [pc, #64]	@ (80021fc <_sbrk+0x64>)
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4413      	add	r3, r2
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d207      	bcs.n	80021d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021c8:	f007 fcd4 	bl	8009b74 <__errno>
 80021cc:	4603      	mov	r3, r0
 80021ce:	220c      	movs	r2, #12
 80021d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021d2:	f04f 33ff 	mov.w	r3, #4294967295
 80021d6:	e009      	b.n	80021ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021d8:	4b08      	ldr	r3, [pc, #32]	@ (80021fc <_sbrk+0x64>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021de:	4b07      	ldr	r3, [pc, #28]	@ (80021fc <_sbrk+0x64>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4413      	add	r3, r2
 80021e6:	4a05      	ldr	r2, [pc, #20]	@ (80021fc <_sbrk+0x64>)
 80021e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ea:	68fb      	ldr	r3, [r7, #12]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3718      	adds	r7, #24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	20020000 	.word	0x20020000
 80021f8:	00000400 	.word	0x00000400
 80021fc:	200006c8 	.word	0x200006c8
 8002200:	20004588 	.word	0x20004588

08002204 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002208:	4b06      	ldr	r3, [pc, #24]	@ (8002224 <SystemInit+0x20>)
 800220a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800220e:	4a05      	ldr	r2, [pc, #20]	@ (8002224 <SystemInit+0x20>)
 8002210:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002214:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	e000ed00 	.word	0xe000ed00

08002228 <find_drv>:
// Registry of all inited instances
static uart_drv_t *uart_instances[UART_DRV_MAX_INSTANCES];
static size_t      uart_instance_count = 0;

/** Find the drv instance matching a given huart pointer */
static uart_drv_t *find_drv(UART_HandleTypeDef *hu) {
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
    for (size_t i = 0; i < uart_instance_count; ++i) {
 8002230:	2300      	movs	r3, #0
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	e00f      	b.n	8002256 <find_drv+0x2e>
        if (uart_instances[i]->huart == hu) {
 8002236:	4a0e      	ldr	r2, [pc, #56]	@ (8002270 <find_drv+0x48>)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	429a      	cmp	r2, r3
 8002244:	d104      	bne.n	8002250 <find_drv+0x28>
            return uart_instances[i];
 8002246:	4a0a      	ldr	r2, [pc, #40]	@ (8002270 <find_drv+0x48>)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800224e:	e008      	b.n	8002262 <find_drv+0x3a>
    for (size_t i = 0; i < uart_instance_count; ++i) {
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	3301      	adds	r3, #1
 8002254:	60fb      	str	r3, [r7, #12]
 8002256:	4b07      	ldr	r3, [pc, #28]	@ (8002274 <find_drv+0x4c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	429a      	cmp	r2, r3
 800225e:	d3ea      	bcc.n	8002236 <find_drv+0xe>
        }
    }
    return NULL;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	200006cc 	.word	0x200006cc
 8002274:	200006dc 	.word	0x200006dc

08002278 <notify_event>:

/** Invoke the user callback and update status */
static void notify_event(uart_drv_t *drv, uart_event_t evt) {
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	70fb      	strb	r3, [r7, #3]
    drv->status = (evt == UART_EVT_TX_COMPLETE || evt == UART_EVT_RX_COMPLETE)
                  ? UART_OK
                  : UART_ERROR;
 8002284:	78fb      	ldrb	r3, [r7, #3]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d002      	beq.n	8002290 <notify_event+0x18>
    drv->status = (evt == UART_EVT_TX_COMPLETE || evt == UART_EVT_RX_COMPLETE)
 800228a:	78fb      	ldrb	r3, [r7, #3]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d101      	bne.n	8002294 <notify_event+0x1c>
                  : UART_ERROR;
 8002290:	2200      	movs	r2, #0
 8002292:	e000      	b.n	8002296 <notify_event+0x1e>
 8002294:	2202      	movs	r2, #2
    drv->status = (evt == UART_EVT_TX_COMPLETE || evt == UART_EVT_RX_COMPLETE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	771a      	strb	r2, [r3, #28]
    if (drv->cb) drv->cb(evt, drv->ctx);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d006      	beq.n	80022b0 <notify_event+0x38>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6991      	ldr	r1, [r2, #24]
 80022aa:	78fa      	ldrb	r2, [r7, #3]
 80022ac:	4610      	mov	r0, r2
 80022ae:	4798      	blx	r3
}
 80022b0:	bf00      	nop
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <uart_init>:
                        DMA_HandleTypeDef  *hdma_rx)
#else
                        void              *unused_tx,
                        void              *unused_rx)
#endif
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
 80022c4:	603b      	str	r3, [r7, #0]
    if (uart_instance_count >= UART_DRV_MAX_INSTANCES) {
 80022c6:	4b27      	ldr	r3, [pc, #156]	@ (8002364 <uart_init+0xac>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2b03      	cmp	r3, #3
 80022cc:	d901      	bls.n	80022d2 <uart_init+0x1a>
        return UART_ERROR;
 80022ce:	2302      	movs	r3, #2
 80022d0:	e043      	b.n	800235a <uart_init+0xa2>
    }
    drv->huart = huart;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	68ba      	ldr	r2, [r7, #8]
 80022d6:	601a      	str	r2, [r3, #0]
#if UART_BACKEND == UART_BACKEND_HAL
    drv->hdma_tx = hdma_tx;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	605a      	str	r2, [r3, #4]
    drv->hdma_rx = hdma_rx;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	609a      	str	r2, [r3, #8]
    // Link DMA handles if provided
    if (drv->hdma_tx) drv->huart->hdmatx = drv->hdma_tx;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d004      	beq.n	80022f6 <uart_init+0x3e>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	6852      	ldr	r2, [r2, #4]
 80022f4:	639a      	str	r2, [r3, #56]	@ 0x38
    if (drv->hdma_rx) drv->huart->hdmarx = drv->hdma_rx;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d004      	beq.n	8002308 <uart_init+0x50>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	6892      	ldr	r2, [r2, #8]
 8002306:	63da      	str	r2, [r3, #60]	@ 0x3c
#else
    (void)unused_tx;
    (void)unused_rx;
#endif
    // Create mutexes
    drv->tx_mutex = xSemaphoreCreateMutex();
 8002308:	2001      	movs	r0, #1
 800230a:	f004 fba1 	bl	8006a50 <xQueueCreateMutex>
 800230e:	4602      	mov	r2, r0
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	60da      	str	r2, [r3, #12]
    drv->rx_mutex = xSemaphoreCreateMutex();
 8002314:	2001      	movs	r0, #1
 8002316:	f004 fb9b 	bl	8006a50 <xQueueCreateMutex>
 800231a:	4602      	mov	r2, r0
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	611a      	str	r2, [r3, #16]
    drv->cb       = NULL;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	615a      	str	r2, [r3, #20]
    drv->ctx      = NULL;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2200      	movs	r2, #0
 800232a:	619a      	str	r2, [r3, #24]
    drv->status   = UART_OK;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2200      	movs	r2, #0
 8002330:	771a      	strb	r2, [r3, #28]
    // Register instance
    uart_instances[uart_instance_count++] = drv;
 8002332:	4b0c      	ldr	r3, [pc, #48]	@ (8002364 <uart_init+0xac>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	1c5a      	adds	r2, r3, #1
 8002338:	490a      	ldr	r1, [pc, #40]	@ (8002364 <uart_init+0xac>)
 800233a:	600a      	str	r2, [r1, #0]
 800233c:	490a      	ldr	r1, [pc, #40]	@ (8002368 <uart_init+0xb0>)
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return (drv->tx_mutex && drv->rx_mutex) ? UART_OK : UART_ERROR;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d005      	beq.n	8002358 <uart_init+0xa0>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <uart_init+0xa0>
 8002354:	2300      	movs	r3, #0
 8002356:	e000      	b.n	800235a <uart_init+0xa2>
 8002358:	2302      	movs	r3, #2
}
 800235a:	4618      	mov	r0, r3
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	200006dc 	.word	0x200006dc
 8002368:	200006cc 	.word	0x200006cc

0800236c <uart_send_blocking>:
    return UART_OK;
}

// Blocking APIs

uart_status_t uart_send_blocking(uart_drv_t *drv, uint8_t *data, size_t len, uint32_t timeout_ms) {
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
 8002378:	603b      	str	r3, [r7, #0]
    if (xSemaphoreTake(drv->tx_mutex, pdMS_TO_TICKS(timeout_ms)) != pdTRUE)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	68da      	ldr	r2, [r3, #12]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002384:	fb01 f303 	mul.w	r3, r1, r3
 8002388:	4913      	ldr	r1, [pc, #76]	@ (80023d8 <uart_send_blocking+0x6c>)
 800238a:	fba1 1303 	umull	r1, r3, r1, r3
 800238e:	099b      	lsrs	r3, r3, #6
 8002390:	4619      	mov	r1, r3
 8002392:	4610      	mov	r0, r2
 8002394:	f004 fd58 	bl	8006e48 <xQueueSemaphoreTake>
 8002398:	4603      	mov	r3, r0
 800239a:	2b01      	cmp	r3, #1
 800239c:	d001      	beq.n	80023a2 <uart_send_blocking+0x36>
        return UART_BUSY;
 800239e:	2301      	movs	r3, #1
 80023a0:	e016      	b.n	80023d0 <uart_send_blocking+0x64>
    HAL_StatusTypeDef h = HAL_UART_Transmit(drv->huart, data, len, timeout_ms);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6818      	ldr	r0, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	68b9      	ldr	r1, [r7, #8]
 80023ae:	f003 f855 	bl	800545c <HAL_UART_Transmit>
 80023b2:	4603      	mov	r3, r0
 80023b4:	75fb      	strb	r3, [r7, #23]
    xSemaphoreGive(drv->tx_mutex);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	68d8      	ldr	r0, [r3, #12]
 80023ba:	2300      	movs	r3, #0
 80023bc:	2200      	movs	r2, #0
 80023be:	2100      	movs	r1, #0
 80023c0:	f004 fb5e 	bl	8006a80 <xQueueGenericSend>
    return (h == HAL_OK ? UART_OK : UART_ERROR);
 80023c4:	7dfb      	ldrb	r3, [r7, #23]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <uart_send_blocking+0x62>
 80023ca:	2300      	movs	r3, #0
 80023cc:	e000      	b.n	80023d0 <uart_send_blocking+0x64>
 80023ce:	2302      	movs	r3, #2
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	10624dd3 	.word	0x10624dd3

080023dc <uart_send_dma_blocking>:
}

// Blocking DMA transmit helper
uart_status_t uart_send_dma_blocking(uart_drv_t *drv, uint8_t *data,
                                     size_t len, uint32_t timeout_ms)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
 80023e8:	603b      	str	r3, [r7, #0]
#if UART_BACKEND == UART_BACKEND_HAL
    if (!drv->hdma_tx)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <uart_send_dma_blocking+0x1a>
        return UART_ERROR;
 80023f2:	2302      	movs	r3, #2
 80023f4:	e05f      	b.n	80024b6 <uart_send_dma_blocking+0xda>
    if (xSemaphoreTake(drv->tx_mutex, pdMS_TO_TICKS(timeout_ms)) != pdTRUE)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	68da      	ldr	r2, [r3, #12]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002400:	fb01 f303 	mul.w	r3, r1, r3
 8002404:	492e      	ldr	r1, [pc, #184]	@ (80024c0 <uart_send_dma_blocking+0xe4>)
 8002406:	fba1 1303 	umull	r1, r3, r1, r3
 800240a:	099b      	lsrs	r3, r3, #6
 800240c:	4619      	mov	r1, r3
 800240e:	4610      	mov	r0, r2
 8002410:	f004 fd1a 	bl	8006e48 <xQueueSemaphoreTake>
 8002414:	4603      	mov	r3, r0
 8002416:	2b01      	cmp	r3, #1
 8002418:	d001      	beq.n	800241e <uart_send_dma_blocking+0x42>
        return UART_BUSY;
 800241a:	2301      	movs	r3, #1
 800241c:	e04b      	b.n	80024b6 <uart_send_dma_blocking+0xda>

    drv->status = UART_BUSY;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2201      	movs	r2, #1
 8002422:	771a      	strb	r2, [r3, #28]
    if (HAL_UART_Transmit_DMA(drv->huart, data, len) != HAL_OK) {
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	b292      	uxth	r2, r2
 800242c:	68b9      	ldr	r1, [r7, #8]
 800242e:	4618      	mov	r0, r3
 8002430:	f003 f8a0 	bl	8005574 <HAL_UART_Transmit_DMA>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00b      	beq.n	8002452 <uart_send_dma_blocking+0x76>
        drv->status = UART_ERROR;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2202      	movs	r2, #2
 800243e:	771a      	strb	r2, [r3, #28]
        xSemaphoreGive(drv->tx_mutex);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	68d8      	ldr	r0, [r3, #12]
 8002444:	2300      	movs	r3, #0
 8002446:	2200      	movs	r2, #0
 8002448:	2100      	movs	r1, #0
 800244a:	f004 fb19 	bl	8006a80 <xQueueGenericSend>
        return UART_ERROR;
 800244e:	2302      	movs	r3, #2
 8002450:	e031      	b.n	80024b6 <uart_send_dma_blocking+0xda>
    }

    TickType_t start = xTaskGetTickCount();
 8002452:	f005 fa0d 	bl	8007870 <xTaskGetTickCount>
 8002456:	6178      	str	r0, [r7, #20]
    while (drv->status == UART_BUSY) {
 8002458:	e01e      	b.n	8002498 <uart_send_dma_blocking+0xbc>
        if ((xTaskGetTickCount() - start) >= pdMS_TO_TICKS(timeout_ms)) {
 800245a:	f005 fa09 	bl	8007870 <xTaskGetTickCount>
 800245e:	4602      	mov	r2, r0
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	1ad2      	subs	r2, r2, r3
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800246a:	fb01 f303 	mul.w	r3, r1, r3
 800246e:	4914      	ldr	r1, [pc, #80]	@ (80024c0 <uart_send_dma_blocking+0xe4>)
 8002470:	fba1 1303 	umull	r1, r3, r1, r3
 8002474:	099b      	lsrs	r3, r3, #6
 8002476:	429a      	cmp	r2, r3
 8002478:	d30b      	bcc.n	8002492 <uart_send_dma_blocking+0xb6>
            drv->status = UART_ERROR;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2202      	movs	r2, #2
 800247e:	771a      	strb	r2, [r3, #28]
            xSemaphoreGive(drv->tx_mutex);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	68d8      	ldr	r0, [r3, #12]
 8002484:	2300      	movs	r3, #0
 8002486:	2200      	movs	r2, #0
 8002488:	2100      	movs	r1, #0
 800248a:	f004 faf9 	bl	8006a80 <xQueueGenericSend>
            return UART_ERROR;
 800248e:	2302      	movs	r3, #2
 8002490:	e011      	b.n	80024b6 <uart_send_dma_blocking+0xda>
        }
        vTaskDelay(1);
 8002492:	2001      	movs	r0, #1
 8002494:	f005 f8a8 	bl	80075e8 <vTaskDelay>
    while (drv->status == UART_BUSY) {
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	7f1b      	ldrb	r3, [r3, #28]
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d0db      	beq.n	800245a <uart_send_dma_blocking+0x7e>
    }

    xSemaphoreGive(drv->tx_mutex);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	68d8      	ldr	r0, [r3, #12]
 80024a6:	2300      	movs	r3, #0
 80024a8:	2200      	movs	r2, #0
 80024aa:	2100      	movs	r1, #0
 80024ac:	f004 fae8 	bl	8006a80 <xQueueGenericSend>
    return drv->status;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	7f1b      	ldrb	r3, [r3, #28]
 80024b4:	b2db      	uxtb	r3, r3
#else
    (void)drv; (void)data; (void)len; (void)timeout_ms;
    return UART_ERROR;
#endif
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3718      	adds	r7, #24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	10624dd3 	.word	0x10624dd3

080024c4 <HAL_UART_TxCpltCallback>:
    drv->ctx = user_ctx;
}

// HAL UART IRQ callbacks (called by HAL_UART_IRQHandler)

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *hu) {
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
    uart_drv_t *drv = find_drv(hu);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f7ff feab 	bl	8002228 <find_drv>
 80024d2:	60f8      	str	r0, [r7, #12]
    if (drv) notify_event(drv, UART_EVT_TX_COMPLETE);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_UART_TxCpltCallback+0x1e>
 80024da:	2100      	movs	r1, #0
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f7ff fecb 	bl	8002278 <notify_event>
}
 80024e2:	bf00      	nop
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *hu) {
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b084      	sub	sp, #16
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
    uart_drv_t *drv = find_drv(hu);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7ff fe98 	bl	8002228 <find_drv>
 80024f8:	60f8      	str	r0, [r7, #12]
    if (drv) notify_event(drv, UART_EVT_RX_COMPLETE);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <HAL_UART_RxCpltCallback+0x1e>
 8002500:	2101      	movs	r1, #1
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f7ff feb8 	bl	8002278 <notify_event>
}
 8002508:	bf00      	nop
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *hu) {
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
    uart_drv_t *drv = find_drv(hu);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f7ff fe85 	bl	8002228 <find_drv>
 800251e:	60f8      	str	r0, [r7, #12]
    if (drv) notify_event(drv, UART_EVT_ERROR);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_UART_ErrorCallback+0x1e>
 8002526:	2102      	movs	r1, #2
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f7ff fea5 	bl	8002278 <notify_event>
}
 800252e:	bf00      	nop
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002538:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002570 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800253c:	f7ff fe62 	bl	8002204 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002540:	480c      	ldr	r0, [pc, #48]	@ (8002574 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002542:	490d      	ldr	r1, [pc, #52]	@ (8002578 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002544:	4a0d      	ldr	r2, [pc, #52]	@ (800257c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002548:	e002      	b.n	8002550 <LoopCopyDataInit>

0800254a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800254a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800254c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800254e:	3304      	adds	r3, #4

08002550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002554:	d3f9      	bcc.n	800254a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002556:	4a0a      	ldr	r2, [pc, #40]	@ (8002580 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002558:	4c0a      	ldr	r4, [pc, #40]	@ (8002584 <LoopFillZerobss+0x22>)
  movs r3, #0
 800255a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800255c:	e001      	b.n	8002562 <LoopFillZerobss>

0800255e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800255e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002560:	3204      	adds	r2, #4

08002562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002564:	d3fb      	bcc.n	800255e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002566:	f007 fb0b 	bl	8009b80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800256a:	f7fe ff5f 	bl	800142c <main>
  bx  lr    
 800256e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002570:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002574:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002578:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 800257c:	0800d7a4 	.word	0x0800d7a4
  ldr r2, =_sbss
 8002580:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002584:	20004584 	.word	0x20004584

08002588 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002588:	e7fe      	b.n	8002588 <ADC_IRQHandler>
	...

0800258c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002590:	4b0e      	ldr	r3, [pc, #56]	@ (80025cc <HAL_Init+0x40>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a0d      	ldr	r2, [pc, #52]	@ (80025cc <HAL_Init+0x40>)
 8002596:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800259a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800259c:	4b0b      	ldr	r3, [pc, #44]	@ (80025cc <HAL_Init+0x40>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a0a      	ldr	r2, [pc, #40]	@ (80025cc <HAL_Init+0x40>)
 80025a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025a8:	4b08      	ldr	r3, [pc, #32]	@ (80025cc <HAL_Init+0x40>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a07      	ldr	r2, [pc, #28]	@ (80025cc <HAL_Init+0x40>)
 80025ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025b4:	2003      	movs	r0, #3
 80025b6:	f000 fcd8 	bl	8002f6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025ba:	200f      	movs	r0, #15
 80025bc:	f7ff fc9c 	bl	8001ef8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025c0:	f7ff fb1e 	bl	8001c00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	40023c00 	.word	0x40023c00

080025d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025d4:	4b06      	ldr	r3, [pc, #24]	@ (80025f0 <HAL_IncTick+0x20>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	461a      	mov	r2, r3
 80025da:	4b06      	ldr	r3, [pc, #24]	@ (80025f4 <HAL_IncTick+0x24>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4413      	add	r3, r2
 80025e0:	4a04      	ldr	r2, [pc, #16]	@ (80025f4 <HAL_IncTick+0x24>)
 80025e2:	6013      	str	r3, [r2, #0]
}
 80025e4:	bf00      	nop
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	20000014 	.word	0x20000014
 80025f4:	200006e0 	.word	0x200006e0

080025f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  return uwTick;
 80025fc:	4b03      	ldr	r3, [pc, #12]	@ (800260c <HAL_GetTick+0x14>)
 80025fe:	681b      	ldr	r3, [r3, #0]
}
 8002600:	4618      	mov	r0, r3
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	200006e0 	.word	0x200006e0

08002610 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002618:	f7ff ffee 	bl	80025f8 <HAL_GetTick>
 800261c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002628:	d005      	beq.n	8002636 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800262a:	4b0a      	ldr	r3, [pc, #40]	@ (8002654 <HAL_Delay+0x44>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	461a      	mov	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	4413      	add	r3, r2
 8002634:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002636:	bf00      	nop
 8002638:	f7ff ffde 	bl	80025f8 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	429a      	cmp	r2, r3
 8002646:	d8f7      	bhi.n	8002638 <HAL_Delay+0x28>
  {
  }
}
 8002648:	bf00      	nop
 800264a:	bf00      	nop
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	20000014 	.word	0x20000014

08002658 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002660:	2300      	movs	r3, #0
 8002662:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e033      	b.n	80026d6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002672:	2b00      	cmp	r3, #0
 8002674:	d109      	bne.n	800268a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7ff faee 	bl	8001c58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268e:	f003 0310 	and.w	r3, r3, #16
 8002692:	2b00      	cmp	r3, #0
 8002694:	d118      	bne.n	80026c8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800269e:	f023 0302 	bic.w	r3, r3, #2
 80026a2:	f043 0202 	orr.w	r2, r3, #2
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 fab4 	bl	8002c18 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ba:	f023 0303 	bic.w	r3, r3, #3
 80026be:	f043 0201 	orr.w	r2, r3, #1
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	641a      	str	r2, [r3, #64]	@ 0x40
 80026c6:	e001      	b.n	80026cc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
	...

080026e0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d101      	bne.n	80026fa <HAL_ADC_Start+0x1a>
 80026f6:	2302      	movs	r3, #2
 80026f8:	e0b2      	b.n	8002860 <HAL_ADC_Start+0x180>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b01      	cmp	r3, #1
 800270e:	d018      	beq.n	8002742 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689a      	ldr	r2, [r3, #8]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f042 0201 	orr.w	r2, r2, #1
 800271e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002720:	4b52      	ldr	r3, [pc, #328]	@ (800286c <HAL_ADC_Start+0x18c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a52      	ldr	r2, [pc, #328]	@ (8002870 <HAL_ADC_Start+0x190>)
 8002726:	fba2 2303 	umull	r2, r3, r2, r3
 800272a:	0c9a      	lsrs	r2, r3, #18
 800272c:	4613      	mov	r3, r2
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	4413      	add	r3, r2
 8002732:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002734:	e002      	b.n	800273c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	3b01      	subs	r3, #1
 800273a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f9      	bne.n	8002736 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b01      	cmp	r3, #1
 800274e:	d17a      	bne.n	8002846 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002754:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002758:	f023 0301 	bic.w	r3, r3, #1
 800275c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800276e:	2b00      	cmp	r3, #0
 8002770:	d007      	beq.n	8002782 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002776:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800277a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002786:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800278a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800278e:	d106      	bne.n	800279e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002794:	f023 0206 	bic.w	r2, r3, #6
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	645a      	str	r2, [r3, #68]	@ 0x44
 800279c:	e002      	b.n	80027a4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027ac:	4b31      	ldr	r3, [pc, #196]	@ (8002874 <HAL_ADC_Start+0x194>)
 80027ae:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80027b8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f003 031f 	and.w	r3, r3, #31
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d12a      	bne.n	800281c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a2b      	ldr	r2, [pc, #172]	@ (8002878 <HAL_ADC_Start+0x198>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d015      	beq.n	80027fc <HAL_ADC_Start+0x11c>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a29      	ldr	r2, [pc, #164]	@ (800287c <HAL_ADC_Start+0x19c>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d105      	bne.n	80027e6 <HAL_ADC_Start+0x106>
 80027da:	4b26      	ldr	r3, [pc, #152]	@ (8002874 <HAL_ADC_Start+0x194>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f003 031f 	and.w	r3, r3, #31
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00a      	beq.n	80027fc <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a25      	ldr	r2, [pc, #148]	@ (8002880 <HAL_ADC_Start+0x1a0>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d136      	bne.n	800285e <HAL_ADC_Start+0x17e>
 80027f0:	4b20      	ldr	r3, [pc, #128]	@ (8002874 <HAL_ADC_Start+0x194>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f003 0310 	and.w	r3, r3, #16
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d130      	bne.n	800285e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d129      	bne.n	800285e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002818:	609a      	str	r2, [r3, #8]
 800281a:	e020      	b.n	800285e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a15      	ldr	r2, [pc, #84]	@ (8002878 <HAL_ADC_Start+0x198>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d11b      	bne.n	800285e <HAL_ADC_Start+0x17e>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d114      	bne.n	800285e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689a      	ldr	r2, [r3, #8]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002842:	609a      	str	r2, [r3, #8]
 8002844:	e00b      	b.n	800285e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284a:	f043 0210 	orr.w	r2, r3, #16
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002856:	f043 0201 	orr.w	r2, r3, #1
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3714      	adds	r7, #20
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	2000000c 	.word	0x2000000c
 8002870:	431bde83 	.word	0x431bde83
 8002874:	40012300 	.word	0x40012300
 8002878:	40012000 	.word	0x40012000
 800287c:	40012100 	.word	0x40012100
 8002880:	40012200 	.word	0x40012200

08002884 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800288e:	2300      	movs	r3, #0
 8002890:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800289c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028a0:	d113      	bne.n	80028ca <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80028ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028b0:	d10b      	bne.n	80028ca <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b6:	f043 0220 	orr.w	r2, r3, #32
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e063      	b.n	8002992 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80028ca:	f7ff fe95 	bl	80025f8 <HAL_GetTick>
 80028ce:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80028d0:	e021      	b.n	8002916 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d8:	d01d      	beq.n	8002916 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d007      	beq.n	80028f0 <HAL_ADC_PollForConversion+0x6c>
 80028e0:	f7ff fe8a 	bl	80025f8 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d212      	bcs.n	8002916 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d00b      	beq.n	8002916 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002902:	f043 0204 	orr.w	r2, r3, #4
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e03d      	b.n	8002992 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b02      	cmp	r3, #2
 8002922:	d1d6      	bne.n	80028d2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f06f 0212 	mvn.w	r2, #18
 800292c:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002932:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d123      	bne.n	8002990 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800294c:	2b00      	cmp	r3, #0
 800294e:	d11f      	bne.n	8002990 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002956:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800295a:	2b00      	cmp	r3, #0
 800295c:	d006      	beq.n	800296c <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002968:	2b00      	cmp	r3, #0
 800296a:	d111      	bne.n	8002990 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002970:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d105      	bne.n	8002990 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002988:	f043 0201 	orr.w	r2, r3, #1
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80029be:	2300      	movs	r3, #0
 80029c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d101      	bne.n	80029d0 <HAL_ADC_ConfigChannel+0x1c>
 80029cc:	2302      	movs	r3, #2
 80029ce:	e113      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x244>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2b09      	cmp	r3, #9
 80029de:	d925      	bls.n	8002a2c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68d9      	ldr	r1, [r3, #12]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	461a      	mov	r2, r3
 80029ee:	4613      	mov	r3, r2
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	4413      	add	r3, r2
 80029f4:	3b1e      	subs	r3, #30
 80029f6:	2207      	movs	r2, #7
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	43da      	mvns	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	400a      	ands	r2, r1
 8002a04:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68d9      	ldr	r1, [r3, #12]
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	4618      	mov	r0, r3
 8002a18:	4603      	mov	r3, r0
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	4403      	add	r3, r0
 8002a1e:	3b1e      	subs	r3, #30
 8002a20:	409a      	lsls	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	60da      	str	r2, [r3, #12]
 8002a2a:	e022      	b.n	8002a72 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6919      	ldr	r1, [r3, #16]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	461a      	mov	r2, r3
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	4413      	add	r3, r2
 8002a40:	2207      	movs	r2, #7
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	43da      	mvns	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	400a      	ands	r2, r1
 8002a4e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6919      	ldr	r1, [r3, #16]
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	689a      	ldr	r2, [r3, #8]
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	4618      	mov	r0, r3
 8002a62:	4603      	mov	r3, r0
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	4403      	add	r3, r0
 8002a68:	409a      	lsls	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2b06      	cmp	r3, #6
 8002a78:	d824      	bhi.n	8002ac4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	4613      	mov	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4413      	add	r3, r2
 8002a8a:	3b05      	subs	r3, #5
 8002a8c:	221f      	movs	r2, #31
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	43da      	mvns	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	400a      	ands	r2, r1
 8002a9a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	3b05      	subs	r3, #5
 8002ab6:	fa00 f203 	lsl.w	r2, r0, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	635a      	str	r2, [r3, #52]	@ 0x34
 8002ac2:	e04c      	b.n	8002b5e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	2b0c      	cmp	r3, #12
 8002aca:	d824      	bhi.n	8002b16 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	3b23      	subs	r3, #35	@ 0x23
 8002ade:	221f      	movs	r2, #31
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	43da      	mvns	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	400a      	ands	r2, r1
 8002aec:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	4618      	mov	r0, r3
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	4613      	mov	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	3b23      	subs	r3, #35	@ 0x23
 8002b08:	fa00 f203 	lsl.w	r2, r0, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b14:	e023      	b.n	8002b5e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	4613      	mov	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4413      	add	r3, r2
 8002b26:	3b41      	subs	r3, #65	@ 0x41
 8002b28:	221f      	movs	r2, #31
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	43da      	mvns	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	400a      	ands	r2, r1
 8002b36:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	4618      	mov	r0, r3
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	3b41      	subs	r3, #65	@ 0x41
 8002b52:	fa00 f203 	lsl.w	r2, r0, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b5e:	4b29      	ldr	r3, [pc, #164]	@ (8002c04 <HAL_ADC_ConfigChannel+0x250>)
 8002b60:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a28      	ldr	r2, [pc, #160]	@ (8002c08 <HAL_ADC_ConfigChannel+0x254>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d10f      	bne.n	8002b8c <HAL_ADC_ConfigChannel+0x1d8>
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b12      	cmp	r3, #18
 8002b72:	d10b      	bne.n	8002b8c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a1d      	ldr	r2, [pc, #116]	@ (8002c08 <HAL_ADC_ConfigChannel+0x254>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d12b      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x23a>
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a1c      	ldr	r2, [pc, #112]	@ (8002c0c <HAL_ADC_ConfigChannel+0x258>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d003      	beq.n	8002ba8 <HAL_ADC_ConfigChannel+0x1f4>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2b11      	cmp	r3, #17
 8002ba6:	d122      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a11      	ldr	r2, [pc, #68]	@ (8002c0c <HAL_ADC_ConfigChannel+0x258>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d111      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bca:	4b11      	ldr	r3, [pc, #68]	@ (8002c10 <HAL_ADC_ConfigChannel+0x25c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a11      	ldr	r2, [pc, #68]	@ (8002c14 <HAL_ADC_ConfigChannel+0x260>)
 8002bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd4:	0c9a      	lsrs	r2, r3, #18
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4413      	add	r3, r2
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002be0:	e002      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	3b01      	subs	r3, #1
 8002be6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1f9      	bne.n	8002be2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3714      	adds	r7, #20
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	40012300 	.word	0x40012300
 8002c08:	40012000 	.word	0x40012000
 8002c0c:	10000012 	.word	0x10000012
 8002c10:	2000000c 	.word	0x2000000c
 8002c14:	431bde83 	.word	0x431bde83

08002c18 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c20:	4b79      	ldr	r3, [pc, #484]	@ (8002e08 <ADC_Init+0x1f0>)
 8002c22:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6859      	ldr	r1, [r3, #4]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	021a      	lsls	r2, r3, #8
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002c70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6859      	ldr	r1, [r3, #4]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689a      	ldr	r2, [r3, #8]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6899      	ldr	r1, [r3, #8]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002caa:	4a58      	ldr	r2, [pc, #352]	@ (8002e0c <ADC_Init+0x1f4>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d022      	beq.n	8002cf6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	689a      	ldr	r2, [r3, #8]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002cbe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6899      	ldr	r1, [r3, #8]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002ce0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6899      	ldr	r1, [r3, #8]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	609a      	str	r2, [r3, #8]
 8002cf4:	e00f      	b.n	8002d16 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002d04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002d14:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0202 	bic.w	r2, r2, #2
 8002d24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6899      	ldr	r1, [r3, #8]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	7e1b      	ldrb	r3, [r3, #24]
 8002d30:	005a      	lsls	r2, r3, #1
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d01b      	beq.n	8002d7c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d52:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002d62:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6859      	ldr	r1, [r3, #4]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	035a      	lsls	r2, r3, #13
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	605a      	str	r2, [r3, #4]
 8002d7a:	e007      	b.n	8002d8c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d8a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002d9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	3b01      	subs	r3, #1
 8002da8:	051a      	lsls	r2, r3, #20
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002dc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	6899      	ldr	r1, [r3, #8]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002dce:	025a      	lsls	r2, r3, #9
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689a      	ldr	r2, [r3, #8]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002de6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6899      	ldr	r1, [r3, #8]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	029a      	lsls	r2, r3, #10
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	609a      	str	r2, [r3, #8]
}
 8002dfc:	bf00      	nop
 8002dfe:	3714      	adds	r7, #20
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	40012300 	.word	0x40012300
 8002e0c:	0f000001 	.word	0x0f000001

08002e10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e20:	4b0c      	ldr	r3, [pc, #48]	@ (8002e54 <__NVIC_SetPriorityGrouping+0x44>)
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e42:	4a04      	ldr	r2, [pc, #16]	@ (8002e54 <__NVIC_SetPriorityGrouping+0x44>)
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	60d3      	str	r3, [r2, #12]
}
 8002e48:	bf00      	nop
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	e000ed00 	.word	0xe000ed00

08002e58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e5c:	4b04      	ldr	r3, [pc, #16]	@ (8002e70 <__NVIC_GetPriorityGrouping+0x18>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	0a1b      	lsrs	r3, r3, #8
 8002e62:	f003 0307 	and.w	r3, r3, #7
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	e000ed00 	.word	0xe000ed00

08002e74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	db0b      	blt.n	8002e9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e86:	79fb      	ldrb	r3, [r7, #7]
 8002e88:	f003 021f 	and.w	r2, r3, #31
 8002e8c:	4907      	ldr	r1, [pc, #28]	@ (8002eac <__NVIC_EnableIRQ+0x38>)
 8002e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e92:	095b      	lsrs	r3, r3, #5
 8002e94:	2001      	movs	r0, #1
 8002e96:	fa00 f202 	lsl.w	r2, r0, r2
 8002e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	e000e100 	.word	0xe000e100

08002eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	6039      	str	r1, [r7, #0]
 8002eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	db0a      	blt.n	8002eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	490c      	ldr	r1, [pc, #48]	@ (8002efc <__NVIC_SetPriority+0x4c>)
 8002eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ece:	0112      	lsls	r2, r2, #4
 8002ed0:	b2d2      	uxtb	r2, r2
 8002ed2:	440b      	add	r3, r1
 8002ed4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ed8:	e00a      	b.n	8002ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	4908      	ldr	r1, [pc, #32]	@ (8002f00 <__NVIC_SetPriority+0x50>)
 8002ee0:	79fb      	ldrb	r3, [r7, #7]
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	3b04      	subs	r3, #4
 8002ee8:	0112      	lsls	r2, r2, #4
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	440b      	add	r3, r1
 8002eee:	761a      	strb	r2, [r3, #24]
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	e000e100 	.word	0xe000e100
 8002f00:	e000ed00 	.word	0xe000ed00

08002f04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b089      	sub	sp, #36	@ 0x24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f003 0307 	and.w	r3, r3, #7
 8002f16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	f1c3 0307 	rsb	r3, r3, #7
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	bf28      	it	cs
 8002f22:	2304      	movcs	r3, #4
 8002f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	3304      	adds	r3, #4
 8002f2a:	2b06      	cmp	r3, #6
 8002f2c:	d902      	bls.n	8002f34 <NVIC_EncodePriority+0x30>
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	3b03      	subs	r3, #3
 8002f32:	e000      	b.n	8002f36 <NVIC_EncodePriority+0x32>
 8002f34:	2300      	movs	r3, #0
 8002f36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f38:	f04f 32ff 	mov.w	r2, #4294967295
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f42:	43da      	mvns	r2, r3
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	401a      	ands	r2, r3
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	fa01 f303 	lsl.w	r3, r1, r3
 8002f56:	43d9      	mvns	r1, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f5c:	4313      	orrs	r3, r2
         );
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3724      	adds	r7, #36	@ 0x24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b082      	sub	sp, #8
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7ff ff4c 	bl	8002e10 <__NVIC_SetPriorityGrouping>
}
 8002f78:	bf00      	nop
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
 8002f8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f92:	f7ff ff61 	bl	8002e58 <__NVIC_GetPriorityGrouping>
 8002f96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	68b9      	ldr	r1, [r7, #8]
 8002f9c:	6978      	ldr	r0, [r7, #20]
 8002f9e:	f7ff ffb1 	bl	8002f04 <NVIC_EncodePriority>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fa8:	4611      	mov	r1, r2
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff ff80 	bl	8002eb0 <__NVIC_SetPriority>
}
 8002fb0:	bf00      	nop
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7ff ff54 	bl	8002e74 <__NVIC_EnableIRQ>
}
 8002fcc:	bf00      	nop
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002fe0:	f7ff fb0a 	bl	80025f8 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d101      	bne.n	8002ff0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e099      	b.n	8003124 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0201 	bic.w	r2, r2, #1
 800300e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003010:	e00f      	b.n	8003032 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003012:	f7ff faf1 	bl	80025f8 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b05      	cmp	r3, #5
 800301e:	d908      	bls.n	8003032 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2220      	movs	r2, #32
 8003024:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2203      	movs	r2, #3
 800302a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e078      	b.n	8003124 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1e8      	bne.n	8003012 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	4b38      	ldr	r3, [pc, #224]	@ (800312c <HAL_DMA_Init+0x158>)
 800304c:	4013      	ands	r3, r2
 800304e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800305e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800306a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003076:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	4313      	orrs	r3, r2
 8003082:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003088:	2b04      	cmp	r3, #4
 800308a:	d107      	bne.n	800309c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003094:	4313      	orrs	r3, r2
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	4313      	orrs	r3, r2
 800309a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	f023 0307 	bic.w	r3, r3, #7
 80030b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d117      	bne.n	80030f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00e      	beq.n	80030f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 fb01 	bl	80036e0 <DMA_CheckFifoParam>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d008      	beq.n	80030f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2240      	movs	r2, #64	@ 0x40
 80030e8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80030f2:	2301      	movs	r3, #1
 80030f4:	e016      	b.n	8003124 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 fab8 	bl	8003674 <DMA_CalcBaseAndBitshift>
 8003104:	4603      	mov	r3, r0
 8003106:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800310c:	223f      	movs	r2, #63	@ 0x3f
 800310e:	409a      	lsls	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3718      	adds	r7, #24
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	f010803f 	.word	0xf010803f

08003130 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
 800313c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800313e:	2300      	movs	r3, #0
 8003140:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003146:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800314e:	2b01      	cmp	r3, #1
 8003150:	d101      	bne.n	8003156 <HAL_DMA_Start_IT+0x26>
 8003152:	2302      	movs	r3, #2
 8003154:	e040      	b.n	80031d8 <HAL_DMA_Start_IT+0xa8>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b01      	cmp	r3, #1
 8003168:	d12f      	bne.n	80031ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2202      	movs	r2, #2
 800316e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	68b9      	ldr	r1, [r7, #8]
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f000 fa4a 	bl	8003618 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003188:	223f      	movs	r2, #63	@ 0x3f
 800318a:	409a      	lsls	r2, r3
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f042 0216 	orr.w	r2, r2, #22
 800319e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d007      	beq.n	80031b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f042 0208 	orr.w	r2, r2, #8
 80031b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f042 0201 	orr.w	r2, r2, #1
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	e005      	b.n	80031d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80031d2:	2302      	movs	r3, #2
 80031d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80031d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3718      	adds	r7, #24
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80031ee:	f7ff fa03 	bl	80025f8 <HAL_GetTick>
 80031f2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d008      	beq.n	8003212 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2280      	movs	r2, #128	@ 0x80
 8003204:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e052      	b.n	80032b8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0216 	bic.w	r2, r2, #22
 8003220:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	695a      	ldr	r2, [r3, #20]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003230:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003236:	2b00      	cmp	r3, #0
 8003238:	d103      	bne.n	8003242 <HAL_DMA_Abort+0x62>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800323e:	2b00      	cmp	r3, #0
 8003240:	d007      	beq.n	8003252 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 0208 	bic.w	r2, r2, #8
 8003250:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 0201 	bic.w	r2, r2, #1
 8003260:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003262:	e013      	b.n	800328c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003264:	f7ff f9c8 	bl	80025f8 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b05      	cmp	r3, #5
 8003270:	d90c      	bls.n	800328c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2220      	movs	r2, #32
 8003276:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2203      	movs	r2, #3
 800327c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e015      	b.n	80032b8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1e4      	bne.n	8003264 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800329e:	223f      	movs	r2, #63	@ 0x3f
 80032a0:	409a      	lsls	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d004      	beq.n	80032de <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2280      	movs	r2, #128	@ 0x80
 80032d8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e00c      	b.n	80032f8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2205      	movs	r2, #5
 80032e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 0201 	bic.w	r2, r2, #1
 80032f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800330c:	2300      	movs	r3, #0
 800330e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003310:	4b8e      	ldr	r3, [pc, #568]	@ (800354c <HAL_DMA_IRQHandler+0x248>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a8e      	ldr	r2, [pc, #568]	@ (8003550 <HAL_DMA_IRQHandler+0x24c>)
 8003316:	fba2 2303 	umull	r2, r3, r2, r3
 800331a:	0a9b      	lsrs	r3, r3, #10
 800331c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003322:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800332e:	2208      	movs	r2, #8
 8003330:	409a      	lsls	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	4013      	ands	r3, r2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d01a      	beq.n	8003370 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d013      	beq.n	8003370 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 0204 	bic.w	r2, r2, #4
 8003356:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800335c:	2208      	movs	r2, #8
 800335e:	409a      	lsls	r2, r3
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003368:	f043 0201 	orr.w	r2, r3, #1
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003374:	2201      	movs	r2, #1
 8003376:	409a      	lsls	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	4013      	ands	r3, r2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d012      	beq.n	80033a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00b      	beq.n	80033a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003392:	2201      	movs	r2, #1
 8003394:	409a      	lsls	r2, r3
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800339e:	f043 0202 	orr.w	r2, r3, #2
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033aa:	2204      	movs	r2, #4
 80033ac:	409a      	lsls	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	4013      	ands	r3, r2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d012      	beq.n	80033dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00b      	beq.n	80033dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c8:	2204      	movs	r2, #4
 80033ca:	409a      	lsls	r2, r3
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033d4:	f043 0204 	orr.w	r2, r3, #4
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033e0:	2210      	movs	r2, #16
 80033e2:	409a      	lsls	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	4013      	ands	r3, r2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d043      	beq.n	8003474 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0308 	and.w	r3, r3, #8
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d03c      	beq.n	8003474 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033fe:	2210      	movs	r2, #16
 8003400:	409a      	lsls	r2, r3
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d018      	beq.n	8003446 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d108      	bne.n	8003434 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003426:	2b00      	cmp	r3, #0
 8003428:	d024      	beq.n	8003474 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	4798      	blx	r3
 8003432:	e01f      	b.n	8003474 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003438:	2b00      	cmp	r3, #0
 800343a:	d01b      	beq.n	8003474 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	4798      	blx	r3
 8003444:	e016      	b.n	8003474 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003450:	2b00      	cmp	r3, #0
 8003452:	d107      	bne.n	8003464 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0208 	bic.w	r2, r2, #8
 8003462:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003468:	2b00      	cmp	r3, #0
 800346a:	d003      	beq.n	8003474 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003478:	2220      	movs	r2, #32
 800347a:	409a      	lsls	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	4013      	ands	r3, r2
 8003480:	2b00      	cmp	r3, #0
 8003482:	f000 808f 	beq.w	80035a4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0310 	and.w	r3, r3, #16
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 8087 	beq.w	80035a4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800349a:	2220      	movs	r2, #32
 800349c:	409a      	lsls	r2, r3
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b05      	cmp	r3, #5
 80034ac:	d136      	bne.n	800351c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 0216 	bic.w	r2, r2, #22
 80034bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	695a      	ldr	r2, [r3, #20]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d103      	bne.n	80034de <HAL_DMA_IRQHandler+0x1da>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d007      	beq.n	80034ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0208 	bic.w	r2, r2, #8
 80034ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034f2:	223f      	movs	r2, #63	@ 0x3f
 80034f4:	409a      	lsls	r2, r3
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800350e:	2b00      	cmp	r3, #0
 8003510:	d07e      	beq.n	8003610 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	4798      	blx	r3
        }
        return;
 800351a:	e079      	b.n	8003610 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d01d      	beq.n	8003566 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10d      	bne.n	8003554 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800353c:	2b00      	cmp	r3, #0
 800353e:	d031      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	4798      	blx	r3
 8003548:	e02c      	b.n	80035a4 <HAL_DMA_IRQHandler+0x2a0>
 800354a:	bf00      	nop
 800354c:	2000000c 	.word	0x2000000c
 8003550:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003558:	2b00      	cmp	r3, #0
 800355a:	d023      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	4798      	blx	r3
 8003564:	e01e      	b.n	80035a4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10f      	bne.n	8003594 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0210 	bic.w	r2, r2, #16
 8003582:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d032      	beq.n	8003612 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d022      	beq.n	80035fe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2205      	movs	r2, #5
 80035bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 0201 	bic.w	r2, r2, #1
 80035ce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	3301      	adds	r3, #1
 80035d4:	60bb      	str	r3, [r7, #8]
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d307      	bcc.n	80035ec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f2      	bne.n	80035d0 <HAL_DMA_IRQHandler+0x2cc>
 80035ea:	e000      	b.n	80035ee <HAL_DMA_IRQHandler+0x2ea>
          break;
 80035ec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003602:	2b00      	cmp	r3, #0
 8003604:	d005      	beq.n	8003612 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	4798      	blx	r3
 800360e:	e000      	b.n	8003612 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003610:	bf00      	nop
    }
  }
}
 8003612:	3718      	adds	r7, #24
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
 8003624:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003634:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	2b40      	cmp	r3, #64	@ 0x40
 8003644:	d108      	bne.n	8003658 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003656:	e007      	b.n	8003668 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68ba      	ldr	r2, [r7, #8]
 800365e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	60da      	str	r2, [r3, #12]
}
 8003668:	bf00      	nop
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	b2db      	uxtb	r3, r3
 8003682:	3b10      	subs	r3, #16
 8003684:	4a14      	ldr	r2, [pc, #80]	@ (80036d8 <DMA_CalcBaseAndBitshift+0x64>)
 8003686:	fba2 2303 	umull	r2, r3, r2, r3
 800368a:	091b      	lsrs	r3, r3, #4
 800368c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800368e:	4a13      	ldr	r2, [pc, #76]	@ (80036dc <DMA_CalcBaseAndBitshift+0x68>)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	4413      	add	r3, r2
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	461a      	mov	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2b03      	cmp	r3, #3
 80036a0:	d909      	bls.n	80036b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80036aa:	f023 0303 	bic.w	r3, r3, #3
 80036ae:	1d1a      	adds	r2, r3, #4
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	659a      	str	r2, [r3, #88]	@ 0x58
 80036b4:	e007      	b.n	80036c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80036be:	f023 0303 	bic.w	r3, r3, #3
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	aaaaaaab 	.word	0xaaaaaaab
 80036dc:	0800d360 	.word	0x0800d360

080036e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036e8:	2300      	movs	r3, #0
 80036ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d11f      	bne.n	800373a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	2b03      	cmp	r3, #3
 80036fe:	d856      	bhi.n	80037ae <DMA_CheckFifoParam+0xce>
 8003700:	a201      	add	r2, pc, #4	@ (adr r2, 8003708 <DMA_CheckFifoParam+0x28>)
 8003702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003706:	bf00      	nop
 8003708:	08003719 	.word	0x08003719
 800370c:	0800372b 	.word	0x0800372b
 8003710:	08003719 	.word	0x08003719
 8003714:	080037af 	.word	0x080037af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800371c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d046      	beq.n	80037b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003728:	e043      	b.n	80037b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800372e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003732:	d140      	bne.n	80037b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003738:	e03d      	b.n	80037b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003742:	d121      	bne.n	8003788 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	2b03      	cmp	r3, #3
 8003748:	d837      	bhi.n	80037ba <DMA_CheckFifoParam+0xda>
 800374a:	a201      	add	r2, pc, #4	@ (adr r2, 8003750 <DMA_CheckFifoParam+0x70>)
 800374c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003750:	08003761 	.word	0x08003761
 8003754:	08003767 	.word	0x08003767
 8003758:	08003761 	.word	0x08003761
 800375c:	08003779 	.word	0x08003779
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	73fb      	strb	r3, [r7, #15]
      break;
 8003764:	e030      	b.n	80037c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800376a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d025      	beq.n	80037be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003776:	e022      	b.n	80037be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800377c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003780:	d11f      	bne.n	80037c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003786:	e01c      	b.n	80037c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	2b02      	cmp	r3, #2
 800378c:	d903      	bls.n	8003796 <DMA_CheckFifoParam+0xb6>
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	2b03      	cmp	r3, #3
 8003792:	d003      	beq.n	800379c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003794:	e018      	b.n	80037c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	73fb      	strb	r3, [r7, #15]
      break;
 800379a:	e015      	b.n	80037c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00e      	beq.n	80037c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	73fb      	strb	r3, [r7, #15]
      break;
 80037ac:	e00b      	b.n	80037c6 <DMA_CheckFifoParam+0xe6>
      break;
 80037ae:	bf00      	nop
 80037b0:	e00a      	b.n	80037c8 <DMA_CheckFifoParam+0xe8>
      break;
 80037b2:	bf00      	nop
 80037b4:	e008      	b.n	80037c8 <DMA_CheckFifoParam+0xe8>
      break;
 80037b6:	bf00      	nop
 80037b8:	e006      	b.n	80037c8 <DMA_CheckFifoParam+0xe8>
      break;
 80037ba:	bf00      	nop
 80037bc:	e004      	b.n	80037c8 <DMA_CheckFifoParam+0xe8>
      break;
 80037be:	bf00      	nop
 80037c0:	e002      	b.n	80037c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80037c2:	bf00      	nop
 80037c4:	e000      	b.n	80037c8 <DMA_CheckFifoParam+0xe8>
      break;
 80037c6:	bf00      	nop
    }
  } 
  
  return status; 
 80037c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3714      	adds	r7, #20
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop

080037d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037d8:	b480      	push	{r7}
 80037da:	b089      	sub	sp, #36	@ 0x24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037e2:	2300      	movs	r3, #0
 80037e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037ee:	2300      	movs	r3, #0
 80037f0:	61fb      	str	r3, [r7, #28]
 80037f2:	e165      	b.n	8003ac0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037f4:	2201      	movs	r2, #1
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	4013      	ands	r3, r2
 8003806:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	429a      	cmp	r2, r3
 800380e:	f040 8154 	bne.w	8003aba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f003 0303 	and.w	r3, r3, #3
 800381a:	2b01      	cmp	r3, #1
 800381c:	d005      	beq.n	800382a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003826:	2b02      	cmp	r3, #2
 8003828:	d130      	bne.n	800388c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	2203      	movs	r2, #3
 8003836:	fa02 f303 	lsl.w	r3, r2, r3
 800383a:	43db      	mvns	r3, r3
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	4013      	ands	r3, r2
 8003840:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	68da      	ldr	r2, [r3, #12]
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	4313      	orrs	r3, r2
 8003852:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003860:	2201      	movs	r2, #1
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	43db      	mvns	r3, r3
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	4013      	ands	r3, r2
 800386e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	091b      	lsrs	r3, r3, #4
 8003876:	f003 0201 	and.w	r2, r3, #1
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	4313      	orrs	r3, r2
 8003884:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f003 0303 	and.w	r3, r3, #3
 8003894:	2b03      	cmp	r3, #3
 8003896:	d017      	beq.n	80038c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	2203      	movs	r2, #3
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	43db      	mvns	r3, r3
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	4013      	ands	r3, r2
 80038ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	fa02 f303 	lsl.w	r3, r2, r3
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	4313      	orrs	r3, r2
 80038c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f003 0303 	and.w	r3, r3, #3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d123      	bne.n	800391c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	08da      	lsrs	r2, r3, #3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3208      	adds	r2, #8
 80038dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	220f      	movs	r2, #15
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	43db      	mvns	r3, r3
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	4013      	ands	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	691a      	ldr	r2, [r3, #16]
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	f003 0307 	and.w	r3, r3, #7
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	4313      	orrs	r3, r2
 800390c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	08da      	lsrs	r2, r3, #3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	3208      	adds	r2, #8
 8003916:	69b9      	ldr	r1, [r7, #24]
 8003918:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	2203      	movs	r2, #3
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	43db      	mvns	r3, r3
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	4013      	ands	r3, r2
 8003932:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f003 0203 	and.w	r2, r3, #3
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	4313      	orrs	r3, r2
 8003948:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003958:	2b00      	cmp	r3, #0
 800395a:	f000 80ae 	beq.w	8003aba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800395e:	2300      	movs	r3, #0
 8003960:	60fb      	str	r3, [r7, #12]
 8003962:	4b5d      	ldr	r3, [pc, #372]	@ (8003ad8 <HAL_GPIO_Init+0x300>)
 8003964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003966:	4a5c      	ldr	r2, [pc, #368]	@ (8003ad8 <HAL_GPIO_Init+0x300>)
 8003968:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800396c:	6453      	str	r3, [r2, #68]	@ 0x44
 800396e:	4b5a      	ldr	r3, [pc, #360]	@ (8003ad8 <HAL_GPIO_Init+0x300>)
 8003970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003972:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003976:	60fb      	str	r3, [r7, #12]
 8003978:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800397a:	4a58      	ldr	r2, [pc, #352]	@ (8003adc <HAL_GPIO_Init+0x304>)
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	089b      	lsrs	r3, r3, #2
 8003980:	3302      	adds	r3, #2
 8003982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003986:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	f003 0303 	and.w	r3, r3, #3
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	220f      	movs	r2, #15
 8003992:	fa02 f303 	lsl.w	r3, r2, r3
 8003996:	43db      	mvns	r3, r3
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	4013      	ands	r3, r2
 800399c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a4f      	ldr	r2, [pc, #316]	@ (8003ae0 <HAL_GPIO_Init+0x308>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d025      	beq.n	80039f2 <HAL_GPIO_Init+0x21a>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a4e      	ldr	r2, [pc, #312]	@ (8003ae4 <HAL_GPIO_Init+0x30c>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d01f      	beq.n	80039ee <HAL_GPIO_Init+0x216>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a4d      	ldr	r2, [pc, #308]	@ (8003ae8 <HAL_GPIO_Init+0x310>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d019      	beq.n	80039ea <HAL_GPIO_Init+0x212>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a4c      	ldr	r2, [pc, #304]	@ (8003aec <HAL_GPIO_Init+0x314>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d013      	beq.n	80039e6 <HAL_GPIO_Init+0x20e>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a4b      	ldr	r2, [pc, #300]	@ (8003af0 <HAL_GPIO_Init+0x318>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d00d      	beq.n	80039e2 <HAL_GPIO_Init+0x20a>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a4a      	ldr	r2, [pc, #296]	@ (8003af4 <HAL_GPIO_Init+0x31c>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d007      	beq.n	80039de <HAL_GPIO_Init+0x206>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a49      	ldr	r2, [pc, #292]	@ (8003af8 <HAL_GPIO_Init+0x320>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d101      	bne.n	80039da <HAL_GPIO_Init+0x202>
 80039d6:	2306      	movs	r3, #6
 80039d8:	e00c      	b.n	80039f4 <HAL_GPIO_Init+0x21c>
 80039da:	2307      	movs	r3, #7
 80039dc:	e00a      	b.n	80039f4 <HAL_GPIO_Init+0x21c>
 80039de:	2305      	movs	r3, #5
 80039e0:	e008      	b.n	80039f4 <HAL_GPIO_Init+0x21c>
 80039e2:	2304      	movs	r3, #4
 80039e4:	e006      	b.n	80039f4 <HAL_GPIO_Init+0x21c>
 80039e6:	2303      	movs	r3, #3
 80039e8:	e004      	b.n	80039f4 <HAL_GPIO_Init+0x21c>
 80039ea:	2302      	movs	r3, #2
 80039ec:	e002      	b.n	80039f4 <HAL_GPIO_Init+0x21c>
 80039ee:	2301      	movs	r3, #1
 80039f0:	e000      	b.n	80039f4 <HAL_GPIO_Init+0x21c>
 80039f2:	2300      	movs	r3, #0
 80039f4:	69fa      	ldr	r2, [r7, #28]
 80039f6:	f002 0203 	and.w	r2, r2, #3
 80039fa:	0092      	lsls	r2, r2, #2
 80039fc:	4093      	lsls	r3, r2
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a04:	4935      	ldr	r1, [pc, #212]	@ (8003adc <HAL_GPIO_Init+0x304>)
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	089b      	lsrs	r3, r3, #2
 8003a0a:	3302      	adds	r3, #2
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a12:	4b3a      	ldr	r3, [pc, #232]	@ (8003afc <HAL_GPIO_Init+0x324>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	43db      	mvns	r3, r3
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a36:	4a31      	ldr	r2, [pc, #196]	@ (8003afc <HAL_GPIO_Init+0x324>)
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a3c:	4b2f      	ldr	r3, [pc, #188]	@ (8003afc <HAL_GPIO_Init+0x324>)
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	43db      	mvns	r3, r3
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d003      	beq.n	8003a60 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a60:	4a26      	ldr	r2, [pc, #152]	@ (8003afc <HAL_GPIO_Init+0x324>)
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a66:	4b25      	ldr	r3, [pc, #148]	@ (8003afc <HAL_GPIO_Init+0x324>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	43db      	mvns	r3, r3
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	4013      	ands	r3, r2
 8003a74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d003      	beq.n	8003a8a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a8a:	4a1c      	ldr	r2, [pc, #112]	@ (8003afc <HAL_GPIO_Init+0x324>)
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a90:	4b1a      	ldr	r3, [pc, #104]	@ (8003afc <HAL_GPIO_Init+0x324>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	43db      	mvns	r3, r3
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d003      	beq.n	8003ab4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ab4:	4a11      	ldr	r2, [pc, #68]	@ (8003afc <HAL_GPIO_Init+0x324>)
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	3301      	adds	r3, #1
 8003abe:	61fb      	str	r3, [r7, #28]
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	2b0f      	cmp	r3, #15
 8003ac4:	f67f ae96 	bls.w	80037f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ac8:	bf00      	nop
 8003aca:	bf00      	nop
 8003acc:	3724      	adds	r7, #36	@ 0x24
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	40013800 	.word	0x40013800
 8003ae0:	40020000 	.word	0x40020000
 8003ae4:	40020400 	.word	0x40020400
 8003ae8:	40020800 	.word	0x40020800
 8003aec:	40020c00 	.word	0x40020c00
 8003af0:	40021000 	.word	0x40021000
 8003af4:	40021400 	.word	0x40021400
 8003af8:	40021800 	.word	0x40021800
 8003afc:	40013c00 	.word	0x40013c00

08003b00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	460b      	mov	r3, r1
 8003b0a:	807b      	strh	r3, [r7, #2]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b10:	787b      	ldrb	r3, [r7, #1]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b16:	887a      	ldrh	r2, [r7, #2]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b1c:	e003      	b.n	8003b26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b1e:	887b      	ldrh	r3, [r7, #2]
 8003b20:	041a      	lsls	r2, r3, #16
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	619a      	str	r2, [r3, #24]
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
	...

08003b34 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b3e:	2300      	movs	r3, #0
 8003b40:	603b      	str	r3, [r7, #0]
 8003b42:	4b20      	ldr	r3, [pc, #128]	@ (8003bc4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b46:	4a1f      	ldr	r2, [pc, #124]	@ (8003bc4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003b48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b4e:	4b1d      	ldr	r3, [pc, #116]	@ (8003bc4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b56:	603b      	str	r3, [r7, #0]
 8003b58:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003b5a:	4b1b      	ldr	r3, [pc, #108]	@ (8003bc8 <HAL_PWREx_EnableOverDrive+0x94>)
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b60:	f7fe fd4a 	bl	80025f8 <HAL_GetTick>
 8003b64:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b66:	e009      	b.n	8003b7c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b68:	f7fe fd46 	bl	80025f8 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003b76:	d901      	bls.n	8003b7c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e01f      	b.n	8003bbc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b7c:	4b13      	ldr	r3, [pc, #76]	@ (8003bcc <HAL_PWREx_EnableOverDrive+0x98>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b88:	d1ee      	bne.n	8003b68 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003b8a:	4b11      	ldr	r3, [pc, #68]	@ (8003bd0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b90:	f7fe fd32 	bl	80025f8 <HAL_GetTick>
 8003b94:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b96:	e009      	b.n	8003bac <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b98:	f7fe fd2e 	bl	80025f8 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003ba6:	d901      	bls.n	8003bac <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e007      	b.n	8003bbc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003bac:	4b07      	ldr	r3, [pc, #28]	@ (8003bcc <HAL_PWREx_EnableOverDrive+0x98>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003bb8:	d1ee      	bne.n	8003b98 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	420e0040 	.word	0x420e0040
 8003bcc:	40007000 	.word	0x40007000
 8003bd0:	420e0044 	.word	0x420e0044

08003bd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d101      	bne.n	8003be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e0cc      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003be8:	4b68      	ldr	r3, [pc, #416]	@ (8003d8c <HAL_RCC_ClockConfig+0x1b8>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 030f 	and.w	r3, r3, #15
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d90c      	bls.n	8003c10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bf6:	4b65      	ldr	r3, [pc, #404]	@ (8003d8c <HAL_RCC_ClockConfig+0x1b8>)
 8003bf8:	683a      	ldr	r2, [r7, #0]
 8003bfa:	b2d2      	uxtb	r2, r2
 8003bfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bfe:	4b63      	ldr	r3, [pc, #396]	@ (8003d8c <HAL_RCC_ClockConfig+0x1b8>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d001      	beq.n	8003c10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e0b8      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d020      	beq.n	8003c5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d005      	beq.n	8003c34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c28:	4b59      	ldr	r3, [pc, #356]	@ (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	4a58      	ldr	r2, [pc, #352]	@ (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003c32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0308 	and.w	r3, r3, #8
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d005      	beq.n	8003c4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c40:	4b53      	ldr	r3, [pc, #332]	@ (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	4a52      	ldr	r2, [pc, #328]	@ (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c46:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003c4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c4c:	4b50      	ldr	r3, [pc, #320]	@ (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	494d      	ldr	r1, [pc, #308]	@ (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d044      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d107      	bne.n	8003c82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c72:	4b47      	ldr	r3, [pc, #284]	@ (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d119      	bne.n	8003cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e07f      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d003      	beq.n	8003c92 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c8e:	2b03      	cmp	r3, #3
 8003c90:	d107      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c92:	4b3f      	ldr	r3, [pc, #252]	@ (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d109      	bne.n	8003cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e06f      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca2:	4b3b      	ldr	r3, [pc, #236]	@ (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e067      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cb2:	4b37      	ldr	r3, [pc, #220]	@ (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f023 0203 	bic.w	r2, r3, #3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	4934      	ldr	r1, [pc, #208]	@ (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cc4:	f7fe fc98 	bl	80025f8 <HAL_GetTick>
 8003cc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cca:	e00a      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ccc:	f7fe fc94 	bl	80025f8 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e04f      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce2:	4b2b      	ldr	r3, [pc, #172]	@ (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 020c 	and.w	r2, r3, #12
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d1eb      	bne.n	8003ccc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cf4:	4b25      	ldr	r3, [pc, #148]	@ (8003d8c <HAL_RCC_ClockConfig+0x1b8>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 030f 	and.w	r3, r3, #15
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d20c      	bcs.n	8003d1c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d02:	4b22      	ldr	r3, [pc, #136]	@ (8003d8c <HAL_RCC_ClockConfig+0x1b8>)
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	b2d2      	uxtb	r2, r2
 8003d08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d0a:	4b20      	ldr	r3, [pc, #128]	@ (8003d8c <HAL_RCC_ClockConfig+0x1b8>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 030f 	and.w	r3, r3, #15
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d001      	beq.n	8003d1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e032      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0304 	and.w	r3, r3, #4
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d008      	beq.n	8003d3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d28:	4b19      	ldr	r3, [pc, #100]	@ (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	4916      	ldr	r1, [pc, #88]	@ (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0308 	and.w	r3, r3, #8
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d009      	beq.n	8003d5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d46:	4b12      	ldr	r3, [pc, #72]	@ (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	490e      	ldr	r1, [pc, #56]	@ (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d5a:	f000 f887 	bl	8003e6c <HAL_RCC_GetSysClockFreq>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	4b0b      	ldr	r3, [pc, #44]	@ (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	091b      	lsrs	r3, r3, #4
 8003d66:	f003 030f 	and.w	r3, r3, #15
 8003d6a:	490a      	ldr	r1, [pc, #40]	@ (8003d94 <HAL_RCC_ClockConfig+0x1c0>)
 8003d6c:	5ccb      	ldrb	r3, [r1, r3]
 8003d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d72:	4a09      	ldr	r2, [pc, #36]	@ (8003d98 <HAL_RCC_ClockConfig+0x1c4>)
 8003d74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003d76:	4b09      	ldr	r3, [pc, #36]	@ (8003d9c <HAL_RCC_ClockConfig+0x1c8>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7fe f8bc 	bl	8001ef8 <HAL_InitTick>

  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	40023c00 	.word	0x40023c00
 8003d90:	40023800 	.word	0x40023800
 8003d94:	0800d348 	.word	0x0800d348
 8003d98:	2000000c 	.word	0x2000000c
 8003d9c:	20000010 	.word	0x20000010

08003da0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003da0:	b480      	push	{r7}
 8003da2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003da4:	4b03      	ldr	r3, [pc, #12]	@ (8003db4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003da6:	681b      	ldr	r3, [r3, #0]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	2000000c 	.word	0x2000000c

08003db8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003dbc:	f7ff fff0 	bl	8003da0 <HAL_RCC_GetHCLKFreq>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	4b05      	ldr	r3, [pc, #20]	@ (8003dd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	0a9b      	lsrs	r3, r3, #10
 8003dc8:	f003 0307 	and.w	r3, r3, #7
 8003dcc:	4903      	ldr	r1, [pc, #12]	@ (8003ddc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dce:	5ccb      	ldrb	r3, [r1, r3]
 8003dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	40023800 	.word	0x40023800
 8003ddc:	0800d358 	.word	0x0800d358

08003de0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003de4:	f7ff ffdc 	bl	8003da0 <HAL_RCC_GetHCLKFreq>
 8003de8:	4602      	mov	r2, r0
 8003dea:	4b05      	ldr	r3, [pc, #20]	@ (8003e00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	0b5b      	lsrs	r3, r3, #13
 8003df0:	f003 0307 	and.w	r3, r3, #7
 8003df4:	4903      	ldr	r1, [pc, #12]	@ (8003e04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003df6:	5ccb      	ldrb	r3, [r1, r3]
 8003df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	40023800 	.word	0x40023800
 8003e04:	0800d358 	.word	0x0800d358

08003e08 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	220f      	movs	r2, #15
 8003e16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e18:	4b12      	ldr	r3, [pc, #72]	@ (8003e64 <HAL_RCC_GetClockConfig+0x5c>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f003 0203 	and.w	r2, r3, #3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e24:	4b0f      	ldr	r3, [pc, #60]	@ (8003e64 <HAL_RCC_GetClockConfig+0x5c>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e30:	4b0c      	ldr	r3, [pc, #48]	@ (8003e64 <HAL_RCC_GetClockConfig+0x5c>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003e3c:	4b09      	ldr	r3, [pc, #36]	@ (8003e64 <HAL_RCC_GetClockConfig+0x5c>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	08db      	lsrs	r3, r3, #3
 8003e42:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e4a:	4b07      	ldr	r3, [pc, #28]	@ (8003e68 <HAL_RCC_GetClockConfig+0x60>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 020f 	and.w	r2, r3, #15
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	601a      	str	r2, [r3, #0]
}
 8003e56:	bf00      	nop
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	40023800 	.word	0x40023800
 8003e68:	40023c00 	.word	0x40023c00

08003e6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e70:	b0ae      	sub	sp, #184	@ 0xb8
 8003e72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e74:	2300      	movs	r3, #0
 8003e76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003e80:	2300      	movs	r3, #0
 8003e82:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003e86:	2300      	movs	r3, #0
 8003e88:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e92:	4bcb      	ldr	r3, [pc, #812]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f003 030c 	and.w	r3, r3, #12
 8003e9a:	2b0c      	cmp	r3, #12
 8003e9c:	f200 8206 	bhi.w	80042ac <HAL_RCC_GetSysClockFreq+0x440>
 8003ea0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ea8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea6:	bf00      	nop
 8003ea8:	08003edd 	.word	0x08003edd
 8003eac:	080042ad 	.word	0x080042ad
 8003eb0:	080042ad 	.word	0x080042ad
 8003eb4:	080042ad 	.word	0x080042ad
 8003eb8:	08003ee5 	.word	0x08003ee5
 8003ebc:	080042ad 	.word	0x080042ad
 8003ec0:	080042ad 	.word	0x080042ad
 8003ec4:	080042ad 	.word	0x080042ad
 8003ec8:	08003eed 	.word	0x08003eed
 8003ecc:	080042ad 	.word	0x080042ad
 8003ed0:	080042ad 	.word	0x080042ad
 8003ed4:	080042ad 	.word	0x080042ad
 8003ed8:	080040dd 	.word	0x080040dd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003edc:	4bb9      	ldr	r3, [pc, #740]	@ (80041c4 <HAL_RCC_GetSysClockFreq+0x358>)
 8003ede:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003ee2:	e1e7      	b.n	80042b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ee4:	4bb8      	ldr	r3, [pc, #736]	@ (80041c8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003ee6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003eea:	e1e3      	b.n	80042b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003eec:	4bb4      	ldr	r3, [pc, #720]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ef4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ef8:	4bb1      	ldr	r3, [pc, #708]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d071      	beq.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f04:	4bae      	ldr	r3, [pc, #696]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	099b      	lsrs	r3, r3, #6
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f10:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003f14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f1c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003f20:	2300      	movs	r3, #0
 8003f22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003f26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003f2a:	4622      	mov	r2, r4
 8003f2c:	462b      	mov	r3, r5
 8003f2e:	f04f 0000 	mov.w	r0, #0
 8003f32:	f04f 0100 	mov.w	r1, #0
 8003f36:	0159      	lsls	r1, r3, #5
 8003f38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f3c:	0150      	lsls	r0, r2, #5
 8003f3e:	4602      	mov	r2, r0
 8003f40:	460b      	mov	r3, r1
 8003f42:	4621      	mov	r1, r4
 8003f44:	1a51      	subs	r1, r2, r1
 8003f46:	6439      	str	r1, [r7, #64]	@ 0x40
 8003f48:	4629      	mov	r1, r5
 8003f4a:	eb63 0301 	sbc.w	r3, r3, r1
 8003f4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f50:	f04f 0200 	mov.w	r2, #0
 8003f54:	f04f 0300 	mov.w	r3, #0
 8003f58:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003f5c:	4649      	mov	r1, r9
 8003f5e:	018b      	lsls	r3, r1, #6
 8003f60:	4641      	mov	r1, r8
 8003f62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f66:	4641      	mov	r1, r8
 8003f68:	018a      	lsls	r2, r1, #6
 8003f6a:	4641      	mov	r1, r8
 8003f6c:	1a51      	subs	r1, r2, r1
 8003f6e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003f70:	4649      	mov	r1, r9
 8003f72:	eb63 0301 	sbc.w	r3, r3, r1
 8003f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f78:	f04f 0200 	mov.w	r2, #0
 8003f7c:	f04f 0300 	mov.w	r3, #0
 8003f80:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003f84:	4649      	mov	r1, r9
 8003f86:	00cb      	lsls	r3, r1, #3
 8003f88:	4641      	mov	r1, r8
 8003f8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f8e:	4641      	mov	r1, r8
 8003f90:	00ca      	lsls	r2, r1, #3
 8003f92:	4610      	mov	r0, r2
 8003f94:	4619      	mov	r1, r3
 8003f96:	4603      	mov	r3, r0
 8003f98:	4622      	mov	r2, r4
 8003f9a:	189b      	adds	r3, r3, r2
 8003f9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f9e:	462b      	mov	r3, r5
 8003fa0:	460a      	mov	r2, r1
 8003fa2:	eb42 0303 	adc.w	r3, r2, r3
 8003fa6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fa8:	f04f 0200 	mov.w	r2, #0
 8003fac:	f04f 0300 	mov.w	r3, #0
 8003fb0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003fb4:	4629      	mov	r1, r5
 8003fb6:	024b      	lsls	r3, r1, #9
 8003fb8:	4621      	mov	r1, r4
 8003fba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fbe:	4621      	mov	r1, r4
 8003fc0:	024a      	lsls	r2, r1, #9
 8003fc2:	4610      	mov	r0, r2
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003fd0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003fd4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003fd8:	f7fc fe76 	bl	8000cc8 <__aeabi_uldivmod>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	460b      	mov	r3, r1
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fe6:	e067      	b.n	80040b8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fe8:	4b75      	ldr	r3, [pc, #468]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	099b      	lsrs	r3, r3, #6
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ff4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003ff8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004000:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004002:	2300      	movs	r3, #0
 8004004:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004006:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800400a:	4622      	mov	r2, r4
 800400c:	462b      	mov	r3, r5
 800400e:	f04f 0000 	mov.w	r0, #0
 8004012:	f04f 0100 	mov.w	r1, #0
 8004016:	0159      	lsls	r1, r3, #5
 8004018:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800401c:	0150      	lsls	r0, r2, #5
 800401e:	4602      	mov	r2, r0
 8004020:	460b      	mov	r3, r1
 8004022:	4621      	mov	r1, r4
 8004024:	1a51      	subs	r1, r2, r1
 8004026:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004028:	4629      	mov	r1, r5
 800402a:	eb63 0301 	sbc.w	r3, r3, r1
 800402e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004030:	f04f 0200 	mov.w	r2, #0
 8004034:	f04f 0300 	mov.w	r3, #0
 8004038:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800403c:	4649      	mov	r1, r9
 800403e:	018b      	lsls	r3, r1, #6
 8004040:	4641      	mov	r1, r8
 8004042:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004046:	4641      	mov	r1, r8
 8004048:	018a      	lsls	r2, r1, #6
 800404a:	4641      	mov	r1, r8
 800404c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004050:	4649      	mov	r1, r9
 8004052:	eb63 0b01 	sbc.w	fp, r3, r1
 8004056:	f04f 0200 	mov.w	r2, #0
 800405a:	f04f 0300 	mov.w	r3, #0
 800405e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004062:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004066:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800406a:	4692      	mov	sl, r2
 800406c:	469b      	mov	fp, r3
 800406e:	4623      	mov	r3, r4
 8004070:	eb1a 0303 	adds.w	r3, sl, r3
 8004074:	623b      	str	r3, [r7, #32]
 8004076:	462b      	mov	r3, r5
 8004078:	eb4b 0303 	adc.w	r3, fp, r3
 800407c:	627b      	str	r3, [r7, #36]	@ 0x24
 800407e:	f04f 0200 	mov.w	r2, #0
 8004082:	f04f 0300 	mov.w	r3, #0
 8004086:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800408a:	4629      	mov	r1, r5
 800408c:	028b      	lsls	r3, r1, #10
 800408e:	4621      	mov	r1, r4
 8004090:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004094:	4621      	mov	r1, r4
 8004096:	028a      	lsls	r2, r1, #10
 8004098:	4610      	mov	r0, r2
 800409a:	4619      	mov	r1, r3
 800409c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80040a0:	2200      	movs	r2, #0
 80040a2:	673b      	str	r3, [r7, #112]	@ 0x70
 80040a4:	677a      	str	r2, [r7, #116]	@ 0x74
 80040a6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80040aa:	f7fc fe0d 	bl	8000cc8 <__aeabi_uldivmod>
 80040ae:	4602      	mov	r2, r0
 80040b0:	460b      	mov	r3, r1
 80040b2:	4613      	mov	r3, r2
 80040b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80040b8:	4b41      	ldr	r3, [pc, #260]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	0c1b      	lsrs	r3, r3, #16
 80040be:	f003 0303 	and.w	r3, r3, #3
 80040c2:	3301      	adds	r3, #1
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80040ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80040ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80040d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80040da:	e0eb      	b.n	80042b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040dc:	4b38      	ldr	r3, [pc, #224]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040e8:	4b35      	ldr	r3, [pc, #212]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d06b      	beq.n	80041cc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040f4:	4b32      	ldr	r3, [pc, #200]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	099b      	lsrs	r3, r3, #6
 80040fa:	2200      	movs	r2, #0
 80040fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004100:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004106:	663b      	str	r3, [r7, #96]	@ 0x60
 8004108:	2300      	movs	r3, #0
 800410a:	667b      	str	r3, [r7, #100]	@ 0x64
 800410c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004110:	4622      	mov	r2, r4
 8004112:	462b      	mov	r3, r5
 8004114:	f04f 0000 	mov.w	r0, #0
 8004118:	f04f 0100 	mov.w	r1, #0
 800411c:	0159      	lsls	r1, r3, #5
 800411e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004122:	0150      	lsls	r0, r2, #5
 8004124:	4602      	mov	r2, r0
 8004126:	460b      	mov	r3, r1
 8004128:	4621      	mov	r1, r4
 800412a:	1a51      	subs	r1, r2, r1
 800412c:	61b9      	str	r1, [r7, #24]
 800412e:	4629      	mov	r1, r5
 8004130:	eb63 0301 	sbc.w	r3, r3, r1
 8004134:	61fb      	str	r3, [r7, #28]
 8004136:	f04f 0200 	mov.w	r2, #0
 800413a:	f04f 0300 	mov.w	r3, #0
 800413e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004142:	4659      	mov	r1, fp
 8004144:	018b      	lsls	r3, r1, #6
 8004146:	4651      	mov	r1, sl
 8004148:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800414c:	4651      	mov	r1, sl
 800414e:	018a      	lsls	r2, r1, #6
 8004150:	4651      	mov	r1, sl
 8004152:	ebb2 0801 	subs.w	r8, r2, r1
 8004156:	4659      	mov	r1, fp
 8004158:	eb63 0901 	sbc.w	r9, r3, r1
 800415c:	f04f 0200 	mov.w	r2, #0
 8004160:	f04f 0300 	mov.w	r3, #0
 8004164:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004168:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800416c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004170:	4690      	mov	r8, r2
 8004172:	4699      	mov	r9, r3
 8004174:	4623      	mov	r3, r4
 8004176:	eb18 0303 	adds.w	r3, r8, r3
 800417a:	613b      	str	r3, [r7, #16]
 800417c:	462b      	mov	r3, r5
 800417e:	eb49 0303 	adc.w	r3, r9, r3
 8004182:	617b      	str	r3, [r7, #20]
 8004184:	f04f 0200 	mov.w	r2, #0
 8004188:	f04f 0300 	mov.w	r3, #0
 800418c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004190:	4629      	mov	r1, r5
 8004192:	024b      	lsls	r3, r1, #9
 8004194:	4621      	mov	r1, r4
 8004196:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800419a:	4621      	mov	r1, r4
 800419c:	024a      	lsls	r2, r1, #9
 800419e:	4610      	mov	r0, r2
 80041a0:	4619      	mov	r1, r3
 80041a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80041a6:	2200      	movs	r2, #0
 80041a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80041aa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80041ac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80041b0:	f7fc fd8a 	bl	8000cc8 <__aeabi_uldivmod>
 80041b4:	4602      	mov	r2, r0
 80041b6:	460b      	mov	r3, r1
 80041b8:	4613      	mov	r3, r2
 80041ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041be:	e065      	b.n	800428c <HAL_RCC_GetSysClockFreq+0x420>
 80041c0:	40023800 	.word	0x40023800
 80041c4:	00f42400 	.word	0x00f42400
 80041c8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041cc:	4b3d      	ldr	r3, [pc, #244]	@ (80042c4 <HAL_RCC_GetSysClockFreq+0x458>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	099b      	lsrs	r3, r3, #6
 80041d2:	2200      	movs	r2, #0
 80041d4:	4618      	mov	r0, r3
 80041d6:	4611      	mov	r1, r2
 80041d8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80041de:	2300      	movs	r3, #0
 80041e0:	657b      	str	r3, [r7, #84]	@ 0x54
 80041e2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80041e6:	4642      	mov	r2, r8
 80041e8:	464b      	mov	r3, r9
 80041ea:	f04f 0000 	mov.w	r0, #0
 80041ee:	f04f 0100 	mov.w	r1, #0
 80041f2:	0159      	lsls	r1, r3, #5
 80041f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041f8:	0150      	lsls	r0, r2, #5
 80041fa:	4602      	mov	r2, r0
 80041fc:	460b      	mov	r3, r1
 80041fe:	4641      	mov	r1, r8
 8004200:	1a51      	subs	r1, r2, r1
 8004202:	60b9      	str	r1, [r7, #8]
 8004204:	4649      	mov	r1, r9
 8004206:	eb63 0301 	sbc.w	r3, r3, r1
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	f04f 0200 	mov.w	r2, #0
 8004210:	f04f 0300 	mov.w	r3, #0
 8004214:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004218:	4659      	mov	r1, fp
 800421a:	018b      	lsls	r3, r1, #6
 800421c:	4651      	mov	r1, sl
 800421e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004222:	4651      	mov	r1, sl
 8004224:	018a      	lsls	r2, r1, #6
 8004226:	4651      	mov	r1, sl
 8004228:	1a54      	subs	r4, r2, r1
 800422a:	4659      	mov	r1, fp
 800422c:	eb63 0501 	sbc.w	r5, r3, r1
 8004230:	f04f 0200 	mov.w	r2, #0
 8004234:	f04f 0300 	mov.w	r3, #0
 8004238:	00eb      	lsls	r3, r5, #3
 800423a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800423e:	00e2      	lsls	r2, r4, #3
 8004240:	4614      	mov	r4, r2
 8004242:	461d      	mov	r5, r3
 8004244:	4643      	mov	r3, r8
 8004246:	18e3      	adds	r3, r4, r3
 8004248:	603b      	str	r3, [r7, #0]
 800424a:	464b      	mov	r3, r9
 800424c:	eb45 0303 	adc.w	r3, r5, r3
 8004250:	607b      	str	r3, [r7, #4]
 8004252:	f04f 0200 	mov.w	r2, #0
 8004256:	f04f 0300 	mov.w	r3, #0
 800425a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800425e:	4629      	mov	r1, r5
 8004260:	028b      	lsls	r3, r1, #10
 8004262:	4621      	mov	r1, r4
 8004264:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004268:	4621      	mov	r1, r4
 800426a:	028a      	lsls	r2, r1, #10
 800426c:	4610      	mov	r0, r2
 800426e:	4619      	mov	r1, r3
 8004270:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004274:	2200      	movs	r2, #0
 8004276:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004278:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800427a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800427e:	f7fc fd23 	bl	8000cc8 <__aeabi_uldivmod>
 8004282:	4602      	mov	r2, r0
 8004284:	460b      	mov	r3, r1
 8004286:	4613      	mov	r3, r2
 8004288:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800428c:	4b0d      	ldr	r3, [pc, #52]	@ (80042c4 <HAL_RCC_GetSysClockFreq+0x458>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	0f1b      	lsrs	r3, r3, #28
 8004292:	f003 0307 	and.w	r3, r3, #7
 8004296:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800429a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800429e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80042a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80042aa:	e003      	b.n	80042b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042ac:	4b06      	ldr	r3, [pc, #24]	@ (80042c8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80042ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80042b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	37b8      	adds	r7, #184	@ 0xb8
 80042bc:	46bd      	mov	sp, r7
 80042be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042c2:	bf00      	nop
 80042c4:	40023800 	.word	0x40023800
 80042c8:	00f42400 	.word	0x00f42400

080042cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e28d      	b.n	80047fa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f000 8083 	beq.w	80043f2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80042ec:	4b94      	ldr	r3, [pc, #592]	@ (8004540 <HAL_RCC_OscConfig+0x274>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f003 030c 	and.w	r3, r3, #12
 80042f4:	2b04      	cmp	r3, #4
 80042f6:	d019      	beq.n	800432c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80042f8:	4b91      	ldr	r3, [pc, #580]	@ (8004540 <HAL_RCC_OscConfig+0x274>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f003 030c 	and.w	r3, r3, #12
        || \
 8004300:	2b08      	cmp	r3, #8
 8004302:	d106      	bne.n	8004312 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004304:	4b8e      	ldr	r3, [pc, #568]	@ (8004540 <HAL_RCC_OscConfig+0x274>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800430c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004310:	d00c      	beq.n	800432c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004312:	4b8b      	ldr	r3, [pc, #556]	@ (8004540 <HAL_RCC_OscConfig+0x274>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800431a:	2b0c      	cmp	r3, #12
 800431c:	d112      	bne.n	8004344 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800431e:	4b88      	ldr	r3, [pc, #544]	@ (8004540 <HAL_RCC_OscConfig+0x274>)
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004326:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800432a:	d10b      	bne.n	8004344 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800432c:	4b84      	ldr	r3, [pc, #528]	@ (8004540 <HAL_RCC_OscConfig+0x274>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d05b      	beq.n	80043f0 <HAL_RCC_OscConfig+0x124>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d157      	bne.n	80043f0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e25a      	b.n	80047fa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800434c:	d106      	bne.n	800435c <HAL_RCC_OscConfig+0x90>
 800434e:	4b7c      	ldr	r3, [pc, #496]	@ (8004540 <HAL_RCC_OscConfig+0x274>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a7b      	ldr	r2, [pc, #492]	@ (8004540 <HAL_RCC_OscConfig+0x274>)
 8004354:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004358:	6013      	str	r3, [r2, #0]
 800435a:	e01d      	b.n	8004398 <HAL_RCC_OscConfig+0xcc>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004364:	d10c      	bne.n	8004380 <HAL_RCC_OscConfig+0xb4>
 8004366:	4b76      	ldr	r3, [pc, #472]	@ (8004540 <HAL_RCC_OscConfig+0x274>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a75      	ldr	r2, [pc, #468]	@ (8004540 <HAL_RCC_OscConfig+0x274>)
 800436c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004370:	6013      	str	r3, [r2, #0]
 8004372:	4b73      	ldr	r3, [pc, #460]	@ (8004540 <HAL_RCC_OscConfig+0x274>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a72      	ldr	r2, [pc, #456]	@ (8004540 <HAL_RCC_OscConfig+0x274>)
 8004378:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800437c:	6013      	str	r3, [r2, #0]
 800437e:	e00b      	b.n	8004398 <HAL_RCC_OscConfig+0xcc>
 8004380:	4b6f      	ldr	r3, [pc, #444]	@ (8004540 <HAL_RCC_OscConfig+0x274>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a6e      	ldr	r2, [pc, #440]	@ (8004540 <HAL_RCC_OscConfig+0x274>)
 8004386:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800438a:	6013      	str	r3, [r2, #0]
 800438c:	4b6c      	ldr	r3, [pc, #432]	@ (8004540 <HAL_RCC_OscConfig+0x274>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a6b      	ldr	r2, [pc, #428]	@ (8004540 <HAL_RCC_OscConfig+0x274>)
 8004392:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004396:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d013      	beq.n	80043c8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a0:	f7fe f92a 	bl	80025f8 <HAL_GetTick>
 80043a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043a6:	e008      	b.n	80043ba <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043a8:	f7fe f926 	bl	80025f8 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b64      	cmp	r3, #100	@ 0x64
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e21f      	b.n	80047fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ba:	4b61      	ldr	r3, [pc, #388]	@ (8004540 <HAL_RCC_OscConfig+0x274>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0f0      	beq.n	80043a8 <HAL_RCC_OscConfig+0xdc>
 80043c6:	e014      	b.n	80043f2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c8:	f7fe f916 	bl	80025f8 <HAL_GetTick>
 80043cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ce:	e008      	b.n	80043e2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043d0:	f7fe f912 	bl	80025f8 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b64      	cmp	r3, #100	@ 0x64
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e20b      	b.n	80047fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043e2:	4b57      	ldr	r3, [pc, #348]	@ (8004540 <HAL_RCC_OscConfig+0x274>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1f0      	bne.n	80043d0 <HAL_RCC_OscConfig+0x104>
 80043ee:	e000      	b.n	80043f2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d06f      	beq.n	80044de <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80043fe:	4b50      	ldr	r3, [pc, #320]	@ (8004540 <HAL_RCC_OscConfig+0x274>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f003 030c 	and.w	r3, r3, #12
 8004406:	2b00      	cmp	r3, #0
 8004408:	d017      	beq.n	800443a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800440a:	4b4d      	ldr	r3, [pc, #308]	@ (8004540 <HAL_RCC_OscConfig+0x274>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f003 030c 	and.w	r3, r3, #12
        || \
 8004412:	2b08      	cmp	r3, #8
 8004414:	d105      	bne.n	8004422 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004416:	4b4a      	ldr	r3, [pc, #296]	@ (8004540 <HAL_RCC_OscConfig+0x274>)
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00b      	beq.n	800443a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004422:	4b47      	ldr	r3, [pc, #284]	@ (8004540 <HAL_RCC_OscConfig+0x274>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800442a:	2b0c      	cmp	r3, #12
 800442c:	d11c      	bne.n	8004468 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800442e:	4b44      	ldr	r3, [pc, #272]	@ (8004540 <HAL_RCC_OscConfig+0x274>)
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d116      	bne.n	8004468 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800443a:	4b41      	ldr	r3, [pc, #260]	@ (8004540 <HAL_RCC_OscConfig+0x274>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d005      	beq.n	8004452 <HAL_RCC_OscConfig+0x186>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d001      	beq.n	8004452 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e1d3      	b.n	80047fa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004452:	4b3b      	ldr	r3, [pc, #236]	@ (8004540 <HAL_RCC_OscConfig+0x274>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	00db      	lsls	r3, r3, #3
 8004460:	4937      	ldr	r1, [pc, #220]	@ (8004540 <HAL_RCC_OscConfig+0x274>)
 8004462:	4313      	orrs	r3, r2
 8004464:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004466:	e03a      	b.n	80044de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d020      	beq.n	80044b2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004470:	4b34      	ldr	r3, [pc, #208]	@ (8004544 <HAL_RCC_OscConfig+0x278>)
 8004472:	2201      	movs	r2, #1
 8004474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004476:	f7fe f8bf 	bl	80025f8 <HAL_GetTick>
 800447a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800447c:	e008      	b.n	8004490 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800447e:	f7fe f8bb 	bl	80025f8 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b02      	cmp	r3, #2
 800448a:	d901      	bls.n	8004490 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e1b4      	b.n	80047fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004490:	4b2b      	ldr	r3, [pc, #172]	@ (8004540 <HAL_RCC_OscConfig+0x274>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d0f0      	beq.n	800447e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800449c:	4b28      	ldr	r3, [pc, #160]	@ (8004540 <HAL_RCC_OscConfig+0x274>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	00db      	lsls	r3, r3, #3
 80044aa:	4925      	ldr	r1, [pc, #148]	@ (8004540 <HAL_RCC_OscConfig+0x274>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	600b      	str	r3, [r1, #0]
 80044b0:	e015      	b.n	80044de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044b2:	4b24      	ldr	r3, [pc, #144]	@ (8004544 <HAL_RCC_OscConfig+0x278>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b8:	f7fe f89e 	bl	80025f8 <HAL_GetTick>
 80044bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044be:	e008      	b.n	80044d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044c0:	f7fe f89a 	bl	80025f8 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e193      	b.n	80047fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004540 <HAL_RCC_OscConfig+0x274>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1f0      	bne.n	80044c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0308 	and.w	r3, r3, #8
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d036      	beq.n	8004558 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d016      	beq.n	8004520 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044f2:	4b15      	ldr	r3, [pc, #84]	@ (8004548 <HAL_RCC_OscConfig+0x27c>)
 80044f4:	2201      	movs	r2, #1
 80044f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f8:	f7fe f87e 	bl	80025f8 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044fe:	e008      	b.n	8004512 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004500:	f7fe f87a 	bl	80025f8 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b02      	cmp	r3, #2
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e173      	b.n	80047fa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004512:	4b0b      	ldr	r3, [pc, #44]	@ (8004540 <HAL_RCC_OscConfig+0x274>)
 8004514:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d0f0      	beq.n	8004500 <HAL_RCC_OscConfig+0x234>
 800451e:	e01b      	b.n	8004558 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004520:	4b09      	ldr	r3, [pc, #36]	@ (8004548 <HAL_RCC_OscConfig+0x27c>)
 8004522:	2200      	movs	r2, #0
 8004524:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004526:	f7fe f867 	bl	80025f8 <HAL_GetTick>
 800452a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800452c:	e00e      	b.n	800454c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800452e:	f7fe f863 	bl	80025f8 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	2b02      	cmp	r3, #2
 800453a:	d907      	bls.n	800454c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e15c      	b.n	80047fa <HAL_RCC_OscConfig+0x52e>
 8004540:	40023800 	.word	0x40023800
 8004544:	42470000 	.word	0x42470000
 8004548:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800454c:	4b8a      	ldr	r3, [pc, #552]	@ (8004778 <HAL_RCC_OscConfig+0x4ac>)
 800454e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1ea      	bne.n	800452e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0304 	and.w	r3, r3, #4
 8004560:	2b00      	cmp	r3, #0
 8004562:	f000 8097 	beq.w	8004694 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004566:	2300      	movs	r3, #0
 8004568:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800456a:	4b83      	ldr	r3, [pc, #524]	@ (8004778 <HAL_RCC_OscConfig+0x4ac>)
 800456c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10f      	bne.n	8004596 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004576:	2300      	movs	r3, #0
 8004578:	60bb      	str	r3, [r7, #8]
 800457a:	4b7f      	ldr	r3, [pc, #508]	@ (8004778 <HAL_RCC_OscConfig+0x4ac>)
 800457c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457e:	4a7e      	ldr	r2, [pc, #504]	@ (8004778 <HAL_RCC_OscConfig+0x4ac>)
 8004580:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004584:	6413      	str	r3, [r2, #64]	@ 0x40
 8004586:	4b7c      	ldr	r3, [pc, #496]	@ (8004778 <HAL_RCC_OscConfig+0x4ac>)
 8004588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800458a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800458e:	60bb      	str	r3, [r7, #8]
 8004590:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004592:	2301      	movs	r3, #1
 8004594:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004596:	4b79      	ldr	r3, [pc, #484]	@ (800477c <HAL_RCC_OscConfig+0x4b0>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d118      	bne.n	80045d4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045a2:	4b76      	ldr	r3, [pc, #472]	@ (800477c <HAL_RCC_OscConfig+0x4b0>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a75      	ldr	r2, [pc, #468]	@ (800477c <HAL_RCC_OscConfig+0x4b0>)
 80045a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045ae:	f7fe f823 	bl	80025f8 <HAL_GetTick>
 80045b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045b4:	e008      	b.n	80045c8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045b6:	f7fe f81f 	bl	80025f8 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d901      	bls.n	80045c8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e118      	b.n	80047fa <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045c8:	4b6c      	ldr	r3, [pc, #432]	@ (800477c <HAL_RCC_OscConfig+0x4b0>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d0f0      	beq.n	80045b6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d106      	bne.n	80045ea <HAL_RCC_OscConfig+0x31e>
 80045dc:	4b66      	ldr	r3, [pc, #408]	@ (8004778 <HAL_RCC_OscConfig+0x4ac>)
 80045de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045e0:	4a65      	ldr	r2, [pc, #404]	@ (8004778 <HAL_RCC_OscConfig+0x4ac>)
 80045e2:	f043 0301 	orr.w	r3, r3, #1
 80045e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80045e8:	e01c      	b.n	8004624 <HAL_RCC_OscConfig+0x358>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	2b05      	cmp	r3, #5
 80045f0:	d10c      	bne.n	800460c <HAL_RCC_OscConfig+0x340>
 80045f2:	4b61      	ldr	r3, [pc, #388]	@ (8004778 <HAL_RCC_OscConfig+0x4ac>)
 80045f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045f6:	4a60      	ldr	r2, [pc, #384]	@ (8004778 <HAL_RCC_OscConfig+0x4ac>)
 80045f8:	f043 0304 	orr.w	r3, r3, #4
 80045fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80045fe:	4b5e      	ldr	r3, [pc, #376]	@ (8004778 <HAL_RCC_OscConfig+0x4ac>)
 8004600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004602:	4a5d      	ldr	r2, [pc, #372]	@ (8004778 <HAL_RCC_OscConfig+0x4ac>)
 8004604:	f043 0301 	orr.w	r3, r3, #1
 8004608:	6713      	str	r3, [r2, #112]	@ 0x70
 800460a:	e00b      	b.n	8004624 <HAL_RCC_OscConfig+0x358>
 800460c:	4b5a      	ldr	r3, [pc, #360]	@ (8004778 <HAL_RCC_OscConfig+0x4ac>)
 800460e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004610:	4a59      	ldr	r2, [pc, #356]	@ (8004778 <HAL_RCC_OscConfig+0x4ac>)
 8004612:	f023 0301 	bic.w	r3, r3, #1
 8004616:	6713      	str	r3, [r2, #112]	@ 0x70
 8004618:	4b57      	ldr	r3, [pc, #348]	@ (8004778 <HAL_RCC_OscConfig+0x4ac>)
 800461a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800461c:	4a56      	ldr	r2, [pc, #344]	@ (8004778 <HAL_RCC_OscConfig+0x4ac>)
 800461e:	f023 0304 	bic.w	r3, r3, #4
 8004622:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d015      	beq.n	8004658 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800462c:	f7fd ffe4 	bl	80025f8 <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004632:	e00a      	b.n	800464a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004634:	f7fd ffe0 	bl	80025f8 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004642:	4293      	cmp	r3, r2
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e0d7      	b.n	80047fa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800464a:	4b4b      	ldr	r3, [pc, #300]	@ (8004778 <HAL_RCC_OscConfig+0x4ac>)
 800464c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d0ee      	beq.n	8004634 <HAL_RCC_OscConfig+0x368>
 8004656:	e014      	b.n	8004682 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004658:	f7fd ffce 	bl	80025f8 <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800465e:	e00a      	b.n	8004676 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004660:	f7fd ffca 	bl	80025f8 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800466e:	4293      	cmp	r3, r2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e0c1      	b.n	80047fa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004676:	4b40      	ldr	r3, [pc, #256]	@ (8004778 <HAL_RCC_OscConfig+0x4ac>)
 8004678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1ee      	bne.n	8004660 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004682:	7dfb      	ldrb	r3, [r7, #23]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d105      	bne.n	8004694 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004688:	4b3b      	ldr	r3, [pc, #236]	@ (8004778 <HAL_RCC_OscConfig+0x4ac>)
 800468a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468c:	4a3a      	ldr	r2, [pc, #232]	@ (8004778 <HAL_RCC_OscConfig+0x4ac>)
 800468e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004692:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	2b00      	cmp	r3, #0
 800469a:	f000 80ad 	beq.w	80047f8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800469e:	4b36      	ldr	r3, [pc, #216]	@ (8004778 <HAL_RCC_OscConfig+0x4ac>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 030c 	and.w	r3, r3, #12
 80046a6:	2b08      	cmp	r3, #8
 80046a8:	d060      	beq.n	800476c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d145      	bne.n	800473e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046b2:	4b33      	ldr	r3, [pc, #204]	@ (8004780 <HAL_RCC_OscConfig+0x4b4>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b8:	f7fd ff9e 	bl	80025f8 <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c0:	f7fd ff9a 	bl	80025f8 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e093      	b.n	80047fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046d2:	4b29      	ldr	r3, [pc, #164]	@ (8004778 <HAL_RCC_OscConfig+0x4ac>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1f0      	bne.n	80046c0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	69da      	ldr	r2, [r3, #28]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	431a      	orrs	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ec:	019b      	lsls	r3, r3, #6
 80046ee:	431a      	orrs	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f4:	085b      	lsrs	r3, r3, #1
 80046f6:	3b01      	subs	r3, #1
 80046f8:	041b      	lsls	r3, r3, #16
 80046fa:	431a      	orrs	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004700:	061b      	lsls	r3, r3, #24
 8004702:	431a      	orrs	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004708:	071b      	lsls	r3, r3, #28
 800470a:	491b      	ldr	r1, [pc, #108]	@ (8004778 <HAL_RCC_OscConfig+0x4ac>)
 800470c:	4313      	orrs	r3, r2
 800470e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004710:	4b1b      	ldr	r3, [pc, #108]	@ (8004780 <HAL_RCC_OscConfig+0x4b4>)
 8004712:	2201      	movs	r2, #1
 8004714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004716:	f7fd ff6f 	bl	80025f8 <HAL_GetTick>
 800471a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800471c:	e008      	b.n	8004730 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800471e:	f7fd ff6b 	bl	80025f8 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b02      	cmp	r3, #2
 800472a:	d901      	bls.n	8004730 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e064      	b.n	80047fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004730:	4b11      	ldr	r3, [pc, #68]	@ (8004778 <HAL_RCC_OscConfig+0x4ac>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d0f0      	beq.n	800471e <HAL_RCC_OscConfig+0x452>
 800473c:	e05c      	b.n	80047f8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800473e:	4b10      	ldr	r3, [pc, #64]	@ (8004780 <HAL_RCC_OscConfig+0x4b4>)
 8004740:	2200      	movs	r2, #0
 8004742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004744:	f7fd ff58 	bl	80025f8 <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800474c:	f7fd ff54 	bl	80025f8 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e04d      	b.n	80047fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800475e:	4b06      	ldr	r3, [pc, #24]	@ (8004778 <HAL_RCC_OscConfig+0x4ac>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1f0      	bne.n	800474c <HAL_RCC_OscConfig+0x480>
 800476a:	e045      	b.n	80047f8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d107      	bne.n	8004784 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e040      	b.n	80047fa <HAL_RCC_OscConfig+0x52e>
 8004778:	40023800 	.word	0x40023800
 800477c:	40007000 	.word	0x40007000
 8004780:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004784:	4b1f      	ldr	r3, [pc, #124]	@ (8004804 <HAL_RCC_OscConfig+0x538>)
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d030      	beq.n	80047f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800479c:	429a      	cmp	r2, r3
 800479e:	d129      	bne.n	80047f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d122      	bne.n	80047f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80047b4:	4013      	ands	r3, r2
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80047ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047bc:	4293      	cmp	r3, r2
 80047be:	d119      	bne.n	80047f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ca:	085b      	lsrs	r3, r3, #1
 80047cc:	3b01      	subs	r3, #1
 80047ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d10f      	bne.n	80047f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d107      	bne.n	80047f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d001      	beq.n	80047f8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e000      	b.n	80047fa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3718      	adds	r7, #24
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	40023800 	.word	0x40023800

08004808 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e041      	b.n	800489e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d106      	bne.n	8004834 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f839 	bl	80048a6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2202      	movs	r2, #2
 8004838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	3304      	adds	r3, #4
 8004844:	4619      	mov	r1, r3
 8004846:	4610      	mov	r0, r2
 8004848:	f000 fad2 	bl	8004df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80048ae:	bf00      	nop
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
	...

080048bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d001      	beq.n	80048d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e04e      	b.n	8004972 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2202      	movs	r2, #2
 80048d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68da      	ldr	r2, [r3, #12]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f042 0201 	orr.w	r2, r2, #1
 80048ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a23      	ldr	r2, [pc, #140]	@ (8004980 <HAL_TIM_Base_Start_IT+0xc4>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d022      	beq.n	800493c <HAL_TIM_Base_Start_IT+0x80>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048fe:	d01d      	beq.n	800493c <HAL_TIM_Base_Start_IT+0x80>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a1f      	ldr	r2, [pc, #124]	@ (8004984 <HAL_TIM_Base_Start_IT+0xc8>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d018      	beq.n	800493c <HAL_TIM_Base_Start_IT+0x80>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a1e      	ldr	r2, [pc, #120]	@ (8004988 <HAL_TIM_Base_Start_IT+0xcc>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d013      	beq.n	800493c <HAL_TIM_Base_Start_IT+0x80>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a1c      	ldr	r2, [pc, #112]	@ (800498c <HAL_TIM_Base_Start_IT+0xd0>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d00e      	beq.n	800493c <HAL_TIM_Base_Start_IT+0x80>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a1b      	ldr	r2, [pc, #108]	@ (8004990 <HAL_TIM_Base_Start_IT+0xd4>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d009      	beq.n	800493c <HAL_TIM_Base_Start_IT+0x80>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a19      	ldr	r2, [pc, #100]	@ (8004994 <HAL_TIM_Base_Start_IT+0xd8>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d004      	beq.n	800493c <HAL_TIM_Base_Start_IT+0x80>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a18      	ldr	r2, [pc, #96]	@ (8004998 <HAL_TIM_Base_Start_IT+0xdc>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d111      	bne.n	8004960 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f003 0307 	and.w	r3, r3, #7
 8004946:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2b06      	cmp	r3, #6
 800494c:	d010      	beq.n	8004970 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f042 0201 	orr.w	r2, r2, #1
 800495c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800495e:	e007      	b.n	8004970 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f042 0201 	orr.w	r2, r2, #1
 800496e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3714      	adds	r7, #20
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	40010000 	.word	0x40010000
 8004984:	40000400 	.word	0x40000400
 8004988:	40000800 	.word	0x40000800
 800498c:	40000c00 	.word	0x40000c00
 8004990:	40010400 	.word	0x40010400
 8004994:	40014000 	.word	0x40014000
 8004998:	40001800 	.word	0x40001800

0800499c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e041      	b.n	8004a32 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d106      	bne.n	80049c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7fd f98c 	bl	8001ce0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2202      	movs	r2, #2
 80049cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	3304      	adds	r3, #4
 80049d8:	4619      	mov	r1, r3
 80049da:	4610      	mov	r0, r2
 80049dc:	f000 fa08 	bl	8004df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3708      	adds	r7, #8
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	b084      	sub	sp, #16
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d020      	beq.n	8004a9e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d01b      	beq.n	8004a9e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f06f 0202 	mvn.w	r2, #2
 8004a6e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	f003 0303 	and.w	r3, r3, #3
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d003      	beq.n	8004a8c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 f995 	bl	8004db4 <HAL_TIM_IC_CaptureCallback>
 8004a8a:	e005      	b.n	8004a98 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 f987 	bl	8004da0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f998 	bl	8004dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	f003 0304 	and.w	r3, r3, #4
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d020      	beq.n	8004aea <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f003 0304 	and.w	r3, r3, #4
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d01b      	beq.n	8004aea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f06f 0204 	mvn.w	r2, #4
 8004aba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2202      	movs	r2, #2
 8004ac0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d003      	beq.n	8004ad8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 f96f 	bl	8004db4 <HAL_TIM_IC_CaptureCallback>
 8004ad6:	e005      	b.n	8004ae4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 f961 	bl	8004da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 f972 	bl	8004dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	f003 0308 	and.w	r3, r3, #8
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d020      	beq.n	8004b36 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f003 0308 	and.w	r3, r3, #8
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d01b      	beq.n	8004b36 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f06f 0208 	mvn.w	r2, #8
 8004b06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2204      	movs	r2, #4
 8004b0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	69db      	ldr	r3, [r3, #28]
 8004b14:	f003 0303 	and.w	r3, r3, #3
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d003      	beq.n	8004b24 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 f949 	bl	8004db4 <HAL_TIM_IC_CaptureCallback>
 8004b22:	e005      	b.n	8004b30 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 f93b 	bl	8004da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f94c 	bl	8004dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	f003 0310 	and.w	r3, r3, #16
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d020      	beq.n	8004b82 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f003 0310 	and.w	r3, r3, #16
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d01b      	beq.n	8004b82 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f06f 0210 	mvn.w	r2, #16
 8004b52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2208      	movs	r2, #8
 8004b58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	69db      	ldr	r3, [r3, #28]
 8004b60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d003      	beq.n	8004b70 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 f923 	bl	8004db4 <HAL_TIM_IC_CaptureCallback>
 8004b6e:	e005      	b.n	8004b7c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 f915 	bl	8004da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f926 	bl	8004dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00c      	beq.n	8004ba6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d007      	beq.n	8004ba6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f06f 0201 	mvn.w	r2, #1
 8004b9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f7fc fee7 	bl	8001974 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00c      	beq.n	8004bca <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d007      	beq.n	8004bca <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004bc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 fbef 	bl	80053a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00c      	beq.n	8004bee <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d007      	beq.n	8004bee <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004be6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 f8f7 	bl	8004ddc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	f003 0320 	and.w	r3, r3, #32
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00c      	beq.n	8004c12 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f003 0320 	and.w	r3, r3, #32
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d007      	beq.n	8004c12 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f06f 0220 	mvn.w	r2, #32
 8004c0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 fbc1 	bl	8005394 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c12:	bf00      	nop
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
	...

08004c1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b086      	sub	sp, #24
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d101      	bne.n	8004c3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c36:	2302      	movs	r3, #2
 8004c38:	e0ae      	b.n	8004d98 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2b0c      	cmp	r3, #12
 8004c46:	f200 809f 	bhi.w	8004d88 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8004c50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c50:	08004c85 	.word	0x08004c85
 8004c54:	08004d89 	.word	0x08004d89
 8004c58:	08004d89 	.word	0x08004d89
 8004c5c:	08004d89 	.word	0x08004d89
 8004c60:	08004cc5 	.word	0x08004cc5
 8004c64:	08004d89 	.word	0x08004d89
 8004c68:	08004d89 	.word	0x08004d89
 8004c6c:	08004d89 	.word	0x08004d89
 8004c70:	08004d07 	.word	0x08004d07
 8004c74:	08004d89 	.word	0x08004d89
 8004c78:	08004d89 	.word	0x08004d89
 8004c7c:	08004d89 	.word	0x08004d89
 8004c80:	08004d47 	.word	0x08004d47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68b9      	ldr	r1, [r7, #8]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f000 f956 	bl	8004f3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	699a      	ldr	r2, [r3, #24]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f042 0208 	orr.w	r2, r2, #8
 8004c9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	699a      	ldr	r2, [r3, #24]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f022 0204 	bic.w	r2, r2, #4
 8004cae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6999      	ldr	r1, [r3, #24]
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	691a      	ldr	r2, [r3, #16]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	619a      	str	r2, [r3, #24]
      break;
 8004cc2:	e064      	b.n	8004d8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68b9      	ldr	r1, [r7, #8]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 f9a6 	bl	800501c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	699a      	ldr	r2, [r3, #24]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004cde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	699a      	ldr	r2, [r3, #24]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6999      	ldr	r1, [r3, #24]
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	021a      	lsls	r2, r3, #8
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	430a      	orrs	r2, r1
 8004d02:	619a      	str	r2, [r3, #24]
      break;
 8004d04:	e043      	b.n	8004d8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68b9      	ldr	r1, [r7, #8]
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f000 f9fb 	bl	8005108 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	69da      	ldr	r2, [r3, #28]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f042 0208 	orr.w	r2, r2, #8
 8004d20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	69da      	ldr	r2, [r3, #28]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f022 0204 	bic.w	r2, r2, #4
 8004d30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	69d9      	ldr	r1, [r3, #28]
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	691a      	ldr	r2, [r3, #16]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	430a      	orrs	r2, r1
 8004d42:	61da      	str	r2, [r3, #28]
      break;
 8004d44:	e023      	b.n	8004d8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68b9      	ldr	r1, [r7, #8]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f000 fa4f 	bl	80051f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	69da      	ldr	r2, [r3, #28]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	69da      	ldr	r2, [r3, #28]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	69d9      	ldr	r1, [r3, #28]
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	021a      	lsls	r2, r3, #8
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	61da      	str	r2, [r3, #28]
      break;
 8004d86:	e002      	b.n	8004d8e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	75fb      	strb	r3, [r7, #23]
      break;
 8004d8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3718      	adds	r7, #24
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a43      	ldr	r2, [pc, #268]	@ (8004f10 <TIM_Base_SetConfig+0x120>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d013      	beq.n	8004e30 <TIM_Base_SetConfig+0x40>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e0e:	d00f      	beq.n	8004e30 <TIM_Base_SetConfig+0x40>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a40      	ldr	r2, [pc, #256]	@ (8004f14 <TIM_Base_SetConfig+0x124>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d00b      	beq.n	8004e30 <TIM_Base_SetConfig+0x40>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a3f      	ldr	r2, [pc, #252]	@ (8004f18 <TIM_Base_SetConfig+0x128>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d007      	beq.n	8004e30 <TIM_Base_SetConfig+0x40>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a3e      	ldr	r2, [pc, #248]	@ (8004f1c <TIM_Base_SetConfig+0x12c>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d003      	beq.n	8004e30 <TIM_Base_SetConfig+0x40>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a3d      	ldr	r2, [pc, #244]	@ (8004f20 <TIM_Base_SetConfig+0x130>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d108      	bne.n	8004e42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a32      	ldr	r2, [pc, #200]	@ (8004f10 <TIM_Base_SetConfig+0x120>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d02b      	beq.n	8004ea2 <TIM_Base_SetConfig+0xb2>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e50:	d027      	beq.n	8004ea2 <TIM_Base_SetConfig+0xb2>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a2f      	ldr	r2, [pc, #188]	@ (8004f14 <TIM_Base_SetConfig+0x124>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d023      	beq.n	8004ea2 <TIM_Base_SetConfig+0xb2>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a2e      	ldr	r2, [pc, #184]	@ (8004f18 <TIM_Base_SetConfig+0x128>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d01f      	beq.n	8004ea2 <TIM_Base_SetConfig+0xb2>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a2d      	ldr	r2, [pc, #180]	@ (8004f1c <TIM_Base_SetConfig+0x12c>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d01b      	beq.n	8004ea2 <TIM_Base_SetConfig+0xb2>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a2c      	ldr	r2, [pc, #176]	@ (8004f20 <TIM_Base_SetConfig+0x130>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d017      	beq.n	8004ea2 <TIM_Base_SetConfig+0xb2>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a2b      	ldr	r2, [pc, #172]	@ (8004f24 <TIM_Base_SetConfig+0x134>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d013      	beq.n	8004ea2 <TIM_Base_SetConfig+0xb2>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a2a      	ldr	r2, [pc, #168]	@ (8004f28 <TIM_Base_SetConfig+0x138>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d00f      	beq.n	8004ea2 <TIM_Base_SetConfig+0xb2>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a29      	ldr	r2, [pc, #164]	@ (8004f2c <TIM_Base_SetConfig+0x13c>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d00b      	beq.n	8004ea2 <TIM_Base_SetConfig+0xb2>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a28      	ldr	r2, [pc, #160]	@ (8004f30 <TIM_Base_SetConfig+0x140>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d007      	beq.n	8004ea2 <TIM_Base_SetConfig+0xb2>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a27      	ldr	r2, [pc, #156]	@ (8004f34 <TIM_Base_SetConfig+0x144>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d003      	beq.n	8004ea2 <TIM_Base_SetConfig+0xb2>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a26      	ldr	r2, [pc, #152]	@ (8004f38 <TIM_Base_SetConfig+0x148>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d108      	bne.n	8004eb4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ea8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	689a      	ldr	r2, [r3, #8]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a0e      	ldr	r2, [pc, #56]	@ (8004f10 <TIM_Base_SetConfig+0x120>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d003      	beq.n	8004ee2 <TIM_Base_SetConfig+0xf2>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a10      	ldr	r2, [pc, #64]	@ (8004f20 <TIM_Base_SetConfig+0x130>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d103      	bne.n	8004eea <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	691a      	ldr	r2, [r3, #16]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f043 0204 	orr.w	r2, r3, #4
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	601a      	str	r2, [r3, #0]
}
 8004f02:	bf00      	nop
 8004f04:	3714      	adds	r7, #20
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	40010000 	.word	0x40010000
 8004f14:	40000400 	.word	0x40000400
 8004f18:	40000800 	.word	0x40000800
 8004f1c:	40000c00 	.word	0x40000c00
 8004f20:	40010400 	.word	0x40010400
 8004f24:	40014000 	.word	0x40014000
 8004f28:	40014400 	.word	0x40014400
 8004f2c:	40014800 	.word	0x40014800
 8004f30:	40001800 	.word	0x40001800
 8004f34:	40001c00 	.word	0x40001c00
 8004f38:	40002000 	.word	0x40002000

08004f3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b087      	sub	sp, #28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a1b      	ldr	r3, [r3, #32]
 8004f50:	f023 0201 	bic.w	r2, r3, #1
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f023 0303 	bic.w	r3, r3, #3
 8004f72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	f023 0302 	bic.w	r3, r3, #2
 8004f84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a20      	ldr	r2, [pc, #128]	@ (8005014 <TIM_OC1_SetConfig+0xd8>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d003      	beq.n	8004fa0 <TIM_OC1_SetConfig+0x64>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a1f      	ldr	r2, [pc, #124]	@ (8005018 <TIM_OC1_SetConfig+0xdc>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d10c      	bne.n	8004fba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	f023 0308 	bic.w	r3, r3, #8
 8004fa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	697a      	ldr	r2, [r7, #20]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	f023 0304 	bic.w	r3, r3, #4
 8004fb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a15      	ldr	r2, [pc, #84]	@ (8005014 <TIM_OC1_SetConfig+0xd8>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d003      	beq.n	8004fca <TIM_OC1_SetConfig+0x8e>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a14      	ldr	r2, [pc, #80]	@ (8005018 <TIM_OC1_SetConfig+0xdc>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d111      	bne.n	8004fee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004fd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	621a      	str	r2, [r3, #32]
}
 8005008:	bf00      	nop
 800500a:	371c      	adds	r7, #28
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr
 8005014:	40010000 	.word	0x40010000
 8005018:	40010400 	.word	0x40010400

0800501c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800501c:	b480      	push	{r7}
 800501e:	b087      	sub	sp, #28
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	f023 0210 	bic.w	r2, r3, #16
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800504a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005052:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	021b      	lsls	r3, r3, #8
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	4313      	orrs	r3, r2
 800505e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f023 0320 	bic.w	r3, r3, #32
 8005066:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	011b      	lsls	r3, r3, #4
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	4313      	orrs	r3, r2
 8005072:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a22      	ldr	r2, [pc, #136]	@ (8005100 <TIM_OC2_SetConfig+0xe4>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d003      	beq.n	8005084 <TIM_OC2_SetConfig+0x68>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a21      	ldr	r2, [pc, #132]	@ (8005104 <TIM_OC2_SetConfig+0xe8>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d10d      	bne.n	80050a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800508a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	011b      	lsls	r3, r3, #4
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	4313      	orrs	r3, r2
 8005096:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800509e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a17      	ldr	r2, [pc, #92]	@ (8005100 <TIM_OC2_SetConfig+0xe4>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d003      	beq.n	80050b0 <TIM_OC2_SetConfig+0x94>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a16      	ldr	r2, [pc, #88]	@ (8005104 <TIM_OC2_SetConfig+0xe8>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d113      	bne.n	80050d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	695b      	ldr	r3, [r3, #20]
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	685a      	ldr	r2, [r3, #4]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	621a      	str	r2, [r3, #32]
}
 80050f2:	bf00      	nop
 80050f4:	371c      	adds	r7, #28
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	40010000 	.word	0x40010000
 8005104:	40010400 	.word	0x40010400

08005108 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005108:	b480      	push	{r7}
 800510a:	b087      	sub	sp, #28
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a1b      	ldr	r3, [r3, #32]
 800511c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	69db      	ldr	r3, [r3, #28]
 800512e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f023 0303 	bic.w	r3, r3, #3
 800513e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	4313      	orrs	r3, r2
 8005148:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005150:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	021b      	lsls	r3, r3, #8
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	4313      	orrs	r3, r2
 800515c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a21      	ldr	r2, [pc, #132]	@ (80051e8 <TIM_OC3_SetConfig+0xe0>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d003      	beq.n	800516e <TIM_OC3_SetConfig+0x66>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a20      	ldr	r2, [pc, #128]	@ (80051ec <TIM_OC3_SetConfig+0xe4>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d10d      	bne.n	800518a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005174:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	021b      	lsls	r3, r3, #8
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	4313      	orrs	r3, r2
 8005180:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005188:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a16      	ldr	r2, [pc, #88]	@ (80051e8 <TIM_OC3_SetConfig+0xe0>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d003      	beq.n	800519a <TIM_OC3_SetConfig+0x92>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a15      	ldr	r2, [pc, #84]	@ (80051ec <TIM_OC3_SetConfig+0xe4>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d113      	bne.n	80051c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80051a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80051a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	011b      	lsls	r3, r3, #4
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	011b      	lsls	r3, r3, #4
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	4313      	orrs	r3, r2
 80051c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	685a      	ldr	r2, [r3, #4]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	621a      	str	r2, [r3, #32]
}
 80051dc:	bf00      	nop
 80051de:	371c      	adds	r7, #28
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr
 80051e8:	40010000 	.word	0x40010000
 80051ec:	40010400 	.word	0x40010400

080051f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b087      	sub	sp, #28
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a1b      	ldr	r3, [r3, #32]
 8005204:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800521e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005226:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	021b      	lsls	r3, r3, #8
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	4313      	orrs	r3, r2
 8005232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800523a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	031b      	lsls	r3, r3, #12
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	4313      	orrs	r3, r2
 8005246:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a12      	ldr	r2, [pc, #72]	@ (8005294 <TIM_OC4_SetConfig+0xa4>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d003      	beq.n	8005258 <TIM_OC4_SetConfig+0x68>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a11      	ldr	r2, [pc, #68]	@ (8005298 <TIM_OC4_SetConfig+0xa8>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d109      	bne.n	800526c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800525e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	695b      	ldr	r3, [r3, #20]
 8005264:	019b      	lsls	r3, r3, #6
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	4313      	orrs	r3, r2
 800526a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	685a      	ldr	r2, [r3, #4]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	621a      	str	r2, [r3, #32]
}
 8005286:	bf00      	nop
 8005288:	371c      	adds	r7, #28
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	40010000 	.word	0x40010000
 8005298:	40010400 	.word	0x40010400

0800529c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d101      	bne.n	80052b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052b0:	2302      	movs	r3, #2
 80052b2:	e05a      	b.n	800536a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2202      	movs	r2, #2
 80052c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a21      	ldr	r2, [pc, #132]	@ (8005378 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d022      	beq.n	800533e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005300:	d01d      	beq.n	800533e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a1d      	ldr	r2, [pc, #116]	@ (800537c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d018      	beq.n	800533e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a1b      	ldr	r2, [pc, #108]	@ (8005380 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d013      	beq.n	800533e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a1a      	ldr	r2, [pc, #104]	@ (8005384 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d00e      	beq.n	800533e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a18      	ldr	r2, [pc, #96]	@ (8005388 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d009      	beq.n	800533e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a17      	ldr	r2, [pc, #92]	@ (800538c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d004      	beq.n	800533e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a15      	ldr	r2, [pc, #84]	@ (8005390 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d10c      	bne.n	8005358 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005344:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	4313      	orrs	r3, r2
 800534e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3714      	adds	r7, #20
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	40010000 	.word	0x40010000
 800537c:	40000400 	.word	0x40000400
 8005380:	40000800 	.word	0x40000800
 8005384:	40000c00 	.word	0x40000c00
 8005388:	40010400 	.word	0x40010400
 800538c:	40014000 	.word	0x40014000
 8005390:	40001800 	.word	0x40001800

08005394 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d101      	bne.n	80053ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e042      	b.n	8005454 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d106      	bne.n	80053e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f7fc fcd4 	bl	8001d90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2224      	movs	r2, #36	@ 0x24
 80053ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68da      	ldr	r2, [r3, #12]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80053fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 feb3 	bl	800616c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	691a      	ldr	r2, [r3, #16]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005414:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	695a      	ldr	r2, [r3, #20]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005424:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68da      	ldr	r2, [r3, #12]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005434:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2220      	movs	r2, #32
 8005440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2220      	movs	r2, #32
 8005448:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3708      	adds	r7, #8
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b08a      	sub	sp, #40	@ 0x28
 8005460:	af02      	add	r7, sp, #8
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	603b      	str	r3, [r7, #0]
 8005468:	4613      	mov	r3, r2
 800546a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800546c:	2300      	movs	r3, #0
 800546e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005476:	b2db      	uxtb	r3, r3
 8005478:	2b20      	cmp	r3, #32
 800547a:	d175      	bne.n	8005568 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d002      	beq.n	8005488 <HAL_UART_Transmit+0x2c>
 8005482:	88fb      	ldrh	r3, [r7, #6]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d101      	bne.n	800548c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e06e      	b.n	800556a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2221      	movs	r2, #33	@ 0x21
 8005496:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800549a:	f7fd f8ad 	bl	80025f8 <HAL_GetTick>
 800549e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	88fa      	ldrh	r2, [r7, #6]
 80054a4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	88fa      	ldrh	r2, [r7, #6]
 80054aa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054b4:	d108      	bne.n	80054c8 <HAL_UART_Transmit+0x6c>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d104      	bne.n	80054c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80054be:	2300      	movs	r3, #0
 80054c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	61bb      	str	r3, [r7, #24]
 80054c6:	e003      	b.n	80054d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054cc:	2300      	movs	r3, #0
 80054ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80054d0:	e02e      	b.n	8005530 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	9300      	str	r3, [sp, #0]
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	2200      	movs	r2, #0
 80054da:	2180      	movs	r1, #128	@ 0x80
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f000 fc2a 	bl	8005d36 <UART_WaitOnFlagUntilTimeout>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d005      	beq.n	80054f4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2220      	movs	r2, #32
 80054ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e03a      	b.n	800556a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10b      	bne.n	8005512 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	881b      	ldrh	r3, [r3, #0]
 80054fe:	461a      	mov	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005508:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	3302      	adds	r3, #2
 800550e:	61bb      	str	r3, [r7, #24]
 8005510:	e007      	b.n	8005522 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	781a      	ldrb	r2, [r3, #0]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	3301      	adds	r3, #1
 8005520:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005526:	b29b      	uxth	r3, r3
 8005528:	3b01      	subs	r3, #1
 800552a:	b29a      	uxth	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005534:	b29b      	uxth	r3, r3
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1cb      	bne.n	80054d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	9300      	str	r3, [sp, #0]
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	2200      	movs	r2, #0
 8005542:	2140      	movs	r1, #64	@ 0x40
 8005544:	68f8      	ldr	r0, [r7, #12]
 8005546:	f000 fbf6 	bl	8005d36 <UART_WaitOnFlagUntilTimeout>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d005      	beq.n	800555c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2220      	movs	r2, #32
 8005554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e006      	b.n	800556a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2220      	movs	r2, #32
 8005560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005564:	2300      	movs	r3, #0
 8005566:	e000      	b.n	800556a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005568:	2302      	movs	r3, #2
  }
}
 800556a:	4618      	mov	r0, r3
 800556c:	3720      	adds	r7, #32
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
	...

08005574 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b08c      	sub	sp, #48	@ 0x30
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	4613      	mov	r3, r2
 8005580:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b20      	cmp	r3, #32
 800558c:	d162      	bne.n	8005654 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d002      	beq.n	800559a <HAL_UART_Transmit_DMA+0x26>
 8005594:	88fb      	ldrh	r3, [r7, #6]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d101      	bne.n	800559e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e05b      	b.n	8005656 <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 800559e:	68ba      	ldr	r2, [r7, #8]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	88fa      	ldrh	r2, [r7, #6]
 80055a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	88fa      	ldrh	r2, [r7, #6]
 80055ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2200      	movs	r2, #0
 80055b4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2221      	movs	r2, #33	@ 0x21
 80055ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055c2:	4a27      	ldr	r2, [pc, #156]	@ (8005660 <HAL_UART_Transmit_DMA+0xec>)
 80055c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ca:	4a26      	ldr	r2, [pc, #152]	@ (8005664 <HAL_UART_Transmit_DMA+0xf0>)
 80055cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055d2:	4a25      	ldr	r2, [pc, #148]	@ (8005668 <HAL_UART_Transmit_DMA+0xf4>)
 80055d4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055da:	2200      	movs	r2, #0
 80055dc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80055de:	f107 0308 	add.w	r3, r7, #8
 80055e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80055e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055ea:	6819      	ldr	r1, [r3, #0]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	3304      	adds	r3, #4
 80055f2:	461a      	mov	r2, r3
 80055f4:	88fb      	ldrh	r3, [r7, #6]
 80055f6:	f7fd fd9b 	bl	8003130 <HAL_DMA_Start_IT>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d008      	beq.n	8005612 <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2210      	movs	r2, #16
 8005604:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2220      	movs	r2, #32
 800560a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e021      	b.n	8005656 <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800561a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	3314      	adds	r3, #20
 8005622:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	e853 3f00 	ldrex	r3, [r3]
 800562a:	617b      	str	r3, [r7, #20]
   return(result);
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005632:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	3314      	adds	r3, #20
 800563a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800563c:	627a      	str	r2, [r7, #36]	@ 0x24
 800563e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005640:	6a39      	ldr	r1, [r7, #32]
 8005642:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005644:	e841 2300 	strex	r3, r2, [r1]
 8005648:	61fb      	str	r3, [r7, #28]
   return(result);
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1e5      	bne.n	800561c <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 8005650:	2300      	movs	r3, #0
 8005652:	e000      	b.n	8005656 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8005654:	2302      	movs	r3, #2
  }
}
 8005656:	4618      	mov	r0, r3
 8005658:	3730      	adds	r7, #48	@ 0x30
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	08005bed 	.word	0x08005bed
 8005664:	08005c87 	.word	0x08005c87
 8005668:	08005ca3 	.word	0x08005ca3

0800566c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b0ba      	sub	sp, #232	@ 0xe8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005692:	2300      	movs	r3, #0
 8005694:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005698:	2300      	movs	r3, #0
 800569a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800569e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056a2:	f003 030f 	and.w	r3, r3, #15
 80056a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80056aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10f      	bne.n	80056d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056b6:	f003 0320 	and.w	r3, r3, #32
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d009      	beq.n	80056d2 <HAL_UART_IRQHandler+0x66>
 80056be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056c2:	f003 0320 	and.w	r3, r3, #32
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d003      	beq.n	80056d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 fc90 	bl	8005ff0 <UART_Receive_IT>
      return;
 80056d0:	e273      	b.n	8005bba <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80056d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	f000 80de 	beq.w	8005898 <HAL_UART_IRQHandler+0x22c>
 80056dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d106      	bne.n	80056f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80056e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056ec:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f000 80d1 	beq.w	8005898 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80056f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00b      	beq.n	800571a <HAL_UART_IRQHandler+0xae>
 8005702:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800570a:	2b00      	cmp	r3, #0
 800570c:	d005      	beq.n	800571a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005712:	f043 0201 	orr.w	r2, r3, #1
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800571a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800571e:	f003 0304 	and.w	r3, r3, #4
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00b      	beq.n	800573e <HAL_UART_IRQHandler+0xd2>
 8005726:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	2b00      	cmp	r3, #0
 8005730:	d005      	beq.n	800573e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005736:	f043 0202 	orr.w	r2, r3, #2
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800573e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005742:	f003 0302 	and.w	r3, r3, #2
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00b      	beq.n	8005762 <HAL_UART_IRQHandler+0xf6>
 800574a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	2b00      	cmp	r3, #0
 8005754:	d005      	beq.n	8005762 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800575a:	f043 0204 	orr.w	r2, r3, #4
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005766:	f003 0308 	and.w	r3, r3, #8
 800576a:	2b00      	cmp	r3, #0
 800576c:	d011      	beq.n	8005792 <HAL_UART_IRQHandler+0x126>
 800576e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005772:	f003 0320 	and.w	r3, r3, #32
 8005776:	2b00      	cmp	r3, #0
 8005778:	d105      	bne.n	8005786 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800577a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	2b00      	cmp	r3, #0
 8005784:	d005      	beq.n	8005792 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800578a:	f043 0208 	orr.w	r2, r3, #8
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005796:	2b00      	cmp	r3, #0
 8005798:	f000 820a 	beq.w	8005bb0 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800579c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057a0:	f003 0320 	and.w	r3, r3, #32
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d008      	beq.n	80057ba <HAL_UART_IRQHandler+0x14e>
 80057a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057ac:	f003 0320 	and.w	r3, r3, #32
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d002      	beq.n	80057ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 fc1b 	bl	8005ff0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	695b      	ldr	r3, [r3, #20]
 80057c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057c4:	2b40      	cmp	r3, #64	@ 0x40
 80057c6:	bf0c      	ite	eq
 80057c8:	2301      	moveq	r3, #1
 80057ca:	2300      	movne	r3, #0
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057d6:	f003 0308 	and.w	r3, r3, #8
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d103      	bne.n	80057e6 <HAL_UART_IRQHandler+0x17a>
 80057de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d04f      	beq.n	8005886 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 fb26 	bl	8005e38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057f6:	2b40      	cmp	r3, #64	@ 0x40
 80057f8:	d141      	bne.n	800587e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	3314      	adds	r3, #20
 8005800:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005804:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005808:	e853 3f00 	ldrex	r3, [r3]
 800580c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005810:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005814:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005818:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	3314      	adds	r3, #20
 8005822:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005826:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800582a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005832:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005836:	e841 2300 	strex	r3, r2, [r1]
 800583a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800583e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1d9      	bne.n	80057fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800584a:	2b00      	cmp	r3, #0
 800584c:	d013      	beq.n	8005876 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005852:	4a8a      	ldr	r2, [pc, #552]	@ (8005a7c <HAL_UART_IRQHandler+0x410>)
 8005854:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800585a:	4618      	mov	r0, r3
 800585c:	f7fd fd30 	bl	80032c0 <HAL_DMA_Abort_IT>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d016      	beq.n	8005894 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800586a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005870:	4610      	mov	r0, r2
 8005872:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005874:	e00e      	b.n	8005894 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7fc fe4a 	bl	8002510 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800587c:	e00a      	b.n	8005894 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7fc fe46 	bl	8002510 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005884:	e006      	b.n	8005894 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f7fc fe42 	bl	8002510 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005892:	e18d      	b.n	8005bb0 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005894:	bf00      	nop
    return;
 8005896:	e18b      	b.n	8005bb0 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800589c:	2b01      	cmp	r3, #1
 800589e:	f040 8167 	bne.w	8005b70 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80058a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058a6:	f003 0310 	and.w	r3, r3, #16
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f000 8160 	beq.w	8005b70 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80058b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058b4:	f003 0310 	and.w	r3, r3, #16
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f000 8159 	beq.w	8005b70 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058be:	2300      	movs	r3, #0
 80058c0:	60bb      	str	r3, [r7, #8]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	60bb      	str	r3, [r7, #8]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	60bb      	str	r3, [r7, #8]
 80058d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058de:	2b40      	cmp	r3, #64	@ 0x40
 80058e0:	f040 80ce 	bne.w	8005a80 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80058f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f000 80a9 	beq.w	8005a4c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80058fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005902:	429a      	cmp	r2, r3
 8005904:	f080 80a2 	bcs.w	8005a4c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800590e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005914:	69db      	ldr	r3, [r3, #28]
 8005916:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800591a:	f000 8088 	beq.w	8005a2e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	330c      	adds	r3, #12
 8005924:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005928:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800592c:	e853 3f00 	ldrex	r3, [r3]
 8005930:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005934:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005938:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800593c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	330c      	adds	r3, #12
 8005946:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800594a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800594e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005952:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005956:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800595a:	e841 2300 	strex	r3, r2, [r1]
 800595e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005962:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005966:	2b00      	cmp	r3, #0
 8005968:	d1d9      	bne.n	800591e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	3314      	adds	r3, #20
 8005970:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005972:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005974:	e853 3f00 	ldrex	r3, [r3]
 8005978:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800597a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800597c:	f023 0301 	bic.w	r3, r3, #1
 8005980:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	3314      	adds	r3, #20
 800598a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800598e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005992:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005994:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005996:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800599a:	e841 2300 	strex	r3, r2, [r1]
 800599e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80059a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1e1      	bne.n	800596a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	3314      	adds	r3, #20
 80059ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80059b0:	e853 3f00 	ldrex	r3, [r3]
 80059b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80059b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80059b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	3314      	adds	r3, #20
 80059c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80059ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80059cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80059d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80059d2:	e841 2300 	strex	r3, r2, [r1]
 80059d6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80059d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1e3      	bne.n	80059a6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2220      	movs	r2, #32
 80059e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	330c      	adds	r3, #12
 80059f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059f6:	e853 3f00 	ldrex	r3, [r3]
 80059fa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80059fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059fe:	f023 0310 	bic.w	r3, r3, #16
 8005a02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	330c      	adds	r3, #12
 8005a0c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005a10:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005a12:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a14:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a16:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a18:	e841 2300 	strex	r3, r2, [r1]
 8005a1c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005a1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1e3      	bne.n	80059ec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7fd fbd9 	bl	80031e0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2202      	movs	r2, #2
 8005a32:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	4619      	mov	r1, r3
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 f8c5 	bl	8005bd4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005a4a:	e0b3      	b.n	8005bb4 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005a50:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a54:	429a      	cmp	r2, r3
 8005a56:	f040 80ad 	bne.w	8005bb4 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a5e:	69db      	ldr	r3, [r3, #28]
 8005a60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a64:	f040 80a6 	bne.w	8005bb4 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2202      	movs	r2, #2
 8005a6c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005a72:	4619      	mov	r1, r3
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 f8ad 	bl	8005bd4 <HAL_UARTEx_RxEventCallback>
      return;
 8005a7a:	e09b      	b.n	8005bb4 <HAL_UART_IRQHandler+0x548>
 8005a7c:	08005eff 	.word	0x08005eff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f000 808e 	beq.w	8005bb8 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005a9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f000 8089 	beq.w	8005bb8 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	330c      	adds	r3, #12
 8005aac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ab0:	e853 3f00 	ldrex	r3, [r3]
 8005ab4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ab8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005abc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	330c      	adds	r3, #12
 8005ac6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005aca:	647a      	str	r2, [r7, #68]	@ 0x44
 8005acc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ace:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ad0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ad2:	e841 2300 	strex	r3, r2, [r1]
 8005ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ad8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1e3      	bne.n	8005aa6 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	3314      	adds	r3, #20
 8005ae4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae8:	e853 3f00 	ldrex	r3, [r3]
 8005aec:	623b      	str	r3, [r7, #32]
   return(result);
 8005aee:	6a3b      	ldr	r3, [r7, #32]
 8005af0:	f023 0301 	bic.w	r3, r3, #1
 8005af4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	3314      	adds	r3, #20
 8005afe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005b02:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b0a:	e841 2300 	strex	r3, r2, [r1]
 8005b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1e3      	bne.n	8005ade <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2220      	movs	r2, #32
 8005b1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	330c      	adds	r3, #12
 8005b2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	e853 3f00 	ldrex	r3, [r3]
 8005b32:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f023 0310 	bic.w	r3, r3, #16
 8005b3a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	330c      	adds	r3, #12
 8005b44:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005b48:	61fa      	str	r2, [r7, #28]
 8005b4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4c:	69b9      	ldr	r1, [r7, #24]
 8005b4e:	69fa      	ldr	r2, [r7, #28]
 8005b50:	e841 2300 	strex	r3, r2, [r1]
 8005b54:	617b      	str	r3, [r7, #20]
   return(result);
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d1e3      	bne.n	8005b24 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2202      	movs	r2, #2
 8005b60:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b66:	4619      	mov	r1, r3
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 f833 	bl	8005bd4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b6e:	e023      	b.n	8005bb8 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d009      	beq.n	8005b90 <HAL_UART_IRQHandler+0x524>
 8005b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d003      	beq.n	8005b90 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 f9c9 	bl	8005f20 <UART_Transmit_IT>
    return;
 8005b8e:	e014      	b.n	8005bba <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00e      	beq.n	8005bba <HAL_UART_IRQHandler+0x54e>
 8005b9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ba0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d008      	beq.n	8005bba <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 fa09 	bl	8005fc0 <UART_EndTransmit_IT>
    return;
 8005bae:	e004      	b.n	8005bba <HAL_UART_IRQHandler+0x54e>
    return;
 8005bb0:	bf00      	nop
 8005bb2:	e002      	b.n	8005bba <HAL_UART_IRQHandler+0x54e>
      return;
 8005bb4:	bf00      	nop
 8005bb6:	e000      	b.n	8005bba <HAL_UART_IRQHandler+0x54e>
      return;
 8005bb8:	bf00      	nop
  }
}
 8005bba:	37e8      	adds	r7, #232	@ 0xe8
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005bc8:	bf00      	nop
 8005bca:	370c      	adds	r7, #12
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	460b      	mov	r3, r1
 8005bde:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b090      	sub	sp, #64	@ 0x40
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d137      	bne.n	8005c78 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005c08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	3314      	adds	r3, #20
 8005c14:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c18:	e853 3f00 	ldrex	r3, [r3]
 8005c1c:	623b      	str	r3, [r7, #32]
   return(result);
 8005c1e:	6a3b      	ldr	r3, [r7, #32]
 8005c20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c24:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005c26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	3314      	adds	r3, #20
 8005c2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c2e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c36:	e841 2300 	strex	r3, r2, [r1]
 8005c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1e5      	bne.n	8005c0e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	330c      	adds	r3, #12
 8005c48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	e853 3f00 	ldrex	r3, [r3]
 8005c50:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c58:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	330c      	adds	r3, #12
 8005c60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005c62:	61fa      	str	r2, [r7, #28]
 8005c64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c66:	69b9      	ldr	r1, [r7, #24]
 8005c68:	69fa      	ldr	r2, [r7, #28]
 8005c6a:	e841 2300 	strex	r3, r2, [r1]
 8005c6e:	617b      	str	r3, [r7, #20]
   return(result);
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1e5      	bne.n	8005c42 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005c76:	e002      	b.n	8005c7e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005c78:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005c7a:	f7fc fc23 	bl	80024c4 <HAL_UART_TxCpltCallback>
}
 8005c7e:	bf00      	nop
 8005c80:	3740      	adds	r7, #64	@ 0x40
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b084      	sub	sp, #16
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c92:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f7ff ff93 	bl	8005bc0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c9a:	bf00      	nop
 8005c9c:	3710      	adds	r7, #16
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b084      	sub	sp, #16
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005caa:	2300      	movs	r3, #0
 8005cac:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cb2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cbe:	2b80      	cmp	r3, #128	@ 0x80
 8005cc0:	bf0c      	ite	eq
 8005cc2:	2301      	moveq	r3, #1
 8005cc4:	2300      	movne	r3, #0
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b21      	cmp	r3, #33	@ 0x21
 8005cd4:	d108      	bne.n	8005ce8 <UART_DMAError+0x46>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d005      	beq.n	8005ce8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005ce2:	68b8      	ldr	r0, [r7, #8]
 8005ce4:	f000 f880 	bl	8005de8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cf2:	2b40      	cmp	r3, #64	@ 0x40
 8005cf4:	bf0c      	ite	eq
 8005cf6:	2301      	moveq	r3, #1
 8005cf8:	2300      	movne	r3, #0
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	2b22      	cmp	r3, #34	@ 0x22
 8005d08:	d108      	bne.n	8005d1c <UART_DMAError+0x7a>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d005      	beq.n	8005d1c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	2200      	movs	r2, #0
 8005d14:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005d16:	68b8      	ldr	r0, [r7, #8]
 8005d18:	f000 f88e 	bl	8005e38 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d20:	f043 0210 	orr.w	r2, r3, #16
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d28:	68b8      	ldr	r0, [r7, #8]
 8005d2a:	f7fc fbf1 	bl	8002510 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d2e:	bf00      	nop
 8005d30:	3710      	adds	r7, #16
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b086      	sub	sp, #24
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	60f8      	str	r0, [r7, #12]
 8005d3e:	60b9      	str	r1, [r7, #8]
 8005d40:	603b      	str	r3, [r7, #0]
 8005d42:	4613      	mov	r3, r2
 8005d44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d46:	e03b      	b.n	8005dc0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d48:	6a3b      	ldr	r3, [r7, #32]
 8005d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4e:	d037      	beq.n	8005dc0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d50:	f7fc fc52 	bl	80025f8 <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	6a3a      	ldr	r2, [r7, #32]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d302      	bcc.n	8005d66 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d60:	6a3b      	ldr	r3, [r7, #32]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e03a      	b.n	8005de0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	f003 0304 	and.w	r3, r3, #4
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d023      	beq.n	8005dc0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	2b80      	cmp	r3, #128	@ 0x80
 8005d7c:	d020      	beq.n	8005dc0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	2b40      	cmp	r3, #64	@ 0x40
 8005d82:	d01d      	beq.n	8005dc0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 0308 	and.w	r3, r3, #8
 8005d8e:	2b08      	cmp	r3, #8
 8005d90:	d116      	bne.n	8005dc0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005d92:	2300      	movs	r3, #0
 8005d94:	617b      	str	r3, [r7, #20]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	617b      	str	r3, [r7, #20]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	617b      	str	r3, [r7, #20]
 8005da6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f000 f845 	bl	8005e38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2208      	movs	r2, #8
 8005db2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e00f      	b.n	8005de0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	4013      	ands	r3, r2
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	bf0c      	ite	eq
 8005dd0:	2301      	moveq	r3, #1
 8005dd2:	2300      	movne	r3, #0
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	79fb      	ldrb	r3, [r7, #7]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d0b4      	beq.n	8005d48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3718      	adds	r7, #24
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b089      	sub	sp, #36	@ 0x24
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	330c      	adds	r3, #12
 8005df6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	e853 3f00 	ldrex	r3, [r3]
 8005dfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005e06:	61fb      	str	r3, [r7, #28]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	330c      	adds	r3, #12
 8005e0e:	69fa      	ldr	r2, [r7, #28]
 8005e10:	61ba      	str	r2, [r7, #24]
 8005e12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e14:	6979      	ldr	r1, [r7, #20]
 8005e16:	69ba      	ldr	r2, [r7, #24]
 8005e18:	e841 2300 	strex	r3, r2, [r1]
 8005e1c:	613b      	str	r3, [r7, #16]
   return(result);
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1e5      	bne.n	8005df0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2220      	movs	r2, #32
 8005e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005e2c:	bf00      	nop
 8005e2e:	3724      	adds	r7, #36	@ 0x24
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b095      	sub	sp, #84	@ 0x54
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	330c      	adds	r3, #12
 8005e46:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e4a:	e853 3f00 	ldrex	r3, [r3]
 8005e4e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	330c      	adds	r3, #12
 8005e5e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005e60:	643a      	str	r2, [r7, #64]	@ 0x40
 8005e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e64:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e68:	e841 2300 	strex	r3, r2, [r1]
 8005e6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1e5      	bne.n	8005e40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	3314      	adds	r3, #20
 8005e7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7c:	6a3b      	ldr	r3, [r7, #32]
 8005e7e:	e853 3f00 	ldrex	r3, [r3]
 8005e82:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	f023 0301 	bic.w	r3, r3, #1
 8005e8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	3314      	adds	r3, #20
 8005e92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e94:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e9c:	e841 2300 	strex	r3, r2, [r1]
 8005ea0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d1e5      	bne.n	8005e74 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d119      	bne.n	8005ee4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	330c      	adds	r3, #12
 8005eb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	e853 3f00 	ldrex	r3, [r3]
 8005ebe:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	f023 0310 	bic.w	r3, r3, #16
 8005ec6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	330c      	adds	r3, #12
 8005ece:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ed0:	61ba      	str	r2, [r7, #24]
 8005ed2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed4:	6979      	ldr	r1, [r7, #20]
 8005ed6:	69ba      	ldr	r2, [r7, #24]
 8005ed8:	e841 2300 	strex	r3, r2, [r1]
 8005edc:	613b      	str	r3, [r7, #16]
   return(result);
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1e5      	bne.n	8005eb0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2220      	movs	r2, #32
 8005ee8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005ef2:	bf00      	nop
 8005ef4:	3754      	adds	r7, #84	@ 0x54
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b084      	sub	sp, #16
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f0a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f7fc fafc 	bl	8002510 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f18:	bf00      	nop
 8005f1a:	3710      	adds	r7, #16
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b085      	sub	sp, #20
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	2b21      	cmp	r3, #33	@ 0x21
 8005f32:	d13e      	bne.n	8005fb2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f3c:	d114      	bne.n	8005f68 <UART_Transmit_IT+0x48>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d110      	bne.n	8005f68 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a1b      	ldr	r3, [r3, #32]
 8005f4a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	881b      	ldrh	r3, [r3, #0]
 8005f50:	461a      	mov	r2, r3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f5a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a1b      	ldr	r3, [r3, #32]
 8005f60:	1c9a      	adds	r2, r3, #2
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	621a      	str	r2, [r3, #32]
 8005f66:	e008      	b.n	8005f7a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a1b      	ldr	r3, [r3, #32]
 8005f6c:	1c59      	adds	r1, r3, #1
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	6211      	str	r1, [r2, #32]
 8005f72:	781a      	ldrb	r2, [r3, #0]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	3b01      	subs	r3, #1
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	4619      	mov	r1, r3
 8005f88:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d10f      	bne.n	8005fae <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68da      	ldr	r2, [r3, #12]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005f9c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68da      	ldr	r2, [r3, #12]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005fac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	e000      	b.n	8005fb4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005fb2:	2302      	movs	r3, #2
  }
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3714      	adds	r7, #20
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68da      	ldr	r2, [r3, #12]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fd6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2220      	movs	r2, #32
 8005fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f7fc fa6f 	bl	80024c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3708      	adds	r7, #8
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b08c      	sub	sp, #48	@ 0x30
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b22      	cmp	r3, #34	@ 0x22
 800600a:	f040 80aa 	bne.w	8006162 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006016:	d115      	bne.n	8006044 <UART_Receive_IT+0x54>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d111      	bne.n	8006044 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006024:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	b29b      	uxth	r3, r3
 800602e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006032:	b29a      	uxth	r2, r3
 8006034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006036:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800603c:	1c9a      	adds	r2, r3, #2
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	629a      	str	r2, [r3, #40]	@ 0x28
 8006042:	e024      	b.n	800608e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006048:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006052:	d007      	beq.n	8006064 <UART_Receive_IT+0x74>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d10a      	bne.n	8006072 <UART_Receive_IT+0x82>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d106      	bne.n	8006072 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	b2da      	uxtb	r2, r3
 800606c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800606e:	701a      	strb	r2, [r3, #0]
 8006070:	e008      	b.n	8006084 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	b2db      	uxtb	r3, r3
 800607a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800607e:	b2da      	uxtb	r2, r3
 8006080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006082:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006088:	1c5a      	adds	r2, r3, #1
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006092:	b29b      	uxth	r3, r3
 8006094:	3b01      	subs	r3, #1
 8006096:	b29b      	uxth	r3, r3
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	4619      	mov	r1, r3
 800609c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d15d      	bne.n	800615e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68da      	ldr	r2, [r3, #12]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f022 0220 	bic.w	r2, r2, #32
 80060b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68da      	ldr	r2, [r3, #12]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80060c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	695a      	ldr	r2, [r3, #20]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f022 0201 	bic.w	r2, r2, #1
 80060d0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2220      	movs	r2, #32
 80060d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d135      	bne.n	8006154 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	330c      	adds	r3, #12
 80060f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	e853 3f00 	ldrex	r3, [r3]
 80060fc:	613b      	str	r3, [r7, #16]
   return(result);
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	f023 0310 	bic.w	r3, r3, #16
 8006104:	627b      	str	r3, [r7, #36]	@ 0x24
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	330c      	adds	r3, #12
 800610c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800610e:	623a      	str	r2, [r7, #32]
 8006110:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006112:	69f9      	ldr	r1, [r7, #28]
 8006114:	6a3a      	ldr	r2, [r7, #32]
 8006116:	e841 2300 	strex	r3, r2, [r1]
 800611a:	61bb      	str	r3, [r7, #24]
   return(result);
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1e5      	bne.n	80060ee <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 0310 	and.w	r3, r3, #16
 800612c:	2b10      	cmp	r3, #16
 800612e:	d10a      	bne.n	8006146 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006130:	2300      	movs	r3, #0
 8006132:	60fb      	str	r3, [r7, #12]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	60fb      	str	r3, [r7, #12]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	60fb      	str	r3, [r7, #12]
 8006144:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800614a:	4619      	mov	r1, r3
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f7ff fd41 	bl	8005bd4 <HAL_UARTEx_RxEventCallback>
 8006152:	e002      	b.n	800615a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f7fc f9c8 	bl	80024ea <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800615a:	2300      	movs	r3, #0
 800615c:	e002      	b.n	8006164 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800615e:	2300      	movs	r3, #0
 8006160:	e000      	b.n	8006164 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006162:	2302      	movs	r3, #2
  }
}
 8006164:	4618      	mov	r0, r3
 8006166:	3730      	adds	r7, #48	@ 0x30
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800616c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006170:	b0c0      	sub	sp, #256	@ 0x100
 8006172:	af00      	add	r7, sp, #0
 8006174:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006188:	68d9      	ldr	r1, [r3, #12]
 800618a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	ea40 0301 	orr.w	r3, r0, r1
 8006194:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800619a:	689a      	ldr	r2, [r3, #8]
 800619c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	431a      	orrs	r2, r3
 80061a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061a8:	695b      	ldr	r3, [r3, #20]
 80061aa:	431a      	orrs	r2, r3
 80061ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061b0:	69db      	ldr	r3, [r3, #28]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80061b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80061c4:	f021 010c 	bic.w	r1, r1, #12
 80061c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80061d2:	430b      	orrs	r3, r1
 80061d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80061d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80061e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061e6:	6999      	ldr	r1, [r3, #24]
 80061e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	ea40 0301 	orr.w	r3, r0, r1
 80061f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80061f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	4b8f      	ldr	r3, [pc, #572]	@ (8006438 <UART_SetConfig+0x2cc>)
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d005      	beq.n	800620c <UART_SetConfig+0xa0>
 8006200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	4b8d      	ldr	r3, [pc, #564]	@ (800643c <UART_SetConfig+0x2d0>)
 8006208:	429a      	cmp	r2, r3
 800620a:	d104      	bne.n	8006216 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800620c:	f7fd fde8 	bl	8003de0 <HAL_RCC_GetPCLK2Freq>
 8006210:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006214:	e003      	b.n	800621e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006216:	f7fd fdcf 	bl	8003db8 <HAL_RCC_GetPCLK1Freq>
 800621a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800621e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006222:	69db      	ldr	r3, [r3, #28]
 8006224:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006228:	f040 810c 	bne.w	8006444 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800622c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006230:	2200      	movs	r2, #0
 8006232:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006236:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800623a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800623e:	4622      	mov	r2, r4
 8006240:	462b      	mov	r3, r5
 8006242:	1891      	adds	r1, r2, r2
 8006244:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006246:	415b      	adcs	r3, r3
 8006248:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800624a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800624e:	4621      	mov	r1, r4
 8006250:	eb12 0801 	adds.w	r8, r2, r1
 8006254:	4629      	mov	r1, r5
 8006256:	eb43 0901 	adc.w	r9, r3, r1
 800625a:	f04f 0200 	mov.w	r2, #0
 800625e:	f04f 0300 	mov.w	r3, #0
 8006262:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006266:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800626a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800626e:	4690      	mov	r8, r2
 8006270:	4699      	mov	r9, r3
 8006272:	4623      	mov	r3, r4
 8006274:	eb18 0303 	adds.w	r3, r8, r3
 8006278:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800627c:	462b      	mov	r3, r5
 800627e:	eb49 0303 	adc.w	r3, r9, r3
 8006282:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006292:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006296:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800629a:	460b      	mov	r3, r1
 800629c:	18db      	adds	r3, r3, r3
 800629e:	653b      	str	r3, [r7, #80]	@ 0x50
 80062a0:	4613      	mov	r3, r2
 80062a2:	eb42 0303 	adc.w	r3, r2, r3
 80062a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80062a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80062ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80062b0:	f7fa fd0a 	bl	8000cc8 <__aeabi_uldivmod>
 80062b4:	4602      	mov	r2, r0
 80062b6:	460b      	mov	r3, r1
 80062b8:	4b61      	ldr	r3, [pc, #388]	@ (8006440 <UART_SetConfig+0x2d4>)
 80062ba:	fba3 2302 	umull	r2, r3, r3, r2
 80062be:	095b      	lsrs	r3, r3, #5
 80062c0:	011c      	lsls	r4, r3, #4
 80062c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062c6:	2200      	movs	r2, #0
 80062c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80062cc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80062d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80062d4:	4642      	mov	r2, r8
 80062d6:	464b      	mov	r3, r9
 80062d8:	1891      	adds	r1, r2, r2
 80062da:	64b9      	str	r1, [r7, #72]	@ 0x48
 80062dc:	415b      	adcs	r3, r3
 80062de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80062e4:	4641      	mov	r1, r8
 80062e6:	eb12 0a01 	adds.w	sl, r2, r1
 80062ea:	4649      	mov	r1, r9
 80062ec:	eb43 0b01 	adc.w	fp, r3, r1
 80062f0:	f04f 0200 	mov.w	r2, #0
 80062f4:	f04f 0300 	mov.w	r3, #0
 80062f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80062fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006300:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006304:	4692      	mov	sl, r2
 8006306:	469b      	mov	fp, r3
 8006308:	4643      	mov	r3, r8
 800630a:	eb1a 0303 	adds.w	r3, sl, r3
 800630e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006312:	464b      	mov	r3, r9
 8006314:	eb4b 0303 	adc.w	r3, fp, r3
 8006318:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800631c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006328:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800632c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006330:	460b      	mov	r3, r1
 8006332:	18db      	adds	r3, r3, r3
 8006334:	643b      	str	r3, [r7, #64]	@ 0x40
 8006336:	4613      	mov	r3, r2
 8006338:	eb42 0303 	adc.w	r3, r2, r3
 800633c:	647b      	str	r3, [r7, #68]	@ 0x44
 800633e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006342:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006346:	f7fa fcbf 	bl	8000cc8 <__aeabi_uldivmod>
 800634a:	4602      	mov	r2, r0
 800634c:	460b      	mov	r3, r1
 800634e:	4611      	mov	r1, r2
 8006350:	4b3b      	ldr	r3, [pc, #236]	@ (8006440 <UART_SetConfig+0x2d4>)
 8006352:	fba3 2301 	umull	r2, r3, r3, r1
 8006356:	095b      	lsrs	r3, r3, #5
 8006358:	2264      	movs	r2, #100	@ 0x64
 800635a:	fb02 f303 	mul.w	r3, r2, r3
 800635e:	1acb      	subs	r3, r1, r3
 8006360:	00db      	lsls	r3, r3, #3
 8006362:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006366:	4b36      	ldr	r3, [pc, #216]	@ (8006440 <UART_SetConfig+0x2d4>)
 8006368:	fba3 2302 	umull	r2, r3, r3, r2
 800636c:	095b      	lsrs	r3, r3, #5
 800636e:	005b      	lsls	r3, r3, #1
 8006370:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006374:	441c      	add	r4, r3
 8006376:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800637a:	2200      	movs	r2, #0
 800637c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006380:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006384:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006388:	4642      	mov	r2, r8
 800638a:	464b      	mov	r3, r9
 800638c:	1891      	adds	r1, r2, r2
 800638e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006390:	415b      	adcs	r3, r3
 8006392:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006394:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006398:	4641      	mov	r1, r8
 800639a:	1851      	adds	r1, r2, r1
 800639c:	6339      	str	r1, [r7, #48]	@ 0x30
 800639e:	4649      	mov	r1, r9
 80063a0:	414b      	adcs	r3, r1
 80063a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80063a4:	f04f 0200 	mov.w	r2, #0
 80063a8:	f04f 0300 	mov.w	r3, #0
 80063ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80063b0:	4659      	mov	r1, fp
 80063b2:	00cb      	lsls	r3, r1, #3
 80063b4:	4651      	mov	r1, sl
 80063b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063ba:	4651      	mov	r1, sl
 80063bc:	00ca      	lsls	r2, r1, #3
 80063be:	4610      	mov	r0, r2
 80063c0:	4619      	mov	r1, r3
 80063c2:	4603      	mov	r3, r0
 80063c4:	4642      	mov	r2, r8
 80063c6:	189b      	adds	r3, r3, r2
 80063c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80063cc:	464b      	mov	r3, r9
 80063ce:	460a      	mov	r2, r1
 80063d0:	eb42 0303 	adc.w	r3, r2, r3
 80063d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80063d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80063e4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80063e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80063ec:	460b      	mov	r3, r1
 80063ee:	18db      	adds	r3, r3, r3
 80063f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063f2:	4613      	mov	r3, r2
 80063f4:	eb42 0303 	adc.w	r3, r2, r3
 80063f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80063fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006402:	f7fa fc61 	bl	8000cc8 <__aeabi_uldivmod>
 8006406:	4602      	mov	r2, r0
 8006408:	460b      	mov	r3, r1
 800640a:	4b0d      	ldr	r3, [pc, #52]	@ (8006440 <UART_SetConfig+0x2d4>)
 800640c:	fba3 1302 	umull	r1, r3, r3, r2
 8006410:	095b      	lsrs	r3, r3, #5
 8006412:	2164      	movs	r1, #100	@ 0x64
 8006414:	fb01 f303 	mul.w	r3, r1, r3
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	00db      	lsls	r3, r3, #3
 800641c:	3332      	adds	r3, #50	@ 0x32
 800641e:	4a08      	ldr	r2, [pc, #32]	@ (8006440 <UART_SetConfig+0x2d4>)
 8006420:	fba2 2303 	umull	r2, r3, r2, r3
 8006424:	095b      	lsrs	r3, r3, #5
 8006426:	f003 0207 	and.w	r2, r3, #7
 800642a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4422      	add	r2, r4
 8006432:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006434:	e106      	b.n	8006644 <UART_SetConfig+0x4d8>
 8006436:	bf00      	nop
 8006438:	40011000 	.word	0x40011000
 800643c:	40011400 	.word	0x40011400
 8006440:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006444:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006448:	2200      	movs	r2, #0
 800644a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800644e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006452:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006456:	4642      	mov	r2, r8
 8006458:	464b      	mov	r3, r9
 800645a:	1891      	adds	r1, r2, r2
 800645c:	6239      	str	r1, [r7, #32]
 800645e:	415b      	adcs	r3, r3
 8006460:	627b      	str	r3, [r7, #36]	@ 0x24
 8006462:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006466:	4641      	mov	r1, r8
 8006468:	1854      	adds	r4, r2, r1
 800646a:	4649      	mov	r1, r9
 800646c:	eb43 0501 	adc.w	r5, r3, r1
 8006470:	f04f 0200 	mov.w	r2, #0
 8006474:	f04f 0300 	mov.w	r3, #0
 8006478:	00eb      	lsls	r3, r5, #3
 800647a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800647e:	00e2      	lsls	r2, r4, #3
 8006480:	4614      	mov	r4, r2
 8006482:	461d      	mov	r5, r3
 8006484:	4643      	mov	r3, r8
 8006486:	18e3      	adds	r3, r4, r3
 8006488:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800648c:	464b      	mov	r3, r9
 800648e:	eb45 0303 	adc.w	r3, r5, r3
 8006492:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80064a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80064a6:	f04f 0200 	mov.w	r2, #0
 80064aa:	f04f 0300 	mov.w	r3, #0
 80064ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80064b2:	4629      	mov	r1, r5
 80064b4:	008b      	lsls	r3, r1, #2
 80064b6:	4621      	mov	r1, r4
 80064b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064bc:	4621      	mov	r1, r4
 80064be:	008a      	lsls	r2, r1, #2
 80064c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80064c4:	f7fa fc00 	bl	8000cc8 <__aeabi_uldivmod>
 80064c8:	4602      	mov	r2, r0
 80064ca:	460b      	mov	r3, r1
 80064cc:	4b60      	ldr	r3, [pc, #384]	@ (8006650 <UART_SetConfig+0x4e4>)
 80064ce:	fba3 2302 	umull	r2, r3, r3, r2
 80064d2:	095b      	lsrs	r3, r3, #5
 80064d4:	011c      	lsls	r4, r3, #4
 80064d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064da:	2200      	movs	r2, #0
 80064dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80064e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80064e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80064e8:	4642      	mov	r2, r8
 80064ea:	464b      	mov	r3, r9
 80064ec:	1891      	adds	r1, r2, r2
 80064ee:	61b9      	str	r1, [r7, #24]
 80064f0:	415b      	adcs	r3, r3
 80064f2:	61fb      	str	r3, [r7, #28]
 80064f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064f8:	4641      	mov	r1, r8
 80064fa:	1851      	adds	r1, r2, r1
 80064fc:	6139      	str	r1, [r7, #16]
 80064fe:	4649      	mov	r1, r9
 8006500:	414b      	adcs	r3, r1
 8006502:	617b      	str	r3, [r7, #20]
 8006504:	f04f 0200 	mov.w	r2, #0
 8006508:	f04f 0300 	mov.w	r3, #0
 800650c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006510:	4659      	mov	r1, fp
 8006512:	00cb      	lsls	r3, r1, #3
 8006514:	4651      	mov	r1, sl
 8006516:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800651a:	4651      	mov	r1, sl
 800651c:	00ca      	lsls	r2, r1, #3
 800651e:	4610      	mov	r0, r2
 8006520:	4619      	mov	r1, r3
 8006522:	4603      	mov	r3, r0
 8006524:	4642      	mov	r2, r8
 8006526:	189b      	adds	r3, r3, r2
 8006528:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800652c:	464b      	mov	r3, r9
 800652e:	460a      	mov	r2, r1
 8006530:	eb42 0303 	adc.w	r3, r2, r3
 8006534:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006542:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006544:	f04f 0200 	mov.w	r2, #0
 8006548:	f04f 0300 	mov.w	r3, #0
 800654c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006550:	4649      	mov	r1, r9
 8006552:	008b      	lsls	r3, r1, #2
 8006554:	4641      	mov	r1, r8
 8006556:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800655a:	4641      	mov	r1, r8
 800655c:	008a      	lsls	r2, r1, #2
 800655e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006562:	f7fa fbb1 	bl	8000cc8 <__aeabi_uldivmod>
 8006566:	4602      	mov	r2, r0
 8006568:	460b      	mov	r3, r1
 800656a:	4611      	mov	r1, r2
 800656c:	4b38      	ldr	r3, [pc, #224]	@ (8006650 <UART_SetConfig+0x4e4>)
 800656e:	fba3 2301 	umull	r2, r3, r3, r1
 8006572:	095b      	lsrs	r3, r3, #5
 8006574:	2264      	movs	r2, #100	@ 0x64
 8006576:	fb02 f303 	mul.w	r3, r2, r3
 800657a:	1acb      	subs	r3, r1, r3
 800657c:	011b      	lsls	r3, r3, #4
 800657e:	3332      	adds	r3, #50	@ 0x32
 8006580:	4a33      	ldr	r2, [pc, #204]	@ (8006650 <UART_SetConfig+0x4e4>)
 8006582:	fba2 2303 	umull	r2, r3, r2, r3
 8006586:	095b      	lsrs	r3, r3, #5
 8006588:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800658c:	441c      	add	r4, r3
 800658e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006592:	2200      	movs	r2, #0
 8006594:	673b      	str	r3, [r7, #112]	@ 0x70
 8006596:	677a      	str	r2, [r7, #116]	@ 0x74
 8006598:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800659c:	4642      	mov	r2, r8
 800659e:	464b      	mov	r3, r9
 80065a0:	1891      	adds	r1, r2, r2
 80065a2:	60b9      	str	r1, [r7, #8]
 80065a4:	415b      	adcs	r3, r3
 80065a6:	60fb      	str	r3, [r7, #12]
 80065a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80065ac:	4641      	mov	r1, r8
 80065ae:	1851      	adds	r1, r2, r1
 80065b0:	6039      	str	r1, [r7, #0]
 80065b2:	4649      	mov	r1, r9
 80065b4:	414b      	adcs	r3, r1
 80065b6:	607b      	str	r3, [r7, #4]
 80065b8:	f04f 0200 	mov.w	r2, #0
 80065bc:	f04f 0300 	mov.w	r3, #0
 80065c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80065c4:	4659      	mov	r1, fp
 80065c6:	00cb      	lsls	r3, r1, #3
 80065c8:	4651      	mov	r1, sl
 80065ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065ce:	4651      	mov	r1, sl
 80065d0:	00ca      	lsls	r2, r1, #3
 80065d2:	4610      	mov	r0, r2
 80065d4:	4619      	mov	r1, r3
 80065d6:	4603      	mov	r3, r0
 80065d8:	4642      	mov	r2, r8
 80065da:	189b      	adds	r3, r3, r2
 80065dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80065de:	464b      	mov	r3, r9
 80065e0:	460a      	mov	r2, r1
 80065e2:	eb42 0303 	adc.w	r3, r2, r3
 80065e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80065e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80065f2:	667a      	str	r2, [r7, #100]	@ 0x64
 80065f4:	f04f 0200 	mov.w	r2, #0
 80065f8:	f04f 0300 	mov.w	r3, #0
 80065fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006600:	4649      	mov	r1, r9
 8006602:	008b      	lsls	r3, r1, #2
 8006604:	4641      	mov	r1, r8
 8006606:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800660a:	4641      	mov	r1, r8
 800660c:	008a      	lsls	r2, r1, #2
 800660e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006612:	f7fa fb59 	bl	8000cc8 <__aeabi_uldivmod>
 8006616:	4602      	mov	r2, r0
 8006618:	460b      	mov	r3, r1
 800661a:	4b0d      	ldr	r3, [pc, #52]	@ (8006650 <UART_SetConfig+0x4e4>)
 800661c:	fba3 1302 	umull	r1, r3, r3, r2
 8006620:	095b      	lsrs	r3, r3, #5
 8006622:	2164      	movs	r1, #100	@ 0x64
 8006624:	fb01 f303 	mul.w	r3, r1, r3
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	011b      	lsls	r3, r3, #4
 800662c:	3332      	adds	r3, #50	@ 0x32
 800662e:	4a08      	ldr	r2, [pc, #32]	@ (8006650 <UART_SetConfig+0x4e4>)
 8006630:	fba2 2303 	umull	r2, r3, r2, r3
 8006634:	095b      	lsrs	r3, r3, #5
 8006636:	f003 020f 	and.w	r2, r3, #15
 800663a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4422      	add	r2, r4
 8006642:	609a      	str	r2, [r3, #8]
}
 8006644:	bf00      	nop
 8006646:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800664a:	46bd      	mov	sp, r7
 800664c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006650:	51eb851f 	.word	0x51eb851f

08006654 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006654:	b480      	push	{r7}
 8006656:	b085      	sub	sp, #20
 8006658:	af00      	add	r7, sp, #0
 800665a:	4603      	mov	r3, r0
 800665c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800665e:	2300      	movs	r3, #0
 8006660:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006662:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006666:	2b84      	cmp	r3, #132	@ 0x84
 8006668:	d005      	beq.n	8006676 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800666a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	4413      	add	r3, r2
 8006672:	3303      	adds	r3, #3
 8006674:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006676:	68fb      	ldr	r3, [r7, #12]
}
 8006678:	4618      	mov	r0, r3
 800667a:	3714      	adds	r7, #20
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006688:	f000 ffe4 	bl	8007654 <vTaskStartScheduler>
  
  return osOK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	bd80      	pop	{r7, pc}

08006692 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006692:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006694:	b089      	sub	sp, #36	@ 0x24
 8006696:	af04      	add	r7, sp, #16
 8006698:	6078      	str	r0, [r7, #4]
 800669a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	695b      	ldr	r3, [r3, #20]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d020      	beq.n	80066e6 <osThreadCreate+0x54>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	699b      	ldr	r3, [r3, #24]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d01c      	beq.n	80066e6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685c      	ldr	r4, [r3, #4]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	691e      	ldr	r6, [r3, #16]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80066be:	4618      	mov	r0, r3
 80066c0:	f7ff ffc8 	bl	8006654 <makeFreeRtosPriority>
 80066c4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	695b      	ldr	r3, [r3, #20]
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80066ce:	9202      	str	r2, [sp, #8]
 80066d0:	9301      	str	r3, [sp, #4]
 80066d2:	9100      	str	r1, [sp, #0]
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	4632      	mov	r2, r6
 80066d8:	4629      	mov	r1, r5
 80066da:	4620      	mov	r0, r4
 80066dc:	f000 fdec 	bl	80072b8 <xTaskCreateStatic>
 80066e0:	4603      	mov	r3, r0
 80066e2:	60fb      	str	r3, [r7, #12]
 80066e4:	e01c      	b.n	8006720 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	685c      	ldr	r4, [r3, #4]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80066f2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80066fa:	4618      	mov	r0, r3
 80066fc:	f7ff ffaa 	bl	8006654 <makeFreeRtosPriority>
 8006700:	4602      	mov	r2, r0
 8006702:	f107 030c 	add.w	r3, r7, #12
 8006706:	9301      	str	r3, [sp, #4]
 8006708:	9200      	str	r2, [sp, #0]
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	4632      	mov	r2, r6
 800670e:	4629      	mov	r1, r5
 8006710:	4620      	mov	r0, r4
 8006712:	f000 fe31 	bl	8007378 <xTaskCreate>
 8006716:	4603      	mov	r3, r0
 8006718:	2b01      	cmp	r3, #1
 800671a:	d001      	beq.n	8006720 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800671c:	2300      	movs	r3, #0
 800671e:	e000      	b.n	8006722 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006720:	68fb      	ldr	r3, [r7, #12]
}
 8006722:	4618      	mov	r0, r3
 8006724:	3714      	adds	r7, #20
 8006726:	46bd      	mov	sp, r7
 8006728:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800672a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800672a:	b480      	push	{r7}
 800672c:	b083      	sub	sp, #12
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f103 0208 	add.w	r2, r3, #8
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f04f 32ff 	mov.w	r2, #4294967295
 8006742:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f103 0208 	add.w	r2, r3, #8
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f103 0208 	add.w	r2, r3, #8
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800675e:	bf00      	nop
 8006760:	370c      	adds	r7, #12
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr

0800676a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800676a:	b480      	push	{r7}
 800676c:	b083      	sub	sp, #12
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006778:	bf00      	nop
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006784:	b480      	push	{r7}
 8006786:	b085      	sub	sp, #20
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	689a      	ldr	r2, [r3, #8]
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	683a      	ldr	r2, [r7, #0]
 80067a8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	683a      	ldr	r2, [r7, #0]
 80067ae:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	1c5a      	adds	r2, r3, #1
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	601a      	str	r2, [r3, #0]
}
 80067c0:	bf00      	nop
 80067c2:	3714      	adds	r7, #20
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e2:	d103      	bne.n	80067ec <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	60fb      	str	r3, [r7, #12]
 80067ea:	e00c      	b.n	8006806 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	3308      	adds	r3, #8
 80067f0:	60fb      	str	r3, [r7, #12]
 80067f2:	e002      	b.n	80067fa <vListInsert+0x2e>
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	60fb      	str	r3, [r7, #12]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68ba      	ldr	r2, [r7, #8]
 8006802:	429a      	cmp	r2, r3
 8006804:	d2f6      	bcs.n	80067f4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	685a      	ldr	r2, [r3, #4]
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	683a      	ldr	r2, [r7, #0]
 8006814:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	683a      	ldr	r2, [r7, #0]
 8006820:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	1c5a      	adds	r2, r3, #1
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	601a      	str	r2, [r3, #0]
}
 8006832:	bf00      	nop
 8006834:	3714      	adds	r7, #20
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr

0800683e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800683e:	b480      	push	{r7}
 8006840:	b085      	sub	sp, #20
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	6892      	ldr	r2, [r2, #8]
 8006854:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	6852      	ldr	r2, [r2, #4]
 800685e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	429a      	cmp	r2, r3
 8006868:	d103      	bne.n	8006872 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	689a      	ldr	r2, [r3, #8]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	1e5a      	subs	r2, r3, #1
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
}
 8006886:	4618      	mov	r0, r3
 8006888:	3714      	adds	r7, #20
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
	...

08006894 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d10b      	bne.n	80068c0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80068a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ac:	f383 8811 	msr	BASEPRI, r3
 80068b0:	f3bf 8f6f 	isb	sy
 80068b4:	f3bf 8f4f 	dsb	sy
 80068b8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80068ba:	bf00      	nop
 80068bc:	bf00      	nop
 80068be:	e7fd      	b.n	80068bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80068c0:	f001 fe3a 	bl	8008538 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068cc:	68f9      	ldr	r1, [r7, #12]
 80068ce:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80068d0:	fb01 f303 	mul.w	r3, r1, r3
 80068d4:	441a      	add	r2, r3
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2200      	movs	r2, #0
 80068de:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068f0:	3b01      	subs	r3, #1
 80068f2:	68f9      	ldr	r1, [r7, #12]
 80068f4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80068f6:	fb01 f303 	mul.w	r3, r1, r3
 80068fa:	441a      	add	r2, r3
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	22ff      	movs	r2, #255	@ 0xff
 8006904:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	22ff      	movs	r2, #255	@ 0xff
 800690c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d114      	bne.n	8006940 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d01a      	beq.n	8006954 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	3310      	adds	r3, #16
 8006922:	4618      	mov	r0, r3
 8006924:	f001 f8f0 	bl	8007b08 <xTaskRemoveFromEventList>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d012      	beq.n	8006954 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800692e:	4b0d      	ldr	r3, [pc, #52]	@ (8006964 <xQueueGenericReset+0xd0>)
 8006930:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006934:	601a      	str	r2, [r3, #0]
 8006936:	f3bf 8f4f 	dsb	sy
 800693a:	f3bf 8f6f 	isb	sy
 800693e:	e009      	b.n	8006954 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	3310      	adds	r3, #16
 8006944:	4618      	mov	r0, r3
 8006946:	f7ff fef0 	bl	800672a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	3324      	adds	r3, #36	@ 0x24
 800694e:	4618      	mov	r0, r3
 8006950:	f7ff feeb 	bl	800672a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006954:	f001 fe22 	bl	800859c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006958:	2301      	movs	r3, #1
}
 800695a:	4618      	mov	r0, r3
 800695c:	3710      	adds	r7, #16
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	e000ed04 	.word	0xe000ed04

08006968 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006968:	b580      	push	{r7, lr}
 800696a:	b08a      	sub	sp, #40	@ 0x28
 800696c:	af02      	add	r7, sp, #8
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	4613      	mov	r3, r2
 8006974:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d10b      	bne.n	8006994 <xQueueGenericCreate+0x2c>
	__asm volatile
 800697c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006980:	f383 8811 	msr	BASEPRI, r3
 8006984:	f3bf 8f6f 	isb	sy
 8006988:	f3bf 8f4f 	dsb	sy
 800698c:	613b      	str	r3, [r7, #16]
}
 800698e:	bf00      	nop
 8006990:	bf00      	nop
 8006992:	e7fd      	b.n	8006990 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	fb02 f303 	mul.w	r3, r2, r3
 800699c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	3348      	adds	r3, #72	@ 0x48
 80069a2:	4618      	mov	r0, r3
 80069a4:	f001 fea8 	bl	80086f8 <pvPortMalloc>
 80069a8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d011      	beq.n	80069d4 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	3348      	adds	r3, #72	@ 0x48
 80069b8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80069c2:	79fa      	ldrb	r2, [r7, #7]
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	9300      	str	r3, [sp, #0]
 80069c8:	4613      	mov	r3, r2
 80069ca:	697a      	ldr	r2, [r7, #20]
 80069cc:	68b9      	ldr	r1, [r7, #8]
 80069ce:	68f8      	ldr	r0, [r7, #12]
 80069d0:	f000 f805 	bl	80069de <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80069d4:	69bb      	ldr	r3, [r7, #24]
	}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3720      	adds	r7, #32
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80069de:	b580      	push	{r7, lr}
 80069e0:	b084      	sub	sp, #16
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	60f8      	str	r0, [r7, #12]
 80069e6:	60b9      	str	r1, [r7, #8]
 80069e8:	607a      	str	r2, [r7, #4]
 80069ea:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d103      	bne.n	80069fa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	69ba      	ldr	r2, [r7, #24]
 80069f6:	601a      	str	r2, [r3, #0]
 80069f8:	e002      	b.n	8006a00 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	68ba      	ldr	r2, [r7, #8]
 8006a0a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006a0c:	2101      	movs	r1, #1
 8006a0e:	69b8      	ldr	r0, [r7, #24]
 8006a10:	f7ff ff40 	bl	8006894 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006a14:	bf00      	nop
 8006a16:	3710      	adds	r7, #16
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d00e      	beq.n	8006a48 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	2200      	movs	r2, #0
 8006a40:	2100      	movs	r1, #0
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 f81c 	bl	8006a80 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006a48:	bf00      	nop
 8006a4a:	3708      	adds	r7, #8
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b086      	sub	sp, #24
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	4603      	mov	r3, r0
 8006a58:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	617b      	str	r3, [r7, #20]
 8006a5e:	2300      	movs	r3, #0
 8006a60:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006a62:	79fb      	ldrb	r3, [r7, #7]
 8006a64:	461a      	mov	r2, r3
 8006a66:	6939      	ldr	r1, [r7, #16]
 8006a68:	6978      	ldr	r0, [r7, #20]
 8006a6a:	f7ff ff7d 	bl	8006968 <xQueueGenericCreate>
 8006a6e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006a70:	68f8      	ldr	r0, [r7, #12]
 8006a72:	f7ff ffd3 	bl	8006a1c <prvInitialiseMutex>

		return xNewQueue;
 8006a76:	68fb      	ldr	r3, [r7, #12]
	}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3718      	adds	r7, #24
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b08e      	sub	sp, #56	@ 0x38
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
 8006a8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10b      	bne.n	8006ab4 <xQueueGenericSend+0x34>
	__asm volatile
 8006a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aa0:	f383 8811 	msr	BASEPRI, r3
 8006aa4:	f3bf 8f6f 	isb	sy
 8006aa8:	f3bf 8f4f 	dsb	sy
 8006aac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006aae:	bf00      	nop
 8006ab0:	bf00      	nop
 8006ab2:	e7fd      	b.n	8006ab0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d103      	bne.n	8006ac2 <xQueueGenericSend+0x42>
 8006aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d101      	bne.n	8006ac6 <xQueueGenericSend+0x46>
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e000      	b.n	8006ac8 <xQueueGenericSend+0x48>
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d10b      	bne.n	8006ae4 <xQueueGenericSend+0x64>
	__asm volatile
 8006acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ad0:	f383 8811 	msr	BASEPRI, r3
 8006ad4:	f3bf 8f6f 	isb	sy
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006ade:	bf00      	nop
 8006ae0:	bf00      	nop
 8006ae2:	e7fd      	b.n	8006ae0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d103      	bne.n	8006af2 <xQueueGenericSend+0x72>
 8006aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d101      	bne.n	8006af6 <xQueueGenericSend+0x76>
 8006af2:	2301      	movs	r3, #1
 8006af4:	e000      	b.n	8006af8 <xQueueGenericSend+0x78>
 8006af6:	2300      	movs	r3, #0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d10b      	bne.n	8006b14 <xQueueGenericSend+0x94>
	__asm volatile
 8006afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b00:	f383 8811 	msr	BASEPRI, r3
 8006b04:	f3bf 8f6f 	isb	sy
 8006b08:	f3bf 8f4f 	dsb	sy
 8006b0c:	623b      	str	r3, [r7, #32]
}
 8006b0e:	bf00      	nop
 8006b10:	bf00      	nop
 8006b12:	e7fd      	b.n	8006b10 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b14:	f001 f9b8 	bl	8007e88 <xTaskGetSchedulerState>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d102      	bne.n	8006b24 <xQueueGenericSend+0xa4>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d101      	bne.n	8006b28 <xQueueGenericSend+0xa8>
 8006b24:	2301      	movs	r3, #1
 8006b26:	e000      	b.n	8006b2a <xQueueGenericSend+0xaa>
 8006b28:	2300      	movs	r3, #0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d10b      	bne.n	8006b46 <xQueueGenericSend+0xc6>
	__asm volatile
 8006b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b32:	f383 8811 	msr	BASEPRI, r3
 8006b36:	f3bf 8f6f 	isb	sy
 8006b3a:	f3bf 8f4f 	dsb	sy
 8006b3e:	61fb      	str	r3, [r7, #28]
}
 8006b40:	bf00      	nop
 8006b42:	bf00      	nop
 8006b44:	e7fd      	b.n	8006b42 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b46:	f001 fcf7 	bl	8008538 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d302      	bcc.n	8006b5c <xQueueGenericSend+0xdc>
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d129      	bne.n	8006bb0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b5c:	683a      	ldr	r2, [r7, #0]
 8006b5e:	68b9      	ldr	r1, [r7, #8]
 8006b60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006b62:	f000 fa99 	bl	8007098 <prvCopyDataToQueue>
 8006b66:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d010      	beq.n	8006b92 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b72:	3324      	adds	r3, #36	@ 0x24
 8006b74:	4618      	mov	r0, r3
 8006b76:	f000 ffc7 	bl	8007b08 <xTaskRemoveFromEventList>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d013      	beq.n	8006ba8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006b80:	4b3f      	ldr	r3, [pc, #252]	@ (8006c80 <xQueueGenericSend+0x200>)
 8006b82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b86:	601a      	str	r2, [r3, #0]
 8006b88:	f3bf 8f4f 	dsb	sy
 8006b8c:	f3bf 8f6f 	isb	sy
 8006b90:	e00a      	b.n	8006ba8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d007      	beq.n	8006ba8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006b98:	4b39      	ldr	r3, [pc, #228]	@ (8006c80 <xQueueGenericSend+0x200>)
 8006b9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b9e:	601a      	str	r2, [r3, #0]
 8006ba0:	f3bf 8f4f 	dsb	sy
 8006ba4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006ba8:	f001 fcf8 	bl	800859c <vPortExitCritical>
				return pdPASS;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e063      	b.n	8006c78 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d103      	bne.n	8006bbe <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006bb6:	f001 fcf1 	bl	800859c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	e05c      	b.n	8006c78 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006bbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d106      	bne.n	8006bd2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006bc4:	f107 0314 	add.w	r3, r7, #20
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f001 f801 	bl	8007bd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006bd2:	f001 fce3 	bl	800859c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006bd6:	f000 fd9f 	bl	8007718 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006bda:	f001 fcad 	bl	8008538 <vPortEnterCritical>
 8006bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006be4:	b25b      	sxtb	r3, r3
 8006be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bea:	d103      	bne.n	8006bf4 <xQueueGenericSend+0x174>
 8006bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006bfa:	b25b      	sxtb	r3, r3
 8006bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c00:	d103      	bne.n	8006c0a <xQueueGenericSend+0x18a>
 8006c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c0a:	f001 fcc7 	bl	800859c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c0e:	1d3a      	adds	r2, r7, #4
 8006c10:	f107 0314 	add.w	r3, r7, #20
 8006c14:	4611      	mov	r1, r2
 8006c16:	4618      	mov	r0, r3
 8006c18:	f000 fff0 	bl	8007bfc <xTaskCheckForTimeOut>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d124      	bne.n	8006c6c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006c22:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c24:	f000 fb30 	bl	8007288 <prvIsQueueFull>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d018      	beq.n	8006c60 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c30:	3310      	adds	r3, #16
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	4611      	mov	r1, r2
 8006c36:	4618      	mov	r0, r3
 8006c38:	f000 ff40 	bl	8007abc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006c3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c3e:	f000 fabb 	bl	80071b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006c42:	f000 fd77 	bl	8007734 <xTaskResumeAll>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f47f af7c 	bne.w	8006b46 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8006c80 <xQueueGenericSend+0x200>)
 8006c50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c54:	601a      	str	r2, [r3, #0]
 8006c56:	f3bf 8f4f 	dsb	sy
 8006c5a:	f3bf 8f6f 	isb	sy
 8006c5e:	e772      	b.n	8006b46 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006c60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c62:	f000 faa9 	bl	80071b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c66:	f000 fd65 	bl	8007734 <xTaskResumeAll>
 8006c6a:	e76c      	b.n	8006b46 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006c6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c6e:	f000 faa3 	bl	80071b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c72:	f000 fd5f 	bl	8007734 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006c76:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3738      	adds	r7, #56	@ 0x38
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	e000ed04 	.word	0xe000ed04

08006c84 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b08c      	sub	sp, #48	@ 0x30
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006c90:	2300      	movs	r3, #0
 8006c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d10b      	bne.n	8006cb6 <xQueueReceive+0x32>
	__asm volatile
 8006c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ca2:	f383 8811 	msr	BASEPRI, r3
 8006ca6:	f3bf 8f6f 	isb	sy
 8006caa:	f3bf 8f4f 	dsb	sy
 8006cae:	623b      	str	r3, [r7, #32]
}
 8006cb0:	bf00      	nop
 8006cb2:	bf00      	nop
 8006cb4:	e7fd      	b.n	8006cb2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d103      	bne.n	8006cc4 <xQueueReceive+0x40>
 8006cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d101      	bne.n	8006cc8 <xQueueReceive+0x44>
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e000      	b.n	8006cca <xQueueReceive+0x46>
 8006cc8:	2300      	movs	r3, #0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d10b      	bne.n	8006ce6 <xQueueReceive+0x62>
	__asm volatile
 8006cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cd2:	f383 8811 	msr	BASEPRI, r3
 8006cd6:	f3bf 8f6f 	isb	sy
 8006cda:	f3bf 8f4f 	dsb	sy
 8006cde:	61fb      	str	r3, [r7, #28]
}
 8006ce0:	bf00      	nop
 8006ce2:	bf00      	nop
 8006ce4:	e7fd      	b.n	8006ce2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ce6:	f001 f8cf 	bl	8007e88 <xTaskGetSchedulerState>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d102      	bne.n	8006cf6 <xQueueReceive+0x72>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d101      	bne.n	8006cfa <xQueueReceive+0x76>
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e000      	b.n	8006cfc <xQueueReceive+0x78>
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d10b      	bne.n	8006d18 <xQueueReceive+0x94>
	__asm volatile
 8006d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d04:	f383 8811 	msr	BASEPRI, r3
 8006d08:	f3bf 8f6f 	isb	sy
 8006d0c:	f3bf 8f4f 	dsb	sy
 8006d10:	61bb      	str	r3, [r7, #24]
}
 8006d12:	bf00      	nop
 8006d14:	bf00      	nop
 8006d16:	e7fd      	b.n	8006d14 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d18:	f001 fc0e 	bl	8008538 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d20:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d01f      	beq.n	8006d68 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006d28:	68b9      	ldr	r1, [r7, #8]
 8006d2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d2c:	f000 fa1e 	bl	800716c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d32:	1e5a      	subs	r2, r3, #1
 8006d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d36:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00f      	beq.n	8006d60 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d42:	3310      	adds	r3, #16
 8006d44:	4618      	mov	r0, r3
 8006d46:	f000 fedf 	bl	8007b08 <xTaskRemoveFromEventList>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d007      	beq.n	8006d60 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006d50:	4b3c      	ldr	r3, [pc, #240]	@ (8006e44 <xQueueReceive+0x1c0>)
 8006d52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d56:	601a      	str	r2, [r3, #0]
 8006d58:	f3bf 8f4f 	dsb	sy
 8006d5c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006d60:	f001 fc1c 	bl	800859c <vPortExitCritical>
				return pdPASS;
 8006d64:	2301      	movs	r3, #1
 8006d66:	e069      	b.n	8006e3c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d103      	bne.n	8006d76 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d6e:	f001 fc15 	bl	800859c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006d72:	2300      	movs	r3, #0
 8006d74:	e062      	b.n	8006e3c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d106      	bne.n	8006d8a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d7c:	f107 0310 	add.w	r3, r7, #16
 8006d80:	4618      	mov	r0, r3
 8006d82:	f000 ff25 	bl	8007bd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d86:	2301      	movs	r3, #1
 8006d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d8a:	f001 fc07 	bl	800859c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d8e:	f000 fcc3 	bl	8007718 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d92:	f001 fbd1 	bl	8008538 <vPortEnterCritical>
 8006d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006d9c:	b25b      	sxtb	r3, r3
 8006d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da2:	d103      	bne.n	8006dac <xQueueReceive+0x128>
 8006da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006da6:	2200      	movs	r2, #0
 8006da8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006db2:	b25b      	sxtb	r3, r3
 8006db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db8:	d103      	bne.n	8006dc2 <xQueueReceive+0x13e>
 8006dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006dc2:	f001 fbeb 	bl	800859c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006dc6:	1d3a      	adds	r2, r7, #4
 8006dc8:	f107 0310 	add.w	r3, r7, #16
 8006dcc:	4611      	mov	r1, r2
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f000 ff14 	bl	8007bfc <xTaskCheckForTimeOut>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d123      	bne.n	8006e22 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006dda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ddc:	f000 fa3e 	bl	800725c <prvIsQueueEmpty>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d017      	beq.n	8006e16 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006de8:	3324      	adds	r3, #36	@ 0x24
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	4611      	mov	r1, r2
 8006dee:	4618      	mov	r0, r3
 8006df0:	f000 fe64 	bl	8007abc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006df4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006df6:	f000 f9df 	bl	80071b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006dfa:	f000 fc9b 	bl	8007734 <xTaskResumeAll>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d189      	bne.n	8006d18 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006e04:	4b0f      	ldr	r3, [pc, #60]	@ (8006e44 <xQueueReceive+0x1c0>)
 8006e06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e0a:	601a      	str	r2, [r3, #0]
 8006e0c:	f3bf 8f4f 	dsb	sy
 8006e10:	f3bf 8f6f 	isb	sy
 8006e14:	e780      	b.n	8006d18 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006e16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e18:	f000 f9ce 	bl	80071b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e1c:	f000 fc8a 	bl	8007734 <xTaskResumeAll>
 8006e20:	e77a      	b.n	8006d18 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006e22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e24:	f000 f9c8 	bl	80071b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e28:	f000 fc84 	bl	8007734 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e2e:	f000 fa15 	bl	800725c <prvIsQueueEmpty>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f43f af6f 	beq.w	8006d18 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006e3a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3730      	adds	r7, #48	@ 0x30
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	e000ed04 	.word	0xe000ed04

08006e48 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b08e      	sub	sp, #56	@ 0x38
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006e52:	2300      	movs	r3, #0
 8006e54:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d10b      	bne.n	8006e7c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e68:	f383 8811 	msr	BASEPRI, r3
 8006e6c:	f3bf 8f6f 	isb	sy
 8006e70:	f3bf 8f4f 	dsb	sy
 8006e74:	623b      	str	r3, [r7, #32]
}
 8006e76:	bf00      	nop
 8006e78:	bf00      	nop
 8006e7a:	e7fd      	b.n	8006e78 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00b      	beq.n	8006e9c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e88:	f383 8811 	msr	BASEPRI, r3
 8006e8c:	f3bf 8f6f 	isb	sy
 8006e90:	f3bf 8f4f 	dsb	sy
 8006e94:	61fb      	str	r3, [r7, #28]
}
 8006e96:	bf00      	nop
 8006e98:	bf00      	nop
 8006e9a:	e7fd      	b.n	8006e98 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e9c:	f000 fff4 	bl	8007e88 <xTaskGetSchedulerState>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d102      	bne.n	8006eac <xQueueSemaphoreTake+0x64>
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d101      	bne.n	8006eb0 <xQueueSemaphoreTake+0x68>
 8006eac:	2301      	movs	r3, #1
 8006eae:	e000      	b.n	8006eb2 <xQueueSemaphoreTake+0x6a>
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d10b      	bne.n	8006ece <xQueueSemaphoreTake+0x86>
	__asm volatile
 8006eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eba:	f383 8811 	msr	BASEPRI, r3
 8006ebe:	f3bf 8f6f 	isb	sy
 8006ec2:	f3bf 8f4f 	dsb	sy
 8006ec6:	61bb      	str	r3, [r7, #24]
}
 8006ec8:	bf00      	nop
 8006eca:	bf00      	nop
 8006ecc:	e7fd      	b.n	8006eca <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ece:	f001 fb33 	bl	8008538 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ed6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d024      	beq.n	8006f28 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ee0:	1e5a      	subs	r2, r3, #1
 8006ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ee4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d104      	bne.n	8006ef8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006eee:	f001 f977 	bl	80081e0 <pvTaskIncrementMutexHeldCount>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ef6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d00f      	beq.n	8006f20 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f02:	3310      	adds	r3, #16
 8006f04:	4618      	mov	r0, r3
 8006f06:	f000 fdff 	bl	8007b08 <xTaskRemoveFromEventList>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d007      	beq.n	8006f20 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006f10:	4b54      	ldr	r3, [pc, #336]	@ (8007064 <xQueueSemaphoreTake+0x21c>)
 8006f12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f16:	601a      	str	r2, [r3, #0]
 8006f18:	f3bf 8f4f 	dsb	sy
 8006f1c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006f20:	f001 fb3c 	bl	800859c <vPortExitCritical>
				return pdPASS;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e098      	b.n	800705a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d112      	bne.n	8006f54 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d00b      	beq.n	8006f4c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f38:	f383 8811 	msr	BASEPRI, r3
 8006f3c:	f3bf 8f6f 	isb	sy
 8006f40:	f3bf 8f4f 	dsb	sy
 8006f44:	617b      	str	r3, [r7, #20]
}
 8006f46:	bf00      	nop
 8006f48:	bf00      	nop
 8006f4a:	e7fd      	b.n	8006f48 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006f4c:	f001 fb26 	bl	800859c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006f50:	2300      	movs	r3, #0
 8006f52:	e082      	b.n	800705a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d106      	bne.n	8006f68 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f5a:	f107 030c 	add.w	r3, r7, #12
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f000 fe36 	bl	8007bd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f64:	2301      	movs	r3, #1
 8006f66:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f68:	f001 fb18 	bl	800859c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f6c:	f000 fbd4 	bl	8007718 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f70:	f001 fae2 	bl	8008538 <vPortEnterCritical>
 8006f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f76:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f7a:	b25b      	sxtb	r3, r3
 8006f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f80:	d103      	bne.n	8006f8a <xQueueSemaphoreTake+0x142>
 8006f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f90:	b25b      	sxtb	r3, r3
 8006f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f96:	d103      	bne.n	8006fa0 <xQueueSemaphoreTake+0x158>
 8006f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006fa0:	f001 fafc 	bl	800859c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006fa4:	463a      	mov	r2, r7
 8006fa6:	f107 030c 	add.w	r3, r7, #12
 8006faa:	4611      	mov	r1, r2
 8006fac:	4618      	mov	r0, r3
 8006fae:	f000 fe25 	bl	8007bfc <xTaskCheckForTimeOut>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d132      	bne.n	800701e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006fb8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006fba:	f000 f94f 	bl	800725c <prvIsQueueEmpty>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d026      	beq.n	8007012 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d109      	bne.n	8006fe0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006fcc:	f001 fab4 	bl	8008538 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f000 ff75 	bl	8007ec4 <xTaskPriorityInherit>
 8006fda:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006fdc:	f001 fade 	bl	800859c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fe2:	3324      	adds	r3, #36	@ 0x24
 8006fe4:	683a      	ldr	r2, [r7, #0]
 8006fe6:	4611      	mov	r1, r2
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f000 fd67 	bl	8007abc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006fee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006ff0:	f000 f8e2 	bl	80071b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ff4:	f000 fb9e 	bl	8007734 <xTaskResumeAll>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	f47f af67 	bne.w	8006ece <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007000:	4b18      	ldr	r3, [pc, #96]	@ (8007064 <xQueueSemaphoreTake+0x21c>)
 8007002:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007006:	601a      	str	r2, [r3, #0]
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	f3bf 8f6f 	isb	sy
 8007010:	e75d      	b.n	8006ece <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007012:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007014:	f000 f8d0 	bl	80071b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007018:	f000 fb8c 	bl	8007734 <xTaskResumeAll>
 800701c:	e757      	b.n	8006ece <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800701e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007020:	f000 f8ca 	bl	80071b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007024:	f000 fb86 	bl	8007734 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007028:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800702a:	f000 f917 	bl	800725c <prvIsQueueEmpty>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	f43f af4c 	beq.w	8006ece <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00d      	beq.n	8007058 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800703c:	f001 fa7c 	bl	8008538 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007040:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007042:	f000 f811 	bl	8007068 <prvGetDisinheritPriorityAfterTimeout>
 8007046:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800704e:	4618      	mov	r0, r3
 8007050:	f001 f836 	bl	80080c0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007054:	f001 faa2 	bl	800859c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007058:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800705a:	4618      	mov	r0, r3
 800705c:	3738      	adds	r7, #56	@ 0x38
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	e000ed04 	.word	0xe000ed04

08007068 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007068:	b480      	push	{r7}
 800706a:	b085      	sub	sp, #20
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007074:	2b00      	cmp	r3, #0
 8007076:	d006      	beq.n	8007086 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f1c3 0307 	rsb	r3, r3, #7
 8007082:	60fb      	str	r3, [r7, #12]
 8007084:	e001      	b.n	800708a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007086:	2300      	movs	r3, #0
 8007088:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800708a:	68fb      	ldr	r3, [r7, #12]
	}
 800708c:	4618      	mov	r0, r3
 800708e:	3714      	adds	r7, #20
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b086      	sub	sp, #24
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80070a4:	2300      	movs	r3, #0
 80070a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d10d      	bne.n	80070d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d14d      	bne.n	800715a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	4618      	mov	r0, r3
 80070c4:	f000 ff74 	bl	8007fb0 <xTaskPriorityDisinherit>
 80070c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2200      	movs	r2, #0
 80070ce:	609a      	str	r2, [r3, #8]
 80070d0:	e043      	b.n	800715a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d119      	bne.n	800710c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6858      	ldr	r0, [r3, #4]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070e0:	461a      	mov	r2, r3
 80070e2:	68b9      	ldr	r1, [r7, #8]
 80070e4:	f002 fd73 	bl	8009bce <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	685a      	ldr	r2, [r3, #4]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070f0:	441a      	add	r2, r3
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	685a      	ldr	r2, [r3, #4]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	429a      	cmp	r2, r3
 8007100:	d32b      	bcc.n	800715a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	605a      	str	r2, [r3, #4]
 800710a:	e026      	b.n	800715a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	68d8      	ldr	r0, [r3, #12]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007114:	461a      	mov	r2, r3
 8007116:	68b9      	ldr	r1, [r7, #8]
 8007118:	f002 fd59 	bl	8009bce <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	68da      	ldr	r2, [r3, #12]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007124:	425b      	negs	r3, r3
 8007126:	441a      	add	r2, r3
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	68da      	ldr	r2, [r3, #12]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	429a      	cmp	r2, r3
 8007136:	d207      	bcs.n	8007148 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	689a      	ldr	r2, [r3, #8]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007140:	425b      	negs	r3, r3
 8007142:	441a      	add	r2, r3
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2b02      	cmp	r3, #2
 800714c:	d105      	bne.n	800715a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d002      	beq.n	800715a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	3b01      	subs	r3, #1
 8007158:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	1c5a      	adds	r2, r3, #1
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007162:	697b      	ldr	r3, [r7, #20]
}
 8007164:	4618      	mov	r0, r3
 8007166:	3718      	adds	r7, #24
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800717a:	2b00      	cmp	r3, #0
 800717c:	d018      	beq.n	80071b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	68da      	ldr	r2, [r3, #12]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007186:	441a      	add	r2, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	68da      	ldr	r2, [r3, #12]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	429a      	cmp	r2, r3
 8007196:	d303      	bcc.n	80071a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	68d9      	ldr	r1, [r3, #12]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071a8:	461a      	mov	r2, r3
 80071aa:	6838      	ldr	r0, [r7, #0]
 80071ac:	f002 fd0f 	bl	8009bce <memcpy>
	}
}
 80071b0:	bf00      	nop
 80071b2:	3708      	adds	r7, #8
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80071c0:	f001 f9ba 	bl	8008538 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80071ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80071cc:	e011      	b.n	80071f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d012      	beq.n	80071fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	3324      	adds	r3, #36	@ 0x24
 80071da:	4618      	mov	r0, r3
 80071dc:	f000 fc94 	bl	8007b08 <xTaskRemoveFromEventList>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d001      	beq.n	80071ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80071e6:	f000 fd6d 	bl	8007cc4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80071ea:	7bfb      	ldrb	r3, [r7, #15]
 80071ec:	3b01      	subs	r3, #1
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80071f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	dce9      	bgt.n	80071ce <prvUnlockQueue+0x16>
 80071fa:	e000      	b.n	80071fe <prvUnlockQueue+0x46>
					break;
 80071fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	22ff      	movs	r2, #255	@ 0xff
 8007202:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007206:	f001 f9c9 	bl	800859c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800720a:	f001 f995 	bl	8008538 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007214:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007216:	e011      	b.n	800723c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d012      	beq.n	8007246 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	3310      	adds	r3, #16
 8007224:	4618      	mov	r0, r3
 8007226:	f000 fc6f 	bl	8007b08 <xTaskRemoveFromEventList>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d001      	beq.n	8007234 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007230:	f000 fd48 	bl	8007cc4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007234:	7bbb      	ldrb	r3, [r7, #14]
 8007236:	3b01      	subs	r3, #1
 8007238:	b2db      	uxtb	r3, r3
 800723a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800723c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007240:	2b00      	cmp	r3, #0
 8007242:	dce9      	bgt.n	8007218 <prvUnlockQueue+0x60>
 8007244:	e000      	b.n	8007248 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007246:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	22ff      	movs	r2, #255	@ 0xff
 800724c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007250:	f001 f9a4 	bl	800859c <vPortExitCritical>
}
 8007254:	bf00      	nop
 8007256:	3710      	adds	r7, #16
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007264:	f001 f968 	bl	8008538 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800726c:	2b00      	cmp	r3, #0
 800726e:	d102      	bne.n	8007276 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007270:	2301      	movs	r3, #1
 8007272:	60fb      	str	r3, [r7, #12]
 8007274:	e001      	b.n	800727a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007276:	2300      	movs	r3, #0
 8007278:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800727a:	f001 f98f 	bl	800859c <vPortExitCritical>

	return xReturn;
 800727e:	68fb      	ldr	r3, [r7, #12]
}
 8007280:	4618      	mov	r0, r3
 8007282:	3710      	adds	r7, #16
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007290:	f001 f952 	bl	8008538 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800729c:	429a      	cmp	r2, r3
 800729e:	d102      	bne.n	80072a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80072a0:	2301      	movs	r3, #1
 80072a2:	60fb      	str	r3, [r7, #12]
 80072a4:	e001      	b.n	80072aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80072a6:	2300      	movs	r3, #0
 80072a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80072aa:	f001 f977 	bl	800859c <vPortExitCritical>

	return xReturn;
 80072ae:	68fb      	ldr	r3, [r7, #12]
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3710      	adds	r7, #16
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b08e      	sub	sp, #56	@ 0x38
 80072bc:	af04      	add	r7, sp, #16
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	607a      	str	r2, [r7, #4]
 80072c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80072c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d10b      	bne.n	80072e4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80072cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d0:	f383 8811 	msr	BASEPRI, r3
 80072d4:	f3bf 8f6f 	isb	sy
 80072d8:	f3bf 8f4f 	dsb	sy
 80072dc:	623b      	str	r3, [r7, #32]
}
 80072de:	bf00      	nop
 80072e0:	bf00      	nop
 80072e2:	e7fd      	b.n	80072e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80072e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d10b      	bne.n	8007302 <xTaskCreateStatic+0x4a>
	__asm volatile
 80072ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ee:	f383 8811 	msr	BASEPRI, r3
 80072f2:	f3bf 8f6f 	isb	sy
 80072f6:	f3bf 8f4f 	dsb	sy
 80072fa:	61fb      	str	r3, [r7, #28]
}
 80072fc:	bf00      	nop
 80072fe:	bf00      	nop
 8007300:	e7fd      	b.n	80072fe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007302:	2354      	movs	r3, #84	@ 0x54
 8007304:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	2b54      	cmp	r3, #84	@ 0x54
 800730a:	d00b      	beq.n	8007324 <xTaskCreateStatic+0x6c>
	__asm volatile
 800730c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007310:	f383 8811 	msr	BASEPRI, r3
 8007314:	f3bf 8f6f 	isb	sy
 8007318:	f3bf 8f4f 	dsb	sy
 800731c:	61bb      	str	r3, [r7, #24]
}
 800731e:	bf00      	nop
 8007320:	bf00      	nop
 8007322:	e7fd      	b.n	8007320 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007324:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007328:	2b00      	cmp	r3, #0
 800732a:	d01e      	beq.n	800736a <xTaskCreateStatic+0xb2>
 800732c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800732e:	2b00      	cmp	r3, #0
 8007330:	d01b      	beq.n	800736a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007334:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007338:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800733a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800733c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733e:	2202      	movs	r2, #2
 8007340:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007344:	2300      	movs	r3, #0
 8007346:	9303      	str	r3, [sp, #12]
 8007348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800734a:	9302      	str	r3, [sp, #8]
 800734c:	f107 0314 	add.w	r3, r7, #20
 8007350:	9301      	str	r3, [sp, #4]
 8007352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007354:	9300      	str	r3, [sp, #0]
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	68b9      	ldr	r1, [r7, #8]
 800735c:	68f8      	ldr	r0, [r7, #12]
 800735e:	f000 f850 	bl	8007402 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007362:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007364:	f000 f8d6 	bl	8007514 <prvAddNewTaskToReadyList>
 8007368:	e001      	b.n	800736e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800736a:	2300      	movs	r3, #0
 800736c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800736e:	697b      	ldr	r3, [r7, #20]
	}
 8007370:	4618      	mov	r0, r3
 8007372:	3728      	adds	r7, #40	@ 0x28
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007378:	b580      	push	{r7, lr}
 800737a:	b08c      	sub	sp, #48	@ 0x30
 800737c:	af04      	add	r7, sp, #16
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	603b      	str	r3, [r7, #0]
 8007384:	4613      	mov	r3, r2
 8007386:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007388:	88fb      	ldrh	r3, [r7, #6]
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	4618      	mov	r0, r3
 800738e:	f001 f9b3 	bl	80086f8 <pvPortMalloc>
 8007392:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00e      	beq.n	80073b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800739a:	2054      	movs	r0, #84	@ 0x54
 800739c:	f001 f9ac 	bl	80086f8 <pvPortMalloc>
 80073a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d003      	beq.n	80073b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	697a      	ldr	r2, [r7, #20]
 80073ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80073ae:	e005      	b.n	80073bc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80073b0:	6978      	ldr	r0, [r7, #20]
 80073b2:	f001 fa6f 	bl	8008894 <vPortFree>
 80073b6:	e001      	b.n	80073bc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80073b8:	2300      	movs	r3, #0
 80073ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80073bc:	69fb      	ldr	r3, [r7, #28]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d017      	beq.n	80073f2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80073ca:	88fa      	ldrh	r2, [r7, #6]
 80073cc:	2300      	movs	r3, #0
 80073ce:	9303      	str	r3, [sp, #12]
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	9302      	str	r3, [sp, #8]
 80073d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073d6:	9301      	str	r3, [sp, #4]
 80073d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073da:	9300      	str	r3, [sp, #0]
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	68b9      	ldr	r1, [r7, #8]
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	f000 f80e 	bl	8007402 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80073e6:	69f8      	ldr	r0, [r7, #28]
 80073e8:	f000 f894 	bl	8007514 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80073ec:	2301      	movs	r3, #1
 80073ee:	61bb      	str	r3, [r7, #24]
 80073f0:	e002      	b.n	80073f8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80073f2:	f04f 33ff 	mov.w	r3, #4294967295
 80073f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80073f8:	69bb      	ldr	r3, [r7, #24]
	}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3720      	adds	r7, #32
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}

08007402 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007402:	b580      	push	{r7, lr}
 8007404:	b088      	sub	sp, #32
 8007406:	af00      	add	r7, sp, #0
 8007408:	60f8      	str	r0, [r7, #12]
 800740a:	60b9      	str	r1, [r7, #8]
 800740c:	607a      	str	r2, [r7, #4]
 800740e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007412:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800741a:	3b01      	subs	r3, #1
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	4413      	add	r3, r2
 8007420:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007422:	69bb      	ldr	r3, [r7, #24]
 8007424:	f023 0307 	bic.w	r3, r3, #7
 8007428:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	f003 0307 	and.w	r3, r3, #7
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00b      	beq.n	800744c <prvInitialiseNewTask+0x4a>
	__asm volatile
 8007434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007438:	f383 8811 	msr	BASEPRI, r3
 800743c:	f3bf 8f6f 	isb	sy
 8007440:	f3bf 8f4f 	dsb	sy
 8007444:	617b      	str	r3, [r7, #20]
}
 8007446:	bf00      	nop
 8007448:	bf00      	nop
 800744a:	e7fd      	b.n	8007448 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d01f      	beq.n	8007492 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007452:	2300      	movs	r3, #0
 8007454:	61fb      	str	r3, [r7, #28]
 8007456:	e012      	b.n	800747e <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007458:	68ba      	ldr	r2, [r7, #8]
 800745a:	69fb      	ldr	r3, [r7, #28]
 800745c:	4413      	add	r3, r2
 800745e:	7819      	ldrb	r1, [r3, #0]
 8007460:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	4413      	add	r3, r2
 8007466:	3334      	adds	r3, #52	@ 0x34
 8007468:	460a      	mov	r2, r1
 800746a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800746c:	68ba      	ldr	r2, [r7, #8]
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	4413      	add	r3, r2
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d006      	beq.n	8007486 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007478:	69fb      	ldr	r3, [r7, #28]
 800747a:	3301      	adds	r3, #1
 800747c:	61fb      	str	r3, [r7, #28]
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	2b0f      	cmp	r3, #15
 8007482:	d9e9      	bls.n	8007458 <prvInitialiseNewTask+0x56>
 8007484:	e000      	b.n	8007488 <prvInitialiseNewTask+0x86>
			{
				break;
 8007486:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800748a:	2200      	movs	r2, #0
 800748c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007490:	e003      	b.n	800749a <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007494:	2200      	movs	r2, #0
 8007496:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800749a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800749c:	2b06      	cmp	r3, #6
 800749e:	d901      	bls.n	80074a4 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80074a0:	2306      	movs	r3, #6
 80074a2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80074a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074a8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80074aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074ae:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80074b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b2:	2200      	movs	r2, #0
 80074b4:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80074b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b8:	3304      	adds	r3, #4
 80074ba:	4618      	mov	r0, r3
 80074bc:	f7ff f955 	bl	800676a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80074c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c2:	3318      	adds	r3, #24
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7ff f950 	bl	800676a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80074ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074d2:	f1c3 0207 	rsb	r2, r3, #7
 80074d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80074da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074de:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80074e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e2:	2200      	movs	r2, #0
 80074e4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80074e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80074ee:	683a      	ldr	r2, [r7, #0]
 80074f0:	68f9      	ldr	r1, [r7, #12]
 80074f2:	69b8      	ldr	r0, [r7, #24]
 80074f4:	f000 feee 	bl	80082d4 <pxPortInitialiseStack>
 80074f8:	4602      	mov	r2, r0
 80074fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074fc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80074fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007500:	2b00      	cmp	r3, #0
 8007502:	d002      	beq.n	800750a <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007506:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007508:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800750a:	bf00      	nop
 800750c:	3720      	adds	r7, #32
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
	...

08007514 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800751c:	f001 f80c 	bl	8008538 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007520:	4b2a      	ldr	r3, [pc, #168]	@ (80075cc <prvAddNewTaskToReadyList+0xb8>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	3301      	adds	r3, #1
 8007526:	4a29      	ldr	r2, [pc, #164]	@ (80075cc <prvAddNewTaskToReadyList+0xb8>)
 8007528:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800752a:	4b29      	ldr	r3, [pc, #164]	@ (80075d0 <prvAddNewTaskToReadyList+0xbc>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d109      	bne.n	8007546 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007532:	4a27      	ldr	r2, [pc, #156]	@ (80075d0 <prvAddNewTaskToReadyList+0xbc>)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007538:	4b24      	ldr	r3, [pc, #144]	@ (80075cc <prvAddNewTaskToReadyList+0xb8>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	2b01      	cmp	r3, #1
 800753e:	d110      	bne.n	8007562 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007540:	f000 fbe4 	bl	8007d0c <prvInitialiseTaskLists>
 8007544:	e00d      	b.n	8007562 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007546:	4b23      	ldr	r3, [pc, #140]	@ (80075d4 <prvAddNewTaskToReadyList+0xc0>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d109      	bne.n	8007562 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800754e:	4b20      	ldr	r3, [pc, #128]	@ (80075d0 <prvAddNewTaskToReadyList+0xbc>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007558:	429a      	cmp	r2, r3
 800755a:	d802      	bhi.n	8007562 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800755c:	4a1c      	ldr	r2, [pc, #112]	@ (80075d0 <prvAddNewTaskToReadyList+0xbc>)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007562:	4b1d      	ldr	r3, [pc, #116]	@ (80075d8 <prvAddNewTaskToReadyList+0xc4>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	3301      	adds	r3, #1
 8007568:	4a1b      	ldr	r2, [pc, #108]	@ (80075d8 <prvAddNewTaskToReadyList+0xc4>)
 800756a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007570:	2201      	movs	r2, #1
 8007572:	409a      	lsls	r2, r3
 8007574:	4b19      	ldr	r3, [pc, #100]	@ (80075dc <prvAddNewTaskToReadyList+0xc8>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4313      	orrs	r3, r2
 800757a:	4a18      	ldr	r2, [pc, #96]	@ (80075dc <prvAddNewTaskToReadyList+0xc8>)
 800757c:	6013      	str	r3, [r2, #0]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007582:	4613      	mov	r3, r2
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	4413      	add	r3, r2
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	4a15      	ldr	r2, [pc, #84]	@ (80075e0 <prvAddNewTaskToReadyList+0xcc>)
 800758c:	441a      	add	r2, r3
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	3304      	adds	r3, #4
 8007592:	4619      	mov	r1, r3
 8007594:	4610      	mov	r0, r2
 8007596:	f7ff f8f5 	bl	8006784 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800759a:	f000 ffff 	bl	800859c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800759e:	4b0d      	ldr	r3, [pc, #52]	@ (80075d4 <prvAddNewTaskToReadyList+0xc0>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00e      	beq.n	80075c4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80075a6:	4b0a      	ldr	r3, [pc, #40]	@ (80075d0 <prvAddNewTaskToReadyList+0xbc>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d207      	bcs.n	80075c4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80075b4:	4b0b      	ldr	r3, [pc, #44]	@ (80075e4 <prvAddNewTaskToReadyList+0xd0>)
 80075b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075ba:	601a      	str	r2, [r3, #0]
 80075bc:	f3bf 8f4f 	dsb	sy
 80075c0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075c4:	bf00      	nop
 80075c6:	3708      	adds	r7, #8
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	200007e4 	.word	0x200007e4
 80075d0:	200006e4 	.word	0x200006e4
 80075d4:	200007f0 	.word	0x200007f0
 80075d8:	20000800 	.word	0x20000800
 80075dc:	200007ec 	.word	0x200007ec
 80075e0:	200006e8 	.word	0x200006e8
 80075e4:	e000ed04 	.word	0xe000ed04

080075e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80075f0:	2300      	movs	r3, #0
 80075f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d018      	beq.n	800762c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80075fa:	4b14      	ldr	r3, [pc, #80]	@ (800764c <vTaskDelay+0x64>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00b      	beq.n	800761a <vTaskDelay+0x32>
	__asm volatile
 8007602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007606:	f383 8811 	msr	BASEPRI, r3
 800760a:	f3bf 8f6f 	isb	sy
 800760e:	f3bf 8f4f 	dsb	sy
 8007612:	60bb      	str	r3, [r7, #8]
}
 8007614:	bf00      	nop
 8007616:	bf00      	nop
 8007618:	e7fd      	b.n	8007616 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800761a:	f000 f87d 	bl	8007718 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800761e:	2100      	movs	r1, #0
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 fdf1 	bl	8008208 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007626:	f000 f885 	bl	8007734 <xTaskResumeAll>
 800762a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d107      	bne.n	8007642 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007632:	4b07      	ldr	r3, [pc, #28]	@ (8007650 <vTaskDelay+0x68>)
 8007634:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007638:	601a      	str	r2, [r3, #0]
 800763a:	f3bf 8f4f 	dsb	sy
 800763e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007642:	bf00      	nop
 8007644:	3710      	adds	r7, #16
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
 800764a:	bf00      	nop
 800764c:	2000080c 	.word	0x2000080c
 8007650:	e000ed04 	.word	0xe000ed04

08007654 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b08a      	sub	sp, #40	@ 0x28
 8007658:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800765a:	2300      	movs	r3, #0
 800765c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800765e:	2300      	movs	r3, #0
 8007660:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007662:	463a      	mov	r2, r7
 8007664:	1d39      	adds	r1, r7, #4
 8007666:	f107 0308 	add.w	r3, r7, #8
 800766a:	4618      	mov	r0, r3
 800766c:	f7f9 fd04 	bl	8001078 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007670:	6839      	ldr	r1, [r7, #0]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	68ba      	ldr	r2, [r7, #8]
 8007676:	9202      	str	r2, [sp, #8]
 8007678:	9301      	str	r3, [sp, #4]
 800767a:	2300      	movs	r3, #0
 800767c:	9300      	str	r3, [sp, #0]
 800767e:	2300      	movs	r3, #0
 8007680:	460a      	mov	r2, r1
 8007682:	491f      	ldr	r1, [pc, #124]	@ (8007700 <vTaskStartScheduler+0xac>)
 8007684:	481f      	ldr	r0, [pc, #124]	@ (8007704 <vTaskStartScheduler+0xb0>)
 8007686:	f7ff fe17 	bl	80072b8 <xTaskCreateStatic>
 800768a:	4603      	mov	r3, r0
 800768c:	4a1e      	ldr	r2, [pc, #120]	@ (8007708 <vTaskStartScheduler+0xb4>)
 800768e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007690:	4b1d      	ldr	r3, [pc, #116]	@ (8007708 <vTaskStartScheduler+0xb4>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d002      	beq.n	800769e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007698:	2301      	movs	r3, #1
 800769a:	617b      	str	r3, [r7, #20]
 800769c:	e001      	b.n	80076a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800769e:	2300      	movs	r3, #0
 80076a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d116      	bne.n	80076d6 <vTaskStartScheduler+0x82>
	__asm volatile
 80076a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ac:	f383 8811 	msr	BASEPRI, r3
 80076b0:	f3bf 8f6f 	isb	sy
 80076b4:	f3bf 8f4f 	dsb	sy
 80076b8:	613b      	str	r3, [r7, #16]
}
 80076ba:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80076bc:	4b13      	ldr	r3, [pc, #76]	@ (800770c <vTaskStartScheduler+0xb8>)
 80076be:	f04f 32ff 	mov.w	r2, #4294967295
 80076c2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80076c4:	4b12      	ldr	r3, [pc, #72]	@ (8007710 <vTaskStartScheduler+0xbc>)
 80076c6:	2201      	movs	r2, #1
 80076c8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80076ca:	4b12      	ldr	r3, [pc, #72]	@ (8007714 <vTaskStartScheduler+0xc0>)
 80076cc:	2200      	movs	r2, #0
 80076ce:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80076d0:	f000 fe8e 	bl	80083f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80076d4:	e00f      	b.n	80076f6 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076dc:	d10b      	bne.n	80076f6 <vTaskStartScheduler+0xa2>
	__asm volatile
 80076de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076e2:	f383 8811 	msr	BASEPRI, r3
 80076e6:	f3bf 8f6f 	isb	sy
 80076ea:	f3bf 8f4f 	dsb	sy
 80076ee:	60fb      	str	r3, [r7, #12]
}
 80076f0:	bf00      	nop
 80076f2:	bf00      	nop
 80076f4:	e7fd      	b.n	80076f2 <vTaskStartScheduler+0x9e>
}
 80076f6:	bf00      	nop
 80076f8:	3718      	adds	r7, #24
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	0800d340 	.word	0x0800d340
 8007704:	08007cdd 	.word	0x08007cdd
 8007708:	20000808 	.word	0x20000808
 800770c:	20000804 	.word	0x20000804
 8007710:	200007f0 	.word	0x200007f0
 8007714:	200007e8 	.word	0x200007e8

08007718 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007718:	b480      	push	{r7}
 800771a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800771c:	4b04      	ldr	r3, [pc, #16]	@ (8007730 <vTaskSuspendAll+0x18>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	3301      	adds	r3, #1
 8007722:	4a03      	ldr	r2, [pc, #12]	@ (8007730 <vTaskSuspendAll+0x18>)
 8007724:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007726:	bf00      	nop
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr
 8007730:	2000080c 	.word	0x2000080c

08007734 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800773a:	2300      	movs	r3, #0
 800773c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800773e:	2300      	movs	r3, #0
 8007740:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007742:	4b42      	ldr	r3, [pc, #264]	@ (800784c <xTaskResumeAll+0x118>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d10b      	bne.n	8007762 <xTaskResumeAll+0x2e>
	__asm volatile
 800774a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800774e:	f383 8811 	msr	BASEPRI, r3
 8007752:	f3bf 8f6f 	isb	sy
 8007756:	f3bf 8f4f 	dsb	sy
 800775a:	603b      	str	r3, [r7, #0]
}
 800775c:	bf00      	nop
 800775e:	bf00      	nop
 8007760:	e7fd      	b.n	800775e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007762:	f000 fee9 	bl	8008538 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007766:	4b39      	ldr	r3, [pc, #228]	@ (800784c <xTaskResumeAll+0x118>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	3b01      	subs	r3, #1
 800776c:	4a37      	ldr	r2, [pc, #220]	@ (800784c <xTaskResumeAll+0x118>)
 800776e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007770:	4b36      	ldr	r3, [pc, #216]	@ (800784c <xTaskResumeAll+0x118>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d161      	bne.n	800783c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007778:	4b35      	ldr	r3, [pc, #212]	@ (8007850 <xTaskResumeAll+0x11c>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d05d      	beq.n	800783c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007780:	e02e      	b.n	80077e0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007782:	4b34      	ldr	r3, [pc, #208]	@ (8007854 <xTaskResumeAll+0x120>)
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	3318      	adds	r3, #24
 800778e:	4618      	mov	r0, r3
 8007790:	f7ff f855 	bl	800683e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	3304      	adds	r3, #4
 8007798:	4618      	mov	r0, r3
 800779a:	f7ff f850 	bl	800683e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077a2:	2201      	movs	r2, #1
 80077a4:	409a      	lsls	r2, r3
 80077a6:	4b2c      	ldr	r3, [pc, #176]	@ (8007858 <xTaskResumeAll+0x124>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	4a2a      	ldr	r2, [pc, #168]	@ (8007858 <xTaskResumeAll+0x124>)
 80077ae:	6013      	str	r3, [r2, #0]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077b4:	4613      	mov	r3, r2
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	4413      	add	r3, r2
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	4a27      	ldr	r2, [pc, #156]	@ (800785c <xTaskResumeAll+0x128>)
 80077be:	441a      	add	r2, r3
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	3304      	adds	r3, #4
 80077c4:	4619      	mov	r1, r3
 80077c6:	4610      	mov	r0, r2
 80077c8:	f7fe ffdc 	bl	8006784 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077d0:	4b23      	ldr	r3, [pc, #140]	@ (8007860 <xTaskResumeAll+0x12c>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d302      	bcc.n	80077e0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80077da:	4b22      	ldr	r3, [pc, #136]	@ (8007864 <xTaskResumeAll+0x130>)
 80077dc:	2201      	movs	r2, #1
 80077de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077e0:	4b1c      	ldr	r3, [pc, #112]	@ (8007854 <xTaskResumeAll+0x120>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d1cc      	bne.n	8007782 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d001      	beq.n	80077f2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80077ee:	f000 fb2b 	bl	8007e48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80077f2:	4b1d      	ldr	r3, [pc, #116]	@ (8007868 <xTaskResumeAll+0x134>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d010      	beq.n	8007820 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80077fe:	f000 f847 	bl	8007890 <xTaskIncrementTick>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d002      	beq.n	800780e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007808:	4b16      	ldr	r3, [pc, #88]	@ (8007864 <xTaskResumeAll+0x130>)
 800780a:	2201      	movs	r2, #1
 800780c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	3b01      	subs	r3, #1
 8007812:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d1f1      	bne.n	80077fe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800781a:	4b13      	ldr	r3, [pc, #76]	@ (8007868 <xTaskResumeAll+0x134>)
 800781c:	2200      	movs	r2, #0
 800781e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007820:	4b10      	ldr	r3, [pc, #64]	@ (8007864 <xTaskResumeAll+0x130>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d009      	beq.n	800783c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007828:	2301      	movs	r3, #1
 800782a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800782c:	4b0f      	ldr	r3, [pc, #60]	@ (800786c <xTaskResumeAll+0x138>)
 800782e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007832:	601a      	str	r2, [r3, #0]
 8007834:	f3bf 8f4f 	dsb	sy
 8007838:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800783c:	f000 feae 	bl	800859c <vPortExitCritical>

	return xAlreadyYielded;
 8007840:	68bb      	ldr	r3, [r7, #8]
}
 8007842:	4618      	mov	r0, r3
 8007844:	3710      	adds	r7, #16
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	2000080c 	.word	0x2000080c
 8007850:	200007e4 	.word	0x200007e4
 8007854:	200007a4 	.word	0x200007a4
 8007858:	200007ec 	.word	0x200007ec
 800785c:	200006e8 	.word	0x200006e8
 8007860:	200006e4 	.word	0x200006e4
 8007864:	200007f8 	.word	0x200007f8
 8007868:	200007f4 	.word	0x200007f4
 800786c:	e000ed04 	.word	0xe000ed04

08007870 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007876:	4b05      	ldr	r3, [pc, #20]	@ (800788c <xTaskGetTickCount+0x1c>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800787c:	687b      	ldr	r3, [r7, #4]
}
 800787e:	4618      	mov	r0, r3
 8007880:	370c      	adds	r7, #12
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop
 800788c:	200007e8 	.word	0x200007e8

08007890 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b086      	sub	sp, #24
 8007894:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007896:	2300      	movs	r3, #0
 8007898:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800789a:	4b4f      	ldr	r3, [pc, #316]	@ (80079d8 <xTaskIncrementTick+0x148>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	f040 808f 	bne.w	80079c2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80078a4:	4b4d      	ldr	r3, [pc, #308]	@ (80079dc <xTaskIncrementTick+0x14c>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	3301      	adds	r3, #1
 80078aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80078ac:	4a4b      	ldr	r2, [pc, #300]	@ (80079dc <xTaskIncrementTick+0x14c>)
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d121      	bne.n	80078fc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80078b8:	4b49      	ldr	r3, [pc, #292]	@ (80079e0 <xTaskIncrementTick+0x150>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00b      	beq.n	80078da <xTaskIncrementTick+0x4a>
	__asm volatile
 80078c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078c6:	f383 8811 	msr	BASEPRI, r3
 80078ca:	f3bf 8f6f 	isb	sy
 80078ce:	f3bf 8f4f 	dsb	sy
 80078d2:	603b      	str	r3, [r7, #0]
}
 80078d4:	bf00      	nop
 80078d6:	bf00      	nop
 80078d8:	e7fd      	b.n	80078d6 <xTaskIncrementTick+0x46>
 80078da:	4b41      	ldr	r3, [pc, #260]	@ (80079e0 <xTaskIncrementTick+0x150>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	60fb      	str	r3, [r7, #12]
 80078e0:	4b40      	ldr	r3, [pc, #256]	@ (80079e4 <xTaskIncrementTick+0x154>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a3e      	ldr	r2, [pc, #248]	@ (80079e0 <xTaskIncrementTick+0x150>)
 80078e6:	6013      	str	r3, [r2, #0]
 80078e8:	4a3e      	ldr	r2, [pc, #248]	@ (80079e4 <xTaskIncrementTick+0x154>)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6013      	str	r3, [r2, #0]
 80078ee:	4b3e      	ldr	r3, [pc, #248]	@ (80079e8 <xTaskIncrementTick+0x158>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	3301      	adds	r3, #1
 80078f4:	4a3c      	ldr	r2, [pc, #240]	@ (80079e8 <xTaskIncrementTick+0x158>)
 80078f6:	6013      	str	r3, [r2, #0]
 80078f8:	f000 faa6 	bl	8007e48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80078fc:	4b3b      	ldr	r3, [pc, #236]	@ (80079ec <xTaskIncrementTick+0x15c>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	693a      	ldr	r2, [r7, #16]
 8007902:	429a      	cmp	r2, r3
 8007904:	d348      	bcc.n	8007998 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007906:	4b36      	ldr	r3, [pc, #216]	@ (80079e0 <xTaskIncrementTick+0x150>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d104      	bne.n	800791a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007910:	4b36      	ldr	r3, [pc, #216]	@ (80079ec <xTaskIncrementTick+0x15c>)
 8007912:	f04f 32ff 	mov.w	r2, #4294967295
 8007916:	601a      	str	r2, [r3, #0]
					break;
 8007918:	e03e      	b.n	8007998 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800791a:	4b31      	ldr	r3, [pc, #196]	@ (80079e0 <xTaskIncrementTick+0x150>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800792a:	693a      	ldr	r2, [r7, #16]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	429a      	cmp	r2, r3
 8007930:	d203      	bcs.n	800793a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007932:	4a2e      	ldr	r2, [pc, #184]	@ (80079ec <xTaskIncrementTick+0x15c>)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007938:	e02e      	b.n	8007998 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	3304      	adds	r3, #4
 800793e:	4618      	mov	r0, r3
 8007940:	f7fe ff7d 	bl	800683e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007948:	2b00      	cmp	r3, #0
 800794a:	d004      	beq.n	8007956 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	3318      	adds	r3, #24
 8007950:	4618      	mov	r0, r3
 8007952:	f7fe ff74 	bl	800683e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800795a:	2201      	movs	r2, #1
 800795c:	409a      	lsls	r2, r3
 800795e:	4b24      	ldr	r3, [pc, #144]	@ (80079f0 <xTaskIncrementTick+0x160>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4313      	orrs	r3, r2
 8007964:	4a22      	ldr	r2, [pc, #136]	@ (80079f0 <xTaskIncrementTick+0x160>)
 8007966:	6013      	str	r3, [r2, #0]
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800796c:	4613      	mov	r3, r2
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	4413      	add	r3, r2
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	4a1f      	ldr	r2, [pc, #124]	@ (80079f4 <xTaskIncrementTick+0x164>)
 8007976:	441a      	add	r2, r3
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	3304      	adds	r3, #4
 800797c:	4619      	mov	r1, r3
 800797e:	4610      	mov	r0, r2
 8007980:	f7fe ff00 	bl	8006784 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007988:	4b1b      	ldr	r3, [pc, #108]	@ (80079f8 <xTaskIncrementTick+0x168>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800798e:	429a      	cmp	r2, r3
 8007990:	d3b9      	bcc.n	8007906 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007992:	2301      	movs	r3, #1
 8007994:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007996:	e7b6      	b.n	8007906 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007998:	4b17      	ldr	r3, [pc, #92]	@ (80079f8 <xTaskIncrementTick+0x168>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800799e:	4915      	ldr	r1, [pc, #84]	@ (80079f4 <xTaskIncrementTick+0x164>)
 80079a0:	4613      	mov	r3, r2
 80079a2:	009b      	lsls	r3, r3, #2
 80079a4:	4413      	add	r3, r2
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	440b      	add	r3, r1
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d901      	bls.n	80079b4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80079b0:	2301      	movs	r3, #1
 80079b2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80079b4:	4b11      	ldr	r3, [pc, #68]	@ (80079fc <xTaskIncrementTick+0x16c>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d007      	beq.n	80079cc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80079bc:	2301      	movs	r3, #1
 80079be:	617b      	str	r3, [r7, #20]
 80079c0:	e004      	b.n	80079cc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80079c2:	4b0f      	ldr	r3, [pc, #60]	@ (8007a00 <xTaskIncrementTick+0x170>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	3301      	adds	r3, #1
 80079c8:	4a0d      	ldr	r2, [pc, #52]	@ (8007a00 <xTaskIncrementTick+0x170>)
 80079ca:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80079cc:	697b      	ldr	r3, [r7, #20]
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3718      	adds	r7, #24
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	2000080c 	.word	0x2000080c
 80079dc:	200007e8 	.word	0x200007e8
 80079e0:	2000079c 	.word	0x2000079c
 80079e4:	200007a0 	.word	0x200007a0
 80079e8:	200007fc 	.word	0x200007fc
 80079ec:	20000804 	.word	0x20000804
 80079f0:	200007ec 	.word	0x200007ec
 80079f4:	200006e8 	.word	0x200006e8
 80079f8:	200006e4 	.word	0x200006e4
 80079fc:	200007f8 	.word	0x200007f8
 8007a00:	200007f4 	.word	0x200007f4

08007a04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a04:	b480      	push	{r7}
 8007a06:	b087      	sub	sp, #28
 8007a08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a0a:	4b27      	ldr	r3, [pc, #156]	@ (8007aa8 <vTaskSwitchContext+0xa4>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d003      	beq.n	8007a1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a12:	4b26      	ldr	r3, [pc, #152]	@ (8007aac <vTaskSwitchContext+0xa8>)
 8007a14:	2201      	movs	r2, #1
 8007a16:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007a18:	e040      	b.n	8007a9c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007a1a:	4b24      	ldr	r3, [pc, #144]	@ (8007aac <vTaskSwitchContext+0xa8>)
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a20:	4b23      	ldr	r3, [pc, #140]	@ (8007ab0 <vTaskSwitchContext+0xac>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	fab3 f383 	clz	r3, r3
 8007a2c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007a2e:	7afb      	ldrb	r3, [r7, #11]
 8007a30:	f1c3 031f 	rsb	r3, r3, #31
 8007a34:	617b      	str	r3, [r7, #20]
 8007a36:	491f      	ldr	r1, [pc, #124]	@ (8007ab4 <vTaskSwitchContext+0xb0>)
 8007a38:	697a      	ldr	r2, [r7, #20]
 8007a3a:	4613      	mov	r3, r2
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	4413      	add	r3, r2
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	440b      	add	r3, r1
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d10b      	bne.n	8007a62 <vTaskSwitchContext+0x5e>
	__asm volatile
 8007a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a4e:	f383 8811 	msr	BASEPRI, r3
 8007a52:	f3bf 8f6f 	isb	sy
 8007a56:	f3bf 8f4f 	dsb	sy
 8007a5a:	607b      	str	r3, [r7, #4]
}
 8007a5c:	bf00      	nop
 8007a5e:	bf00      	nop
 8007a60:	e7fd      	b.n	8007a5e <vTaskSwitchContext+0x5a>
 8007a62:	697a      	ldr	r2, [r7, #20]
 8007a64:	4613      	mov	r3, r2
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	4413      	add	r3, r2
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	4a11      	ldr	r2, [pc, #68]	@ (8007ab4 <vTaskSwitchContext+0xb0>)
 8007a6e:	4413      	add	r3, r2
 8007a70:	613b      	str	r3, [r7, #16]
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	685a      	ldr	r2, [r3, #4]
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	605a      	str	r2, [r3, #4]
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	685a      	ldr	r2, [r3, #4]
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	3308      	adds	r3, #8
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d104      	bne.n	8007a92 <vTaskSwitchContext+0x8e>
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	685a      	ldr	r2, [r3, #4]
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	605a      	str	r2, [r3, #4]
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	68db      	ldr	r3, [r3, #12]
 8007a98:	4a07      	ldr	r2, [pc, #28]	@ (8007ab8 <vTaskSwitchContext+0xb4>)
 8007a9a:	6013      	str	r3, [r2, #0]
}
 8007a9c:	bf00      	nop
 8007a9e:	371c      	adds	r7, #28
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr
 8007aa8:	2000080c 	.word	0x2000080c
 8007aac:	200007f8 	.word	0x200007f8
 8007ab0:	200007ec 	.word	0x200007ec
 8007ab4:	200006e8 	.word	0x200006e8
 8007ab8:	200006e4 	.word	0x200006e4

08007abc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d10b      	bne.n	8007ae4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad0:	f383 8811 	msr	BASEPRI, r3
 8007ad4:	f3bf 8f6f 	isb	sy
 8007ad8:	f3bf 8f4f 	dsb	sy
 8007adc:	60fb      	str	r3, [r7, #12]
}
 8007ade:	bf00      	nop
 8007ae0:	bf00      	nop
 8007ae2:	e7fd      	b.n	8007ae0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007ae4:	4b07      	ldr	r3, [pc, #28]	@ (8007b04 <vTaskPlaceOnEventList+0x48>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	3318      	adds	r3, #24
 8007aea:	4619      	mov	r1, r3
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f7fe fe6d 	bl	80067cc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007af2:	2101      	movs	r1, #1
 8007af4:	6838      	ldr	r0, [r7, #0]
 8007af6:	f000 fb87 	bl	8008208 <prvAddCurrentTaskToDelayedList>
}
 8007afa:	bf00      	nop
 8007afc:	3710      	adds	r7, #16
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	200006e4 	.word	0x200006e4

08007b08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b086      	sub	sp, #24
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d10b      	bne.n	8007b36 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b22:	f383 8811 	msr	BASEPRI, r3
 8007b26:	f3bf 8f6f 	isb	sy
 8007b2a:	f3bf 8f4f 	dsb	sy
 8007b2e:	60fb      	str	r3, [r7, #12]
}
 8007b30:	bf00      	nop
 8007b32:	bf00      	nop
 8007b34:	e7fd      	b.n	8007b32 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	3318      	adds	r3, #24
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f7fe fe7f 	bl	800683e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b40:	4b1d      	ldr	r3, [pc, #116]	@ (8007bb8 <xTaskRemoveFromEventList+0xb0>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d11c      	bne.n	8007b82 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	3304      	adds	r3, #4
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f7fe fe76 	bl	800683e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b56:	2201      	movs	r2, #1
 8007b58:	409a      	lsls	r2, r3
 8007b5a:	4b18      	ldr	r3, [pc, #96]	@ (8007bbc <xTaskRemoveFromEventList+0xb4>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	4a16      	ldr	r2, [pc, #88]	@ (8007bbc <xTaskRemoveFromEventList+0xb4>)
 8007b62:	6013      	str	r3, [r2, #0]
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b68:	4613      	mov	r3, r2
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	4413      	add	r3, r2
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	4a13      	ldr	r2, [pc, #76]	@ (8007bc0 <xTaskRemoveFromEventList+0xb8>)
 8007b72:	441a      	add	r2, r3
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	3304      	adds	r3, #4
 8007b78:	4619      	mov	r1, r3
 8007b7a:	4610      	mov	r0, r2
 8007b7c:	f7fe fe02 	bl	8006784 <vListInsertEnd>
 8007b80:	e005      	b.n	8007b8e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	3318      	adds	r3, #24
 8007b86:	4619      	mov	r1, r3
 8007b88:	480e      	ldr	r0, [pc, #56]	@ (8007bc4 <xTaskRemoveFromEventList+0xbc>)
 8007b8a:	f7fe fdfb 	bl	8006784 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b92:	4b0d      	ldr	r3, [pc, #52]	@ (8007bc8 <xTaskRemoveFromEventList+0xc0>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d905      	bls.n	8007ba8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8007bcc <xTaskRemoveFromEventList+0xc4>)
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	601a      	str	r2, [r3, #0]
 8007ba6:	e001      	b.n	8007bac <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007bac:	697b      	ldr	r3, [r7, #20]
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3718      	adds	r7, #24
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	bf00      	nop
 8007bb8:	2000080c 	.word	0x2000080c
 8007bbc:	200007ec 	.word	0x200007ec
 8007bc0:	200006e8 	.word	0x200006e8
 8007bc4:	200007a4 	.word	0x200007a4
 8007bc8:	200006e4 	.word	0x200006e4
 8007bcc:	200007f8 	.word	0x200007f8

08007bd0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007bd8:	4b06      	ldr	r3, [pc, #24]	@ (8007bf4 <vTaskInternalSetTimeOutState+0x24>)
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007be0:	4b05      	ldr	r3, [pc, #20]	@ (8007bf8 <vTaskInternalSetTimeOutState+0x28>)
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	605a      	str	r2, [r3, #4]
}
 8007be8:	bf00      	nop
 8007bea:	370c      	adds	r7, #12
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr
 8007bf4:	200007fc 	.word	0x200007fc
 8007bf8:	200007e8 	.word	0x200007e8

08007bfc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b088      	sub	sp, #32
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d10b      	bne.n	8007c24 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c10:	f383 8811 	msr	BASEPRI, r3
 8007c14:	f3bf 8f6f 	isb	sy
 8007c18:	f3bf 8f4f 	dsb	sy
 8007c1c:	613b      	str	r3, [r7, #16]
}
 8007c1e:	bf00      	nop
 8007c20:	bf00      	nop
 8007c22:	e7fd      	b.n	8007c20 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d10b      	bne.n	8007c42 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c2e:	f383 8811 	msr	BASEPRI, r3
 8007c32:	f3bf 8f6f 	isb	sy
 8007c36:	f3bf 8f4f 	dsb	sy
 8007c3a:	60fb      	str	r3, [r7, #12]
}
 8007c3c:	bf00      	nop
 8007c3e:	bf00      	nop
 8007c40:	e7fd      	b.n	8007c3e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007c42:	f000 fc79 	bl	8008538 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007c46:	4b1d      	ldr	r3, [pc, #116]	@ (8007cbc <xTaskCheckForTimeOut+0xc0>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	69ba      	ldr	r2, [r7, #24]
 8007c52:	1ad3      	subs	r3, r2, r3
 8007c54:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c5e:	d102      	bne.n	8007c66 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007c60:	2300      	movs	r3, #0
 8007c62:	61fb      	str	r3, [r7, #28]
 8007c64:	e023      	b.n	8007cae <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	4b15      	ldr	r3, [pc, #84]	@ (8007cc0 <xTaskCheckForTimeOut+0xc4>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d007      	beq.n	8007c82 <xTaskCheckForTimeOut+0x86>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	69ba      	ldr	r2, [r7, #24]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d302      	bcc.n	8007c82 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	61fb      	str	r3, [r7, #28]
 8007c80:	e015      	b.n	8007cae <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	697a      	ldr	r2, [r7, #20]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d20b      	bcs.n	8007ca4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	1ad2      	subs	r2, r2, r3
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f7ff ff99 	bl	8007bd0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	61fb      	str	r3, [r7, #28]
 8007ca2:	e004      	b.n	8007cae <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007caa:	2301      	movs	r3, #1
 8007cac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007cae:	f000 fc75 	bl	800859c <vPortExitCritical>

	return xReturn;
 8007cb2:	69fb      	ldr	r3, [r7, #28]
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3720      	adds	r7, #32
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}
 8007cbc:	200007e8 	.word	0x200007e8
 8007cc0:	200007fc 	.word	0x200007fc

08007cc4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007cc8:	4b03      	ldr	r3, [pc, #12]	@ (8007cd8 <vTaskMissedYield+0x14>)
 8007cca:	2201      	movs	r2, #1
 8007ccc:	601a      	str	r2, [r3, #0]
}
 8007cce:	bf00      	nop
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr
 8007cd8:	200007f8 	.word	0x200007f8

08007cdc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b082      	sub	sp, #8
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007ce4:	f000 f852 	bl	8007d8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007ce8:	4b06      	ldr	r3, [pc, #24]	@ (8007d04 <prvIdleTask+0x28>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d9f9      	bls.n	8007ce4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007cf0:	4b05      	ldr	r3, [pc, #20]	@ (8007d08 <prvIdleTask+0x2c>)
 8007cf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cf6:	601a      	str	r2, [r3, #0]
 8007cf8:	f3bf 8f4f 	dsb	sy
 8007cfc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007d00:	e7f0      	b.n	8007ce4 <prvIdleTask+0x8>
 8007d02:	bf00      	nop
 8007d04:	200006e8 	.word	0x200006e8
 8007d08:	e000ed04 	.word	0xe000ed04

08007d0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d12:	2300      	movs	r3, #0
 8007d14:	607b      	str	r3, [r7, #4]
 8007d16:	e00c      	b.n	8007d32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	4413      	add	r3, r2
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	4a12      	ldr	r2, [pc, #72]	@ (8007d6c <prvInitialiseTaskLists+0x60>)
 8007d24:	4413      	add	r3, r2
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7fe fcff 	bl	800672a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	3301      	adds	r3, #1
 8007d30:	607b      	str	r3, [r7, #4]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2b06      	cmp	r3, #6
 8007d36:	d9ef      	bls.n	8007d18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007d38:	480d      	ldr	r0, [pc, #52]	@ (8007d70 <prvInitialiseTaskLists+0x64>)
 8007d3a:	f7fe fcf6 	bl	800672a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007d3e:	480d      	ldr	r0, [pc, #52]	@ (8007d74 <prvInitialiseTaskLists+0x68>)
 8007d40:	f7fe fcf3 	bl	800672a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007d44:	480c      	ldr	r0, [pc, #48]	@ (8007d78 <prvInitialiseTaskLists+0x6c>)
 8007d46:	f7fe fcf0 	bl	800672a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007d4a:	480c      	ldr	r0, [pc, #48]	@ (8007d7c <prvInitialiseTaskLists+0x70>)
 8007d4c:	f7fe fced 	bl	800672a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007d50:	480b      	ldr	r0, [pc, #44]	@ (8007d80 <prvInitialiseTaskLists+0x74>)
 8007d52:	f7fe fcea 	bl	800672a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007d56:	4b0b      	ldr	r3, [pc, #44]	@ (8007d84 <prvInitialiseTaskLists+0x78>)
 8007d58:	4a05      	ldr	r2, [pc, #20]	@ (8007d70 <prvInitialiseTaskLists+0x64>)
 8007d5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8007d88 <prvInitialiseTaskLists+0x7c>)
 8007d5e:	4a05      	ldr	r2, [pc, #20]	@ (8007d74 <prvInitialiseTaskLists+0x68>)
 8007d60:	601a      	str	r2, [r3, #0]
}
 8007d62:	bf00      	nop
 8007d64:	3708      	adds	r7, #8
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	200006e8 	.word	0x200006e8
 8007d70:	20000774 	.word	0x20000774
 8007d74:	20000788 	.word	0x20000788
 8007d78:	200007a4 	.word	0x200007a4
 8007d7c:	200007b8 	.word	0x200007b8
 8007d80:	200007d0 	.word	0x200007d0
 8007d84:	2000079c 	.word	0x2000079c
 8007d88:	200007a0 	.word	0x200007a0

08007d8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d92:	e019      	b.n	8007dc8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007d94:	f000 fbd0 	bl	8008538 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d98:	4b10      	ldr	r3, [pc, #64]	@ (8007ddc <prvCheckTasksWaitingTermination+0x50>)
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	3304      	adds	r3, #4
 8007da4:	4618      	mov	r0, r3
 8007da6:	f7fe fd4a 	bl	800683e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007daa:	4b0d      	ldr	r3, [pc, #52]	@ (8007de0 <prvCheckTasksWaitingTermination+0x54>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	3b01      	subs	r3, #1
 8007db0:	4a0b      	ldr	r2, [pc, #44]	@ (8007de0 <prvCheckTasksWaitingTermination+0x54>)
 8007db2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007db4:	4b0b      	ldr	r3, [pc, #44]	@ (8007de4 <prvCheckTasksWaitingTermination+0x58>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	3b01      	subs	r3, #1
 8007dba:	4a0a      	ldr	r2, [pc, #40]	@ (8007de4 <prvCheckTasksWaitingTermination+0x58>)
 8007dbc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007dbe:	f000 fbed 	bl	800859c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 f810 	bl	8007de8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007dc8:	4b06      	ldr	r3, [pc, #24]	@ (8007de4 <prvCheckTasksWaitingTermination+0x58>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d1e1      	bne.n	8007d94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007dd0:	bf00      	nop
 8007dd2:	bf00      	nop
 8007dd4:	3708      	adds	r7, #8
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	200007b8 	.word	0x200007b8
 8007de0:	200007e4 	.word	0x200007e4
 8007de4:	200007cc 	.word	0x200007cc

08007de8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d108      	bne.n	8007e0c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f000 fd48 	bl	8008894 <vPortFree>
				vPortFree( pxTCB );
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 fd45 	bl	8008894 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007e0a:	e019      	b.n	8007e40 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d103      	bne.n	8007e1e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 fd3c 	bl	8008894 <vPortFree>
	}
 8007e1c:	e010      	b.n	8007e40 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007e24:	2b02      	cmp	r3, #2
 8007e26:	d00b      	beq.n	8007e40 <prvDeleteTCB+0x58>
	__asm volatile
 8007e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e2c:	f383 8811 	msr	BASEPRI, r3
 8007e30:	f3bf 8f6f 	isb	sy
 8007e34:	f3bf 8f4f 	dsb	sy
 8007e38:	60fb      	str	r3, [r7, #12]
}
 8007e3a:	bf00      	nop
 8007e3c:	bf00      	nop
 8007e3e:	e7fd      	b.n	8007e3c <prvDeleteTCB+0x54>
	}
 8007e40:	bf00      	nop
 8007e42:	3710      	adds	r7, #16
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8007e80 <prvResetNextTaskUnblockTime+0x38>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d104      	bne.n	8007e62 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007e58:	4b0a      	ldr	r3, [pc, #40]	@ (8007e84 <prvResetNextTaskUnblockTime+0x3c>)
 8007e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e5e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007e60:	e008      	b.n	8007e74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e62:	4b07      	ldr	r3, [pc, #28]	@ (8007e80 <prvResetNextTaskUnblockTime+0x38>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	68db      	ldr	r3, [r3, #12]
 8007e6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	4a04      	ldr	r2, [pc, #16]	@ (8007e84 <prvResetNextTaskUnblockTime+0x3c>)
 8007e72:	6013      	str	r3, [r2, #0]
}
 8007e74:	bf00      	nop
 8007e76:	370c      	adds	r7, #12
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr
 8007e80:	2000079c 	.word	0x2000079c
 8007e84:	20000804 	.word	0x20000804

08007e88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8007ebc <xTaskGetSchedulerState+0x34>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d102      	bne.n	8007e9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007e96:	2301      	movs	r3, #1
 8007e98:	607b      	str	r3, [r7, #4]
 8007e9a:	e008      	b.n	8007eae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e9c:	4b08      	ldr	r3, [pc, #32]	@ (8007ec0 <xTaskGetSchedulerState+0x38>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d102      	bne.n	8007eaa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007ea4:	2302      	movs	r3, #2
 8007ea6:	607b      	str	r3, [r7, #4]
 8007ea8:	e001      	b.n	8007eae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007eae:	687b      	ldr	r3, [r7, #4]
	}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	370c      	adds	r7, #12
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr
 8007ebc:	200007f0 	.word	0x200007f0
 8007ec0:	2000080c 	.word	0x2000080c

08007ec4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d05e      	beq.n	8007f98 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ede:	4b31      	ldr	r3, [pc, #196]	@ (8007fa4 <xTaskPriorityInherit+0xe0>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d24e      	bcs.n	8007f86 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	699b      	ldr	r3, [r3, #24]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	db06      	blt.n	8007efe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ef0:	4b2c      	ldr	r3, [pc, #176]	@ (8007fa4 <xTaskPriorityInherit+0xe0>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ef6:	f1c3 0207 	rsb	r2, r3, #7
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	6959      	ldr	r1, [r3, #20]
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f06:	4613      	mov	r3, r2
 8007f08:	009b      	lsls	r3, r3, #2
 8007f0a:	4413      	add	r3, r2
 8007f0c:	009b      	lsls	r3, r3, #2
 8007f0e:	4a26      	ldr	r2, [pc, #152]	@ (8007fa8 <xTaskPriorityInherit+0xe4>)
 8007f10:	4413      	add	r3, r2
 8007f12:	4299      	cmp	r1, r3
 8007f14:	d12f      	bne.n	8007f76 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	3304      	adds	r3, #4
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7fe fc8f 	bl	800683e <uxListRemove>
 8007f20:	4603      	mov	r3, r0
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d10a      	bne.n	8007f3c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f30:	43da      	mvns	r2, r3
 8007f32:	4b1e      	ldr	r3, [pc, #120]	@ (8007fac <xTaskPriorityInherit+0xe8>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4013      	ands	r3, r2
 8007f38:	4a1c      	ldr	r2, [pc, #112]	@ (8007fac <xTaskPriorityInherit+0xe8>)
 8007f3a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007f3c:	4b19      	ldr	r3, [pc, #100]	@ (8007fa4 <xTaskPriorityInherit+0xe0>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	409a      	lsls	r2, r3
 8007f4e:	4b17      	ldr	r3, [pc, #92]	@ (8007fac <xTaskPriorityInherit+0xe8>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4313      	orrs	r3, r2
 8007f54:	4a15      	ldr	r2, [pc, #84]	@ (8007fac <xTaskPriorityInherit+0xe8>)
 8007f56:	6013      	str	r3, [r2, #0]
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f5c:	4613      	mov	r3, r2
 8007f5e:	009b      	lsls	r3, r3, #2
 8007f60:	4413      	add	r3, r2
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	4a10      	ldr	r2, [pc, #64]	@ (8007fa8 <xTaskPriorityInherit+0xe4>)
 8007f66:	441a      	add	r2, r3
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	3304      	adds	r3, #4
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	4610      	mov	r0, r2
 8007f70:	f7fe fc08 	bl	8006784 <vListInsertEnd>
 8007f74:	e004      	b.n	8007f80 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007f76:	4b0b      	ldr	r3, [pc, #44]	@ (8007fa4 <xTaskPriorityInherit+0xe0>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007f80:	2301      	movs	r3, #1
 8007f82:	60fb      	str	r3, [r7, #12]
 8007f84:	e008      	b.n	8007f98 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f8a:	4b06      	ldr	r3, [pc, #24]	@ (8007fa4 <xTaskPriorityInherit+0xe0>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d201      	bcs.n	8007f98 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007f94:	2301      	movs	r3, #1
 8007f96:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007f98:	68fb      	ldr	r3, [r7, #12]
	}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3710      	adds	r7, #16
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	200006e4 	.word	0x200006e4
 8007fa8:	200006e8 	.word	0x200006e8
 8007fac:	200007ec 	.word	0x200007ec

08007fb0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b086      	sub	sp, #24
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d070      	beq.n	80080a8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007fc6:	4b3b      	ldr	r3, [pc, #236]	@ (80080b4 <xTaskPriorityDisinherit+0x104>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	693a      	ldr	r2, [r7, #16]
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d00b      	beq.n	8007fe8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fd4:	f383 8811 	msr	BASEPRI, r3
 8007fd8:	f3bf 8f6f 	isb	sy
 8007fdc:	f3bf 8f4f 	dsb	sy
 8007fe0:	60fb      	str	r3, [r7, #12]
}
 8007fe2:	bf00      	nop
 8007fe4:	bf00      	nop
 8007fe6:	e7fd      	b.n	8007fe4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d10b      	bne.n	8008008 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ff4:	f383 8811 	msr	BASEPRI, r3
 8007ff8:	f3bf 8f6f 	isb	sy
 8007ffc:	f3bf 8f4f 	dsb	sy
 8008000:	60bb      	str	r3, [r7, #8]
}
 8008002:	bf00      	nop
 8008004:	bf00      	nop
 8008006:	e7fd      	b.n	8008004 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800800c:	1e5a      	subs	r2, r3, #1
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800801a:	429a      	cmp	r2, r3
 800801c:	d044      	beq.n	80080a8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008022:	2b00      	cmp	r3, #0
 8008024:	d140      	bne.n	80080a8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	3304      	adds	r3, #4
 800802a:	4618      	mov	r0, r3
 800802c:	f7fe fc07 	bl	800683e <uxListRemove>
 8008030:	4603      	mov	r3, r0
 8008032:	2b00      	cmp	r3, #0
 8008034:	d115      	bne.n	8008062 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800803a:	491f      	ldr	r1, [pc, #124]	@ (80080b8 <xTaskPriorityDisinherit+0x108>)
 800803c:	4613      	mov	r3, r2
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	4413      	add	r3, r2
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	440b      	add	r3, r1
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d10a      	bne.n	8008062 <xTaskPriorityDisinherit+0xb2>
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008050:	2201      	movs	r2, #1
 8008052:	fa02 f303 	lsl.w	r3, r2, r3
 8008056:	43da      	mvns	r2, r3
 8008058:	4b18      	ldr	r3, [pc, #96]	@ (80080bc <xTaskPriorityDisinherit+0x10c>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4013      	ands	r3, r2
 800805e:	4a17      	ldr	r2, [pc, #92]	@ (80080bc <xTaskPriorityDisinherit+0x10c>)
 8008060:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800806e:	f1c3 0207 	rsb	r2, r3, #7
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800807a:	2201      	movs	r2, #1
 800807c:	409a      	lsls	r2, r3
 800807e:	4b0f      	ldr	r3, [pc, #60]	@ (80080bc <xTaskPriorityDisinherit+0x10c>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4313      	orrs	r3, r2
 8008084:	4a0d      	ldr	r2, [pc, #52]	@ (80080bc <xTaskPriorityDisinherit+0x10c>)
 8008086:	6013      	str	r3, [r2, #0]
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800808c:	4613      	mov	r3, r2
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	4413      	add	r3, r2
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	4a08      	ldr	r2, [pc, #32]	@ (80080b8 <xTaskPriorityDisinherit+0x108>)
 8008096:	441a      	add	r2, r3
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	3304      	adds	r3, #4
 800809c:	4619      	mov	r1, r3
 800809e:	4610      	mov	r0, r2
 80080a0:	f7fe fb70 	bl	8006784 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80080a4:	2301      	movs	r3, #1
 80080a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80080a8:	697b      	ldr	r3, [r7, #20]
	}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3718      	adds	r7, #24
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	200006e4 	.word	0x200006e4
 80080b8:	200006e8 	.word	0x200006e8
 80080bc:	200007ec 	.word	0x200007ec

080080c0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b088      	sub	sp, #32
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80080ce:	2301      	movs	r3, #1
 80080d0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d079      	beq.n	80081cc <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80080d8:	69bb      	ldr	r3, [r7, #24]
 80080da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d10b      	bne.n	80080f8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80080e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080e4:	f383 8811 	msr	BASEPRI, r3
 80080e8:	f3bf 8f6f 	isb	sy
 80080ec:	f3bf 8f4f 	dsb	sy
 80080f0:	60fb      	str	r3, [r7, #12]
}
 80080f2:	bf00      	nop
 80080f4:	bf00      	nop
 80080f6:	e7fd      	b.n	80080f4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080fc:	683a      	ldr	r2, [r7, #0]
 80080fe:	429a      	cmp	r2, r3
 8008100:	d902      	bls.n	8008108 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	61fb      	str	r3, [r7, #28]
 8008106:	e002      	b.n	800810e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008108:	69bb      	ldr	r3, [r7, #24]
 800810a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800810c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800810e:	69bb      	ldr	r3, [r7, #24]
 8008110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008112:	69fa      	ldr	r2, [r7, #28]
 8008114:	429a      	cmp	r2, r3
 8008116:	d059      	beq.n	80081cc <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008118:	69bb      	ldr	r3, [r7, #24]
 800811a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800811c:	697a      	ldr	r2, [r7, #20]
 800811e:	429a      	cmp	r2, r3
 8008120:	d154      	bne.n	80081cc <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008122:	4b2c      	ldr	r3, [pc, #176]	@ (80081d4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	69ba      	ldr	r2, [r7, #24]
 8008128:	429a      	cmp	r2, r3
 800812a:	d10b      	bne.n	8008144 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800812c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008130:	f383 8811 	msr	BASEPRI, r3
 8008134:	f3bf 8f6f 	isb	sy
 8008138:	f3bf 8f4f 	dsb	sy
 800813c:	60bb      	str	r3, [r7, #8]
}
 800813e:	bf00      	nop
 8008140:	bf00      	nop
 8008142:	e7fd      	b.n	8008140 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008144:	69bb      	ldr	r3, [r7, #24]
 8008146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008148:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800814a:	69bb      	ldr	r3, [r7, #24]
 800814c:	69fa      	ldr	r2, [r7, #28]
 800814e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008150:	69bb      	ldr	r3, [r7, #24]
 8008152:	699b      	ldr	r3, [r3, #24]
 8008154:	2b00      	cmp	r3, #0
 8008156:	db04      	blt.n	8008162 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008158:	69fb      	ldr	r3, [r7, #28]
 800815a:	f1c3 0207 	rsb	r2, r3, #7
 800815e:	69bb      	ldr	r3, [r7, #24]
 8008160:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	6959      	ldr	r1, [r3, #20]
 8008166:	693a      	ldr	r2, [r7, #16]
 8008168:	4613      	mov	r3, r2
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	4413      	add	r3, r2
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	4a19      	ldr	r2, [pc, #100]	@ (80081d8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008172:	4413      	add	r3, r2
 8008174:	4299      	cmp	r1, r3
 8008176:	d129      	bne.n	80081cc <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008178:	69bb      	ldr	r3, [r7, #24]
 800817a:	3304      	adds	r3, #4
 800817c:	4618      	mov	r0, r3
 800817e:	f7fe fb5e 	bl	800683e <uxListRemove>
 8008182:	4603      	mov	r3, r0
 8008184:	2b00      	cmp	r3, #0
 8008186:	d10a      	bne.n	800819e <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008188:	69bb      	ldr	r3, [r7, #24]
 800818a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800818c:	2201      	movs	r2, #1
 800818e:	fa02 f303 	lsl.w	r3, r2, r3
 8008192:	43da      	mvns	r2, r3
 8008194:	4b11      	ldr	r3, [pc, #68]	@ (80081dc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4013      	ands	r3, r2
 800819a:	4a10      	ldr	r2, [pc, #64]	@ (80081dc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800819c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800819e:	69bb      	ldr	r3, [r7, #24]
 80081a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081a2:	2201      	movs	r2, #1
 80081a4:	409a      	lsls	r2, r3
 80081a6:	4b0d      	ldr	r3, [pc, #52]	@ (80081dc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4313      	orrs	r3, r2
 80081ac:	4a0b      	ldr	r2, [pc, #44]	@ (80081dc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80081ae:	6013      	str	r3, [r2, #0]
 80081b0:	69bb      	ldr	r3, [r7, #24]
 80081b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081b4:	4613      	mov	r3, r2
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	4413      	add	r3, r2
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	4a06      	ldr	r2, [pc, #24]	@ (80081d8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80081be:	441a      	add	r2, r3
 80081c0:	69bb      	ldr	r3, [r7, #24]
 80081c2:	3304      	adds	r3, #4
 80081c4:	4619      	mov	r1, r3
 80081c6:	4610      	mov	r0, r2
 80081c8:	f7fe fadc 	bl	8006784 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80081cc:	bf00      	nop
 80081ce:	3720      	adds	r7, #32
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	200006e4 	.word	0x200006e4
 80081d8:	200006e8 	.word	0x200006e8
 80081dc:	200007ec 	.word	0x200007ec

080081e0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80081e0:	b480      	push	{r7}
 80081e2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80081e4:	4b07      	ldr	r3, [pc, #28]	@ (8008204 <pvTaskIncrementMutexHeldCount+0x24>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d004      	beq.n	80081f6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80081ec:	4b05      	ldr	r3, [pc, #20]	@ (8008204 <pvTaskIncrementMutexHeldCount+0x24>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80081f2:	3201      	adds	r2, #1
 80081f4:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80081f6:	4b03      	ldr	r3, [pc, #12]	@ (8008204 <pvTaskIncrementMutexHeldCount+0x24>)
 80081f8:	681b      	ldr	r3, [r3, #0]
	}
 80081fa:	4618      	mov	r0, r3
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr
 8008204:	200006e4 	.word	0x200006e4

08008208 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008212:	4b29      	ldr	r3, [pc, #164]	@ (80082b8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008218:	4b28      	ldr	r3, [pc, #160]	@ (80082bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	3304      	adds	r3, #4
 800821e:	4618      	mov	r0, r3
 8008220:	f7fe fb0d 	bl	800683e <uxListRemove>
 8008224:	4603      	mov	r3, r0
 8008226:	2b00      	cmp	r3, #0
 8008228:	d10b      	bne.n	8008242 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800822a:	4b24      	ldr	r3, [pc, #144]	@ (80082bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008230:	2201      	movs	r2, #1
 8008232:	fa02 f303 	lsl.w	r3, r2, r3
 8008236:	43da      	mvns	r2, r3
 8008238:	4b21      	ldr	r3, [pc, #132]	@ (80082c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4013      	ands	r3, r2
 800823e:	4a20      	ldr	r2, [pc, #128]	@ (80082c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008240:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008248:	d10a      	bne.n	8008260 <prvAddCurrentTaskToDelayedList+0x58>
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d007      	beq.n	8008260 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008250:	4b1a      	ldr	r3, [pc, #104]	@ (80082bc <prvAddCurrentTaskToDelayedList+0xb4>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	3304      	adds	r3, #4
 8008256:	4619      	mov	r1, r3
 8008258:	481a      	ldr	r0, [pc, #104]	@ (80082c4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800825a:	f7fe fa93 	bl	8006784 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800825e:	e026      	b.n	80082ae <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008260:	68fa      	ldr	r2, [r7, #12]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4413      	add	r3, r2
 8008266:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008268:	4b14      	ldr	r3, [pc, #80]	@ (80082bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	68ba      	ldr	r2, [r7, #8]
 800826e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008270:	68ba      	ldr	r2, [r7, #8]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	429a      	cmp	r2, r3
 8008276:	d209      	bcs.n	800828c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008278:	4b13      	ldr	r3, [pc, #76]	@ (80082c8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	4b0f      	ldr	r3, [pc, #60]	@ (80082bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	3304      	adds	r3, #4
 8008282:	4619      	mov	r1, r3
 8008284:	4610      	mov	r0, r2
 8008286:	f7fe faa1 	bl	80067cc <vListInsert>
}
 800828a:	e010      	b.n	80082ae <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800828c:	4b0f      	ldr	r3, [pc, #60]	@ (80082cc <prvAddCurrentTaskToDelayedList+0xc4>)
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	4b0a      	ldr	r3, [pc, #40]	@ (80082bc <prvAddCurrentTaskToDelayedList+0xb4>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	3304      	adds	r3, #4
 8008296:	4619      	mov	r1, r3
 8008298:	4610      	mov	r0, r2
 800829a:	f7fe fa97 	bl	80067cc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800829e:	4b0c      	ldr	r3, [pc, #48]	@ (80082d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	68ba      	ldr	r2, [r7, #8]
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d202      	bcs.n	80082ae <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80082a8:	4a09      	ldr	r2, [pc, #36]	@ (80082d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	6013      	str	r3, [r2, #0]
}
 80082ae:	bf00      	nop
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	200007e8 	.word	0x200007e8
 80082bc:	200006e4 	.word	0x200006e4
 80082c0:	200007ec 	.word	0x200007ec
 80082c4:	200007d0 	.word	0x200007d0
 80082c8:	200007a0 	.word	0x200007a0
 80082cc:	2000079c 	.word	0x2000079c
 80082d0:	20000804 	.word	0x20000804

080082d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80082d4:	b480      	push	{r7}
 80082d6:	b085      	sub	sp, #20
 80082d8:	af00      	add	r7, sp, #0
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	60b9      	str	r1, [r7, #8]
 80082de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	3b04      	subs	r3, #4
 80082e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80082ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	3b04      	subs	r3, #4
 80082f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	f023 0201 	bic.w	r2, r3, #1
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	3b04      	subs	r3, #4
 8008302:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008304:	4a0c      	ldr	r2, [pc, #48]	@ (8008338 <pxPortInitialiseStack+0x64>)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	3b14      	subs	r3, #20
 800830e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	3b04      	subs	r3, #4
 800831a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f06f 0202 	mvn.w	r2, #2
 8008322:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	3b20      	subs	r3, #32
 8008328:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800832a:	68fb      	ldr	r3, [r7, #12]
}
 800832c:	4618      	mov	r0, r3
 800832e:	3714      	adds	r7, #20
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr
 8008338:	0800833d 	.word	0x0800833d

0800833c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008342:	2300      	movs	r3, #0
 8008344:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008346:	4b13      	ldr	r3, [pc, #76]	@ (8008394 <prvTaskExitError+0x58>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800834e:	d00b      	beq.n	8008368 <prvTaskExitError+0x2c>
	__asm volatile
 8008350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008354:	f383 8811 	msr	BASEPRI, r3
 8008358:	f3bf 8f6f 	isb	sy
 800835c:	f3bf 8f4f 	dsb	sy
 8008360:	60fb      	str	r3, [r7, #12]
}
 8008362:	bf00      	nop
 8008364:	bf00      	nop
 8008366:	e7fd      	b.n	8008364 <prvTaskExitError+0x28>
	__asm volatile
 8008368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800836c:	f383 8811 	msr	BASEPRI, r3
 8008370:	f3bf 8f6f 	isb	sy
 8008374:	f3bf 8f4f 	dsb	sy
 8008378:	60bb      	str	r3, [r7, #8]
}
 800837a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800837c:	bf00      	nop
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d0fc      	beq.n	800837e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008384:	bf00      	nop
 8008386:	bf00      	nop
 8008388:	3714      	adds	r7, #20
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr
 8008392:	bf00      	nop
 8008394:	20000018 	.word	0x20000018
	...

080083a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80083a0:	4b07      	ldr	r3, [pc, #28]	@ (80083c0 <pxCurrentTCBConst2>)
 80083a2:	6819      	ldr	r1, [r3, #0]
 80083a4:	6808      	ldr	r0, [r1, #0]
 80083a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083aa:	f380 8809 	msr	PSP, r0
 80083ae:	f3bf 8f6f 	isb	sy
 80083b2:	f04f 0000 	mov.w	r0, #0
 80083b6:	f380 8811 	msr	BASEPRI, r0
 80083ba:	4770      	bx	lr
 80083bc:	f3af 8000 	nop.w

080083c0 <pxCurrentTCBConst2>:
 80083c0:	200006e4 	.word	0x200006e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80083c4:	bf00      	nop
 80083c6:	bf00      	nop

080083c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80083c8:	4808      	ldr	r0, [pc, #32]	@ (80083ec <prvPortStartFirstTask+0x24>)
 80083ca:	6800      	ldr	r0, [r0, #0]
 80083cc:	6800      	ldr	r0, [r0, #0]
 80083ce:	f380 8808 	msr	MSP, r0
 80083d2:	f04f 0000 	mov.w	r0, #0
 80083d6:	f380 8814 	msr	CONTROL, r0
 80083da:	b662      	cpsie	i
 80083dc:	b661      	cpsie	f
 80083de:	f3bf 8f4f 	dsb	sy
 80083e2:	f3bf 8f6f 	isb	sy
 80083e6:	df00      	svc	0
 80083e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80083ea:	bf00      	nop
 80083ec:	e000ed08 	.word	0xe000ed08

080083f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b086      	sub	sp, #24
 80083f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80083f6:	4b47      	ldr	r3, [pc, #284]	@ (8008514 <xPortStartScheduler+0x124>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a47      	ldr	r2, [pc, #284]	@ (8008518 <xPortStartScheduler+0x128>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d10b      	bne.n	8008418 <xPortStartScheduler+0x28>
	__asm volatile
 8008400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008404:	f383 8811 	msr	BASEPRI, r3
 8008408:	f3bf 8f6f 	isb	sy
 800840c:	f3bf 8f4f 	dsb	sy
 8008410:	60fb      	str	r3, [r7, #12]
}
 8008412:	bf00      	nop
 8008414:	bf00      	nop
 8008416:	e7fd      	b.n	8008414 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008418:	4b3e      	ldr	r3, [pc, #248]	@ (8008514 <xPortStartScheduler+0x124>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a3f      	ldr	r2, [pc, #252]	@ (800851c <xPortStartScheduler+0x12c>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d10b      	bne.n	800843a <xPortStartScheduler+0x4a>
	__asm volatile
 8008422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008426:	f383 8811 	msr	BASEPRI, r3
 800842a:	f3bf 8f6f 	isb	sy
 800842e:	f3bf 8f4f 	dsb	sy
 8008432:	613b      	str	r3, [r7, #16]
}
 8008434:	bf00      	nop
 8008436:	bf00      	nop
 8008438:	e7fd      	b.n	8008436 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800843a:	4b39      	ldr	r3, [pc, #228]	@ (8008520 <xPortStartScheduler+0x130>)
 800843c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	b2db      	uxtb	r3, r3
 8008444:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	22ff      	movs	r2, #255	@ 0xff
 800844a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	b2db      	uxtb	r3, r3
 8008452:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008454:	78fb      	ldrb	r3, [r7, #3]
 8008456:	b2db      	uxtb	r3, r3
 8008458:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800845c:	b2da      	uxtb	r2, r3
 800845e:	4b31      	ldr	r3, [pc, #196]	@ (8008524 <xPortStartScheduler+0x134>)
 8008460:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008462:	4b31      	ldr	r3, [pc, #196]	@ (8008528 <xPortStartScheduler+0x138>)
 8008464:	2207      	movs	r2, #7
 8008466:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008468:	e009      	b.n	800847e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800846a:	4b2f      	ldr	r3, [pc, #188]	@ (8008528 <xPortStartScheduler+0x138>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	3b01      	subs	r3, #1
 8008470:	4a2d      	ldr	r2, [pc, #180]	@ (8008528 <xPortStartScheduler+0x138>)
 8008472:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008474:	78fb      	ldrb	r3, [r7, #3]
 8008476:	b2db      	uxtb	r3, r3
 8008478:	005b      	lsls	r3, r3, #1
 800847a:	b2db      	uxtb	r3, r3
 800847c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800847e:	78fb      	ldrb	r3, [r7, #3]
 8008480:	b2db      	uxtb	r3, r3
 8008482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008486:	2b80      	cmp	r3, #128	@ 0x80
 8008488:	d0ef      	beq.n	800846a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800848a:	4b27      	ldr	r3, [pc, #156]	@ (8008528 <xPortStartScheduler+0x138>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f1c3 0307 	rsb	r3, r3, #7
 8008492:	2b04      	cmp	r3, #4
 8008494:	d00b      	beq.n	80084ae <xPortStartScheduler+0xbe>
	__asm volatile
 8008496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800849a:	f383 8811 	msr	BASEPRI, r3
 800849e:	f3bf 8f6f 	isb	sy
 80084a2:	f3bf 8f4f 	dsb	sy
 80084a6:	60bb      	str	r3, [r7, #8]
}
 80084a8:	bf00      	nop
 80084aa:	bf00      	nop
 80084ac:	e7fd      	b.n	80084aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80084ae:	4b1e      	ldr	r3, [pc, #120]	@ (8008528 <xPortStartScheduler+0x138>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	021b      	lsls	r3, r3, #8
 80084b4:	4a1c      	ldr	r2, [pc, #112]	@ (8008528 <xPortStartScheduler+0x138>)
 80084b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80084b8:	4b1b      	ldr	r3, [pc, #108]	@ (8008528 <xPortStartScheduler+0x138>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80084c0:	4a19      	ldr	r2, [pc, #100]	@ (8008528 <xPortStartScheduler+0x138>)
 80084c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	b2da      	uxtb	r2, r3
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80084cc:	4b17      	ldr	r3, [pc, #92]	@ (800852c <xPortStartScheduler+0x13c>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a16      	ldr	r2, [pc, #88]	@ (800852c <xPortStartScheduler+0x13c>)
 80084d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80084d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80084d8:	4b14      	ldr	r3, [pc, #80]	@ (800852c <xPortStartScheduler+0x13c>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a13      	ldr	r2, [pc, #76]	@ (800852c <xPortStartScheduler+0x13c>)
 80084de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80084e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80084e4:	f000 f8da 	bl	800869c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80084e8:	4b11      	ldr	r3, [pc, #68]	@ (8008530 <xPortStartScheduler+0x140>)
 80084ea:	2200      	movs	r2, #0
 80084ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80084ee:	f000 f8f9 	bl	80086e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80084f2:	4b10      	ldr	r3, [pc, #64]	@ (8008534 <xPortStartScheduler+0x144>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a0f      	ldr	r2, [pc, #60]	@ (8008534 <xPortStartScheduler+0x144>)
 80084f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80084fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80084fe:	f7ff ff63 	bl	80083c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008502:	f7ff fa7f 	bl	8007a04 <vTaskSwitchContext>
	prvTaskExitError();
 8008506:	f7ff ff19 	bl	800833c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800850a:	2300      	movs	r3, #0
}
 800850c:	4618      	mov	r0, r3
 800850e:	3718      	adds	r7, #24
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}
 8008514:	e000ed00 	.word	0xe000ed00
 8008518:	410fc271 	.word	0x410fc271
 800851c:	410fc270 	.word	0x410fc270
 8008520:	e000e400 	.word	0xe000e400
 8008524:	20000810 	.word	0x20000810
 8008528:	20000814 	.word	0x20000814
 800852c:	e000ed20 	.word	0xe000ed20
 8008530:	20000018 	.word	0x20000018
 8008534:	e000ef34 	.word	0xe000ef34

08008538 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008538:	b480      	push	{r7}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
	__asm volatile
 800853e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008542:	f383 8811 	msr	BASEPRI, r3
 8008546:	f3bf 8f6f 	isb	sy
 800854a:	f3bf 8f4f 	dsb	sy
 800854e:	607b      	str	r3, [r7, #4]
}
 8008550:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008552:	4b10      	ldr	r3, [pc, #64]	@ (8008594 <vPortEnterCritical+0x5c>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	3301      	adds	r3, #1
 8008558:	4a0e      	ldr	r2, [pc, #56]	@ (8008594 <vPortEnterCritical+0x5c>)
 800855a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800855c:	4b0d      	ldr	r3, [pc, #52]	@ (8008594 <vPortEnterCritical+0x5c>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	2b01      	cmp	r3, #1
 8008562:	d110      	bne.n	8008586 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008564:	4b0c      	ldr	r3, [pc, #48]	@ (8008598 <vPortEnterCritical+0x60>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	b2db      	uxtb	r3, r3
 800856a:	2b00      	cmp	r3, #0
 800856c:	d00b      	beq.n	8008586 <vPortEnterCritical+0x4e>
	__asm volatile
 800856e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008572:	f383 8811 	msr	BASEPRI, r3
 8008576:	f3bf 8f6f 	isb	sy
 800857a:	f3bf 8f4f 	dsb	sy
 800857e:	603b      	str	r3, [r7, #0]
}
 8008580:	bf00      	nop
 8008582:	bf00      	nop
 8008584:	e7fd      	b.n	8008582 <vPortEnterCritical+0x4a>
	}
}
 8008586:	bf00      	nop
 8008588:	370c      	adds	r7, #12
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr
 8008592:	bf00      	nop
 8008594:	20000018 	.word	0x20000018
 8008598:	e000ed04 	.word	0xe000ed04

0800859c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80085a2:	4b12      	ldr	r3, [pc, #72]	@ (80085ec <vPortExitCritical+0x50>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d10b      	bne.n	80085c2 <vPortExitCritical+0x26>
	__asm volatile
 80085aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ae:	f383 8811 	msr	BASEPRI, r3
 80085b2:	f3bf 8f6f 	isb	sy
 80085b6:	f3bf 8f4f 	dsb	sy
 80085ba:	607b      	str	r3, [r7, #4]
}
 80085bc:	bf00      	nop
 80085be:	bf00      	nop
 80085c0:	e7fd      	b.n	80085be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80085c2:	4b0a      	ldr	r3, [pc, #40]	@ (80085ec <vPortExitCritical+0x50>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	3b01      	subs	r3, #1
 80085c8:	4a08      	ldr	r2, [pc, #32]	@ (80085ec <vPortExitCritical+0x50>)
 80085ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80085cc:	4b07      	ldr	r3, [pc, #28]	@ (80085ec <vPortExitCritical+0x50>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d105      	bne.n	80085e0 <vPortExitCritical+0x44>
 80085d4:	2300      	movs	r3, #0
 80085d6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80085de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80085e0:	bf00      	nop
 80085e2:	370c      	adds	r7, #12
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr
 80085ec:	20000018 	.word	0x20000018

080085f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80085f0:	f3ef 8009 	mrs	r0, PSP
 80085f4:	f3bf 8f6f 	isb	sy
 80085f8:	4b15      	ldr	r3, [pc, #84]	@ (8008650 <pxCurrentTCBConst>)
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	f01e 0f10 	tst.w	lr, #16
 8008600:	bf08      	it	eq
 8008602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800860a:	6010      	str	r0, [r2, #0]
 800860c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008610:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008614:	f380 8811 	msr	BASEPRI, r0
 8008618:	f3bf 8f4f 	dsb	sy
 800861c:	f3bf 8f6f 	isb	sy
 8008620:	f7ff f9f0 	bl	8007a04 <vTaskSwitchContext>
 8008624:	f04f 0000 	mov.w	r0, #0
 8008628:	f380 8811 	msr	BASEPRI, r0
 800862c:	bc09      	pop	{r0, r3}
 800862e:	6819      	ldr	r1, [r3, #0]
 8008630:	6808      	ldr	r0, [r1, #0]
 8008632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008636:	f01e 0f10 	tst.w	lr, #16
 800863a:	bf08      	it	eq
 800863c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008640:	f380 8809 	msr	PSP, r0
 8008644:	f3bf 8f6f 	isb	sy
 8008648:	4770      	bx	lr
 800864a:	bf00      	nop
 800864c:	f3af 8000 	nop.w

08008650 <pxCurrentTCBConst>:
 8008650:	200006e4 	.word	0x200006e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008654:	bf00      	nop
 8008656:	bf00      	nop

08008658 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
	__asm volatile
 800865e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008662:	f383 8811 	msr	BASEPRI, r3
 8008666:	f3bf 8f6f 	isb	sy
 800866a:	f3bf 8f4f 	dsb	sy
 800866e:	607b      	str	r3, [r7, #4]
}
 8008670:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008672:	f7ff f90d 	bl	8007890 <xTaskIncrementTick>
 8008676:	4603      	mov	r3, r0
 8008678:	2b00      	cmp	r3, #0
 800867a:	d003      	beq.n	8008684 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800867c:	4b06      	ldr	r3, [pc, #24]	@ (8008698 <SysTick_Handler+0x40>)
 800867e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008682:	601a      	str	r2, [r3, #0]
 8008684:	2300      	movs	r3, #0
 8008686:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	f383 8811 	msr	BASEPRI, r3
}
 800868e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008690:	bf00      	nop
 8008692:	3708      	adds	r7, #8
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}
 8008698:	e000ed04 	.word	0xe000ed04

0800869c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800869c:	b480      	push	{r7}
 800869e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80086a0:	4b0b      	ldr	r3, [pc, #44]	@ (80086d0 <vPortSetupTimerInterrupt+0x34>)
 80086a2:	2200      	movs	r2, #0
 80086a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80086a6:	4b0b      	ldr	r3, [pc, #44]	@ (80086d4 <vPortSetupTimerInterrupt+0x38>)
 80086a8:	2200      	movs	r2, #0
 80086aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80086ac:	4b0a      	ldr	r3, [pc, #40]	@ (80086d8 <vPortSetupTimerInterrupt+0x3c>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a0a      	ldr	r2, [pc, #40]	@ (80086dc <vPortSetupTimerInterrupt+0x40>)
 80086b2:	fba2 2303 	umull	r2, r3, r2, r3
 80086b6:	099b      	lsrs	r3, r3, #6
 80086b8:	4a09      	ldr	r2, [pc, #36]	@ (80086e0 <vPortSetupTimerInterrupt+0x44>)
 80086ba:	3b01      	subs	r3, #1
 80086bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80086be:	4b04      	ldr	r3, [pc, #16]	@ (80086d0 <vPortSetupTimerInterrupt+0x34>)
 80086c0:	2207      	movs	r2, #7
 80086c2:	601a      	str	r2, [r3, #0]
}
 80086c4:	bf00      	nop
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr
 80086ce:	bf00      	nop
 80086d0:	e000e010 	.word	0xe000e010
 80086d4:	e000e018 	.word	0xe000e018
 80086d8:	2000000c 	.word	0x2000000c
 80086dc:	10624dd3 	.word	0x10624dd3
 80086e0:	e000e014 	.word	0xe000e014

080086e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80086e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80086f4 <vPortEnableVFP+0x10>
 80086e8:	6801      	ldr	r1, [r0, #0]
 80086ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80086ee:	6001      	str	r1, [r0, #0]
 80086f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80086f2:	bf00      	nop
 80086f4:	e000ed88 	.word	0xe000ed88

080086f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b08a      	sub	sp, #40	@ 0x28
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008700:	2300      	movs	r3, #0
 8008702:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008704:	f7ff f808 	bl	8007718 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008708:	4b5c      	ldr	r3, [pc, #368]	@ (800887c <pvPortMalloc+0x184>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d101      	bne.n	8008714 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008710:	f000 f924 	bl	800895c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008714:	4b5a      	ldr	r3, [pc, #360]	@ (8008880 <pvPortMalloc+0x188>)
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	4013      	ands	r3, r2
 800871c:	2b00      	cmp	r3, #0
 800871e:	f040 8095 	bne.w	800884c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d01e      	beq.n	8008766 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008728:	2208      	movs	r2, #8
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	4413      	add	r3, r2
 800872e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f003 0307 	and.w	r3, r3, #7
 8008736:	2b00      	cmp	r3, #0
 8008738:	d015      	beq.n	8008766 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f023 0307 	bic.w	r3, r3, #7
 8008740:	3308      	adds	r3, #8
 8008742:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f003 0307 	and.w	r3, r3, #7
 800874a:	2b00      	cmp	r3, #0
 800874c:	d00b      	beq.n	8008766 <pvPortMalloc+0x6e>
	__asm volatile
 800874e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008752:	f383 8811 	msr	BASEPRI, r3
 8008756:	f3bf 8f6f 	isb	sy
 800875a:	f3bf 8f4f 	dsb	sy
 800875e:	617b      	str	r3, [r7, #20]
}
 8008760:	bf00      	nop
 8008762:	bf00      	nop
 8008764:	e7fd      	b.n	8008762 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d06f      	beq.n	800884c <pvPortMalloc+0x154>
 800876c:	4b45      	ldr	r3, [pc, #276]	@ (8008884 <pvPortMalloc+0x18c>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	429a      	cmp	r2, r3
 8008774:	d86a      	bhi.n	800884c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008776:	4b44      	ldr	r3, [pc, #272]	@ (8008888 <pvPortMalloc+0x190>)
 8008778:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800877a:	4b43      	ldr	r3, [pc, #268]	@ (8008888 <pvPortMalloc+0x190>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008780:	e004      	b.n	800878c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008784:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800878c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	429a      	cmp	r2, r3
 8008794:	d903      	bls.n	800879e <pvPortMalloc+0xa6>
 8008796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d1f1      	bne.n	8008782 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800879e:	4b37      	ldr	r3, [pc, #220]	@ (800887c <pvPortMalloc+0x184>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d051      	beq.n	800884c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80087a8:	6a3b      	ldr	r3, [r7, #32]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	2208      	movs	r2, #8
 80087ae:	4413      	add	r3, r2
 80087b0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80087b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	6a3b      	ldr	r3, [r7, #32]
 80087b8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80087ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087bc:	685a      	ldr	r2, [r3, #4]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	1ad2      	subs	r2, r2, r3
 80087c2:	2308      	movs	r3, #8
 80087c4:	005b      	lsls	r3, r3, #1
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d920      	bls.n	800880c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80087ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	4413      	add	r3, r2
 80087d0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	f003 0307 	and.w	r3, r3, #7
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d00b      	beq.n	80087f4 <pvPortMalloc+0xfc>
	__asm volatile
 80087dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087e0:	f383 8811 	msr	BASEPRI, r3
 80087e4:	f3bf 8f6f 	isb	sy
 80087e8:	f3bf 8f4f 	dsb	sy
 80087ec:	613b      	str	r3, [r7, #16]
}
 80087ee:	bf00      	nop
 80087f0:	bf00      	nop
 80087f2:	e7fd      	b.n	80087f0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80087f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087f6:	685a      	ldr	r2, [r3, #4]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	1ad2      	subs	r2, r2, r3
 80087fc:	69bb      	ldr	r3, [r7, #24]
 80087fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008806:	69b8      	ldr	r0, [r7, #24]
 8008808:	f000 f90a 	bl	8008a20 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800880c:	4b1d      	ldr	r3, [pc, #116]	@ (8008884 <pvPortMalloc+0x18c>)
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	1ad3      	subs	r3, r2, r3
 8008816:	4a1b      	ldr	r2, [pc, #108]	@ (8008884 <pvPortMalloc+0x18c>)
 8008818:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800881a:	4b1a      	ldr	r3, [pc, #104]	@ (8008884 <pvPortMalloc+0x18c>)
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	4b1b      	ldr	r3, [pc, #108]	@ (800888c <pvPortMalloc+0x194>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	429a      	cmp	r2, r3
 8008824:	d203      	bcs.n	800882e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008826:	4b17      	ldr	r3, [pc, #92]	@ (8008884 <pvPortMalloc+0x18c>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a18      	ldr	r2, [pc, #96]	@ (800888c <pvPortMalloc+0x194>)
 800882c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800882e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008830:	685a      	ldr	r2, [r3, #4]
 8008832:	4b13      	ldr	r3, [pc, #76]	@ (8008880 <pvPortMalloc+0x188>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	431a      	orrs	r2, r3
 8008838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800883a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800883c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800883e:	2200      	movs	r2, #0
 8008840:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008842:	4b13      	ldr	r3, [pc, #76]	@ (8008890 <pvPortMalloc+0x198>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	3301      	adds	r3, #1
 8008848:	4a11      	ldr	r2, [pc, #68]	@ (8008890 <pvPortMalloc+0x198>)
 800884a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800884c:	f7fe ff72 	bl	8007734 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008850:	69fb      	ldr	r3, [r7, #28]
 8008852:	f003 0307 	and.w	r3, r3, #7
 8008856:	2b00      	cmp	r3, #0
 8008858:	d00b      	beq.n	8008872 <pvPortMalloc+0x17a>
	__asm volatile
 800885a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800885e:	f383 8811 	msr	BASEPRI, r3
 8008862:	f3bf 8f6f 	isb	sy
 8008866:	f3bf 8f4f 	dsb	sy
 800886a:	60fb      	str	r3, [r7, #12]
}
 800886c:	bf00      	nop
 800886e:	bf00      	nop
 8008870:	e7fd      	b.n	800886e <pvPortMalloc+0x176>
	return pvReturn;
 8008872:	69fb      	ldr	r3, [r7, #28]
}
 8008874:	4618      	mov	r0, r3
 8008876:	3728      	adds	r7, #40	@ 0x28
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}
 800887c:	20004420 	.word	0x20004420
 8008880:	20004434 	.word	0x20004434
 8008884:	20004424 	.word	0x20004424
 8008888:	20004418 	.word	0x20004418
 800888c:	20004428 	.word	0x20004428
 8008890:	2000442c 	.word	0x2000442c

08008894 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b086      	sub	sp, #24
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d04f      	beq.n	8008946 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80088a6:	2308      	movs	r3, #8
 80088a8:	425b      	negs	r3, r3
 80088aa:	697a      	ldr	r2, [r7, #20]
 80088ac:	4413      	add	r3, r2
 80088ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	685a      	ldr	r2, [r3, #4]
 80088b8:	4b25      	ldr	r3, [pc, #148]	@ (8008950 <vPortFree+0xbc>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4013      	ands	r3, r2
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d10b      	bne.n	80088da <vPortFree+0x46>
	__asm volatile
 80088c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088c6:	f383 8811 	msr	BASEPRI, r3
 80088ca:	f3bf 8f6f 	isb	sy
 80088ce:	f3bf 8f4f 	dsb	sy
 80088d2:	60fb      	str	r3, [r7, #12]
}
 80088d4:	bf00      	nop
 80088d6:	bf00      	nop
 80088d8:	e7fd      	b.n	80088d6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d00b      	beq.n	80088fa <vPortFree+0x66>
	__asm volatile
 80088e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088e6:	f383 8811 	msr	BASEPRI, r3
 80088ea:	f3bf 8f6f 	isb	sy
 80088ee:	f3bf 8f4f 	dsb	sy
 80088f2:	60bb      	str	r3, [r7, #8]
}
 80088f4:	bf00      	nop
 80088f6:	bf00      	nop
 80088f8:	e7fd      	b.n	80088f6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	685a      	ldr	r2, [r3, #4]
 80088fe:	4b14      	ldr	r3, [pc, #80]	@ (8008950 <vPortFree+0xbc>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4013      	ands	r3, r2
 8008904:	2b00      	cmp	r3, #0
 8008906:	d01e      	beq.n	8008946 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d11a      	bne.n	8008946 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	685a      	ldr	r2, [r3, #4]
 8008914:	4b0e      	ldr	r3, [pc, #56]	@ (8008950 <vPortFree+0xbc>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	43db      	mvns	r3, r3
 800891a:	401a      	ands	r2, r3
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008920:	f7fe fefa 	bl	8007718 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	685a      	ldr	r2, [r3, #4]
 8008928:	4b0a      	ldr	r3, [pc, #40]	@ (8008954 <vPortFree+0xc0>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4413      	add	r3, r2
 800892e:	4a09      	ldr	r2, [pc, #36]	@ (8008954 <vPortFree+0xc0>)
 8008930:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008932:	6938      	ldr	r0, [r7, #16]
 8008934:	f000 f874 	bl	8008a20 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008938:	4b07      	ldr	r3, [pc, #28]	@ (8008958 <vPortFree+0xc4>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	3301      	adds	r3, #1
 800893e:	4a06      	ldr	r2, [pc, #24]	@ (8008958 <vPortFree+0xc4>)
 8008940:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008942:	f7fe fef7 	bl	8007734 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008946:	bf00      	nop
 8008948:	3718      	adds	r7, #24
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	20004434 	.word	0x20004434
 8008954:	20004424 	.word	0x20004424
 8008958:	20004430 	.word	0x20004430

0800895c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800895c:	b480      	push	{r7}
 800895e:	b085      	sub	sp, #20
 8008960:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008962:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008966:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008968:	4b27      	ldr	r3, [pc, #156]	@ (8008a08 <prvHeapInit+0xac>)
 800896a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f003 0307 	and.w	r3, r3, #7
 8008972:	2b00      	cmp	r3, #0
 8008974:	d00c      	beq.n	8008990 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	3307      	adds	r3, #7
 800897a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f023 0307 	bic.w	r3, r3, #7
 8008982:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008984:	68ba      	ldr	r2, [r7, #8]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	1ad3      	subs	r3, r2, r3
 800898a:	4a1f      	ldr	r2, [pc, #124]	@ (8008a08 <prvHeapInit+0xac>)
 800898c:	4413      	add	r3, r2
 800898e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008994:	4a1d      	ldr	r2, [pc, #116]	@ (8008a0c <prvHeapInit+0xb0>)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800899a:	4b1c      	ldr	r3, [pc, #112]	@ (8008a0c <prvHeapInit+0xb0>)
 800899c:	2200      	movs	r2, #0
 800899e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	68ba      	ldr	r2, [r7, #8]
 80089a4:	4413      	add	r3, r2
 80089a6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80089a8:	2208      	movs	r2, #8
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	1a9b      	subs	r3, r3, r2
 80089ae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f023 0307 	bic.w	r3, r3, #7
 80089b6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	4a15      	ldr	r2, [pc, #84]	@ (8008a10 <prvHeapInit+0xb4>)
 80089bc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80089be:	4b14      	ldr	r3, [pc, #80]	@ (8008a10 <prvHeapInit+0xb4>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	2200      	movs	r2, #0
 80089c4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80089c6:	4b12      	ldr	r3, [pc, #72]	@ (8008a10 <prvHeapInit+0xb4>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	2200      	movs	r2, #0
 80089cc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	68fa      	ldr	r2, [r7, #12]
 80089d6:	1ad2      	subs	r2, r2, r3
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80089dc:	4b0c      	ldr	r3, [pc, #48]	@ (8008a10 <prvHeapInit+0xb4>)
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	4a0a      	ldr	r2, [pc, #40]	@ (8008a14 <prvHeapInit+0xb8>)
 80089ea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	4a09      	ldr	r2, [pc, #36]	@ (8008a18 <prvHeapInit+0xbc>)
 80089f2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80089f4:	4b09      	ldr	r3, [pc, #36]	@ (8008a1c <prvHeapInit+0xc0>)
 80089f6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80089fa:	601a      	str	r2, [r3, #0]
}
 80089fc:	bf00      	nop
 80089fe:	3714      	adds	r7, #20
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr
 8008a08:	20000818 	.word	0x20000818
 8008a0c:	20004418 	.word	0x20004418
 8008a10:	20004420 	.word	0x20004420
 8008a14:	20004428 	.word	0x20004428
 8008a18:	20004424 	.word	0x20004424
 8008a1c:	20004434 	.word	0x20004434

08008a20 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008a20:	b480      	push	{r7}
 8008a22:	b085      	sub	sp, #20
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008a28:	4b28      	ldr	r3, [pc, #160]	@ (8008acc <prvInsertBlockIntoFreeList+0xac>)
 8008a2a:	60fb      	str	r3, [r7, #12]
 8008a2c:	e002      	b.n	8008a34 <prvInsertBlockIntoFreeList+0x14>
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	60fb      	str	r3, [r7, #12]
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d8f7      	bhi.n	8008a2e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	68ba      	ldr	r2, [r7, #8]
 8008a48:	4413      	add	r3, r2
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d108      	bne.n	8008a62 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	685a      	ldr	r2, [r3, #4]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	441a      	add	r2, r3
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	68ba      	ldr	r2, [r7, #8]
 8008a6c:	441a      	add	r2, r3
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d118      	bne.n	8008aa8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681a      	ldr	r2, [r3, #0]
 8008a7a:	4b15      	ldr	r3, [pc, #84]	@ (8008ad0 <prvInsertBlockIntoFreeList+0xb0>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d00d      	beq.n	8008a9e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	685a      	ldr	r2, [r3, #4]
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	441a      	add	r2, r3
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	601a      	str	r2, [r3, #0]
 8008a9c:	e008      	b.n	8008ab0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008a9e:	4b0c      	ldr	r3, [pc, #48]	@ (8008ad0 <prvInsertBlockIntoFreeList+0xb0>)
 8008aa0:	681a      	ldr	r2, [r3, #0]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	601a      	str	r2, [r3, #0]
 8008aa6:	e003      	b.n	8008ab0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008ab0:	68fa      	ldr	r2, [r7, #12]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d002      	beq.n	8008abe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008abe:	bf00      	nop
 8008ac0:	3714      	adds	r7, #20
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac8:	4770      	bx	lr
 8008aca:	bf00      	nop
 8008acc:	20004418 	.word	0x20004418
 8008ad0:	20004420 	.word	0x20004420

08008ad4 <__cvt>:
 8008ad4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ad8:	ec57 6b10 	vmov	r6, r7, d0
 8008adc:	2f00      	cmp	r7, #0
 8008ade:	460c      	mov	r4, r1
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	463b      	mov	r3, r7
 8008ae4:	bfbb      	ittet	lt
 8008ae6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008aea:	461f      	movlt	r7, r3
 8008aec:	2300      	movge	r3, #0
 8008aee:	232d      	movlt	r3, #45	@ 0x2d
 8008af0:	700b      	strb	r3, [r1, #0]
 8008af2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008af4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008af8:	4691      	mov	r9, r2
 8008afa:	f023 0820 	bic.w	r8, r3, #32
 8008afe:	bfbc      	itt	lt
 8008b00:	4632      	movlt	r2, r6
 8008b02:	4616      	movlt	r6, r2
 8008b04:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008b08:	d005      	beq.n	8008b16 <__cvt+0x42>
 8008b0a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008b0e:	d100      	bne.n	8008b12 <__cvt+0x3e>
 8008b10:	3401      	adds	r4, #1
 8008b12:	2102      	movs	r1, #2
 8008b14:	e000      	b.n	8008b18 <__cvt+0x44>
 8008b16:	2103      	movs	r1, #3
 8008b18:	ab03      	add	r3, sp, #12
 8008b1a:	9301      	str	r3, [sp, #4]
 8008b1c:	ab02      	add	r3, sp, #8
 8008b1e:	9300      	str	r3, [sp, #0]
 8008b20:	ec47 6b10 	vmov	d0, r6, r7
 8008b24:	4653      	mov	r3, sl
 8008b26:	4622      	mov	r2, r4
 8008b28:	f001 f8ee 	bl	8009d08 <_dtoa_r>
 8008b2c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008b30:	4605      	mov	r5, r0
 8008b32:	d119      	bne.n	8008b68 <__cvt+0x94>
 8008b34:	f019 0f01 	tst.w	r9, #1
 8008b38:	d00e      	beq.n	8008b58 <__cvt+0x84>
 8008b3a:	eb00 0904 	add.w	r9, r0, r4
 8008b3e:	2200      	movs	r2, #0
 8008b40:	2300      	movs	r3, #0
 8008b42:	4630      	mov	r0, r6
 8008b44:	4639      	mov	r1, r7
 8008b46:	f7f7 ffdf 	bl	8000b08 <__aeabi_dcmpeq>
 8008b4a:	b108      	cbz	r0, 8008b50 <__cvt+0x7c>
 8008b4c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008b50:	2230      	movs	r2, #48	@ 0x30
 8008b52:	9b03      	ldr	r3, [sp, #12]
 8008b54:	454b      	cmp	r3, r9
 8008b56:	d31e      	bcc.n	8008b96 <__cvt+0xc2>
 8008b58:	9b03      	ldr	r3, [sp, #12]
 8008b5a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b5c:	1b5b      	subs	r3, r3, r5
 8008b5e:	4628      	mov	r0, r5
 8008b60:	6013      	str	r3, [r2, #0]
 8008b62:	b004      	add	sp, #16
 8008b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b68:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008b6c:	eb00 0904 	add.w	r9, r0, r4
 8008b70:	d1e5      	bne.n	8008b3e <__cvt+0x6a>
 8008b72:	7803      	ldrb	r3, [r0, #0]
 8008b74:	2b30      	cmp	r3, #48	@ 0x30
 8008b76:	d10a      	bne.n	8008b8e <__cvt+0xba>
 8008b78:	2200      	movs	r2, #0
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	4630      	mov	r0, r6
 8008b7e:	4639      	mov	r1, r7
 8008b80:	f7f7 ffc2 	bl	8000b08 <__aeabi_dcmpeq>
 8008b84:	b918      	cbnz	r0, 8008b8e <__cvt+0xba>
 8008b86:	f1c4 0401 	rsb	r4, r4, #1
 8008b8a:	f8ca 4000 	str.w	r4, [sl]
 8008b8e:	f8da 3000 	ldr.w	r3, [sl]
 8008b92:	4499      	add	r9, r3
 8008b94:	e7d3      	b.n	8008b3e <__cvt+0x6a>
 8008b96:	1c59      	adds	r1, r3, #1
 8008b98:	9103      	str	r1, [sp, #12]
 8008b9a:	701a      	strb	r2, [r3, #0]
 8008b9c:	e7d9      	b.n	8008b52 <__cvt+0x7e>

08008b9e <__exponent>:
 8008b9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ba0:	2900      	cmp	r1, #0
 8008ba2:	bfba      	itte	lt
 8008ba4:	4249      	neglt	r1, r1
 8008ba6:	232d      	movlt	r3, #45	@ 0x2d
 8008ba8:	232b      	movge	r3, #43	@ 0x2b
 8008baa:	2909      	cmp	r1, #9
 8008bac:	7002      	strb	r2, [r0, #0]
 8008bae:	7043      	strb	r3, [r0, #1]
 8008bb0:	dd29      	ble.n	8008c06 <__exponent+0x68>
 8008bb2:	f10d 0307 	add.w	r3, sp, #7
 8008bb6:	461d      	mov	r5, r3
 8008bb8:	270a      	movs	r7, #10
 8008bba:	461a      	mov	r2, r3
 8008bbc:	fbb1 f6f7 	udiv	r6, r1, r7
 8008bc0:	fb07 1416 	mls	r4, r7, r6, r1
 8008bc4:	3430      	adds	r4, #48	@ 0x30
 8008bc6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008bca:	460c      	mov	r4, r1
 8008bcc:	2c63      	cmp	r4, #99	@ 0x63
 8008bce:	f103 33ff 	add.w	r3, r3, #4294967295
 8008bd2:	4631      	mov	r1, r6
 8008bd4:	dcf1      	bgt.n	8008bba <__exponent+0x1c>
 8008bd6:	3130      	adds	r1, #48	@ 0x30
 8008bd8:	1e94      	subs	r4, r2, #2
 8008bda:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008bde:	1c41      	adds	r1, r0, #1
 8008be0:	4623      	mov	r3, r4
 8008be2:	42ab      	cmp	r3, r5
 8008be4:	d30a      	bcc.n	8008bfc <__exponent+0x5e>
 8008be6:	f10d 0309 	add.w	r3, sp, #9
 8008bea:	1a9b      	subs	r3, r3, r2
 8008bec:	42ac      	cmp	r4, r5
 8008bee:	bf88      	it	hi
 8008bf0:	2300      	movhi	r3, #0
 8008bf2:	3302      	adds	r3, #2
 8008bf4:	4403      	add	r3, r0
 8008bf6:	1a18      	subs	r0, r3, r0
 8008bf8:	b003      	add	sp, #12
 8008bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bfc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008c00:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008c04:	e7ed      	b.n	8008be2 <__exponent+0x44>
 8008c06:	2330      	movs	r3, #48	@ 0x30
 8008c08:	3130      	adds	r1, #48	@ 0x30
 8008c0a:	7083      	strb	r3, [r0, #2]
 8008c0c:	70c1      	strb	r1, [r0, #3]
 8008c0e:	1d03      	adds	r3, r0, #4
 8008c10:	e7f1      	b.n	8008bf6 <__exponent+0x58>
	...

08008c14 <_printf_float>:
 8008c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c18:	b08d      	sub	sp, #52	@ 0x34
 8008c1a:	460c      	mov	r4, r1
 8008c1c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008c20:	4616      	mov	r6, r2
 8008c22:	461f      	mov	r7, r3
 8008c24:	4605      	mov	r5, r0
 8008c26:	f000 ff5b 	bl	8009ae0 <_localeconv_r>
 8008c2a:	6803      	ldr	r3, [r0, #0]
 8008c2c:	9304      	str	r3, [sp, #16]
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f7f7 fb3e 	bl	80002b0 <strlen>
 8008c34:	2300      	movs	r3, #0
 8008c36:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c38:	f8d8 3000 	ldr.w	r3, [r8]
 8008c3c:	9005      	str	r0, [sp, #20]
 8008c3e:	3307      	adds	r3, #7
 8008c40:	f023 0307 	bic.w	r3, r3, #7
 8008c44:	f103 0208 	add.w	r2, r3, #8
 8008c48:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008c4c:	f8d4 b000 	ldr.w	fp, [r4]
 8008c50:	f8c8 2000 	str.w	r2, [r8]
 8008c54:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008c58:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008c5c:	9307      	str	r3, [sp, #28]
 8008c5e:	f8cd 8018 	str.w	r8, [sp, #24]
 8008c62:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008c66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c6a:	4b9c      	ldr	r3, [pc, #624]	@ (8008edc <_printf_float+0x2c8>)
 8008c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c70:	f7f7 ff7c 	bl	8000b6c <__aeabi_dcmpun>
 8008c74:	bb70      	cbnz	r0, 8008cd4 <_printf_float+0xc0>
 8008c76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c7a:	4b98      	ldr	r3, [pc, #608]	@ (8008edc <_printf_float+0x2c8>)
 8008c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c80:	f7f7 ff56 	bl	8000b30 <__aeabi_dcmple>
 8008c84:	bb30      	cbnz	r0, 8008cd4 <_printf_float+0xc0>
 8008c86:	2200      	movs	r2, #0
 8008c88:	2300      	movs	r3, #0
 8008c8a:	4640      	mov	r0, r8
 8008c8c:	4649      	mov	r1, r9
 8008c8e:	f7f7 ff45 	bl	8000b1c <__aeabi_dcmplt>
 8008c92:	b110      	cbz	r0, 8008c9a <_printf_float+0x86>
 8008c94:	232d      	movs	r3, #45	@ 0x2d
 8008c96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c9a:	4a91      	ldr	r2, [pc, #580]	@ (8008ee0 <_printf_float+0x2cc>)
 8008c9c:	4b91      	ldr	r3, [pc, #580]	@ (8008ee4 <_printf_float+0x2d0>)
 8008c9e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008ca2:	bf8c      	ite	hi
 8008ca4:	4690      	movhi	r8, r2
 8008ca6:	4698      	movls	r8, r3
 8008ca8:	2303      	movs	r3, #3
 8008caa:	6123      	str	r3, [r4, #16]
 8008cac:	f02b 0304 	bic.w	r3, fp, #4
 8008cb0:	6023      	str	r3, [r4, #0]
 8008cb2:	f04f 0900 	mov.w	r9, #0
 8008cb6:	9700      	str	r7, [sp, #0]
 8008cb8:	4633      	mov	r3, r6
 8008cba:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008cbc:	4621      	mov	r1, r4
 8008cbe:	4628      	mov	r0, r5
 8008cc0:	f000 f9d2 	bl	8009068 <_printf_common>
 8008cc4:	3001      	adds	r0, #1
 8008cc6:	f040 808d 	bne.w	8008de4 <_printf_float+0x1d0>
 8008cca:	f04f 30ff 	mov.w	r0, #4294967295
 8008cce:	b00d      	add	sp, #52	@ 0x34
 8008cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cd4:	4642      	mov	r2, r8
 8008cd6:	464b      	mov	r3, r9
 8008cd8:	4640      	mov	r0, r8
 8008cda:	4649      	mov	r1, r9
 8008cdc:	f7f7 ff46 	bl	8000b6c <__aeabi_dcmpun>
 8008ce0:	b140      	cbz	r0, 8008cf4 <_printf_float+0xe0>
 8008ce2:	464b      	mov	r3, r9
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	bfbc      	itt	lt
 8008ce8:	232d      	movlt	r3, #45	@ 0x2d
 8008cea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008cee:	4a7e      	ldr	r2, [pc, #504]	@ (8008ee8 <_printf_float+0x2d4>)
 8008cf0:	4b7e      	ldr	r3, [pc, #504]	@ (8008eec <_printf_float+0x2d8>)
 8008cf2:	e7d4      	b.n	8008c9e <_printf_float+0x8a>
 8008cf4:	6863      	ldr	r3, [r4, #4]
 8008cf6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008cfa:	9206      	str	r2, [sp, #24]
 8008cfc:	1c5a      	adds	r2, r3, #1
 8008cfe:	d13b      	bne.n	8008d78 <_printf_float+0x164>
 8008d00:	2306      	movs	r3, #6
 8008d02:	6063      	str	r3, [r4, #4]
 8008d04:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008d08:	2300      	movs	r3, #0
 8008d0a:	6022      	str	r2, [r4, #0]
 8008d0c:	9303      	str	r3, [sp, #12]
 8008d0e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008d10:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008d14:	ab09      	add	r3, sp, #36	@ 0x24
 8008d16:	9300      	str	r3, [sp, #0]
 8008d18:	6861      	ldr	r1, [r4, #4]
 8008d1a:	ec49 8b10 	vmov	d0, r8, r9
 8008d1e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008d22:	4628      	mov	r0, r5
 8008d24:	f7ff fed6 	bl	8008ad4 <__cvt>
 8008d28:	9b06      	ldr	r3, [sp, #24]
 8008d2a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008d2c:	2b47      	cmp	r3, #71	@ 0x47
 8008d2e:	4680      	mov	r8, r0
 8008d30:	d129      	bne.n	8008d86 <_printf_float+0x172>
 8008d32:	1cc8      	adds	r0, r1, #3
 8008d34:	db02      	blt.n	8008d3c <_printf_float+0x128>
 8008d36:	6863      	ldr	r3, [r4, #4]
 8008d38:	4299      	cmp	r1, r3
 8008d3a:	dd41      	ble.n	8008dc0 <_printf_float+0x1ac>
 8008d3c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008d40:	fa5f fa8a 	uxtb.w	sl, sl
 8008d44:	3901      	subs	r1, #1
 8008d46:	4652      	mov	r2, sl
 8008d48:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008d4c:	9109      	str	r1, [sp, #36]	@ 0x24
 8008d4e:	f7ff ff26 	bl	8008b9e <__exponent>
 8008d52:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008d54:	1813      	adds	r3, r2, r0
 8008d56:	2a01      	cmp	r2, #1
 8008d58:	4681      	mov	r9, r0
 8008d5a:	6123      	str	r3, [r4, #16]
 8008d5c:	dc02      	bgt.n	8008d64 <_printf_float+0x150>
 8008d5e:	6822      	ldr	r2, [r4, #0]
 8008d60:	07d2      	lsls	r2, r2, #31
 8008d62:	d501      	bpl.n	8008d68 <_printf_float+0x154>
 8008d64:	3301      	adds	r3, #1
 8008d66:	6123      	str	r3, [r4, #16]
 8008d68:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d0a2      	beq.n	8008cb6 <_printf_float+0xa2>
 8008d70:	232d      	movs	r3, #45	@ 0x2d
 8008d72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d76:	e79e      	b.n	8008cb6 <_printf_float+0xa2>
 8008d78:	9a06      	ldr	r2, [sp, #24]
 8008d7a:	2a47      	cmp	r2, #71	@ 0x47
 8008d7c:	d1c2      	bne.n	8008d04 <_printf_float+0xf0>
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d1c0      	bne.n	8008d04 <_printf_float+0xf0>
 8008d82:	2301      	movs	r3, #1
 8008d84:	e7bd      	b.n	8008d02 <_printf_float+0xee>
 8008d86:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008d8a:	d9db      	bls.n	8008d44 <_printf_float+0x130>
 8008d8c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008d90:	d118      	bne.n	8008dc4 <_printf_float+0x1b0>
 8008d92:	2900      	cmp	r1, #0
 8008d94:	6863      	ldr	r3, [r4, #4]
 8008d96:	dd0b      	ble.n	8008db0 <_printf_float+0x19c>
 8008d98:	6121      	str	r1, [r4, #16]
 8008d9a:	b913      	cbnz	r3, 8008da2 <_printf_float+0x18e>
 8008d9c:	6822      	ldr	r2, [r4, #0]
 8008d9e:	07d0      	lsls	r0, r2, #31
 8008da0:	d502      	bpl.n	8008da8 <_printf_float+0x194>
 8008da2:	3301      	adds	r3, #1
 8008da4:	440b      	add	r3, r1
 8008da6:	6123      	str	r3, [r4, #16]
 8008da8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008daa:	f04f 0900 	mov.w	r9, #0
 8008dae:	e7db      	b.n	8008d68 <_printf_float+0x154>
 8008db0:	b913      	cbnz	r3, 8008db8 <_printf_float+0x1a4>
 8008db2:	6822      	ldr	r2, [r4, #0]
 8008db4:	07d2      	lsls	r2, r2, #31
 8008db6:	d501      	bpl.n	8008dbc <_printf_float+0x1a8>
 8008db8:	3302      	adds	r3, #2
 8008dba:	e7f4      	b.n	8008da6 <_printf_float+0x192>
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	e7f2      	b.n	8008da6 <_printf_float+0x192>
 8008dc0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008dc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008dc6:	4299      	cmp	r1, r3
 8008dc8:	db05      	blt.n	8008dd6 <_printf_float+0x1c2>
 8008dca:	6823      	ldr	r3, [r4, #0]
 8008dcc:	6121      	str	r1, [r4, #16]
 8008dce:	07d8      	lsls	r0, r3, #31
 8008dd0:	d5ea      	bpl.n	8008da8 <_printf_float+0x194>
 8008dd2:	1c4b      	adds	r3, r1, #1
 8008dd4:	e7e7      	b.n	8008da6 <_printf_float+0x192>
 8008dd6:	2900      	cmp	r1, #0
 8008dd8:	bfd4      	ite	le
 8008dda:	f1c1 0202 	rsble	r2, r1, #2
 8008dde:	2201      	movgt	r2, #1
 8008de0:	4413      	add	r3, r2
 8008de2:	e7e0      	b.n	8008da6 <_printf_float+0x192>
 8008de4:	6823      	ldr	r3, [r4, #0]
 8008de6:	055a      	lsls	r2, r3, #21
 8008de8:	d407      	bmi.n	8008dfa <_printf_float+0x1e6>
 8008dea:	6923      	ldr	r3, [r4, #16]
 8008dec:	4642      	mov	r2, r8
 8008dee:	4631      	mov	r1, r6
 8008df0:	4628      	mov	r0, r5
 8008df2:	47b8      	blx	r7
 8008df4:	3001      	adds	r0, #1
 8008df6:	d12b      	bne.n	8008e50 <_printf_float+0x23c>
 8008df8:	e767      	b.n	8008cca <_printf_float+0xb6>
 8008dfa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008dfe:	f240 80dd 	bls.w	8008fbc <_printf_float+0x3a8>
 8008e02:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008e06:	2200      	movs	r2, #0
 8008e08:	2300      	movs	r3, #0
 8008e0a:	f7f7 fe7d 	bl	8000b08 <__aeabi_dcmpeq>
 8008e0e:	2800      	cmp	r0, #0
 8008e10:	d033      	beq.n	8008e7a <_printf_float+0x266>
 8008e12:	4a37      	ldr	r2, [pc, #220]	@ (8008ef0 <_printf_float+0x2dc>)
 8008e14:	2301      	movs	r3, #1
 8008e16:	4631      	mov	r1, r6
 8008e18:	4628      	mov	r0, r5
 8008e1a:	47b8      	blx	r7
 8008e1c:	3001      	adds	r0, #1
 8008e1e:	f43f af54 	beq.w	8008cca <_printf_float+0xb6>
 8008e22:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008e26:	4543      	cmp	r3, r8
 8008e28:	db02      	blt.n	8008e30 <_printf_float+0x21c>
 8008e2a:	6823      	ldr	r3, [r4, #0]
 8008e2c:	07d8      	lsls	r0, r3, #31
 8008e2e:	d50f      	bpl.n	8008e50 <_printf_float+0x23c>
 8008e30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e34:	4631      	mov	r1, r6
 8008e36:	4628      	mov	r0, r5
 8008e38:	47b8      	blx	r7
 8008e3a:	3001      	adds	r0, #1
 8008e3c:	f43f af45 	beq.w	8008cca <_printf_float+0xb6>
 8008e40:	f04f 0900 	mov.w	r9, #0
 8008e44:	f108 38ff 	add.w	r8, r8, #4294967295
 8008e48:	f104 0a1a 	add.w	sl, r4, #26
 8008e4c:	45c8      	cmp	r8, r9
 8008e4e:	dc09      	bgt.n	8008e64 <_printf_float+0x250>
 8008e50:	6823      	ldr	r3, [r4, #0]
 8008e52:	079b      	lsls	r3, r3, #30
 8008e54:	f100 8103 	bmi.w	800905e <_printf_float+0x44a>
 8008e58:	68e0      	ldr	r0, [r4, #12]
 8008e5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e5c:	4298      	cmp	r0, r3
 8008e5e:	bfb8      	it	lt
 8008e60:	4618      	movlt	r0, r3
 8008e62:	e734      	b.n	8008cce <_printf_float+0xba>
 8008e64:	2301      	movs	r3, #1
 8008e66:	4652      	mov	r2, sl
 8008e68:	4631      	mov	r1, r6
 8008e6a:	4628      	mov	r0, r5
 8008e6c:	47b8      	blx	r7
 8008e6e:	3001      	adds	r0, #1
 8008e70:	f43f af2b 	beq.w	8008cca <_printf_float+0xb6>
 8008e74:	f109 0901 	add.w	r9, r9, #1
 8008e78:	e7e8      	b.n	8008e4c <_printf_float+0x238>
 8008e7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	dc39      	bgt.n	8008ef4 <_printf_float+0x2e0>
 8008e80:	4a1b      	ldr	r2, [pc, #108]	@ (8008ef0 <_printf_float+0x2dc>)
 8008e82:	2301      	movs	r3, #1
 8008e84:	4631      	mov	r1, r6
 8008e86:	4628      	mov	r0, r5
 8008e88:	47b8      	blx	r7
 8008e8a:	3001      	adds	r0, #1
 8008e8c:	f43f af1d 	beq.w	8008cca <_printf_float+0xb6>
 8008e90:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008e94:	ea59 0303 	orrs.w	r3, r9, r3
 8008e98:	d102      	bne.n	8008ea0 <_printf_float+0x28c>
 8008e9a:	6823      	ldr	r3, [r4, #0]
 8008e9c:	07d9      	lsls	r1, r3, #31
 8008e9e:	d5d7      	bpl.n	8008e50 <_printf_float+0x23c>
 8008ea0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ea4:	4631      	mov	r1, r6
 8008ea6:	4628      	mov	r0, r5
 8008ea8:	47b8      	blx	r7
 8008eaa:	3001      	adds	r0, #1
 8008eac:	f43f af0d 	beq.w	8008cca <_printf_float+0xb6>
 8008eb0:	f04f 0a00 	mov.w	sl, #0
 8008eb4:	f104 0b1a 	add.w	fp, r4, #26
 8008eb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008eba:	425b      	negs	r3, r3
 8008ebc:	4553      	cmp	r3, sl
 8008ebe:	dc01      	bgt.n	8008ec4 <_printf_float+0x2b0>
 8008ec0:	464b      	mov	r3, r9
 8008ec2:	e793      	b.n	8008dec <_printf_float+0x1d8>
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	465a      	mov	r2, fp
 8008ec8:	4631      	mov	r1, r6
 8008eca:	4628      	mov	r0, r5
 8008ecc:	47b8      	blx	r7
 8008ece:	3001      	adds	r0, #1
 8008ed0:	f43f aefb 	beq.w	8008cca <_printf_float+0xb6>
 8008ed4:	f10a 0a01 	add.w	sl, sl, #1
 8008ed8:	e7ee      	b.n	8008eb8 <_printf_float+0x2a4>
 8008eda:	bf00      	nop
 8008edc:	7fefffff 	.word	0x7fefffff
 8008ee0:	0800d36c 	.word	0x0800d36c
 8008ee4:	0800d368 	.word	0x0800d368
 8008ee8:	0800d374 	.word	0x0800d374
 8008eec:	0800d370 	.word	0x0800d370
 8008ef0:	0800d378 	.word	0x0800d378
 8008ef4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008ef6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008efa:	4553      	cmp	r3, sl
 8008efc:	bfa8      	it	ge
 8008efe:	4653      	movge	r3, sl
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	4699      	mov	r9, r3
 8008f04:	dc36      	bgt.n	8008f74 <_printf_float+0x360>
 8008f06:	f04f 0b00 	mov.w	fp, #0
 8008f0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f0e:	f104 021a 	add.w	r2, r4, #26
 8008f12:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008f14:	9306      	str	r3, [sp, #24]
 8008f16:	eba3 0309 	sub.w	r3, r3, r9
 8008f1a:	455b      	cmp	r3, fp
 8008f1c:	dc31      	bgt.n	8008f82 <_printf_float+0x36e>
 8008f1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f20:	459a      	cmp	sl, r3
 8008f22:	dc3a      	bgt.n	8008f9a <_printf_float+0x386>
 8008f24:	6823      	ldr	r3, [r4, #0]
 8008f26:	07da      	lsls	r2, r3, #31
 8008f28:	d437      	bmi.n	8008f9a <_printf_float+0x386>
 8008f2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f2c:	ebaa 0903 	sub.w	r9, sl, r3
 8008f30:	9b06      	ldr	r3, [sp, #24]
 8008f32:	ebaa 0303 	sub.w	r3, sl, r3
 8008f36:	4599      	cmp	r9, r3
 8008f38:	bfa8      	it	ge
 8008f3a:	4699      	movge	r9, r3
 8008f3c:	f1b9 0f00 	cmp.w	r9, #0
 8008f40:	dc33      	bgt.n	8008faa <_printf_float+0x396>
 8008f42:	f04f 0800 	mov.w	r8, #0
 8008f46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f4a:	f104 0b1a 	add.w	fp, r4, #26
 8008f4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f50:	ebaa 0303 	sub.w	r3, sl, r3
 8008f54:	eba3 0309 	sub.w	r3, r3, r9
 8008f58:	4543      	cmp	r3, r8
 8008f5a:	f77f af79 	ble.w	8008e50 <_printf_float+0x23c>
 8008f5e:	2301      	movs	r3, #1
 8008f60:	465a      	mov	r2, fp
 8008f62:	4631      	mov	r1, r6
 8008f64:	4628      	mov	r0, r5
 8008f66:	47b8      	blx	r7
 8008f68:	3001      	adds	r0, #1
 8008f6a:	f43f aeae 	beq.w	8008cca <_printf_float+0xb6>
 8008f6e:	f108 0801 	add.w	r8, r8, #1
 8008f72:	e7ec      	b.n	8008f4e <_printf_float+0x33a>
 8008f74:	4642      	mov	r2, r8
 8008f76:	4631      	mov	r1, r6
 8008f78:	4628      	mov	r0, r5
 8008f7a:	47b8      	blx	r7
 8008f7c:	3001      	adds	r0, #1
 8008f7e:	d1c2      	bne.n	8008f06 <_printf_float+0x2f2>
 8008f80:	e6a3      	b.n	8008cca <_printf_float+0xb6>
 8008f82:	2301      	movs	r3, #1
 8008f84:	4631      	mov	r1, r6
 8008f86:	4628      	mov	r0, r5
 8008f88:	9206      	str	r2, [sp, #24]
 8008f8a:	47b8      	blx	r7
 8008f8c:	3001      	adds	r0, #1
 8008f8e:	f43f ae9c 	beq.w	8008cca <_printf_float+0xb6>
 8008f92:	9a06      	ldr	r2, [sp, #24]
 8008f94:	f10b 0b01 	add.w	fp, fp, #1
 8008f98:	e7bb      	b.n	8008f12 <_printf_float+0x2fe>
 8008f9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f9e:	4631      	mov	r1, r6
 8008fa0:	4628      	mov	r0, r5
 8008fa2:	47b8      	blx	r7
 8008fa4:	3001      	adds	r0, #1
 8008fa6:	d1c0      	bne.n	8008f2a <_printf_float+0x316>
 8008fa8:	e68f      	b.n	8008cca <_printf_float+0xb6>
 8008faa:	9a06      	ldr	r2, [sp, #24]
 8008fac:	464b      	mov	r3, r9
 8008fae:	4442      	add	r2, r8
 8008fb0:	4631      	mov	r1, r6
 8008fb2:	4628      	mov	r0, r5
 8008fb4:	47b8      	blx	r7
 8008fb6:	3001      	adds	r0, #1
 8008fb8:	d1c3      	bne.n	8008f42 <_printf_float+0x32e>
 8008fba:	e686      	b.n	8008cca <_printf_float+0xb6>
 8008fbc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008fc0:	f1ba 0f01 	cmp.w	sl, #1
 8008fc4:	dc01      	bgt.n	8008fca <_printf_float+0x3b6>
 8008fc6:	07db      	lsls	r3, r3, #31
 8008fc8:	d536      	bpl.n	8009038 <_printf_float+0x424>
 8008fca:	2301      	movs	r3, #1
 8008fcc:	4642      	mov	r2, r8
 8008fce:	4631      	mov	r1, r6
 8008fd0:	4628      	mov	r0, r5
 8008fd2:	47b8      	blx	r7
 8008fd4:	3001      	adds	r0, #1
 8008fd6:	f43f ae78 	beq.w	8008cca <_printf_float+0xb6>
 8008fda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008fde:	4631      	mov	r1, r6
 8008fe0:	4628      	mov	r0, r5
 8008fe2:	47b8      	blx	r7
 8008fe4:	3001      	adds	r0, #1
 8008fe6:	f43f ae70 	beq.w	8008cca <_printf_float+0xb6>
 8008fea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008fee:	2200      	movs	r2, #0
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ff6:	f7f7 fd87 	bl	8000b08 <__aeabi_dcmpeq>
 8008ffa:	b9c0      	cbnz	r0, 800902e <_printf_float+0x41a>
 8008ffc:	4653      	mov	r3, sl
 8008ffe:	f108 0201 	add.w	r2, r8, #1
 8009002:	4631      	mov	r1, r6
 8009004:	4628      	mov	r0, r5
 8009006:	47b8      	blx	r7
 8009008:	3001      	adds	r0, #1
 800900a:	d10c      	bne.n	8009026 <_printf_float+0x412>
 800900c:	e65d      	b.n	8008cca <_printf_float+0xb6>
 800900e:	2301      	movs	r3, #1
 8009010:	465a      	mov	r2, fp
 8009012:	4631      	mov	r1, r6
 8009014:	4628      	mov	r0, r5
 8009016:	47b8      	blx	r7
 8009018:	3001      	adds	r0, #1
 800901a:	f43f ae56 	beq.w	8008cca <_printf_float+0xb6>
 800901e:	f108 0801 	add.w	r8, r8, #1
 8009022:	45d0      	cmp	r8, sl
 8009024:	dbf3      	blt.n	800900e <_printf_float+0x3fa>
 8009026:	464b      	mov	r3, r9
 8009028:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800902c:	e6df      	b.n	8008dee <_printf_float+0x1da>
 800902e:	f04f 0800 	mov.w	r8, #0
 8009032:	f104 0b1a 	add.w	fp, r4, #26
 8009036:	e7f4      	b.n	8009022 <_printf_float+0x40e>
 8009038:	2301      	movs	r3, #1
 800903a:	4642      	mov	r2, r8
 800903c:	e7e1      	b.n	8009002 <_printf_float+0x3ee>
 800903e:	2301      	movs	r3, #1
 8009040:	464a      	mov	r2, r9
 8009042:	4631      	mov	r1, r6
 8009044:	4628      	mov	r0, r5
 8009046:	47b8      	blx	r7
 8009048:	3001      	adds	r0, #1
 800904a:	f43f ae3e 	beq.w	8008cca <_printf_float+0xb6>
 800904e:	f108 0801 	add.w	r8, r8, #1
 8009052:	68e3      	ldr	r3, [r4, #12]
 8009054:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009056:	1a5b      	subs	r3, r3, r1
 8009058:	4543      	cmp	r3, r8
 800905a:	dcf0      	bgt.n	800903e <_printf_float+0x42a>
 800905c:	e6fc      	b.n	8008e58 <_printf_float+0x244>
 800905e:	f04f 0800 	mov.w	r8, #0
 8009062:	f104 0919 	add.w	r9, r4, #25
 8009066:	e7f4      	b.n	8009052 <_printf_float+0x43e>

08009068 <_printf_common>:
 8009068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800906c:	4616      	mov	r6, r2
 800906e:	4698      	mov	r8, r3
 8009070:	688a      	ldr	r2, [r1, #8]
 8009072:	690b      	ldr	r3, [r1, #16]
 8009074:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009078:	4293      	cmp	r3, r2
 800907a:	bfb8      	it	lt
 800907c:	4613      	movlt	r3, r2
 800907e:	6033      	str	r3, [r6, #0]
 8009080:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009084:	4607      	mov	r7, r0
 8009086:	460c      	mov	r4, r1
 8009088:	b10a      	cbz	r2, 800908e <_printf_common+0x26>
 800908a:	3301      	adds	r3, #1
 800908c:	6033      	str	r3, [r6, #0]
 800908e:	6823      	ldr	r3, [r4, #0]
 8009090:	0699      	lsls	r1, r3, #26
 8009092:	bf42      	ittt	mi
 8009094:	6833      	ldrmi	r3, [r6, #0]
 8009096:	3302      	addmi	r3, #2
 8009098:	6033      	strmi	r3, [r6, #0]
 800909a:	6825      	ldr	r5, [r4, #0]
 800909c:	f015 0506 	ands.w	r5, r5, #6
 80090a0:	d106      	bne.n	80090b0 <_printf_common+0x48>
 80090a2:	f104 0a19 	add.w	sl, r4, #25
 80090a6:	68e3      	ldr	r3, [r4, #12]
 80090a8:	6832      	ldr	r2, [r6, #0]
 80090aa:	1a9b      	subs	r3, r3, r2
 80090ac:	42ab      	cmp	r3, r5
 80090ae:	dc26      	bgt.n	80090fe <_printf_common+0x96>
 80090b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80090b4:	6822      	ldr	r2, [r4, #0]
 80090b6:	3b00      	subs	r3, #0
 80090b8:	bf18      	it	ne
 80090ba:	2301      	movne	r3, #1
 80090bc:	0692      	lsls	r2, r2, #26
 80090be:	d42b      	bmi.n	8009118 <_printf_common+0xb0>
 80090c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80090c4:	4641      	mov	r1, r8
 80090c6:	4638      	mov	r0, r7
 80090c8:	47c8      	blx	r9
 80090ca:	3001      	adds	r0, #1
 80090cc:	d01e      	beq.n	800910c <_printf_common+0xa4>
 80090ce:	6823      	ldr	r3, [r4, #0]
 80090d0:	6922      	ldr	r2, [r4, #16]
 80090d2:	f003 0306 	and.w	r3, r3, #6
 80090d6:	2b04      	cmp	r3, #4
 80090d8:	bf02      	ittt	eq
 80090da:	68e5      	ldreq	r5, [r4, #12]
 80090dc:	6833      	ldreq	r3, [r6, #0]
 80090de:	1aed      	subeq	r5, r5, r3
 80090e0:	68a3      	ldr	r3, [r4, #8]
 80090e2:	bf0c      	ite	eq
 80090e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090e8:	2500      	movne	r5, #0
 80090ea:	4293      	cmp	r3, r2
 80090ec:	bfc4      	itt	gt
 80090ee:	1a9b      	subgt	r3, r3, r2
 80090f0:	18ed      	addgt	r5, r5, r3
 80090f2:	2600      	movs	r6, #0
 80090f4:	341a      	adds	r4, #26
 80090f6:	42b5      	cmp	r5, r6
 80090f8:	d11a      	bne.n	8009130 <_printf_common+0xc8>
 80090fa:	2000      	movs	r0, #0
 80090fc:	e008      	b.n	8009110 <_printf_common+0xa8>
 80090fe:	2301      	movs	r3, #1
 8009100:	4652      	mov	r2, sl
 8009102:	4641      	mov	r1, r8
 8009104:	4638      	mov	r0, r7
 8009106:	47c8      	blx	r9
 8009108:	3001      	adds	r0, #1
 800910a:	d103      	bne.n	8009114 <_printf_common+0xac>
 800910c:	f04f 30ff 	mov.w	r0, #4294967295
 8009110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009114:	3501      	adds	r5, #1
 8009116:	e7c6      	b.n	80090a6 <_printf_common+0x3e>
 8009118:	18e1      	adds	r1, r4, r3
 800911a:	1c5a      	adds	r2, r3, #1
 800911c:	2030      	movs	r0, #48	@ 0x30
 800911e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009122:	4422      	add	r2, r4
 8009124:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009128:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800912c:	3302      	adds	r3, #2
 800912e:	e7c7      	b.n	80090c0 <_printf_common+0x58>
 8009130:	2301      	movs	r3, #1
 8009132:	4622      	mov	r2, r4
 8009134:	4641      	mov	r1, r8
 8009136:	4638      	mov	r0, r7
 8009138:	47c8      	blx	r9
 800913a:	3001      	adds	r0, #1
 800913c:	d0e6      	beq.n	800910c <_printf_common+0xa4>
 800913e:	3601      	adds	r6, #1
 8009140:	e7d9      	b.n	80090f6 <_printf_common+0x8e>
	...

08009144 <_printf_i>:
 8009144:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009148:	7e0f      	ldrb	r7, [r1, #24]
 800914a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800914c:	2f78      	cmp	r7, #120	@ 0x78
 800914e:	4691      	mov	r9, r2
 8009150:	4680      	mov	r8, r0
 8009152:	460c      	mov	r4, r1
 8009154:	469a      	mov	sl, r3
 8009156:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800915a:	d807      	bhi.n	800916c <_printf_i+0x28>
 800915c:	2f62      	cmp	r7, #98	@ 0x62
 800915e:	d80a      	bhi.n	8009176 <_printf_i+0x32>
 8009160:	2f00      	cmp	r7, #0
 8009162:	f000 80d1 	beq.w	8009308 <_printf_i+0x1c4>
 8009166:	2f58      	cmp	r7, #88	@ 0x58
 8009168:	f000 80b8 	beq.w	80092dc <_printf_i+0x198>
 800916c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009170:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009174:	e03a      	b.n	80091ec <_printf_i+0xa8>
 8009176:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800917a:	2b15      	cmp	r3, #21
 800917c:	d8f6      	bhi.n	800916c <_printf_i+0x28>
 800917e:	a101      	add	r1, pc, #4	@ (adr r1, 8009184 <_printf_i+0x40>)
 8009180:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009184:	080091dd 	.word	0x080091dd
 8009188:	080091f1 	.word	0x080091f1
 800918c:	0800916d 	.word	0x0800916d
 8009190:	0800916d 	.word	0x0800916d
 8009194:	0800916d 	.word	0x0800916d
 8009198:	0800916d 	.word	0x0800916d
 800919c:	080091f1 	.word	0x080091f1
 80091a0:	0800916d 	.word	0x0800916d
 80091a4:	0800916d 	.word	0x0800916d
 80091a8:	0800916d 	.word	0x0800916d
 80091ac:	0800916d 	.word	0x0800916d
 80091b0:	080092ef 	.word	0x080092ef
 80091b4:	0800921b 	.word	0x0800921b
 80091b8:	080092a9 	.word	0x080092a9
 80091bc:	0800916d 	.word	0x0800916d
 80091c0:	0800916d 	.word	0x0800916d
 80091c4:	08009311 	.word	0x08009311
 80091c8:	0800916d 	.word	0x0800916d
 80091cc:	0800921b 	.word	0x0800921b
 80091d0:	0800916d 	.word	0x0800916d
 80091d4:	0800916d 	.word	0x0800916d
 80091d8:	080092b1 	.word	0x080092b1
 80091dc:	6833      	ldr	r3, [r6, #0]
 80091de:	1d1a      	adds	r2, r3, #4
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	6032      	str	r2, [r6, #0]
 80091e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80091e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80091ec:	2301      	movs	r3, #1
 80091ee:	e09c      	b.n	800932a <_printf_i+0x1e6>
 80091f0:	6833      	ldr	r3, [r6, #0]
 80091f2:	6820      	ldr	r0, [r4, #0]
 80091f4:	1d19      	adds	r1, r3, #4
 80091f6:	6031      	str	r1, [r6, #0]
 80091f8:	0606      	lsls	r6, r0, #24
 80091fa:	d501      	bpl.n	8009200 <_printf_i+0xbc>
 80091fc:	681d      	ldr	r5, [r3, #0]
 80091fe:	e003      	b.n	8009208 <_printf_i+0xc4>
 8009200:	0645      	lsls	r5, r0, #25
 8009202:	d5fb      	bpl.n	80091fc <_printf_i+0xb8>
 8009204:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009208:	2d00      	cmp	r5, #0
 800920a:	da03      	bge.n	8009214 <_printf_i+0xd0>
 800920c:	232d      	movs	r3, #45	@ 0x2d
 800920e:	426d      	negs	r5, r5
 8009210:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009214:	4858      	ldr	r0, [pc, #352]	@ (8009378 <_printf_i+0x234>)
 8009216:	230a      	movs	r3, #10
 8009218:	e011      	b.n	800923e <_printf_i+0xfa>
 800921a:	6821      	ldr	r1, [r4, #0]
 800921c:	6833      	ldr	r3, [r6, #0]
 800921e:	0608      	lsls	r0, r1, #24
 8009220:	f853 5b04 	ldr.w	r5, [r3], #4
 8009224:	d402      	bmi.n	800922c <_printf_i+0xe8>
 8009226:	0649      	lsls	r1, r1, #25
 8009228:	bf48      	it	mi
 800922a:	b2ad      	uxthmi	r5, r5
 800922c:	2f6f      	cmp	r7, #111	@ 0x6f
 800922e:	4852      	ldr	r0, [pc, #328]	@ (8009378 <_printf_i+0x234>)
 8009230:	6033      	str	r3, [r6, #0]
 8009232:	bf14      	ite	ne
 8009234:	230a      	movne	r3, #10
 8009236:	2308      	moveq	r3, #8
 8009238:	2100      	movs	r1, #0
 800923a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800923e:	6866      	ldr	r6, [r4, #4]
 8009240:	60a6      	str	r6, [r4, #8]
 8009242:	2e00      	cmp	r6, #0
 8009244:	db05      	blt.n	8009252 <_printf_i+0x10e>
 8009246:	6821      	ldr	r1, [r4, #0]
 8009248:	432e      	orrs	r6, r5
 800924a:	f021 0104 	bic.w	r1, r1, #4
 800924e:	6021      	str	r1, [r4, #0]
 8009250:	d04b      	beq.n	80092ea <_printf_i+0x1a6>
 8009252:	4616      	mov	r6, r2
 8009254:	fbb5 f1f3 	udiv	r1, r5, r3
 8009258:	fb03 5711 	mls	r7, r3, r1, r5
 800925c:	5dc7      	ldrb	r7, [r0, r7]
 800925e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009262:	462f      	mov	r7, r5
 8009264:	42bb      	cmp	r3, r7
 8009266:	460d      	mov	r5, r1
 8009268:	d9f4      	bls.n	8009254 <_printf_i+0x110>
 800926a:	2b08      	cmp	r3, #8
 800926c:	d10b      	bne.n	8009286 <_printf_i+0x142>
 800926e:	6823      	ldr	r3, [r4, #0]
 8009270:	07df      	lsls	r7, r3, #31
 8009272:	d508      	bpl.n	8009286 <_printf_i+0x142>
 8009274:	6923      	ldr	r3, [r4, #16]
 8009276:	6861      	ldr	r1, [r4, #4]
 8009278:	4299      	cmp	r1, r3
 800927a:	bfde      	ittt	le
 800927c:	2330      	movle	r3, #48	@ 0x30
 800927e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009282:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009286:	1b92      	subs	r2, r2, r6
 8009288:	6122      	str	r2, [r4, #16]
 800928a:	f8cd a000 	str.w	sl, [sp]
 800928e:	464b      	mov	r3, r9
 8009290:	aa03      	add	r2, sp, #12
 8009292:	4621      	mov	r1, r4
 8009294:	4640      	mov	r0, r8
 8009296:	f7ff fee7 	bl	8009068 <_printf_common>
 800929a:	3001      	adds	r0, #1
 800929c:	d14a      	bne.n	8009334 <_printf_i+0x1f0>
 800929e:	f04f 30ff 	mov.w	r0, #4294967295
 80092a2:	b004      	add	sp, #16
 80092a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092a8:	6823      	ldr	r3, [r4, #0]
 80092aa:	f043 0320 	orr.w	r3, r3, #32
 80092ae:	6023      	str	r3, [r4, #0]
 80092b0:	4832      	ldr	r0, [pc, #200]	@ (800937c <_printf_i+0x238>)
 80092b2:	2778      	movs	r7, #120	@ 0x78
 80092b4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80092b8:	6823      	ldr	r3, [r4, #0]
 80092ba:	6831      	ldr	r1, [r6, #0]
 80092bc:	061f      	lsls	r7, r3, #24
 80092be:	f851 5b04 	ldr.w	r5, [r1], #4
 80092c2:	d402      	bmi.n	80092ca <_printf_i+0x186>
 80092c4:	065f      	lsls	r7, r3, #25
 80092c6:	bf48      	it	mi
 80092c8:	b2ad      	uxthmi	r5, r5
 80092ca:	6031      	str	r1, [r6, #0]
 80092cc:	07d9      	lsls	r1, r3, #31
 80092ce:	bf44      	itt	mi
 80092d0:	f043 0320 	orrmi.w	r3, r3, #32
 80092d4:	6023      	strmi	r3, [r4, #0]
 80092d6:	b11d      	cbz	r5, 80092e0 <_printf_i+0x19c>
 80092d8:	2310      	movs	r3, #16
 80092da:	e7ad      	b.n	8009238 <_printf_i+0xf4>
 80092dc:	4826      	ldr	r0, [pc, #152]	@ (8009378 <_printf_i+0x234>)
 80092de:	e7e9      	b.n	80092b4 <_printf_i+0x170>
 80092e0:	6823      	ldr	r3, [r4, #0]
 80092e2:	f023 0320 	bic.w	r3, r3, #32
 80092e6:	6023      	str	r3, [r4, #0]
 80092e8:	e7f6      	b.n	80092d8 <_printf_i+0x194>
 80092ea:	4616      	mov	r6, r2
 80092ec:	e7bd      	b.n	800926a <_printf_i+0x126>
 80092ee:	6833      	ldr	r3, [r6, #0]
 80092f0:	6825      	ldr	r5, [r4, #0]
 80092f2:	6961      	ldr	r1, [r4, #20]
 80092f4:	1d18      	adds	r0, r3, #4
 80092f6:	6030      	str	r0, [r6, #0]
 80092f8:	062e      	lsls	r6, r5, #24
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	d501      	bpl.n	8009302 <_printf_i+0x1be>
 80092fe:	6019      	str	r1, [r3, #0]
 8009300:	e002      	b.n	8009308 <_printf_i+0x1c4>
 8009302:	0668      	lsls	r0, r5, #25
 8009304:	d5fb      	bpl.n	80092fe <_printf_i+0x1ba>
 8009306:	8019      	strh	r1, [r3, #0]
 8009308:	2300      	movs	r3, #0
 800930a:	6123      	str	r3, [r4, #16]
 800930c:	4616      	mov	r6, r2
 800930e:	e7bc      	b.n	800928a <_printf_i+0x146>
 8009310:	6833      	ldr	r3, [r6, #0]
 8009312:	1d1a      	adds	r2, r3, #4
 8009314:	6032      	str	r2, [r6, #0]
 8009316:	681e      	ldr	r6, [r3, #0]
 8009318:	6862      	ldr	r2, [r4, #4]
 800931a:	2100      	movs	r1, #0
 800931c:	4630      	mov	r0, r6
 800931e:	f7f6 ff77 	bl	8000210 <memchr>
 8009322:	b108      	cbz	r0, 8009328 <_printf_i+0x1e4>
 8009324:	1b80      	subs	r0, r0, r6
 8009326:	6060      	str	r0, [r4, #4]
 8009328:	6863      	ldr	r3, [r4, #4]
 800932a:	6123      	str	r3, [r4, #16]
 800932c:	2300      	movs	r3, #0
 800932e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009332:	e7aa      	b.n	800928a <_printf_i+0x146>
 8009334:	6923      	ldr	r3, [r4, #16]
 8009336:	4632      	mov	r2, r6
 8009338:	4649      	mov	r1, r9
 800933a:	4640      	mov	r0, r8
 800933c:	47d0      	blx	sl
 800933e:	3001      	adds	r0, #1
 8009340:	d0ad      	beq.n	800929e <_printf_i+0x15a>
 8009342:	6823      	ldr	r3, [r4, #0]
 8009344:	079b      	lsls	r3, r3, #30
 8009346:	d413      	bmi.n	8009370 <_printf_i+0x22c>
 8009348:	68e0      	ldr	r0, [r4, #12]
 800934a:	9b03      	ldr	r3, [sp, #12]
 800934c:	4298      	cmp	r0, r3
 800934e:	bfb8      	it	lt
 8009350:	4618      	movlt	r0, r3
 8009352:	e7a6      	b.n	80092a2 <_printf_i+0x15e>
 8009354:	2301      	movs	r3, #1
 8009356:	4632      	mov	r2, r6
 8009358:	4649      	mov	r1, r9
 800935a:	4640      	mov	r0, r8
 800935c:	47d0      	blx	sl
 800935e:	3001      	adds	r0, #1
 8009360:	d09d      	beq.n	800929e <_printf_i+0x15a>
 8009362:	3501      	adds	r5, #1
 8009364:	68e3      	ldr	r3, [r4, #12]
 8009366:	9903      	ldr	r1, [sp, #12]
 8009368:	1a5b      	subs	r3, r3, r1
 800936a:	42ab      	cmp	r3, r5
 800936c:	dcf2      	bgt.n	8009354 <_printf_i+0x210>
 800936e:	e7eb      	b.n	8009348 <_printf_i+0x204>
 8009370:	2500      	movs	r5, #0
 8009372:	f104 0619 	add.w	r6, r4, #25
 8009376:	e7f5      	b.n	8009364 <_printf_i+0x220>
 8009378:	0800d37a 	.word	0x0800d37a
 800937c:	0800d38b 	.word	0x0800d38b

08009380 <_scanf_float>:
 8009380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009384:	b087      	sub	sp, #28
 8009386:	4691      	mov	r9, r2
 8009388:	9303      	str	r3, [sp, #12]
 800938a:	688b      	ldr	r3, [r1, #8]
 800938c:	1e5a      	subs	r2, r3, #1
 800938e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009392:	bf81      	itttt	hi
 8009394:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009398:	eb03 0b05 	addhi.w	fp, r3, r5
 800939c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80093a0:	608b      	strhi	r3, [r1, #8]
 80093a2:	680b      	ldr	r3, [r1, #0]
 80093a4:	460a      	mov	r2, r1
 80093a6:	f04f 0500 	mov.w	r5, #0
 80093aa:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80093ae:	f842 3b1c 	str.w	r3, [r2], #28
 80093b2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80093b6:	4680      	mov	r8, r0
 80093b8:	460c      	mov	r4, r1
 80093ba:	bf98      	it	ls
 80093bc:	f04f 0b00 	movls.w	fp, #0
 80093c0:	9201      	str	r2, [sp, #4]
 80093c2:	4616      	mov	r6, r2
 80093c4:	46aa      	mov	sl, r5
 80093c6:	462f      	mov	r7, r5
 80093c8:	9502      	str	r5, [sp, #8]
 80093ca:	68a2      	ldr	r2, [r4, #8]
 80093cc:	b15a      	cbz	r2, 80093e6 <_scanf_float+0x66>
 80093ce:	f8d9 3000 	ldr.w	r3, [r9]
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	2b4e      	cmp	r3, #78	@ 0x4e
 80093d6:	d863      	bhi.n	80094a0 <_scanf_float+0x120>
 80093d8:	2b40      	cmp	r3, #64	@ 0x40
 80093da:	d83b      	bhi.n	8009454 <_scanf_float+0xd4>
 80093dc:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80093e0:	b2c8      	uxtb	r0, r1
 80093e2:	280e      	cmp	r0, #14
 80093e4:	d939      	bls.n	800945a <_scanf_float+0xda>
 80093e6:	b11f      	cbz	r7, 80093f0 <_scanf_float+0x70>
 80093e8:	6823      	ldr	r3, [r4, #0]
 80093ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80093ee:	6023      	str	r3, [r4, #0]
 80093f0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80093f4:	f1ba 0f01 	cmp.w	sl, #1
 80093f8:	f200 8114 	bhi.w	8009624 <_scanf_float+0x2a4>
 80093fc:	9b01      	ldr	r3, [sp, #4]
 80093fe:	429e      	cmp	r6, r3
 8009400:	f200 8105 	bhi.w	800960e <_scanf_float+0x28e>
 8009404:	2001      	movs	r0, #1
 8009406:	b007      	add	sp, #28
 8009408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800940c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009410:	2a0d      	cmp	r2, #13
 8009412:	d8e8      	bhi.n	80093e6 <_scanf_float+0x66>
 8009414:	a101      	add	r1, pc, #4	@ (adr r1, 800941c <_scanf_float+0x9c>)
 8009416:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800941a:	bf00      	nop
 800941c:	08009565 	.word	0x08009565
 8009420:	080093e7 	.word	0x080093e7
 8009424:	080093e7 	.word	0x080093e7
 8009428:	080093e7 	.word	0x080093e7
 800942c:	080095c1 	.word	0x080095c1
 8009430:	0800959b 	.word	0x0800959b
 8009434:	080093e7 	.word	0x080093e7
 8009438:	080093e7 	.word	0x080093e7
 800943c:	08009573 	.word	0x08009573
 8009440:	080093e7 	.word	0x080093e7
 8009444:	080093e7 	.word	0x080093e7
 8009448:	080093e7 	.word	0x080093e7
 800944c:	080093e7 	.word	0x080093e7
 8009450:	0800952f 	.word	0x0800952f
 8009454:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009458:	e7da      	b.n	8009410 <_scanf_float+0x90>
 800945a:	290e      	cmp	r1, #14
 800945c:	d8c3      	bhi.n	80093e6 <_scanf_float+0x66>
 800945e:	a001      	add	r0, pc, #4	@ (adr r0, 8009464 <_scanf_float+0xe4>)
 8009460:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009464:	0800951f 	.word	0x0800951f
 8009468:	080093e7 	.word	0x080093e7
 800946c:	0800951f 	.word	0x0800951f
 8009470:	080095af 	.word	0x080095af
 8009474:	080093e7 	.word	0x080093e7
 8009478:	080094c1 	.word	0x080094c1
 800947c:	08009505 	.word	0x08009505
 8009480:	08009505 	.word	0x08009505
 8009484:	08009505 	.word	0x08009505
 8009488:	08009505 	.word	0x08009505
 800948c:	08009505 	.word	0x08009505
 8009490:	08009505 	.word	0x08009505
 8009494:	08009505 	.word	0x08009505
 8009498:	08009505 	.word	0x08009505
 800949c:	08009505 	.word	0x08009505
 80094a0:	2b6e      	cmp	r3, #110	@ 0x6e
 80094a2:	d809      	bhi.n	80094b8 <_scanf_float+0x138>
 80094a4:	2b60      	cmp	r3, #96	@ 0x60
 80094a6:	d8b1      	bhi.n	800940c <_scanf_float+0x8c>
 80094a8:	2b54      	cmp	r3, #84	@ 0x54
 80094aa:	d07b      	beq.n	80095a4 <_scanf_float+0x224>
 80094ac:	2b59      	cmp	r3, #89	@ 0x59
 80094ae:	d19a      	bne.n	80093e6 <_scanf_float+0x66>
 80094b0:	2d07      	cmp	r5, #7
 80094b2:	d198      	bne.n	80093e6 <_scanf_float+0x66>
 80094b4:	2508      	movs	r5, #8
 80094b6:	e02f      	b.n	8009518 <_scanf_float+0x198>
 80094b8:	2b74      	cmp	r3, #116	@ 0x74
 80094ba:	d073      	beq.n	80095a4 <_scanf_float+0x224>
 80094bc:	2b79      	cmp	r3, #121	@ 0x79
 80094be:	e7f6      	b.n	80094ae <_scanf_float+0x12e>
 80094c0:	6821      	ldr	r1, [r4, #0]
 80094c2:	05c8      	lsls	r0, r1, #23
 80094c4:	d51e      	bpl.n	8009504 <_scanf_float+0x184>
 80094c6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80094ca:	6021      	str	r1, [r4, #0]
 80094cc:	3701      	adds	r7, #1
 80094ce:	f1bb 0f00 	cmp.w	fp, #0
 80094d2:	d003      	beq.n	80094dc <_scanf_float+0x15c>
 80094d4:	3201      	adds	r2, #1
 80094d6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80094da:	60a2      	str	r2, [r4, #8]
 80094dc:	68a3      	ldr	r3, [r4, #8]
 80094de:	3b01      	subs	r3, #1
 80094e0:	60a3      	str	r3, [r4, #8]
 80094e2:	6923      	ldr	r3, [r4, #16]
 80094e4:	3301      	adds	r3, #1
 80094e6:	6123      	str	r3, [r4, #16]
 80094e8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80094ec:	3b01      	subs	r3, #1
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	f8c9 3004 	str.w	r3, [r9, #4]
 80094f4:	f340 8082 	ble.w	80095fc <_scanf_float+0x27c>
 80094f8:	f8d9 3000 	ldr.w	r3, [r9]
 80094fc:	3301      	adds	r3, #1
 80094fe:	f8c9 3000 	str.w	r3, [r9]
 8009502:	e762      	b.n	80093ca <_scanf_float+0x4a>
 8009504:	eb1a 0105 	adds.w	r1, sl, r5
 8009508:	f47f af6d 	bne.w	80093e6 <_scanf_float+0x66>
 800950c:	6822      	ldr	r2, [r4, #0]
 800950e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009512:	6022      	str	r2, [r4, #0]
 8009514:	460d      	mov	r5, r1
 8009516:	468a      	mov	sl, r1
 8009518:	f806 3b01 	strb.w	r3, [r6], #1
 800951c:	e7de      	b.n	80094dc <_scanf_float+0x15c>
 800951e:	6822      	ldr	r2, [r4, #0]
 8009520:	0610      	lsls	r0, r2, #24
 8009522:	f57f af60 	bpl.w	80093e6 <_scanf_float+0x66>
 8009526:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800952a:	6022      	str	r2, [r4, #0]
 800952c:	e7f4      	b.n	8009518 <_scanf_float+0x198>
 800952e:	f1ba 0f00 	cmp.w	sl, #0
 8009532:	d10c      	bne.n	800954e <_scanf_float+0x1ce>
 8009534:	b977      	cbnz	r7, 8009554 <_scanf_float+0x1d4>
 8009536:	6822      	ldr	r2, [r4, #0]
 8009538:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800953c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009540:	d108      	bne.n	8009554 <_scanf_float+0x1d4>
 8009542:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009546:	6022      	str	r2, [r4, #0]
 8009548:	f04f 0a01 	mov.w	sl, #1
 800954c:	e7e4      	b.n	8009518 <_scanf_float+0x198>
 800954e:	f1ba 0f02 	cmp.w	sl, #2
 8009552:	d050      	beq.n	80095f6 <_scanf_float+0x276>
 8009554:	2d01      	cmp	r5, #1
 8009556:	d002      	beq.n	800955e <_scanf_float+0x1de>
 8009558:	2d04      	cmp	r5, #4
 800955a:	f47f af44 	bne.w	80093e6 <_scanf_float+0x66>
 800955e:	3501      	adds	r5, #1
 8009560:	b2ed      	uxtb	r5, r5
 8009562:	e7d9      	b.n	8009518 <_scanf_float+0x198>
 8009564:	f1ba 0f01 	cmp.w	sl, #1
 8009568:	f47f af3d 	bne.w	80093e6 <_scanf_float+0x66>
 800956c:	f04f 0a02 	mov.w	sl, #2
 8009570:	e7d2      	b.n	8009518 <_scanf_float+0x198>
 8009572:	b975      	cbnz	r5, 8009592 <_scanf_float+0x212>
 8009574:	2f00      	cmp	r7, #0
 8009576:	f47f af37 	bne.w	80093e8 <_scanf_float+0x68>
 800957a:	6822      	ldr	r2, [r4, #0]
 800957c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009580:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009584:	f040 8103 	bne.w	800978e <_scanf_float+0x40e>
 8009588:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800958c:	6022      	str	r2, [r4, #0]
 800958e:	2501      	movs	r5, #1
 8009590:	e7c2      	b.n	8009518 <_scanf_float+0x198>
 8009592:	2d03      	cmp	r5, #3
 8009594:	d0e3      	beq.n	800955e <_scanf_float+0x1de>
 8009596:	2d05      	cmp	r5, #5
 8009598:	e7df      	b.n	800955a <_scanf_float+0x1da>
 800959a:	2d02      	cmp	r5, #2
 800959c:	f47f af23 	bne.w	80093e6 <_scanf_float+0x66>
 80095a0:	2503      	movs	r5, #3
 80095a2:	e7b9      	b.n	8009518 <_scanf_float+0x198>
 80095a4:	2d06      	cmp	r5, #6
 80095a6:	f47f af1e 	bne.w	80093e6 <_scanf_float+0x66>
 80095aa:	2507      	movs	r5, #7
 80095ac:	e7b4      	b.n	8009518 <_scanf_float+0x198>
 80095ae:	6822      	ldr	r2, [r4, #0]
 80095b0:	0591      	lsls	r1, r2, #22
 80095b2:	f57f af18 	bpl.w	80093e6 <_scanf_float+0x66>
 80095b6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80095ba:	6022      	str	r2, [r4, #0]
 80095bc:	9702      	str	r7, [sp, #8]
 80095be:	e7ab      	b.n	8009518 <_scanf_float+0x198>
 80095c0:	6822      	ldr	r2, [r4, #0]
 80095c2:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80095c6:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80095ca:	d005      	beq.n	80095d8 <_scanf_float+0x258>
 80095cc:	0550      	lsls	r0, r2, #21
 80095ce:	f57f af0a 	bpl.w	80093e6 <_scanf_float+0x66>
 80095d2:	2f00      	cmp	r7, #0
 80095d4:	f000 80db 	beq.w	800978e <_scanf_float+0x40e>
 80095d8:	0591      	lsls	r1, r2, #22
 80095da:	bf58      	it	pl
 80095dc:	9902      	ldrpl	r1, [sp, #8]
 80095de:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80095e2:	bf58      	it	pl
 80095e4:	1a79      	subpl	r1, r7, r1
 80095e6:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80095ea:	bf58      	it	pl
 80095ec:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80095f0:	6022      	str	r2, [r4, #0]
 80095f2:	2700      	movs	r7, #0
 80095f4:	e790      	b.n	8009518 <_scanf_float+0x198>
 80095f6:	f04f 0a03 	mov.w	sl, #3
 80095fa:	e78d      	b.n	8009518 <_scanf_float+0x198>
 80095fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009600:	4649      	mov	r1, r9
 8009602:	4640      	mov	r0, r8
 8009604:	4798      	blx	r3
 8009606:	2800      	cmp	r0, #0
 8009608:	f43f aedf 	beq.w	80093ca <_scanf_float+0x4a>
 800960c:	e6eb      	b.n	80093e6 <_scanf_float+0x66>
 800960e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009612:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009616:	464a      	mov	r2, r9
 8009618:	4640      	mov	r0, r8
 800961a:	4798      	blx	r3
 800961c:	6923      	ldr	r3, [r4, #16]
 800961e:	3b01      	subs	r3, #1
 8009620:	6123      	str	r3, [r4, #16]
 8009622:	e6eb      	b.n	80093fc <_scanf_float+0x7c>
 8009624:	1e6b      	subs	r3, r5, #1
 8009626:	2b06      	cmp	r3, #6
 8009628:	d824      	bhi.n	8009674 <_scanf_float+0x2f4>
 800962a:	2d02      	cmp	r5, #2
 800962c:	d836      	bhi.n	800969c <_scanf_float+0x31c>
 800962e:	9b01      	ldr	r3, [sp, #4]
 8009630:	429e      	cmp	r6, r3
 8009632:	f67f aee7 	bls.w	8009404 <_scanf_float+0x84>
 8009636:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800963a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800963e:	464a      	mov	r2, r9
 8009640:	4640      	mov	r0, r8
 8009642:	4798      	blx	r3
 8009644:	6923      	ldr	r3, [r4, #16]
 8009646:	3b01      	subs	r3, #1
 8009648:	6123      	str	r3, [r4, #16]
 800964a:	e7f0      	b.n	800962e <_scanf_float+0x2ae>
 800964c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009650:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009654:	464a      	mov	r2, r9
 8009656:	4640      	mov	r0, r8
 8009658:	4798      	blx	r3
 800965a:	6923      	ldr	r3, [r4, #16]
 800965c:	3b01      	subs	r3, #1
 800965e:	6123      	str	r3, [r4, #16]
 8009660:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009664:	fa5f fa8a 	uxtb.w	sl, sl
 8009668:	f1ba 0f02 	cmp.w	sl, #2
 800966c:	d1ee      	bne.n	800964c <_scanf_float+0x2cc>
 800966e:	3d03      	subs	r5, #3
 8009670:	b2ed      	uxtb	r5, r5
 8009672:	1b76      	subs	r6, r6, r5
 8009674:	6823      	ldr	r3, [r4, #0]
 8009676:	05da      	lsls	r2, r3, #23
 8009678:	d530      	bpl.n	80096dc <_scanf_float+0x35c>
 800967a:	055b      	lsls	r3, r3, #21
 800967c:	d511      	bpl.n	80096a2 <_scanf_float+0x322>
 800967e:	9b01      	ldr	r3, [sp, #4]
 8009680:	429e      	cmp	r6, r3
 8009682:	f67f aebf 	bls.w	8009404 <_scanf_float+0x84>
 8009686:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800968a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800968e:	464a      	mov	r2, r9
 8009690:	4640      	mov	r0, r8
 8009692:	4798      	blx	r3
 8009694:	6923      	ldr	r3, [r4, #16]
 8009696:	3b01      	subs	r3, #1
 8009698:	6123      	str	r3, [r4, #16]
 800969a:	e7f0      	b.n	800967e <_scanf_float+0x2fe>
 800969c:	46aa      	mov	sl, r5
 800969e:	46b3      	mov	fp, r6
 80096a0:	e7de      	b.n	8009660 <_scanf_float+0x2e0>
 80096a2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80096a6:	6923      	ldr	r3, [r4, #16]
 80096a8:	2965      	cmp	r1, #101	@ 0x65
 80096aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80096ae:	f106 35ff 	add.w	r5, r6, #4294967295
 80096b2:	6123      	str	r3, [r4, #16]
 80096b4:	d00c      	beq.n	80096d0 <_scanf_float+0x350>
 80096b6:	2945      	cmp	r1, #69	@ 0x45
 80096b8:	d00a      	beq.n	80096d0 <_scanf_float+0x350>
 80096ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80096be:	464a      	mov	r2, r9
 80096c0:	4640      	mov	r0, r8
 80096c2:	4798      	blx	r3
 80096c4:	6923      	ldr	r3, [r4, #16]
 80096c6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80096ca:	3b01      	subs	r3, #1
 80096cc:	1eb5      	subs	r5, r6, #2
 80096ce:	6123      	str	r3, [r4, #16]
 80096d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80096d4:	464a      	mov	r2, r9
 80096d6:	4640      	mov	r0, r8
 80096d8:	4798      	blx	r3
 80096da:	462e      	mov	r6, r5
 80096dc:	6822      	ldr	r2, [r4, #0]
 80096de:	f012 0210 	ands.w	r2, r2, #16
 80096e2:	d001      	beq.n	80096e8 <_scanf_float+0x368>
 80096e4:	2000      	movs	r0, #0
 80096e6:	e68e      	b.n	8009406 <_scanf_float+0x86>
 80096e8:	7032      	strb	r2, [r6, #0]
 80096ea:	6823      	ldr	r3, [r4, #0]
 80096ec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80096f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80096f4:	d125      	bne.n	8009742 <_scanf_float+0x3c2>
 80096f6:	9b02      	ldr	r3, [sp, #8]
 80096f8:	429f      	cmp	r7, r3
 80096fa:	d00a      	beq.n	8009712 <_scanf_float+0x392>
 80096fc:	1bda      	subs	r2, r3, r7
 80096fe:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009702:	429e      	cmp	r6, r3
 8009704:	bf28      	it	cs
 8009706:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800970a:	4922      	ldr	r1, [pc, #136]	@ (8009794 <_scanf_float+0x414>)
 800970c:	4630      	mov	r0, r6
 800970e:	f000 f93d 	bl	800998c <siprintf>
 8009712:	9901      	ldr	r1, [sp, #4]
 8009714:	2200      	movs	r2, #0
 8009716:	4640      	mov	r0, r8
 8009718:	f002 fc72 	bl	800c000 <_strtod_r>
 800971c:	9b03      	ldr	r3, [sp, #12]
 800971e:	6821      	ldr	r1, [r4, #0]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f011 0f02 	tst.w	r1, #2
 8009726:	ec57 6b10 	vmov	r6, r7, d0
 800972a:	f103 0204 	add.w	r2, r3, #4
 800972e:	d015      	beq.n	800975c <_scanf_float+0x3dc>
 8009730:	9903      	ldr	r1, [sp, #12]
 8009732:	600a      	str	r2, [r1, #0]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	e9c3 6700 	strd	r6, r7, [r3]
 800973a:	68e3      	ldr	r3, [r4, #12]
 800973c:	3301      	adds	r3, #1
 800973e:	60e3      	str	r3, [r4, #12]
 8009740:	e7d0      	b.n	80096e4 <_scanf_float+0x364>
 8009742:	9b04      	ldr	r3, [sp, #16]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d0e4      	beq.n	8009712 <_scanf_float+0x392>
 8009748:	9905      	ldr	r1, [sp, #20]
 800974a:	230a      	movs	r3, #10
 800974c:	3101      	adds	r1, #1
 800974e:	4640      	mov	r0, r8
 8009750:	f002 fcd6 	bl	800c100 <_strtol_r>
 8009754:	9b04      	ldr	r3, [sp, #16]
 8009756:	9e05      	ldr	r6, [sp, #20]
 8009758:	1ac2      	subs	r2, r0, r3
 800975a:	e7d0      	b.n	80096fe <_scanf_float+0x37e>
 800975c:	f011 0f04 	tst.w	r1, #4
 8009760:	9903      	ldr	r1, [sp, #12]
 8009762:	600a      	str	r2, [r1, #0]
 8009764:	d1e6      	bne.n	8009734 <_scanf_float+0x3b4>
 8009766:	681d      	ldr	r5, [r3, #0]
 8009768:	4632      	mov	r2, r6
 800976a:	463b      	mov	r3, r7
 800976c:	4630      	mov	r0, r6
 800976e:	4639      	mov	r1, r7
 8009770:	f7f7 f9fc 	bl	8000b6c <__aeabi_dcmpun>
 8009774:	b128      	cbz	r0, 8009782 <_scanf_float+0x402>
 8009776:	4808      	ldr	r0, [pc, #32]	@ (8009798 <_scanf_float+0x418>)
 8009778:	f000 fa38 	bl	8009bec <nanf>
 800977c:	ed85 0a00 	vstr	s0, [r5]
 8009780:	e7db      	b.n	800973a <_scanf_float+0x3ba>
 8009782:	4630      	mov	r0, r6
 8009784:	4639      	mov	r1, r7
 8009786:	f7f7 fa4f 	bl	8000c28 <__aeabi_d2f>
 800978a:	6028      	str	r0, [r5, #0]
 800978c:	e7d5      	b.n	800973a <_scanf_float+0x3ba>
 800978e:	2700      	movs	r7, #0
 8009790:	e62e      	b.n	80093f0 <_scanf_float+0x70>
 8009792:	bf00      	nop
 8009794:	0800d39c 	.word	0x0800d39c
 8009798:	0800d4dd 	.word	0x0800d4dd

0800979c <std>:
 800979c:	2300      	movs	r3, #0
 800979e:	b510      	push	{r4, lr}
 80097a0:	4604      	mov	r4, r0
 80097a2:	e9c0 3300 	strd	r3, r3, [r0]
 80097a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80097aa:	6083      	str	r3, [r0, #8]
 80097ac:	8181      	strh	r1, [r0, #12]
 80097ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80097b0:	81c2      	strh	r2, [r0, #14]
 80097b2:	6183      	str	r3, [r0, #24]
 80097b4:	4619      	mov	r1, r3
 80097b6:	2208      	movs	r2, #8
 80097b8:	305c      	adds	r0, #92	@ 0x5c
 80097ba:	f000 f989 	bl	8009ad0 <memset>
 80097be:	4b0d      	ldr	r3, [pc, #52]	@ (80097f4 <std+0x58>)
 80097c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80097c2:	4b0d      	ldr	r3, [pc, #52]	@ (80097f8 <std+0x5c>)
 80097c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80097c6:	4b0d      	ldr	r3, [pc, #52]	@ (80097fc <std+0x60>)
 80097c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80097ca:	4b0d      	ldr	r3, [pc, #52]	@ (8009800 <std+0x64>)
 80097cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80097ce:	4b0d      	ldr	r3, [pc, #52]	@ (8009804 <std+0x68>)
 80097d0:	6224      	str	r4, [r4, #32]
 80097d2:	429c      	cmp	r4, r3
 80097d4:	d006      	beq.n	80097e4 <std+0x48>
 80097d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80097da:	4294      	cmp	r4, r2
 80097dc:	d002      	beq.n	80097e4 <std+0x48>
 80097de:	33d0      	adds	r3, #208	@ 0xd0
 80097e0:	429c      	cmp	r4, r3
 80097e2:	d105      	bne.n	80097f0 <std+0x54>
 80097e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80097e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097ec:	f000 b9ec 	b.w	8009bc8 <__retarget_lock_init_recursive>
 80097f0:	bd10      	pop	{r4, pc}
 80097f2:	bf00      	nop
 80097f4:	080099d1 	.word	0x080099d1
 80097f8:	080099f3 	.word	0x080099f3
 80097fc:	08009a2b 	.word	0x08009a2b
 8009800:	08009a4f 	.word	0x08009a4f
 8009804:	20004438 	.word	0x20004438

08009808 <stdio_exit_handler>:
 8009808:	4a02      	ldr	r2, [pc, #8]	@ (8009814 <stdio_exit_handler+0xc>)
 800980a:	4903      	ldr	r1, [pc, #12]	@ (8009818 <stdio_exit_handler+0x10>)
 800980c:	4803      	ldr	r0, [pc, #12]	@ (800981c <stdio_exit_handler+0x14>)
 800980e:	f000 b869 	b.w	80098e4 <_fwalk_sglue>
 8009812:	bf00      	nop
 8009814:	2000001c 	.word	0x2000001c
 8009818:	0800c4bd 	.word	0x0800c4bd
 800981c:	2000002c 	.word	0x2000002c

08009820 <cleanup_stdio>:
 8009820:	6841      	ldr	r1, [r0, #4]
 8009822:	4b0c      	ldr	r3, [pc, #48]	@ (8009854 <cleanup_stdio+0x34>)
 8009824:	4299      	cmp	r1, r3
 8009826:	b510      	push	{r4, lr}
 8009828:	4604      	mov	r4, r0
 800982a:	d001      	beq.n	8009830 <cleanup_stdio+0x10>
 800982c:	f002 fe46 	bl	800c4bc <_fflush_r>
 8009830:	68a1      	ldr	r1, [r4, #8]
 8009832:	4b09      	ldr	r3, [pc, #36]	@ (8009858 <cleanup_stdio+0x38>)
 8009834:	4299      	cmp	r1, r3
 8009836:	d002      	beq.n	800983e <cleanup_stdio+0x1e>
 8009838:	4620      	mov	r0, r4
 800983a:	f002 fe3f 	bl	800c4bc <_fflush_r>
 800983e:	68e1      	ldr	r1, [r4, #12]
 8009840:	4b06      	ldr	r3, [pc, #24]	@ (800985c <cleanup_stdio+0x3c>)
 8009842:	4299      	cmp	r1, r3
 8009844:	d004      	beq.n	8009850 <cleanup_stdio+0x30>
 8009846:	4620      	mov	r0, r4
 8009848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800984c:	f002 be36 	b.w	800c4bc <_fflush_r>
 8009850:	bd10      	pop	{r4, pc}
 8009852:	bf00      	nop
 8009854:	20004438 	.word	0x20004438
 8009858:	200044a0 	.word	0x200044a0
 800985c:	20004508 	.word	0x20004508

08009860 <global_stdio_init.part.0>:
 8009860:	b510      	push	{r4, lr}
 8009862:	4b0b      	ldr	r3, [pc, #44]	@ (8009890 <global_stdio_init.part.0+0x30>)
 8009864:	4c0b      	ldr	r4, [pc, #44]	@ (8009894 <global_stdio_init.part.0+0x34>)
 8009866:	4a0c      	ldr	r2, [pc, #48]	@ (8009898 <global_stdio_init.part.0+0x38>)
 8009868:	601a      	str	r2, [r3, #0]
 800986a:	4620      	mov	r0, r4
 800986c:	2200      	movs	r2, #0
 800986e:	2104      	movs	r1, #4
 8009870:	f7ff ff94 	bl	800979c <std>
 8009874:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009878:	2201      	movs	r2, #1
 800987a:	2109      	movs	r1, #9
 800987c:	f7ff ff8e 	bl	800979c <std>
 8009880:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009884:	2202      	movs	r2, #2
 8009886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800988a:	2112      	movs	r1, #18
 800988c:	f7ff bf86 	b.w	800979c <std>
 8009890:	20004570 	.word	0x20004570
 8009894:	20004438 	.word	0x20004438
 8009898:	08009809 	.word	0x08009809

0800989c <__sfp_lock_acquire>:
 800989c:	4801      	ldr	r0, [pc, #4]	@ (80098a4 <__sfp_lock_acquire+0x8>)
 800989e:	f000 b994 	b.w	8009bca <__retarget_lock_acquire_recursive>
 80098a2:	bf00      	nop
 80098a4:	20004579 	.word	0x20004579

080098a8 <__sfp_lock_release>:
 80098a8:	4801      	ldr	r0, [pc, #4]	@ (80098b0 <__sfp_lock_release+0x8>)
 80098aa:	f000 b98f 	b.w	8009bcc <__retarget_lock_release_recursive>
 80098ae:	bf00      	nop
 80098b0:	20004579 	.word	0x20004579

080098b4 <__sinit>:
 80098b4:	b510      	push	{r4, lr}
 80098b6:	4604      	mov	r4, r0
 80098b8:	f7ff fff0 	bl	800989c <__sfp_lock_acquire>
 80098bc:	6a23      	ldr	r3, [r4, #32]
 80098be:	b11b      	cbz	r3, 80098c8 <__sinit+0x14>
 80098c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098c4:	f7ff bff0 	b.w	80098a8 <__sfp_lock_release>
 80098c8:	4b04      	ldr	r3, [pc, #16]	@ (80098dc <__sinit+0x28>)
 80098ca:	6223      	str	r3, [r4, #32]
 80098cc:	4b04      	ldr	r3, [pc, #16]	@ (80098e0 <__sinit+0x2c>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d1f5      	bne.n	80098c0 <__sinit+0xc>
 80098d4:	f7ff ffc4 	bl	8009860 <global_stdio_init.part.0>
 80098d8:	e7f2      	b.n	80098c0 <__sinit+0xc>
 80098da:	bf00      	nop
 80098dc:	08009821 	.word	0x08009821
 80098e0:	20004570 	.word	0x20004570

080098e4 <_fwalk_sglue>:
 80098e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098e8:	4607      	mov	r7, r0
 80098ea:	4688      	mov	r8, r1
 80098ec:	4614      	mov	r4, r2
 80098ee:	2600      	movs	r6, #0
 80098f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80098f4:	f1b9 0901 	subs.w	r9, r9, #1
 80098f8:	d505      	bpl.n	8009906 <_fwalk_sglue+0x22>
 80098fa:	6824      	ldr	r4, [r4, #0]
 80098fc:	2c00      	cmp	r4, #0
 80098fe:	d1f7      	bne.n	80098f0 <_fwalk_sglue+0xc>
 8009900:	4630      	mov	r0, r6
 8009902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009906:	89ab      	ldrh	r3, [r5, #12]
 8009908:	2b01      	cmp	r3, #1
 800990a:	d907      	bls.n	800991c <_fwalk_sglue+0x38>
 800990c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009910:	3301      	adds	r3, #1
 8009912:	d003      	beq.n	800991c <_fwalk_sglue+0x38>
 8009914:	4629      	mov	r1, r5
 8009916:	4638      	mov	r0, r7
 8009918:	47c0      	blx	r8
 800991a:	4306      	orrs	r6, r0
 800991c:	3568      	adds	r5, #104	@ 0x68
 800991e:	e7e9      	b.n	80098f4 <_fwalk_sglue+0x10>

08009920 <sniprintf>:
 8009920:	b40c      	push	{r2, r3}
 8009922:	b530      	push	{r4, r5, lr}
 8009924:	4b18      	ldr	r3, [pc, #96]	@ (8009988 <sniprintf+0x68>)
 8009926:	1e0c      	subs	r4, r1, #0
 8009928:	681d      	ldr	r5, [r3, #0]
 800992a:	b09d      	sub	sp, #116	@ 0x74
 800992c:	da08      	bge.n	8009940 <sniprintf+0x20>
 800992e:	238b      	movs	r3, #139	@ 0x8b
 8009930:	602b      	str	r3, [r5, #0]
 8009932:	f04f 30ff 	mov.w	r0, #4294967295
 8009936:	b01d      	add	sp, #116	@ 0x74
 8009938:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800993c:	b002      	add	sp, #8
 800993e:	4770      	bx	lr
 8009940:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009944:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009948:	f04f 0300 	mov.w	r3, #0
 800994c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800994e:	bf14      	ite	ne
 8009950:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009954:	4623      	moveq	r3, r4
 8009956:	9304      	str	r3, [sp, #16]
 8009958:	9307      	str	r3, [sp, #28]
 800995a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800995e:	9002      	str	r0, [sp, #8]
 8009960:	9006      	str	r0, [sp, #24]
 8009962:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009966:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009968:	ab21      	add	r3, sp, #132	@ 0x84
 800996a:	a902      	add	r1, sp, #8
 800996c:	4628      	mov	r0, r5
 800996e:	9301      	str	r3, [sp, #4]
 8009970:	f002 fc24 	bl	800c1bc <_svfiprintf_r>
 8009974:	1c43      	adds	r3, r0, #1
 8009976:	bfbc      	itt	lt
 8009978:	238b      	movlt	r3, #139	@ 0x8b
 800997a:	602b      	strlt	r3, [r5, #0]
 800997c:	2c00      	cmp	r4, #0
 800997e:	d0da      	beq.n	8009936 <sniprintf+0x16>
 8009980:	9b02      	ldr	r3, [sp, #8]
 8009982:	2200      	movs	r2, #0
 8009984:	701a      	strb	r2, [r3, #0]
 8009986:	e7d6      	b.n	8009936 <sniprintf+0x16>
 8009988:	20000028 	.word	0x20000028

0800998c <siprintf>:
 800998c:	b40e      	push	{r1, r2, r3}
 800998e:	b510      	push	{r4, lr}
 8009990:	b09d      	sub	sp, #116	@ 0x74
 8009992:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009994:	9002      	str	r0, [sp, #8]
 8009996:	9006      	str	r0, [sp, #24]
 8009998:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800999c:	480a      	ldr	r0, [pc, #40]	@ (80099c8 <siprintf+0x3c>)
 800999e:	9107      	str	r1, [sp, #28]
 80099a0:	9104      	str	r1, [sp, #16]
 80099a2:	490a      	ldr	r1, [pc, #40]	@ (80099cc <siprintf+0x40>)
 80099a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80099a8:	9105      	str	r1, [sp, #20]
 80099aa:	2400      	movs	r4, #0
 80099ac:	a902      	add	r1, sp, #8
 80099ae:	6800      	ldr	r0, [r0, #0]
 80099b0:	9301      	str	r3, [sp, #4]
 80099b2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80099b4:	f002 fc02 	bl	800c1bc <_svfiprintf_r>
 80099b8:	9b02      	ldr	r3, [sp, #8]
 80099ba:	701c      	strb	r4, [r3, #0]
 80099bc:	b01d      	add	sp, #116	@ 0x74
 80099be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099c2:	b003      	add	sp, #12
 80099c4:	4770      	bx	lr
 80099c6:	bf00      	nop
 80099c8:	20000028 	.word	0x20000028
 80099cc:	ffff0208 	.word	0xffff0208

080099d0 <__sread>:
 80099d0:	b510      	push	{r4, lr}
 80099d2:	460c      	mov	r4, r1
 80099d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099d8:	f000 f8a8 	bl	8009b2c <_read_r>
 80099dc:	2800      	cmp	r0, #0
 80099de:	bfab      	itete	ge
 80099e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80099e2:	89a3      	ldrhlt	r3, [r4, #12]
 80099e4:	181b      	addge	r3, r3, r0
 80099e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80099ea:	bfac      	ite	ge
 80099ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80099ee:	81a3      	strhlt	r3, [r4, #12]
 80099f0:	bd10      	pop	{r4, pc}

080099f2 <__swrite>:
 80099f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099f6:	461f      	mov	r7, r3
 80099f8:	898b      	ldrh	r3, [r1, #12]
 80099fa:	05db      	lsls	r3, r3, #23
 80099fc:	4605      	mov	r5, r0
 80099fe:	460c      	mov	r4, r1
 8009a00:	4616      	mov	r6, r2
 8009a02:	d505      	bpl.n	8009a10 <__swrite+0x1e>
 8009a04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a08:	2302      	movs	r3, #2
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f000 f87c 	bl	8009b08 <_lseek_r>
 8009a10:	89a3      	ldrh	r3, [r4, #12]
 8009a12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009a1a:	81a3      	strh	r3, [r4, #12]
 8009a1c:	4632      	mov	r2, r6
 8009a1e:	463b      	mov	r3, r7
 8009a20:	4628      	mov	r0, r5
 8009a22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a26:	f000 b893 	b.w	8009b50 <_write_r>

08009a2a <__sseek>:
 8009a2a:	b510      	push	{r4, lr}
 8009a2c:	460c      	mov	r4, r1
 8009a2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a32:	f000 f869 	bl	8009b08 <_lseek_r>
 8009a36:	1c43      	adds	r3, r0, #1
 8009a38:	89a3      	ldrh	r3, [r4, #12]
 8009a3a:	bf15      	itete	ne
 8009a3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009a3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009a42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009a46:	81a3      	strheq	r3, [r4, #12]
 8009a48:	bf18      	it	ne
 8009a4a:	81a3      	strhne	r3, [r4, #12]
 8009a4c:	bd10      	pop	{r4, pc}

08009a4e <__sclose>:
 8009a4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a52:	f000 b849 	b.w	8009ae8 <_close_r>

08009a56 <_vsniprintf_r>:
 8009a56:	b530      	push	{r4, r5, lr}
 8009a58:	4614      	mov	r4, r2
 8009a5a:	2c00      	cmp	r4, #0
 8009a5c:	b09b      	sub	sp, #108	@ 0x6c
 8009a5e:	4605      	mov	r5, r0
 8009a60:	461a      	mov	r2, r3
 8009a62:	da05      	bge.n	8009a70 <_vsniprintf_r+0x1a>
 8009a64:	238b      	movs	r3, #139	@ 0x8b
 8009a66:	6003      	str	r3, [r0, #0]
 8009a68:	f04f 30ff 	mov.w	r0, #4294967295
 8009a6c:	b01b      	add	sp, #108	@ 0x6c
 8009a6e:	bd30      	pop	{r4, r5, pc}
 8009a70:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009a74:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009a78:	f04f 0300 	mov.w	r3, #0
 8009a7c:	9319      	str	r3, [sp, #100]	@ 0x64
 8009a7e:	bf14      	ite	ne
 8009a80:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009a84:	4623      	moveq	r3, r4
 8009a86:	9302      	str	r3, [sp, #8]
 8009a88:	9305      	str	r3, [sp, #20]
 8009a8a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009a8e:	9100      	str	r1, [sp, #0]
 8009a90:	9104      	str	r1, [sp, #16]
 8009a92:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009a96:	4669      	mov	r1, sp
 8009a98:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8009a9a:	f002 fb8f 	bl	800c1bc <_svfiprintf_r>
 8009a9e:	1c43      	adds	r3, r0, #1
 8009aa0:	bfbc      	itt	lt
 8009aa2:	238b      	movlt	r3, #139	@ 0x8b
 8009aa4:	602b      	strlt	r3, [r5, #0]
 8009aa6:	2c00      	cmp	r4, #0
 8009aa8:	d0e0      	beq.n	8009a6c <_vsniprintf_r+0x16>
 8009aaa:	9b00      	ldr	r3, [sp, #0]
 8009aac:	2200      	movs	r2, #0
 8009aae:	701a      	strb	r2, [r3, #0]
 8009ab0:	e7dc      	b.n	8009a6c <_vsniprintf_r+0x16>
	...

08009ab4 <vsniprintf>:
 8009ab4:	b507      	push	{r0, r1, r2, lr}
 8009ab6:	9300      	str	r3, [sp, #0]
 8009ab8:	4613      	mov	r3, r2
 8009aba:	460a      	mov	r2, r1
 8009abc:	4601      	mov	r1, r0
 8009abe:	4803      	ldr	r0, [pc, #12]	@ (8009acc <vsniprintf+0x18>)
 8009ac0:	6800      	ldr	r0, [r0, #0]
 8009ac2:	f7ff ffc8 	bl	8009a56 <_vsniprintf_r>
 8009ac6:	b003      	add	sp, #12
 8009ac8:	f85d fb04 	ldr.w	pc, [sp], #4
 8009acc:	20000028 	.word	0x20000028

08009ad0 <memset>:
 8009ad0:	4402      	add	r2, r0
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d100      	bne.n	8009ada <memset+0xa>
 8009ad8:	4770      	bx	lr
 8009ada:	f803 1b01 	strb.w	r1, [r3], #1
 8009ade:	e7f9      	b.n	8009ad4 <memset+0x4>

08009ae0 <_localeconv_r>:
 8009ae0:	4800      	ldr	r0, [pc, #0]	@ (8009ae4 <_localeconv_r+0x4>)
 8009ae2:	4770      	bx	lr
 8009ae4:	20000168 	.word	0x20000168

08009ae8 <_close_r>:
 8009ae8:	b538      	push	{r3, r4, r5, lr}
 8009aea:	4d06      	ldr	r5, [pc, #24]	@ (8009b04 <_close_r+0x1c>)
 8009aec:	2300      	movs	r3, #0
 8009aee:	4604      	mov	r4, r0
 8009af0:	4608      	mov	r0, r1
 8009af2:	602b      	str	r3, [r5, #0]
 8009af4:	f7f8 fb1c 	bl	8002130 <_close>
 8009af8:	1c43      	adds	r3, r0, #1
 8009afa:	d102      	bne.n	8009b02 <_close_r+0x1a>
 8009afc:	682b      	ldr	r3, [r5, #0]
 8009afe:	b103      	cbz	r3, 8009b02 <_close_r+0x1a>
 8009b00:	6023      	str	r3, [r4, #0]
 8009b02:	bd38      	pop	{r3, r4, r5, pc}
 8009b04:	20004574 	.word	0x20004574

08009b08 <_lseek_r>:
 8009b08:	b538      	push	{r3, r4, r5, lr}
 8009b0a:	4d07      	ldr	r5, [pc, #28]	@ (8009b28 <_lseek_r+0x20>)
 8009b0c:	4604      	mov	r4, r0
 8009b0e:	4608      	mov	r0, r1
 8009b10:	4611      	mov	r1, r2
 8009b12:	2200      	movs	r2, #0
 8009b14:	602a      	str	r2, [r5, #0]
 8009b16:	461a      	mov	r2, r3
 8009b18:	f7f8 fb31 	bl	800217e <_lseek>
 8009b1c:	1c43      	adds	r3, r0, #1
 8009b1e:	d102      	bne.n	8009b26 <_lseek_r+0x1e>
 8009b20:	682b      	ldr	r3, [r5, #0]
 8009b22:	b103      	cbz	r3, 8009b26 <_lseek_r+0x1e>
 8009b24:	6023      	str	r3, [r4, #0]
 8009b26:	bd38      	pop	{r3, r4, r5, pc}
 8009b28:	20004574 	.word	0x20004574

08009b2c <_read_r>:
 8009b2c:	b538      	push	{r3, r4, r5, lr}
 8009b2e:	4d07      	ldr	r5, [pc, #28]	@ (8009b4c <_read_r+0x20>)
 8009b30:	4604      	mov	r4, r0
 8009b32:	4608      	mov	r0, r1
 8009b34:	4611      	mov	r1, r2
 8009b36:	2200      	movs	r2, #0
 8009b38:	602a      	str	r2, [r5, #0]
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	f7f8 fabf 	bl	80020be <_read>
 8009b40:	1c43      	adds	r3, r0, #1
 8009b42:	d102      	bne.n	8009b4a <_read_r+0x1e>
 8009b44:	682b      	ldr	r3, [r5, #0]
 8009b46:	b103      	cbz	r3, 8009b4a <_read_r+0x1e>
 8009b48:	6023      	str	r3, [r4, #0]
 8009b4a:	bd38      	pop	{r3, r4, r5, pc}
 8009b4c:	20004574 	.word	0x20004574

08009b50 <_write_r>:
 8009b50:	b538      	push	{r3, r4, r5, lr}
 8009b52:	4d07      	ldr	r5, [pc, #28]	@ (8009b70 <_write_r+0x20>)
 8009b54:	4604      	mov	r4, r0
 8009b56:	4608      	mov	r0, r1
 8009b58:	4611      	mov	r1, r2
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	602a      	str	r2, [r5, #0]
 8009b5e:	461a      	mov	r2, r3
 8009b60:	f7f8 faca 	bl	80020f8 <_write>
 8009b64:	1c43      	adds	r3, r0, #1
 8009b66:	d102      	bne.n	8009b6e <_write_r+0x1e>
 8009b68:	682b      	ldr	r3, [r5, #0]
 8009b6a:	b103      	cbz	r3, 8009b6e <_write_r+0x1e>
 8009b6c:	6023      	str	r3, [r4, #0]
 8009b6e:	bd38      	pop	{r3, r4, r5, pc}
 8009b70:	20004574 	.word	0x20004574

08009b74 <__errno>:
 8009b74:	4b01      	ldr	r3, [pc, #4]	@ (8009b7c <__errno+0x8>)
 8009b76:	6818      	ldr	r0, [r3, #0]
 8009b78:	4770      	bx	lr
 8009b7a:	bf00      	nop
 8009b7c:	20000028 	.word	0x20000028

08009b80 <__libc_init_array>:
 8009b80:	b570      	push	{r4, r5, r6, lr}
 8009b82:	4d0d      	ldr	r5, [pc, #52]	@ (8009bb8 <__libc_init_array+0x38>)
 8009b84:	4c0d      	ldr	r4, [pc, #52]	@ (8009bbc <__libc_init_array+0x3c>)
 8009b86:	1b64      	subs	r4, r4, r5
 8009b88:	10a4      	asrs	r4, r4, #2
 8009b8a:	2600      	movs	r6, #0
 8009b8c:	42a6      	cmp	r6, r4
 8009b8e:	d109      	bne.n	8009ba4 <__libc_init_array+0x24>
 8009b90:	4d0b      	ldr	r5, [pc, #44]	@ (8009bc0 <__libc_init_array+0x40>)
 8009b92:	4c0c      	ldr	r4, [pc, #48]	@ (8009bc4 <__libc_init_array+0x44>)
 8009b94:	f003 fb76 	bl	800d284 <_init>
 8009b98:	1b64      	subs	r4, r4, r5
 8009b9a:	10a4      	asrs	r4, r4, #2
 8009b9c:	2600      	movs	r6, #0
 8009b9e:	42a6      	cmp	r6, r4
 8009ba0:	d105      	bne.n	8009bae <__libc_init_array+0x2e>
 8009ba2:	bd70      	pop	{r4, r5, r6, pc}
 8009ba4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ba8:	4798      	blx	r3
 8009baa:	3601      	adds	r6, #1
 8009bac:	e7ee      	b.n	8009b8c <__libc_init_array+0xc>
 8009bae:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bb2:	4798      	blx	r3
 8009bb4:	3601      	adds	r6, #1
 8009bb6:	e7f2      	b.n	8009b9e <__libc_init_array+0x1e>
 8009bb8:	0800d79c 	.word	0x0800d79c
 8009bbc:	0800d79c 	.word	0x0800d79c
 8009bc0:	0800d79c 	.word	0x0800d79c
 8009bc4:	0800d7a0 	.word	0x0800d7a0

08009bc8 <__retarget_lock_init_recursive>:
 8009bc8:	4770      	bx	lr

08009bca <__retarget_lock_acquire_recursive>:
 8009bca:	4770      	bx	lr

08009bcc <__retarget_lock_release_recursive>:
 8009bcc:	4770      	bx	lr

08009bce <memcpy>:
 8009bce:	440a      	add	r2, r1
 8009bd0:	4291      	cmp	r1, r2
 8009bd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8009bd6:	d100      	bne.n	8009bda <memcpy+0xc>
 8009bd8:	4770      	bx	lr
 8009bda:	b510      	push	{r4, lr}
 8009bdc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009be0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009be4:	4291      	cmp	r1, r2
 8009be6:	d1f9      	bne.n	8009bdc <memcpy+0xe>
 8009be8:	bd10      	pop	{r4, pc}
	...

08009bec <nanf>:
 8009bec:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009bf4 <nanf+0x8>
 8009bf0:	4770      	bx	lr
 8009bf2:	bf00      	nop
 8009bf4:	7fc00000 	.word	0x7fc00000

08009bf8 <quorem>:
 8009bf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bfc:	6903      	ldr	r3, [r0, #16]
 8009bfe:	690c      	ldr	r4, [r1, #16]
 8009c00:	42a3      	cmp	r3, r4
 8009c02:	4607      	mov	r7, r0
 8009c04:	db7e      	blt.n	8009d04 <quorem+0x10c>
 8009c06:	3c01      	subs	r4, #1
 8009c08:	f101 0814 	add.w	r8, r1, #20
 8009c0c:	00a3      	lsls	r3, r4, #2
 8009c0e:	f100 0514 	add.w	r5, r0, #20
 8009c12:	9300      	str	r3, [sp, #0]
 8009c14:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c18:	9301      	str	r3, [sp, #4]
 8009c1a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009c1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c22:	3301      	adds	r3, #1
 8009c24:	429a      	cmp	r2, r3
 8009c26:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009c2a:	fbb2 f6f3 	udiv	r6, r2, r3
 8009c2e:	d32e      	bcc.n	8009c8e <quorem+0x96>
 8009c30:	f04f 0a00 	mov.w	sl, #0
 8009c34:	46c4      	mov	ip, r8
 8009c36:	46ae      	mov	lr, r5
 8009c38:	46d3      	mov	fp, sl
 8009c3a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009c3e:	b298      	uxth	r0, r3
 8009c40:	fb06 a000 	mla	r0, r6, r0, sl
 8009c44:	0c02      	lsrs	r2, r0, #16
 8009c46:	0c1b      	lsrs	r3, r3, #16
 8009c48:	fb06 2303 	mla	r3, r6, r3, r2
 8009c4c:	f8de 2000 	ldr.w	r2, [lr]
 8009c50:	b280      	uxth	r0, r0
 8009c52:	b292      	uxth	r2, r2
 8009c54:	1a12      	subs	r2, r2, r0
 8009c56:	445a      	add	r2, fp
 8009c58:	f8de 0000 	ldr.w	r0, [lr]
 8009c5c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009c66:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009c6a:	b292      	uxth	r2, r2
 8009c6c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009c70:	45e1      	cmp	r9, ip
 8009c72:	f84e 2b04 	str.w	r2, [lr], #4
 8009c76:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009c7a:	d2de      	bcs.n	8009c3a <quorem+0x42>
 8009c7c:	9b00      	ldr	r3, [sp, #0]
 8009c7e:	58eb      	ldr	r3, [r5, r3]
 8009c80:	b92b      	cbnz	r3, 8009c8e <quorem+0x96>
 8009c82:	9b01      	ldr	r3, [sp, #4]
 8009c84:	3b04      	subs	r3, #4
 8009c86:	429d      	cmp	r5, r3
 8009c88:	461a      	mov	r2, r3
 8009c8a:	d32f      	bcc.n	8009cec <quorem+0xf4>
 8009c8c:	613c      	str	r4, [r7, #16]
 8009c8e:	4638      	mov	r0, r7
 8009c90:	f001 f9c6 	bl	800b020 <__mcmp>
 8009c94:	2800      	cmp	r0, #0
 8009c96:	db25      	blt.n	8009ce4 <quorem+0xec>
 8009c98:	4629      	mov	r1, r5
 8009c9a:	2000      	movs	r0, #0
 8009c9c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009ca0:	f8d1 c000 	ldr.w	ip, [r1]
 8009ca4:	fa1f fe82 	uxth.w	lr, r2
 8009ca8:	fa1f f38c 	uxth.w	r3, ip
 8009cac:	eba3 030e 	sub.w	r3, r3, lr
 8009cb0:	4403      	add	r3, r0
 8009cb2:	0c12      	lsrs	r2, r2, #16
 8009cb4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009cb8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009cbc:	b29b      	uxth	r3, r3
 8009cbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009cc2:	45c1      	cmp	r9, r8
 8009cc4:	f841 3b04 	str.w	r3, [r1], #4
 8009cc8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009ccc:	d2e6      	bcs.n	8009c9c <quorem+0xa4>
 8009cce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009cd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009cd6:	b922      	cbnz	r2, 8009ce2 <quorem+0xea>
 8009cd8:	3b04      	subs	r3, #4
 8009cda:	429d      	cmp	r5, r3
 8009cdc:	461a      	mov	r2, r3
 8009cde:	d30b      	bcc.n	8009cf8 <quorem+0x100>
 8009ce0:	613c      	str	r4, [r7, #16]
 8009ce2:	3601      	adds	r6, #1
 8009ce4:	4630      	mov	r0, r6
 8009ce6:	b003      	add	sp, #12
 8009ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cec:	6812      	ldr	r2, [r2, #0]
 8009cee:	3b04      	subs	r3, #4
 8009cf0:	2a00      	cmp	r2, #0
 8009cf2:	d1cb      	bne.n	8009c8c <quorem+0x94>
 8009cf4:	3c01      	subs	r4, #1
 8009cf6:	e7c6      	b.n	8009c86 <quorem+0x8e>
 8009cf8:	6812      	ldr	r2, [r2, #0]
 8009cfa:	3b04      	subs	r3, #4
 8009cfc:	2a00      	cmp	r2, #0
 8009cfe:	d1ef      	bne.n	8009ce0 <quorem+0xe8>
 8009d00:	3c01      	subs	r4, #1
 8009d02:	e7ea      	b.n	8009cda <quorem+0xe2>
 8009d04:	2000      	movs	r0, #0
 8009d06:	e7ee      	b.n	8009ce6 <quorem+0xee>

08009d08 <_dtoa_r>:
 8009d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d0c:	69c7      	ldr	r7, [r0, #28]
 8009d0e:	b097      	sub	sp, #92	@ 0x5c
 8009d10:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009d14:	ec55 4b10 	vmov	r4, r5, d0
 8009d18:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009d1a:	9107      	str	r1, [sp, #28]
 8009d1c:	4681      	mov	r9, r0
 8009d1e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009d20:	9311      	str	r3, [sp, #68]	@ 0x44
 8009d22:	b97f      	cbnz	r7, 8009d44 <_dtoa_r+0x3c>
 8009d24:	2010      	movs	r0, #16
 8009d26:	f000 fe09 	bl	800a93c <malloc>
 8009d2a:	4602      	mov	r2, r0
 8009d2c:	f8c9 001c 	str.w	r0, [r9, #28]
 8009d30:	b920      	cbnz	r0, 8009d3c <_dtoa_r+0x34>
 8009d32:	4ba9      	ldr	r3, [pc, #676]	@ (8009fd8 <_dtoa_r+0x2d0>)
 8009d34:	21ef      	movs	r1, #239	@ 0xef
 8009d36:	48a9      	ldr	r0, [pc, #676]	@ (8009fdc <_dtoa_r+0x2d4>)
 8009d38:	f002 fc2e 	bl	800c598 <__assert_func>
 8009d3c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009d40:	6007      	str	r7, [r0, #0]
 8009d42:	60c7      	str	r7, [r0, #12]
 8009d44:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009d48:	6819      	ldr	r1, [r3, #0]
 8009d4a:	b159      	cbz	r1, 8009d64 <_dtoa_r+0x5c>
 8009d4c:	685a      	ldr	r2, [r3, #4]
 8009d4e:	604a      	str	r2, [r1, #4]
 8009d50:	2301      	movs	r3, #1
 8009d52:	4093      	lsls	r3, r2
 8009d54:	608b      	str	r3, [r1, #8]
 8009d56:	4648      	mov	r0, r9
 8009d58:	f000 fee6 	bl	800ab28 <_Bfree>
 8009d5c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009d60:	2200      	movs	r2, #0
 8009d62:	601a      	str	r2, [r3, #0]
 8009d64:	1e2b      	subs	r3, r5, #0
 8009d66:	bfb9      	ittee	lt
 8009d68:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009d6c:	9305      	strlt	r3, [sp, #20]
 8009d6e:	2300      	movge	r3, #0
 8009d70:	6033      	strge	r3, [r6, #0]
 8009d72:	9f05      	ldr	r7, [sp, #20]
 8009d74:	4b9a      	ldr	r3, [pc, #616]	@ (8009fe0 <_dtoa_r+0x2d8>)
 8009d76:	bfbc      	itt	lt
 8009d78:	2201      	movlt	r2, #1
 8009d7a:	6032      	strlt	r2, [r6, #0]
 8009d7c:	43bb      	bics	r3, r7
 8009d7e:	d112      	bne.n	8009da6 <_dtoa_r+0x9e>
 8009d80:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009d82:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009d86:	6013      	str	r3, [r2, #0]
 8009d88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009d8c:	4323      	orrs	r3, r4
 8009d8e:	f000 855a 	beq.w	800a846 <_dtoa_r+0xb3e>
 8009d92:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009d94:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8009ff4 <_dtoa_r+0x2ec>
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	f000 855c 	beq.w	800a856 <_dtoa_r+0xb4e>
 8009d9e:	f10a 0303 	add.w	r3, sl, #3
 8009da2:	f000 bd56 	b.w	800a852 <_dtoa_r+0xb4a>
 8009da6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009daa:	2200      	movs	r2, #0
 8009dac:	ec51 0b17 	vmov	r0, r1, d7
 8009db0:	2300      	movs	r3, #0
 8009db2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8009db6:	f7f6 fea7 	bl	8000b08 <__aeabi_dcmpeq>
 8009dba:	4680      	mov	r8, r0
 8009dbc:	b158      	cbz	r0, 8009dd6 <_dtoa_r+0xce>
 8009dbe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	6013      	str	r3, [r2, #0]
 8009dc4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009dc6:	b113      	cbz	r3, 8009dce <_dtoa_r+0xc6>
 8009dc8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009dca:	4b86      	ldr	r3, [pc, #536]	@ (8009fe4 <_dtoa_r+0x2dc>)
 8009dcc:	6013      	str	r3, [r2, #0]
 8009dce:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009ff8 <_dtoa_r+0x2f0>
 8009dd2:	f000 bd40 	b.w	800a856 <_dtoa_r+0xb4e>
 8009dd6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8009dda:	aa14      	add	r2, sp, #80	@ 0x50
 8009ddc:	a915      	add	r1, sp, #84	@ 0x54
 8009dde:	4648      	mov	r0, r9
 8009de0:	f001 fa3e 	bl	800b260 <__d2b>
 8009de4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009de8:	9002      	str	r0, [sp, #8]
 8009dea:	2e00      	cmp	r6, #0
 8009dec:	d078      	beq.n	8009ee0 <_dtoa_r+0x1d8>
 8009dee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009df0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8009df4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009df8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009dfc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009e00:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009e04:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009e08:	4619      	mov	r1, r3
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	4b76      	ldr	r3, [pc, #472]	@ (8009fe8 <_dtoa_r+0x2e0>)
 8009e0e:	f7f6 fa5b 	bl	80002c8 <__aeabi_dsub>
 8009e12:	a36b      	add	r3, pc, #428	@ (adr r3, 8009fc0 <_dtoa_r+0x2b8>)
 8009e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e18:	f7f6 fc0e 	bl	8000638 <__aeabi_dmul>
 8009e1c:	a36a      	add	r3, pc, #424	@ (adr r3, 8009fc8 <_dtoa_r+0x2c0>)
 8009e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e22:	f7f6 fa53 	bl	80002cc <__adddf3>
 8009e26:	4604      	mov	r4, r0
 8009e28:	4630      	mov	r0, r6
 8009e2a:	460d      	mov	r5, r1
 8009e2c:	f7f6 fb9a 	bl	8000564 <__aeabi_i2d>
 8009e30:	a367      	add	r3, pc, #412	@ (adr r3, 8009fd0 <_dtoa_r+0x2c8>)
 8009e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e36:	f7f6 fbff 	bl	8000638 <__aeabi_dmul>
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	4620      	mov	r0, r4
 8009e40:	4629      	mov	r1, r5
 8009e42:	f7f6 fa43 	bl	80002cc <__adddf3>
 8009e46:	4604      	mov	r4, r0
 8009e48:	460d      	mov	r5, r1
 8009e4a:	f7f6 fea5 	bl	8000b98 <__aeabi_d2iz>
 8009e4e:	2200      	movs	r2, #0
 8009e50:	4607      	mov	r7, r0
 8009e52:	2300      	movs	r3, #0
 8009e54:	4620      	mov	r0, r4
 8009e56:	4629      	mov	r1, r5
 8009e58:	f7f6 fe60 	bl	8000b1c <__aeabi_dcmplt>
 8009e5c:	b140      	cbz	r0, 8009e70 <_dtoa_r+0x168>
 8009e5e:	4638      	mov	r0, r7
 8009e60:	f7f6 fb80 	bl	8000564 <__aeabi_i2d>
 8009e64:	4622      	mov	r2, r4
 8009e66:	462b      	mov	r3, r5
 8009e68:	f7f6 fe4e 	bl	8000b08 <__aeabi_dcmpeq>
 8009e6c:	b900      	cbnz	r0, 8009e70 <_dtoa_r+0x168>
 8009e6e:	3f01      	subs	r7, #1
 8009e70:	2f16      	cmp	r7, #22
 8009e72:	d852      	bhi.n	8009f1a <_dtoa_r+0x212>
 8009e74:	4b5d      	ldr	r3, [pc, #372]	@ (8009fec <_dtoa_r+0x2e4>)
 8009e76:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009e82:	f7f6 fe4b 	bl	8000b1c <__aeabi_dcmplt>
 8009e86:	2800      	cmp	r0, #0
 8009e88:	d049      	beq.n	8009f1e <_dtoa_r+0x216>
 8009e8a:	3f01      	subs	r7, #1
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009e90:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009e92:	1b9b      	subs	r3, r3, r6
 8009e94:	1e5a      	subs	r2, r3, #1
 8009e96:	bf45      	ittet	mi
 8009e98:	f1c3 0301 	rsbmi	r3, r3, #1
 8009e9c:	9300      	strmi	r3, [sp, #0]
 8009e9e:	2300      	movpl	r3, #0
 8009ea0:	2300      	movmi	r3, #0
 8009ea2:	9206      	str	r2, [sp, #24]
 8009ea4:	bf54      	ite	pl
 8009ea6:	9300      	strpl	r3, [sp, #0]
 8009ea8:	9306      	strmi	r3, [sp, #24]
 8009eaa:	2f00      	cmp	r7, #0
 8009eac:	db39      	blt.n	8009f22 <_dtoa_r+0x21a>
 8009eae:	9b06      	ldr	r3, [sp, #24]
 8009eb0:	970d      	str	r7, [sp, #52]	@ 0x34
 8009eb2:	443b      	add	r3, r7
 8009eb4:	9306      	str	r3, [sp, #24]
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	9308      	str	r3, [sp, #32]
 8009eba:	9b07      	ldr	r3, [sp, #28]
 8009ebc:	2b09      	cmp	r3, #9
 8009ebe:	d863      	bhi.n	8009f88 <_dtoa_r+0x280>
 8009ec0:	2b05      	cmp	r3, #5
 8009ec2:	bfc4      	itt	gt
 8009ec4:	3b04      	subgt	r3, #4
 8009ec6:	9307      	strgt	r3, [sp, #28]
 8009ec8:	9b07      	ldr	r3, [sp, #28]
 8009eca:	f1a3 0302 	sub.w	r3, r3, #2
 8009ece:	bfcc      	ite	gt
 8009ed0:	2400      	movgt	r4, #0
 8009ed2:	2401      	movle	r4, #1
 8009ed4:	2b03      	cmp	r3, #3
 8009ed6:	d863      	bhi.n	8009fa0 <_dtoa_r+0x298>
 8009ed8:	e8df f003 	tbb	[pc, r3]
 8009edc:	2b375452 	.word	0x2b375452
 8009ee0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009ee4:	441e      	add	r6, r3
 8009ee6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009eea:	2b20      	cmp	r3, #32
 8009eec:	bfc1      	itttt	gt
 8009eee:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009ef2:	409f      	lslgt	r7, r3
 8009ef4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009ef8:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009efc:	bfd6      	itet	le
 8009efe:	f1c3 0320 	rsble	r3, r3, #32
 8009f02:	ea47 0003 	orrgt.w	r0, r7, r3
 8009f06:	fa04 f003 	lslle.w	r0, r4, r3
 8009f0a:	f7f6 fb1b 	bl	8000544 <__aeabi_ui2d>
 8009f0e:	2201      	movs	r2, #1
 8009f10:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009f14:	3e01      	subs	r6, #1
 8009f16:	9212      	str	r2, [sp, #72]	@ 0x48
 8009f18:	e776      	b.n	8009e08 <_dtoa_r+0x100>
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	e7b7      	b.n	8009e8e <_dtoa_r+0x186>
 8009f1e:	9010      	str	r0, [sp, #64]	@ 0x40
 8009f20:	e7b6      	b.n	8009e90 <_dtoa_r+0x188>
 8009f22:	9b00      	ldr	r3, [sp, #0]
 8009f24:	1bdb      	subs	r3, r3, r7
 8009f26:	9300      	str	r3, [sp, #0]
 8009f28:	427b      	negs	r3, r7
 8009f2a:	9308      	str	r3, [sp, #32]
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	930d      	str	r3, [sp, #52]	@ 0x34
 8009f30:	e7c3      	b.n	8009eba <_dtoa_r+0x1b2>
 8009f32:	2301      	movs	r3, #1
 8009f34:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009f38:	eb07 0b03 	add.w	fp, r7, r3
 8009f3c:	f10b 0301 	add.w	r3, fp, #1
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	9303      	str	r3, [sp, #12]
 8009f44:	bfb8      	it	lt
 8009f46:	2301      	movlt	r3, #1
 8009f48:	e006      	b.n	8009f58 <_dtoa_r+0x250>
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f4e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	dd28      	ble.n	8009fa6 <_dtoa_r+0x29e>
 8009f54:	469b      	mov	fp, r3
 8009f56:	9303      	str	r3, [sp, #12]
 8009f58:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8009f5c:	2100      	movs	r1, #0
 8009f5e:	2204      	movs	r2, #4
 8009f60:	f102 0514 	add.w	r5, r2, #20
 8009f64:	429d      	cmp	r5, r3
 8009f66:	d926      	bls.n	8009fb6 <_dtoa_r+0x2ae>
 8009f68:	6041      	str	r1, [r0, #4]
 8009f6a:	4648      	mov	r0, r9
 8009f6c:	f000 fd9c 	bl	800aaa8 <_Balloc>
 8009f70:	4682      	mov	sl, r0
 8009f72:	2800      	cmp	r0, #0
 8009f74:	d142      	bne.n	8009ffc <_dtoa_r+0x2f4>
 8009f76:	4b1e      	ldr	r3, [pc, #120]	@ (8009ff0 <_dtoa_r+0x2e8>)
 8009f78:	4602      	mov	r2, r0
 8009f7a:	f240 11af 	movw	r1, #431	@ 0x1af
 8009f7e:	e6da      	b.n	8009d36 <_dtoa_r+0x2e>
 8009f80:	2300      	movs	r3, #0
 8009f82:	e7e3      	b.n	8009f4c <_dtoa_r+0x244>
 8009f84:	2300      	movs	r3, #0
 8009f86:	e7d5      	b.n	8009f34 <_dtoa_r+0x22c>
 8009f88:	2401      	movs	r4, #1
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	9307      	str	r3, [sp, #28]
 8009f8e:	9409      	str	r4, [sp, #36]	@ 0x24
 8009f90:	f04f 3bff 	mov.w	fp, #4294967295
 8009f94:	2200      	movs	r2, #0
 8009f96:	f8cd b00c 	str.w	fp, [sp, #12]
 8009f9a:	2312      	movs	r3, #18
 8009f9c:	920c      	str	r2, [sp, #48]	@ 0x30
 8009f9e:	e7db      	b.n	8009f58 <_dtoa_r+0x250>
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fa4:	e7f4      	b.n	8009f90 <_dtoa_r+0x288>
 8009fa6:	f04f 0b01 	mov.w	fp, #1
 8009faa:	f8cd b00c 	str.w	fp, [sp, #12]
 8009fae:	465b      	mov	r3, fp
 8009fb0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8009fb4:	e7d0      	b.n	8009f58 <_dtoa_r+0x250>
 8009fb6:	3101      	adds	r1, #1
 8009fb8:	0052      	lsls	r2, r2, #1
 8009fba:	e7d1      	b.n	8009f60 <_dtoa_r+0x258>
 8009fbc:	f3af 8000 	nop.w
 8009fc0:	636f4361 	.word	0x636f4361
 8009fc4:	3fd287a7 	.word	0x3fd287a7
 8009fc8:	8b60c8b3 	.word	0x8b60c8b3
 8009fcc:	3fc68a28 	.word	0x3fc68a28
 8009fd0:	509f79fb 	.word	0x509f79fb
 8009fd4:	3fd34413 	.word	0x3fd34413
 8009fd8:	0800d3ae 	.word	0x0800d3ae
 8009fdc:	0800d3c5 	.word	0x0800d3c5
 8009fe0:	7ff00000 	.word	0x7ff00000
 8009fe4:	0800d379 	.word	0x0800d379
 8009fe8:	3ff80000 	.word	0x3ff80000
 8009fec:	0800d578 	.word	0x0800d578
 8009ff0:	0800d41d 	.word	0x0800d41d
 8009ff4:	0800d3aa 	.word	0x0800d3aa
 8009ff8:	0800d378 	.word	0x0800d378
 8009ffc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a000:	6018      	str	r0, [r3, #0]
 800a002:	9b03      	ldr	r3, [sp, #12]
 800a004:	2b0e      	cmp	r3, #14
 800a006:	f200 80a1 	bhi.w	800a14c <_dtoa_r+0x444>
 800a00a:	2c00      	cmp	r4, #0
 800a00c:	f000 809e 	beq.w	800a14c <_dtoa_r+0x444>
 800a010:	2f00      	cmp	r7, #0
 800a012:	dd33      	ble.n	800a07c <_dtoa_r+0x374>
 800a014:	4b9c      	ldr	r3, [pc, #624]	@ (800a288 <_dtoa_r+0x580>)
 800a016:	f007 020f 	and.w	r2, r7, #15
 800a01a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a01e:	ed93 7b00 	vldr	d7, [r3]
 800a022:	05f8      	lsls	r0, r7, #23
 800a024:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800a028:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a02c:	d516      	bpl.n	800a05c <_dtoa_r+0x354>
 800a02e:	4b97      	ldr	r3, [pc, #604]	@ (800a28c <_dtoa_r+0x584>)
 800a030:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a034:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a038:	f7f6 fc28 	bl	800088c <__aeabi_ddiv>
 800a03c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a040:	f004 040f 	and.w	r4, r4, #15
 800a044:	2603      	movs	r6, #3
 800a046:	4d91      	ldr	r5, [pc, #580]	@ (800a28c <_dtoa_r+0x584>)
 800a048:	b954      	cbnz	r4, 800a060 <_dtoa_r+0x358>
 800a04a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a04e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a052:	f7f6 fc1b 	bl	800088c <__aeabi_ddiv>
 800a056:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a05a:	e028      	b.n	800a0ae <_dtoa_r+0x3a6>
 800a05c:	2602      	movs	r6, #2
 800a05e:	e7f2      	b.n	800a046 <_dtoa_r+0x33e>
 800a060:	07e1      	lsls	r1, r4, #31
 800a062:	d508      	bpl.n	800a076 <_dtoa_r+0x36e>
 800a064:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a068:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a06c:	f7f6 fae4 	bl	8000638 <__aeabi_dmul>
 800a070:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a074:	3601      	adds	r6, #1
 800a076:	1064      	asrs	r4, r4, #1
 800a078:	3508      	adds	r5, #8
 800a07a:	e7e5      	b.n	800a048 <_dtoa_r+0x340>
 800a07c:	f000 80af 	beq.w	800a1de <_dtoa_r+0x4d6>
 800a080:	427c      	negs	r4, r7
 800a082:	4b81      	ldr	r3, [pc, #516]	@ (800a288 <_dtoa_r+0x580>)
 800a084:	4d81      	ldr	r5, [pc, #516]	@ (800a28c <_dtoa_r+0x584>)
 800a086:	f004 020f 	and.w	r2, r4, #15
 800a08a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a092:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a096:	f7f6 facf 	bl	8000638 <__aeabi_dmul>
 800a09a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a09e:	1124      	asrs	r4, r4, #4
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	2602      	movs	r6, #2
 800a0a4:	2c00      	cmp	r4, #0
 800a0a6:	f040 808f 	bne.w	800a1c8 <_dtoa_r+0x4c0>
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d1d3      	bne.n	800a056 <_dtoa_r+0x34e>
 800a0ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a0b0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	f000 8094 	beq.w	800a1e2 <_dtoa_r+0x4da>
 800a0ba:	4b75      	ldr	r3, [pc, #468]	@ (800a290 <_dtoa_r+0x588>)
 800a0bc:	2200      	movs	r2, #0
 800a0be:	4620      	mov	r0, r4
 800a0c0:	4629      	mov	r1, r5
 800a0c2:	f7f6 fd2b 	bl	8000b1c <__aeabi_dcmplt>
 800a0c6:	2800      	cmp	r0, #0
 800a0c8:	f000 808b 	beq.w	800a1e2 <_dtoa_r+0x4da>
 800a0cc:	9b03      	ldr	r3, [sp, #12]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	f000 8087 	beq.w	800a1e2 <_dtoa_r+0x4da>
 800a0d4:	f1bb 0f00 	cmp.w	fp, #0
 800a0d8:	dd34      	ble.n	800a144 <_dtoa_r+0x43c>
 800a0da:	4620      	mov	r0, r4
 800a0dc:	4b6d      	ldr	r3, [pc, #436]	@ (800a294 <_dtoa_r+0x58c>)
 800a0de:	2200      	movs	r2, #0
 800a0e0:	4629      	mov	r1, r5
 800a0e2:	f7f6 faa9 	bl	8000638 <__aeabi_dmul>
 800a0e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a0ea:	f107 38ff 	add.w	r8, r7, #4294967295
 800a0ee:	3601      	adds	r6, #1
 800a0f0:	465c      	mov	r4, fp
 800a0f2:	4630      	mov	r0, r6
 800a0f4:	f7f6 fa36 	bl	8000564 <__aeabi_i2d>
 800a0f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0fc:	f7f6 fa9c 	bl	8000638 <__aeabi_dmul>
 800a100:	4b65      	ldr	r3, [pc, #404]	@ (800a298 <_dtoa_r+0x590>)
 800a102:	2200      	movs	r2, #0
 800a104:	f7f6 f8e2 	bl	80002cc <__adddf3>
 800a108:	4605      	mov	r5, r0
 800a10a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a10e:	2c00      	cmp	r4, #0
 800a110:	d16a      	bne.n	800a1e8 <_dtoa_r+0x4e0>
 800a112:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a116:	4b61      	ldr	r3, [pc, #388]	@ (800a29c <_dtoa_r+0x594>)
 800a118:	2200      	movs	r2, #0
 800a11a:	f7f6 f8d5 	bl	80002c8 <__aeabi_dsub>
 800a11e:	4602      	mov	r2, r0
 800a120:	460b      	mov	r3, r1
 800a122:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a126:	462a      	mov	r2, r5
 800a128:	4633      	mov	r3, r6
 800a12a:	f7f6 fd15 	bl	8000b58 <__aeabi_dcmpgt>
 800a12e:	2800      	cmp	r0, #0
 800a130:	f040 8298 	bne.w	800a664 <_dtoa_r+0x95c>
 800a134:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a138:	462a      	mov	r2, r5
 800a13a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a13e:	f7f6 fced 	bl	8000b1c <__aeabi_dcmplt>
 800a142:	bb38      	cbnz	r0, 800a194 <_dtoa_r+0x48c>
 800a144:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800a148:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a14c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a14e:	2b00      	cmp	r3, #0
 800a150:	f2c0 8157 	blt.w	800a402 <_dtoa_r+0x6fa>
 800a154:	2f0e      	cmp	r7, #14
 800a156:	f300 8154 	bgt.w	800a402 <_dtoa_r+0x6fa>
 800a15a:	4b4b      	ldr	r3, [pc, #300]	@ (800a288 <_dtoa_r+0x580>)
 800a15c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a160:	ed93 7b00 	vldr	d7, [r3]
 800a164:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a166:	2b00      	cmp	r3, #0
 800a168:	ed8d 7b00 	vstr	d7, [sp]
 800a16c:	f280 80e5 	bge.w	800a33a <_dtoa_r+0x632>
 800a170:	9b03      	ldr	r3, [sp, #12]
 800a172:	2b00      	cmp	r3, #0
 800a174:	f300 80e1 	bgt.w	800a33a <_dtoa_r+0x632>
 800a178:	d10c      	bne.n	800a194 <_dtoa_r+0x48c>
 800a17a:	4b48      	ldr	r3, [pc, #288]	@ (800a29c <_dtoa_r+0x594>)
 800a17c:	2200      	movs	r2, #0
 800a17e:	ec51 0b17 	vmov	r0, r1, d7
 800a182:	f7f6 fa59 	bl	8000638 <__aeabi_dmul>
 800a186:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a18a:	f7f6 fcdb 	bl	8000b44 <__aeabi_dcmpge>
 800a18e:	2800      	cmp	r0, #0
 800a190:	f000 8266 	beq.w	800a660 <_dtoa_r+0x958>
 800a194:	2400      	movs	r4, #0
 800a196:	4625      	mov	r5, r4
 800a198:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a19a:	4656      	mov	r6, sl
 800a19c:	ea6f 0803 	mvn.w	r8, r3
 800a1a0:	2700      	movs	r7, #0
 800a1a2:	4621      	mov	r1, r4
 800a1a4:	4648      	mov	r0, r9
 800a1a6:	f000 fcbf 	bl	800ab28 <_Bfree>
 800a1aa:	2d00      	cmp	r5, #0
 800a1ac:	f000 80bd 	beq.w	800a32a <_dtoa_r+0x622>
 800a1b0:	b12f      	cbz	r7, 800a1be <_dtoa_r+0x4b6>
 800a1b2:	42af      	cmp	r7, r5
 800a1b4:	d003      	beq.n	800a1be <_dtoa_r+0x4b6>
 800a1b6:	4639      	mov	r1, r7
 800a1b8:	4648      	mov	r0, r9
 800a1ba:	f000 fcb5 	bl	800ab28 <_Bfree>
 800a1be:	4629      	mov	r1, r5
 800a1c0:	4648      	mov	r0, r9
 800a1c2:	f000 fcb1 	bl	800ab28 <_Bfree>
 800a1c6:	e0b0      	b.n	800a32a <_dtoa_r+0x622>
 800a1c8:	07e2      	lsls	r2, r4, #31
 800a1ca:	d505      	bpl.n	800a1d8 <_dtoa_r+0x4d0>
 800a1cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a1d0:	f7f6 fa32 	bl	8000638 <__aeabi_dmul>
 800a1d4:	3601      	adds	r6, #1
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	1064      	asrs	r4, r4, #1
 800a1da:	3508      	adds	r5, #8
 800a1dc:	e762      	b.n	800a0a4 <_dtoa_r+0x39c>
 800a1de:	2602      	movs	r6, #2
 800a1e0:	e765      	b.n	800a0ae <_dtoa_r+0x3a6>
 800a1e2:	9c03      	ldr	r4, [sp, #12]
 800a1e4:	46b8      	mov	r8, r7
 800a1e6:	e784      	b.n	800a0f2 <_dtoa_r+0x3ea>
 800a1e8:	4b27      	ldr	r3, [pc, #156]	@ (800a288 <_dtoa_r+0x580>)
 800a1ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a1ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a1f0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a1f4:	4454      	add	r4, sl
 800a1f6:	2900      	cmp	r1, #0
 800a1f8:	d054      	beq.n	800a2a4 <_dtoa_r+0x59c>
 800a1fa:	4929      	ldr	r1, [pc, #164]	@ (800a2a0 <_dtoa_r+0x598>)
 800a1fc:	2000      	movs	r0, #0
 800a1fe:	f7f6 fb45 	bl	800088c <__aeabi_ddiv>
 800a202:	4633      	mov	r3, r6
 800a204:	462a      	mov	r2, r5
 800a206:	f7f6 f85f 	bl	80002c8 <__aeabi_dsub>
 800a20a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a20e:	4656      	mov	r6, sl
 800a210:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a214:	f7f6 fcc0 	bl	8000b98 <__aeabi_d2iz>
 800a218:	4605      	mov	r5, r0
 800a21a:	f7f6 f9a3 	bl	8000564 <__aeabi_i2d>
 800a21e:	4602      	mov	r2, r0
 800a220:	460b      	mov	r3, r1
 800a222:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a226:	f7f6 f84f 	bl	80002c8 <__aeabi_dsub>
 800a22a:	3530      	adds	r5, #48	@ 0x30
 800a22c:	4602      	mov	r2, r0
 800a22e:	460b      	mov	r3, r1
 800a230:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a234:	f806 5b01 	strb.w	r5, [r6], #1
 800a238:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a23c:	f7f6 fc6e 	bl	8000b1c <__aeabi_dcmplt>
 800a240:	2800      	cmp	r0, #0
 800a242:	d172      	bne.n	800a32a <_dtoa_r+0x622>
 800a244:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a248:	4911      	ldr	r1, [pc, #68]	@ (800a290 <_dtoa_r+0x588>)
 800a24a:	2000      	movs	r0, #0
 800a24c:	f7f6 f83c 	bl	80002c8 <__aeabi_dsub>
 800a250:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a254:	f7f6 fc62 	bl	8000b1c <__aeabi_dcmplt>
 800a258:	2800      	cmp	r0, #0
 800a25a:	f040 80b4 	bne.w	800a3c6 <_dtoa_r+0x6be>
 800a25e:	42a6      	cmp	r6, r4
 800a260:	f43f af70 	beq.w	800a144 <_dtoa_r+0x43c>
 800a264:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a268:	4b0a      	ldr	r3, [pc, #40]	@ (800a294 <_dtoa_r+0x58c>)
 800a26a:	2200      	movs	r2, #0
 800a26c:	f7f6 f9e4 	bl	8000638 <__aeabi_dmul>
 800a270:	4b08      	ldr	r3, [pc, #32]	@ (800a294 <_dtoa_r+0x58c>)
 800a272:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a276:	2200      	movs	r2, #0
 800a278:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a27c:	f7f6 f9dc 	bl	8000638 <__aeabi_dmul>
 800a280:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a284:	e7c4      	b.n	800a210 <_dtoa_r+0x508>
 800a286:	bf00      	nop
 800a288:	0800d578 	.word	0x0800d578
 800a28c:	0800d550 	.word	0x0800d550
 800a290:	3ff00000 	.word	0x3ff00000
 800a294:	40240000 	.word	0x40240000
 800a298:	401c0000 	.word	0x401c0000
 800a29c:	40140000 	.word	0x40140000
 800a2a0:	3fe00000 	.word	0x3fe00000
 800a2a4:	4631      	mov	r1, r6
 800a2a6:	4628      	mov	r0, r5
 800a2a8:	f7f6 f9c6 	bl	8000638 <__aeabi_dmul>
 800a2ac:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a2b0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a2b2:	4656      	mov	r6, sl
 800a2b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a2b8:	f7f6 fc6e 	bl	8000b98 <__aeabi_d2iz>
 800a2bc:	4605      	mov	r5, r0
 800a2be:	f7f6 f951 	bl	8000564 <__aeabi_i2d>
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	460b      	mov	r3, r1
 800a2c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a2ca:	f7f5 fffd 	bl	80002c8 <__aeabi_dsub>
 800a2ce:	3530      	adds	r5, #48	@ 0x30
 800a2d0:	f806 5b01 	strb.w	r5, [r6], #1
 800a2d4:	4602      	mov	r2, r0
 800a2d6:	460b      	mov	r3, r1
 800a2d8:	42a6      	cmp	r6, r4
 800a2da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a2de:	f04f 0200 	mov.w	r2, #0
 800a2e2:	d124      	bne.n	800a32e <_dtoa_r+0x626>
 800a2e4:	4baf      	ldr	r3, [pc, #700]	@ (800a5a4 <_dtoa_r+0x89c>)
 800a2e6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a2ea:	f7f5 ffef 	bl	80002cc <__adddf3>
 800a2ee:	4602      	mov	r2, r0
 800a2f0:	460b      	mov	r3, r1
 800a2f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a2f6:	f7f6 fc2f 	bl	8000b58 <__aeabi_dcmpgt>
 800a2fa:	2800      	cmp	r0, #0
 800a2fc:	d163      	bne.n	800a3c6 <_dtoa_r+0x6be>
 800a2fe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a302:	49a8      	ldr	r1, [pc, #672]	@ (800a5a4 <_dtoa_r+0x89c>)
 800a304:	2000      	movs	r0, #0
 800a306:	f7f5 ffdf 	bl	80002c8 <__aeabi_dsub>
 800a30a:	4602      	mov	r2, r0
 800a30c:	460b      	mov	r3, r1
 800a30e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a312:	f7f6 fc03 	bl	8000b1c <__aeabi_dcmplt>
 800a316:	2800      	cmp	r0, #0
 800a318:	f43f af14 	beq.w	800a144 <_dtoa_r+0x43c>
 800a31c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a31e:	1e73      	subs	r3, r6, #1
 800a320:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a322:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a326:	2b30      	cmp	r3, #48	@ 0x30
 800a328:	d0f8      	beq.n	800a31c <_dtoa_r+0x614>
 800a32a:	4647      	mov	r7, r8
 800a32c:	e03b      	b.n	800a3a6 <_dtoa_r+0x69e>
 800a32e:	4b9e      	ldr	r3, [pc, #632]	@ (800a5a8 <_dtoa_r+0x8a0>)
 800a330:	f7f6 f982 	bl	8000638 <__aeabi_dmul>
 800a334:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a338:	e7bc      	b.n	800a2b4 <_dtoa_r+0x5ac>
 800a33a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a33e:	4656      	mov	r6, sl
 800a340:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a344:	4620      	mov	r0, r4
 800a346:	4629      	mov	r1, r5
 800a348:	f7f6 faa0 	bl	800088c <__aeabi_ddiv>
 800a34c:	f7f6 fc24 	bl	8000b98 <__aeabi_d2iz>
 800a350:	4680      	mov	r8, r0
 800a352:	f7f6 f907 	bl	8000564 <__aeabi_i2d>
 800a356:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a35a:	f7f6 f96d 	bl	8000638 <__aeabi_dmul>
 800a35e:	4602      	mov	r2, r0
 800a360:	460b      	mov	r3, r1
 800a362:	4620      	mov	r0, r4
 800a364:	4629      	mov	r1, r5
 800a366:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a36a:	f7f5 ffad 	bl	80002c8 <__aeabi_dsub>
 800a36e:	f806 4b01 	strb.w	r4, [r6], #1
 800a372:	9d03      	ldr	r5, [sp, #12]
 800a374:	eba6 040a 	sub.w	r4, r6, sl
 800a378:	42a5      	cmp	r5, r4
 800a37a:	4602      	mov	r2, r0
 800a37c:	460b      	mov	r3, r1
 800a37e:	d133      	bne.n	800a3e8 <_dtoa_r+0x6e0>
 800a380:	f7f5 ffa4 	bl	80002cc <__adddf3>
 800a384:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a388:	4604      	mov	r4, r0
 800a38a:	460d      	mov	r5, r1
 800a38c:	f7f6 fbe4 	bl	8000b58 <__aeabi_dcmpgt>
 800a390:	b9c0      	cbnz	r0, 800a3c4 <_dtoa_r+0x6bc>
 800a392:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a396:	4620      	mov	r0, r4
 800a398:	4629      	mov	r1, r5
 800a39a:	f7f6 fbb5 	bl	8000b08 <__aeabi_dcmpeq>
 800a39e:	b110      	cbz	r0, 800a3a6 <_dtoa_r+0x69e>
 800a3a0:	f018 0f01 	tst.w	r8, #1
 800a3a4:	d10e      	bne.n	800a3c4 <_dtoa_r+0x6bc>
 800a3a6:	9902      	ldr	r1, [sp, #8]
 800a3a8:	4648      	mov	r0, r9
 800a3aa:	f000 fbbd 	bl	800ab28 <_Bfree>
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	7033      	strb	r3, [r6, #0]
 800a3b2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a3b4:	3701      	adds	r7, #1
 800a3b6:	601f      	str	r7, [r3, #0]
 800a3b8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	f000 824b 	beq.w	800a856 <_dtoa_r+0xb4e>
 800a3c0:	601e      	str	r6, [r3, #0]
 800a3c2:	e248      	b.n	800a856 <_dtoa_r+0xb4e>
 800a3c4:	46b8      	mov	r8, r7
 800a3c6:	4633      	mov	r3, r6
 800a3c8:	461e      	mov	r6, r3
 800a3ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a3ce:	2a39      	cmp	r2, #57	@ 0x39
 800a3d0:	d106      	bne.n	800a3e0 <_dtoa_r+0x6d8>
 800a3d2:	459a      	cmp	sl, r3
 800a3d4:	d1f8      	bne.n	800a3c8 <_dtoa_r+0x6c0>
 800a3d6:	2230      	movs	r2, #48	@ 0x30
 800a3d8:	f108 0801 	add.w	r8, r8, #1
 800a3dc:	f88a 2000 	strb.w	r2, [sl]
 800a3e0:	781a      	ldrb	r2, [r3, #0]
 800a3e2:	3201      	adds	r2, #1
 800a3e4:	701a      	strb	r2, [r3, #0]
 800a3e6:	e7a0      	b.n	800a32a <_dtoa_r+0x622>
 800a3e8:	4b6f      	ldr	r3, [pc, #444]	@ (800a5a8 <_dtoa_r+0x8a0>)
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	f7f6 f924 	bl	8000638 <__aeabi_dmul>
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	4604      	mov	r4, r0
 800a3f6:	460d      	mov	r5, r1
 800a3f8:	f7f6 fb86 	bl	8000b08 <__aeabi_dcmpeq>
 800a3fc:	2800      	cmp	r0, #0
 800a3fe:	d09f      	beq.n	800a340 <_dtoa_r+0x638>
 800a400:	e7d1      	b.n	800a3a6 <_dtoa_r+0x69e>
 800a402:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a404:	2a00      	cmp	r2, #0
 800a406:	f000 80ea 	beq.w	800a5de <_dtoa_r+0x8d6>
 800a40a:	9a07      	ldr	r2, [sp, #28]
 800a40c:	2a01      	cmp	r2, #1
 800a40e:	f300 80cd 	bgt.w	800a5ac <_dtoa_r+0x8a4>
 800a412:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a414:	2a00      	cmp	r2, #0
 800a416:	f000 80c1 	beq.w	800a59c <_dtoa_r+0x894>
 800a41a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a41e:	9c08      	ldr	r4, [sp, #32]
 800a420:	9e00      	ldr	r6, [sp, #0]
 800a422:	9a00      	ldr	r2, [sp, #0]
 800a424:	441a      	add	r2, r3
 800a426:	9200      	str	r2, [sp, #0]
 800a428:	9a06      	ldr	r2, [sp, #24]
 800a42a:	2101      	movs	r1, #1
 800a42c:	441a      	add	r2, r3
 800a42e:	4648      	mov	r0, r9
 800a430:	9206      	str	r2, [sp, #24]
 800a432:	f000 fc77 	bl	800ad24 <__i2b>
 800a436:	4605      	mov	r5, r0
 800a438:	b166      	cbz	r6, 800a454 <_dtoa_r+0x74c>
 800a43a:	9b06      	ldr	r3, [sp, #24]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	dd09      	ble.n	800a454 <_dtoa_r+0x74c>
 800a440:	42b3      	cmp	r3, r6
 800a442:	9a00      	ldr	r2, [sp, #0]
 800a444:	bfa8      	it	ge
 800a446:	4633      	movge	r3, r6
 800a448:	1ad2      	subs	r2, r2, r3
 800a44a:	9200      	str	r2, [sp, #0]
 800a44c:	9a06      	ldr	r2, [sp, #24]
 800a44e:	1af6      	subs	r6, r6, r3
 800a450:	1ad3      	subs	r3, r2, r3
 800a452:	9306      	str	r3, [sp, #24]
 800a454:	9b08      	ldr	r3, [sp, #32]
 800a456:	b30b      	cbz	r3, 800a49c <_dtoa_r+0x794>
 800a458:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	f000 80c6 	beq.w	800a5ec <_dtoa_r+0x8e4>
 800a460:	2c00      	cmp	r4, #0
 800a462:	f000 80c0 	beq.w	800a5e6 <_dtoa_r+0x8de>
 800a466:	4629      	mov	r1, r5
 800a468:	4622      	mov	r2, r4
 800a46a:	4648      	mov	r0, r9
 800a46c:	f000 fd12 	bl	800ae94 <__pow5mult>
 800a470:	9a02      	ldr	r2, [sp, #8]
 800a472:	4601      	mov	r1, r0
 800a474:	4605      	mov	r5, r0
 800a476:	4648      	mov	r0, r9
 800a478:	f000 fc6a 	bl	800ad50 <__multiply>
 800a47c:	9902      	ldr	r1, [sp, #8]
 800a47e:	4680      	mov	r8, r0
 800a480:	4648      	mov	r0, r9
 800a482:	f000 fb51 	bl	800ab28 <_Bfree>
 800a486:	9b08      	ldr	r3, [sp, #32]
 800a488:	1b1b      	subs	r3, r3, r4
 800a48a:	9308      	str	r3, [sp, #32]
 800a48c:	f000 80b1 	beq.w	800a5f2 <_dtoa_r+0x8ea>
 800a490:	9a08      	ldr	r2, [sp, #32]
 800a492:	4641      	mov	r1, r8
 800a494:	4648      	mov	r0, r9
 800a496:	f000 fcfd 	bl	800ae94 <__pow5mult>
 800a49a:	9002      	str	r0, [sp, #8]
 800a49c:	2101      	movs	r1, #1
 800a49e:	4648      	mov	r0, r9
 800a4a0:	f000 fc40 	bl	800ad24 <__i2b>
 800a4a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a4a6:	4604      	mov	r4, r0
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	f000 81d8 	beq.w	800a85e <_dtoa_r+0xb56>
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	4601      	mov	r1, r0
 800a4b2:	4648      	mov	r0, r9
 800a4b4:	f000 fcee 	bl	800ae94 <__pow5mult>
 800a4b8:	9b07      	ldr	r3, [sp, #28]
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	4604      	mov	r4, r0
 800a4be:	f300 809f 	bgt.w	800a600 <_dtoa_r+0x8f8>
 800a4c2:	9b04      	ldr	r3, [sp, #16]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	f040 8097 	bne.w	800a5f8 <_dtoa_r+0x8f0>
 800a4ca:	9b05      	ldr	r3, [sp, #20]
 800a4cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	f040 8093 	bne.w	800a5fc <_dtoa_r+0x8f4>
 800a4d6:	9b05      	ldr	r3, [sp, #20]
 800a4d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a4dc:	0d1b      	lsrs	r3, r3, #20
 800a4de:	051b      	lsls	r3, r3, #20
 800a4e0:	b133      	cbz	r3, 800a4f0 <_dtoa_r+0x7e8>
 800a4e2:	9b00      	ldr	r3, [sp, #0]
 800a4e4:	3301      	adds	r3, #1
 800a4e6:	9300      	str	r3, [sp, #0]
 800a4e8:	9b06      	ldr	r3, [sp, #24]
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	9306      	str	r3, [sp, #24]
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	9308      	str	r3, [sp, #32]
 800a4f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	f000 81b8 	beq.w	800a86a <_dtoa_r+0xb62>
 800a4fa:	6923      	ldr	r3, [r4, #16]
 800a4fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a500:	6918      	ldr	r0, [r3, #16]
 800a502:	f000 fbc3 	bl	800ac8c <__hi0bits>
 800a506:	f1c0 0020 	rsb	r0, r0, #32
 800a50a:	9b06      	ldr	r3, [sp, #24]
 800a50c:	4418      	add	r0, r3
 800a50e:	f010 001f 	ands.w	r0, r0, #31
 800a512:	f000 8082 	beq.w	800a61a <_dtoa_r+0x912>
 800a516:	f1c0 0320 	rsb	r3, r0, #32
 800a51a:	2b04      	cmp	r3, #4
 800a51c:	dd73      	ble.n	800a606 <_dtoa_r+0x8fe>
 800a51e:	9b00      	ldr	r3, [sp, #0]
 800a520:	f1c0 001c 	rsb	r0, r0, #28
 800a524:	4403      	add	r3, r0
 800a526:	9300      	str	r3, [sp, #0]
 800a528:	9b06      	ldr	r3, [sp, #24]
 800a52a:	4403      	add	r3, r0
 800a52c:	4406      	add	r6, r0
 800a52e:	9306      	str	r3, [sp, #24]
 800a530:	9b00      	ldr	r3, [sp, #0]
 800a532:	2b00      	cmp	r3, #0
 800a534:	dd05      	ble.n	800a542 <_dtoa_r+0x83a>
 800a536:	9902      	ldr	r1, [sp, #8]
 800a538:	461a      	mov	r2, r3
 800a53a:	4648      	mov	r0, r9
 800a53c:	f000 fd04 	bl	800af48 <__lshift>
 800a540:	9002      	str	r0, [sp, #8]
 800a542:	9b06      	ldr	r3, [sp, #24]
 800a544:	2b00      	cmp	r3, #0
 800a546:	dd05      	ble.n	800a554 <_dtoa_r+0x84c>
 800a548:	4621      	mov	r1, r4
 800a54a:	461a      	mov	r2, r3
 800a54c:	4648      	mov	r0, r9
 800a54e:	f000 fcfb 	bl	800af48 <__lshift>
 800a552:	4604      	mov	r4, r0
 800a554:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a556:	2b00      	cmp	r3, #0
 800a558:	d061      	beq.n	800a61e <_dtoa_r+0x916>
 800a55a:	9802      	ldr	r0, [sp, #8]
 800a55c:	4621      	mov	r1, r4
 800a55e:	f000 fd5f 	bl	800b020 <__mcmp>
 800a562:	2800      	cmp	r0, #0
 800a564:	da5b      	bge.n	800a61e <_dtoa_r+0x916>
 800a566:	2300      	movs	r3, #0
 800a568:	9902      	ldr	r1, [sp, #8]
 800a56a:	220a      	movs	r2, #10
 800a56c:	4648      	mov	r0, r9
 800a56e:	f000 fafd 	bl	800ab6c <__multadd>
 800a572:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a574:	9002      	str	r0, [sp, #8]
 800a576:	f107 38ff 	add.w	r8, r7, #4294967295
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	f000 8177 	beq.w	800a86e <_dtoa_r+0xb66>
 800a580:	4629      	mov	r1, r5
 800a582:	2300      	movs	r3, #0
 800a584:	220a      	movs	r2, #10
 800a586:	4648      	mov	r0, r9
 800a588:	f000 faf0 	bl	800ab6c <__multadd>
 800a58c:	f1bb 0f00 	cmp.w	fp, #0
 800a590:	4605      	mov	r5, r0
 800a592:	dc6f      	bgt.n	800a674 <_dtoa_r+0x96c>
 800a594:	9b07      	ldr	r3, [sp, #28]
 800a596:	2b02      	cmp	r3, #2
 800a598:	dc49      	bgt.n	800a62e <_dtoa_r+0x926>
 800a59a:	e06b      	b.n	800a674 <_dtoa_r+0x96c>
 800a59c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a59e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a5a2:	e73c      	b.n	800a41e <_dtoa_r+0x716>
 800a5a4:	3fe00000 	.word	0x3fe00000
 800a5a8:	40240000 	.word	0x40240000
 800a5ac:	9b03      	ldr	r3, [sp, #12]
 800a5ae:	1e5c      	subs	r4, r3, #1
 800a5b0:	9b08      	ldr	r3, [sp, #32]
 800a5b2:	42a3      	cmp	r3, r4
 800a5b4:	db09      	blt.n	800a5ca <_dtoa_r+0x8c2>
 800a5b6:	1b1c      	subs	r4, r3, r4
 800a5b8:	9b03      	ldr	r3, [sp, #12]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	f6bf af30 	bge.w	800a420 <_dtoa_r+0x718>
 800a5c0:	9b00      	ldr	r3, [sp, #0]
 800a5c2:	9a03      	ldr	r2, [sp, #12]
 800a5c4:	1a9e      	subs	r6, r3, r2
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	e72b      	b.n	800a422 <_dtoa_r+0x71a>
 800a5ca:	9b08      	ldr	r3, [sp, #32]
 800a5cc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a5ce:	9408      	str	r4, [sp, #32]
 800a5d0:	1ae3      	subs	r3, r4, r3
 800a5d2:	441a      	add	r2, r3
 800a5d4:	9e00      	ldr	r6, [sp, #0]
 800a5d6:	9b03      	ldr	r3, [sp, #12]
 800a5d8:	920d      	str	r2, [sp, #52]	@ 0x34
 800a5da:	2400      	movs	r4, #0
 800a5dc:	e721      	b.n	800a422 <_dtoa_r+0x71a>
 800a5de:	9c08      	ldr	r4, [sp, #32]
 800a5e0:	9e00      	ldr	r6, [sp, #0]
 800a5e2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800a5e4:	e728      	b.n	800a438 <_dtoa_r+0x730>
 800a5e6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a5ea:	e751      	b.n	800a490 <_dtoa_r+0x788>
 800a5ec:	9a08      	ldr	r2, [sp, #32]
 800a5ee:	9902      	ldr	r1, [sp, #8]
 800a5f0:	e750      	b.n	800a494 <_dtoa_r+0x78c>
 800a5f2:	f8cd 8008 	str.w	r8, [sp, #8]
 800a5f6:	e751      	b.n	800a49c <_dtoa_r+0x794>
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	e779      	b.n	800a4f0 <_dtoa_r+0x7e8>
 800a5fc:	9b04      	ldr	r3, [sp, #16]
 800a5fe:	e777      	b.n	800a4f0 <_dtoa_r+0x7e8>
 800a600:	2300      	movs	r3, #0
 800a602:	9308      	str	r3, [sp, #32]
 800a604:	e779      	b.n	800a4fa <_dtoa_r+0x7f2>
 800a606:	d093      	beq.n	800a530 <_dtoa_r+0x828>
 800a608:	9a00      	ldr	r2, [sp, #0]
 800a60a:	331c      	adds	r3, #28
 800a60c:	441a      	add	r2, r3
 800a60e:	9200      	str	r2, [sp, #0]
 800a610:	9a06      	ldr	r2, [sp, #24]
 800a612:	441a      	add	r2, r3
 800a614:	441e      	add	r6, r3
 800a616:	9206      	str	r2, [sp, #24]
 800a618:	e78a      	b.n	800a530 <_dtoa_r+0x828>
 800a61a:	4603      	mov	r3, r0
 800a61c:	e7f4      	b.n	800a608 <_dtoa_r+0x900>
 800a61e:	9b03      	ldr	r3, [sp, #12]
 800a620:	2b00      	cmp	r3, #0
 800a622:	46b8      	mov	r8, r7
 800a624:	dc20      	bgt.n	800a668 <_dtoa_r+0x960>
 800a626:	469b      	mov	fp, r3
 800a628:	9b07      	ldr	r3, [sp, #28]
 800a62a:	2b02      	cmp	r3, #2
 800a62c:	dd1e      	ble.n	800a66c <_dtoa_r+0x964>
 800a62e:	f1bb 0f00 	cmp.w	fp, #0
 800a632:	f47f adb1 	bne.w	800a198 <_dtoa_r+0x490>
 800a636:	4621      	mov	r1, r4
 800a638:	465b      	mov	r3, fp
 800a63a:	2205      	movs	r2, #5
 800a63c:	4648      	mov	r0, r9
 800a63e:	f000 fa95 	bl	800ab6c <__multadd>
 800a642:	4601      	mov	r1, r0
 800a644:	4604      	mov	r4, r0
 800a646:	9802      	ldr	r0, [sp, #8]
 800a648:	f000 fcea 	bl	800b020 <__mcmp>
 800a64c:	2800      	cmp	r0, #0
 800a64e:	f77f ada3 	ble.w	800a198 <_dtoa_r+0x490>
 800a652:	4656      	mov	r6, sl
 800a654:	2331      	movs	r3, #49	@ 0x31
 800a656:	f806 3b01 	strb.w	r3, [r6], #1
 800a65a:	f108 0801 	add.w	r8, r8, #1
 800a65e:	e59f      	b.n	800a1a0 <_dtoa_r+0x498>
 800a660:	9c03      	ldr	r4, [sp, #12]
 800a662:	46b8      	mov	r8, r7
 800a664:	4625      	mov	r5, r4
 800a666:	e7f4      	b.n	800a652 <_dtoa_r+0x94a>
 800a668:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800a66c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a66e:	2b00      	cmp	r3, #0
 800a670:	f000 8101 	beq.w	800a876 <_dtoa_r+0xb6e>
 800a674:	2e00      	cmp	r6, #0
 800a676:	dd05      	ble.n	800a684 <_dtoa_r+0x97c>
 800a678:	4629      	mov	r1, r5
 800a67a:	4632      	mov	r2, r6
 800a67c:	4648      	mov	r0, r9
 800a67e:	f000 fc63 	bl	800af48 <__lshift>
 800a682:	4605      	mov	r5, r0
 800a684:	9b08      	ldr	r3, [sp, #32]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d05c      	beq.n	800a744 <_dtoa_r+0xa3c>
 800a68a:	6869      	ldr	r1, [r5, #4]
 800a68c:	4648      	mov	r0, r9
 800a68e:	f000 fa0b 	bl	800aaa8 <_Balloc>
 800a692:	4606      	mov	r6, r0
 800a694:	b928      	cbnz	r0, 800a6a2 <_dtoa_r+0x99a>
 800a696:	4b82      	ldr	r3, [pc, #520]	@ (800a8a0 <_dtoa_r+0xb98>)
 800a698:	4602      	mov	r2, r0
 800a69a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a69e:	f7ff bb4a 	b.w	8009d36 <_dtoa_r+0x2e>
 800a6a2:	692a      	ldr	r2, [r5, #16]
 800a6a4:	3202      	adds	r2, #2
 800a6a6:	0092      	lsls	r2, r2, #2
 800a6a8:	f105 010c 	add.w	r1, r5, #12
 800a6ac:	300c      	adds	r0, #12
 800a6ae:	f7ff fa8e 	bl	8009bce <memcpy>
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	4631      	mov	r1, r6
 800a6b6:	4648      	mov	r0, r9
 800a6b8:	f000 fc46 	bl	800af48 <__lshift>
 800a6bc:	f10a 0301 	add.w	r3, sl, #1
 800a6c0:	9300      	str	r3, [sp, #0]
 800a6c2:	eb0a 030b 	add.w	r3, sl, fp
 800a6c6:	9308      	str	r3, [sp, #32]
 800a6c8:	9b04      	ldr	r3, [sp, #16]
 800a6ca:	f003 0301 	and.w	r3, r3, #1
 800a6ce:	462f      	mov	r7, r5
 800a6d0:	9306      	str	r3, [sp, #24]
 800a6d2:	4605      	mov	r5, r0
 800a6d4:	9b00      	ldr	r3, [sp, #0]
 800a6d6:	9802      	ldr	r0, [sp, #8]
 800a6d8:	4621      	mov	r1, r4
 800a6da:	f103 3bff 	add.w	fp, r3, #4294967295
 800a6de:	f7ff fa8b 	bl	8009bf8 <quorem>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	3330      	adds	r3, #48	@ 0x30
 800a6e6:	9003      	str	r0, [sp, #12]
 800a6e8:	4639      	mov	r1, r7
 800a6ea:	9802      	ldr	r0, [sp, #8]
 800a6ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6ee:	f000 fc97 	bl	800b020 <__mcmp>
 800a6f2:	462a      	mov	r2, r5
 800a6f4:	9004      	str	r0, [sp, #16]
 800a6f6:	4621      	mov	r1, r4
 800a6f8:	4648      	mov	r0, r9
 800a6fa:	f000 fcad 	bl	800b058 <__mdiff>
 800a6fe:	68c2      	ldr	r2, [r0, #12]
 800a700:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a702:	4606      	mov	r6, r0
 800a704:	bb02      	cbnz	r2, 800a748 <_dtoa_r+0xa40>
 800a706:	4601      	mov	r1, r0
 800a708:	9802      	ldr	r0, [sp, #8]
 800a70a:	f000 fc89 	bl	800b020 <__mcmp>
 800a70e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a710:	4602      	mov	r2, r0
 800a712:	4631      	mov	r1, r6
 800a714:	4648      	mov	r0, r9
 800a716:	920c      	str	r2, [sp, #48]	@ 0x30
 800a718:	9309      	str	r3, [sp, #36]	@ 0x24
 800a71a:	f000 fa05 	bl	800ab28 <_Bfree>
 800a71e:	9b07      	ldr	r3, [sp, #28]
 800a720:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a722:	9e00      	ldr	r6, [sp, #0]
 800a724:	ea42 0103 	orr.w	r1, r2, r3
 800a728:	9b06      	ldr	r3, [sp, #24]
 800a72a:	4319      	orrs	r1, r3
 800a72c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a72e:	d10d      	bne.n	800a74c <_dtoa_r+0xa44>
 800a730:	2b39      	cmp	r3, #57	@ 0x39
 800a732:	d027      	beq.n	800a784 <_dtoa_r+0xa7c>
 800a734:	9a04      	ldr	r2, [sp, #16]
 800a736:	2a00      	cmp	r2, #0
 800a738:	dd01      	ble.n	800a73e <_dtoa_r+0xa36>
 800a73a:	9b03      	ldr	r3, [sp, #12]
 800a73c:	3331      	adds	r3, #49	@ 0x31
 800a73e:	f88b 3000 	strb.w	r3, [fp]
 800a742:	e52e      	b.n	800a1a2 <_dtoa_r+0x49a>
 800a744:	4628      	mov	r0, r5
 800a746:	e7b9      	b.n	800a6bc <_dtoa_r+0x9b4>
 800a748:	2201      	movs	r2, #1
 800a74a:	e7e2      	b.n	800a712 <_dtoa_r+0xa0a>
 800a74c:	9904      	ldr	r1, [sp, #16]
 800a74e:	2900      	cmp	r1, #0
 800a750:	db04      	blt.n	800a75c <_dtoa_r+0xa54>
 800a752:	9807      	ldr	r0, [sp, #28]
 800a754:	4301      	orrs	r1, r0
 800a756:	9806      	ldr	r0, [sp, #24]
 800a758:	4301      	orrs	r1, r0
 800a75a:	d120      	bne.n	800a79e <_dtoa_r+0xa96>
 800a75c:	2a00      	cmp	r2, #0
 800a75e:	ddee      	ble.n	800a73e <_dtoa_r+0xa36>
 800a760:	9902      	ldr	r1, [sp, #8]
 800a762:	9300      	str	r3, [sp, #0]
 800a764:	2201      	movs	r2, #1
 800a766:	4648      	mov	r0, r9
 800a768:	f000 fbee 	bl	800af48 <__lshift>
 800a76c:	4621      	mov	r1, r4
 800a76e:	9002      	str	r0, [sp, #8]
 800a770:	f000 fc56 	bl	800b020 <__mcmp>
 800a774:	2800      	cmp	r0, #0
 800a776:	9b00      	ldr	r3, [sp, #0]
 800a778:	dc02      	bgt.n	800a780 <_dtoa_r+0xa78>
 800a77a:	d1e0      	bne.n	800a73e <_dtoa_r+0xa36>
 800a77c:	07da      	lsls	r2, r3, #31
 800a77e:	d5de      	bpl.n	800a73e <_dtoa_r+0xa36>
 800a780:	2b39      	cmp	r3, #57	@ 0x39
 800a782:	d1da      	bne.n	800a73a <_dtoa_r+0xa32>
 800a784:	2339      	movs	r3, #57	@ 0x39
 800a786:	f88b 3000 	strb.w	r3, [fp]
 800a78a:	4633      	mov	r3, r6
 800a78c:	461e      	mov	r6, r3
 800a78e:	3b01      	subs	r3, #1
 800a790:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a794:	2a39      	cmp	r2, #57	@ 0x39
 800a796:	d04e      	beq.n	800a836 <_dtoa_r+0xb2e>
 800a798:	3201      	adds	r2, #1
 800a79a:	701a      	strb	r2, [r3, #0]
 800a79c:	e501      	b.n	800a1a2 <_dtoa_r+0x49a>
 800a79e:	2a00      	cmp	r2, #0
 800a7a0:	dd03      	ble.n	800a7aa <_dtoa_r+0xaa2>
 800a7a2:	2b39      	cmp	r3, #57	@ 0x39
 800a7a4:	d0ee      	beq.n	800a784 <_dtoa_r+0xa7c>
 800a7a6:	3301      	adds	r3, #1
 800a7a8:	e7c9      	b.n	800a73e <_dtoa_r+0xa36>
 800a7aa:	9a00      	ldr	r2, [sp, #0]
 800a7ac:	9908      	ldr	r1, [sp, #32]
 800a7ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a7b2:	428a      	cmp	r2, r1
 800a7b4:	d028      	beq.n	800a808 <_dtoa_r+0xb00>
 800a7b6:	9902      	ldr	r1, [sp, #8]
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	220a      	movs	r2, #10
 800a7bc:	4648      	mov	r0, r9
 800a7be:	f000 f9d5 	bl	800ab6c <__multadd>
 800a7c2:	42af      	cmp	r7, r5
 800a7c4:	9002      	str	r0, [sp, #8]
 800a7c6:	f04f 0300 	mov.w	r3, #0
 800a7ca:	f04f 020a 	mov.w	r2, #10
 800a7ce:	4639      	mov	r1, r7
 800a7d0:	4648      	mov	r0, r9
 800a7d2:	d107      	bne.n	800a7e4 <_dtoa_r+0xadc>
 800a7d4:	f000 f9ca 	bl	800ab6c <__multadd>
 800a7d8:	4607      	mov	r7, r0
 800a7da:	4605      	mov	r5, r0
 800a7dc:	9b00      	ldr	r3, [sp, #0]
 800a7de:	3301      	adds	r3, #1
 800a7e0:	9300      	str	r3, [sp, #0]
 800a7e2:	e777      	b.n	800a6d4 <_dtoa_r+0x9cc>
 800a7e4:	f000 f9c2 	bl	800ab6c <__multadd>
 800a7e8:	4629      	mov	r1, r5
 800a7ea:	4607      	mov	r7, r0
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	220a      	movs	r2, #10
 800a7f0:	4648      	mov	r0, r9
 800a7f2:	f000 f9bb 	bl	800ab6c <__multadd>
 800a7f6:	4605      	mov	r5, r0
 800a7f8:	e7f0      	b.n	800a7dc <_dtoa_r+0xad4>
 800a7fa:	f1bb 0f00 	cmp.w	fp, #0
 800a7fe:	bfcc      	ite	gt
 800a800:	465e      	movgt	r6, fp
 800a802:	2601      	movle	r6, #1
 800a804:	4456      	add	r6, sl
 800a806:	2700      	movs	r7, #0
 800a808:	9902      	ldr	r1, [sp, #8]
 800a80a:	9300      	str	r3, [sp, #0]
 800a80c:	2201      	movs	r2, #1
 800a80e:	4648      	mov	r0, r9
 800a810:	f000 fb9a 	bl	800af48 <__lshift>
 800a814:	4621      	mov	r1, r4
 800a816:	9002      	str	r0, [sp, #8]
 800a818:	f000 fc02 	bl	800b020 <__mcmp>
 800a81c:	2800      	cmp	r0, #0
 800a81e:	dcb4      	bgt.n	800a78a <_dtoa_r+0xa82>
 800a820:	d102      	bne.n	800a828 <_dtoa_r+0xb20>
 800a822:	9b00      	ldr	r3, [sp, #0]
 800a824:	07db      	lsls	r3, r3, #31
 800a826:	d4b0      	bmi.n	800a78a <_dtoa_r+0xa82>
 800a828:	4633      	mov	r3, r6
 800a82a:	461e      	mov	r6, r3
 800a82c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a830:	2a30      	cmp	r2, #48	@ 0x30
 800a832:	d0fa      	beq.n	800a82a <_dtoa_r+0xb22>
 800a834:	e4b5      	b.n	800a1a2 <_dtoa_r+0x49a>
 800a836:	459a      	cmp	sl, r3
 800a838:	d1a8      	bne.n	800a78c <_dtoa_r+0xa84>
 800a83a:	2331      	movs	r3, #49	@ 0x31
 800a83c:	f108 0801 	add.w	r8, r8, #1
 800a840:	f88a 3000 	strb.w	r3, [sl]
 800a844:	e4ad      	b.n	800a1a2 <_dtoa_r+0x49a>
 800a846:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a848:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800a8a4 <_dtoa_r+0xb9c>
 800a84c:	b11b      	cbz	r3, 800a856 <_dtoa_r+0xb4e>
 800a84e:	f10a 0308 	add.w	r3, sl, #8
 800a852:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a854:	6013      	str	r3, [r2, #0]
 800a856:	4650      	mov	r0, sl
 800a858:	b017      	add	sp, #92	@ 0x5c
 800a85a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a85e:	9b07      	ldr	r3, [sp, #28]
 800a860:	2b01      	cmp	r3, #1
 800a862:	f77f ae2e 	ble.w	800a4c2 <_dtoa_r+0x7ba>
 800a866:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a868:	9308      	str	r3, [sp, #32]
 800a86a:	2001      	movs	r0, #1
 800a86c:	e64d      	b.n	800a50a <_dtoa_r+0x802>
 800a86e:	f1bb 0f00 	cmp.w	fp, #0
 800a872:	f77f aed9 	ble.w	800a628 <_dtoa_r+0x920>
 800a876:	4656      	mov	r6, sl
 800a878:	9802      	ldr	r0, [sp, #8]
 800a87a:	4621      	mov	r1, r4
 800a87c:	f7ff f9bc 	bl	8009bf8 <quorem>
 800a880:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800a884:	f806 3b01 	strb.w	r3, [r6], #1
 800a888:	eba6 020a 	sub.w	r2, r6, sl
 800a88c:	4593      	cmp	fp, r2
 800a88e:	ddb4      	ble.n	800a7fa <_dtoa_r+0xaf2>
 800a890:	9902      	ldr	r1, [sp, #8]
 800a892:	2300      	movs	r3, #0
 800a894:	220a      	movs	r2, #10
 800a896:	4648      	mov	r0, r9
 800a898:	f000 f968 	bl	800ab6c <__multadd>
 800a89c:	9002      	str	r0, [sp, #8]
 800a89e:	e7eb      	b.n	800a878 <_dtoa_r+0xb70>
 800a8a0:	0800d41d 	.word	0x0800d41d
 800a8a4:	0800d3a1 	.word	0x0800d3a1

0800a8a8 <_free_r>:
 800a8a8:	b538      	push	{r3, r4, r5, lr}
 800a8aa:	4605      	mov	r5, r0
 800a8ac:	2900      	cmp	r1, #0
 800a8ae:	d041      	beq.n	800a934 <_free_r+0x8c>
 800a8b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8b4:	1f0c      	subs	r4, r1, #4
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	bfb8      	it	lt
 800a8ba:	18e4      	addlt	r4, r4, r3
 800a8bc:	f000 f8e8 	bl	800aa90 <__malloc_lock>
 800a8c0:	4a1d      	ldr	r2, [pc, #116]	@ (800a938 <_free_r+0x90>)
 800a8c2:	6813      	ldr	r3, [r2, #0]
 800a8c4:	b933      	cbnz	r3, 800a8d4 <_free_r+0x2c>
 800a8c6:	6063      	str	r3, [r4, #4]
 800a8c8:	6014      	str	r4, [r2, #0]
 800a8ca:	4628      	mov	r0, r5
 800a8cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8d0:	f000 b8e4 	b.w	800aa9c <__malloc_unlock>
 800a8d4:	42a3      	cmp	r3, r4
 800a8d6:	d908      	bls.n	800a8ea <_free_r+0x42>
 800a8d8:	6820      	ldr	r0, [r4, #0]
 800a8da:	1821      	adds	r1, r4, r0
 800a8dc:	428b      	cmp	r3, r1
 800a8de:	bf01      	itttt	eq
 800a8e0:	6819      	ldreq	r1, [r3, #0]
 800a8e2:	685b      	ldreq	r3, [r3, #4]
 800a8e4:	1809      	addeq	r1, r1, r0
 800a8e6:	6021      	streq	r1, [r4, #0]
 800a8e8:	e7ed      	b.n	800a8c6 <_free_r+0x1e>
 800a8ea:	461a      	mov	r2, r3
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	b10b      	cbz	r3, 800a8f4 <_free_r+0x4c>
 800a8f0:	42a3      	cmp	r3, r4
 800a8f2:	d9fa      	bls.n	800a8ea <_free_r+0x42>
 800a8f4:	6811      	ldr	r1, [r2, #0]
 800a8f6:	1850      	adds	r0, r2, r1
 800a8f8:	42a0      	cmp	r0, r4
 800a8fa:	d10b      	bne.n	800a914 <_free_r+0x6c>
 800a8fc:	6820      	ldr	r0, [r4, #0]
 800a8fe:	4401      	add	r1, r0
 800a900:	1850      	adds	r0, r2, r1
 800a902:	4283      	cmp	r3, r0
 800a904:	6011      	str	r1, [r2, #0]
 800a906:	d1e0      	bne.n	800a8ca <_free_r+0x22>
 800a908:	6818      	ldr	r0, [r3, #0]
 800a90a:	685b      	ldr	r3, [r3, #4]
 800a90c:	6053      	str	r3, [r2, #4]
 800a90e:	4408      	add	r0, r1
 800a910:	6010      	str	r0, [r2, #0]
 800a912:	e7da      	b.n	800a8ca <_free_r+0x22>
 800a914:	d902      	bls.n	800a91c <_free_r+0x74>
 800a916:	230c      	movs	r3, #12
 800a918:	602b      	str	r3, [r5, #0]
 800a91a:	e7d6      	b.n	800a8ca <_free_r+0x22>
 800a91c:	6820      	ldr	r0, [r4, #0]
 800a91e:	1821      	adds	r1, r4, r0
 800a920:	428b      	cmp	r3, r1
 800a922:	bf04      	itt	eq
 800a924:	6819      	ldreq	r1, [r3, #0]
 800a926:	685b      	ldreq	r3, [r3, #4]
 800a928:	6063      	str	r3, [r4, #4]
 800a92a:	bf04      	itt	eq
 800a92c:	1809      	addeq	r1, r1, r0
 800a92e:	6021      	streq	r1, [r4, #0]
 800a930:	6054      	str	r4, [r2, #4]
 800a932:	e7ca      	b.n	800a8ca <_free_r+0x22>
 800a934:	bd38      	pop	{r3, r4, r5, pc}
 800a936:	bf00      	nop
 800a938:	20004580 	.word	0x20004580

0800a93c <malloc>:
 800a93c:	4b02      	ldr	r3, [pc, #8]	@ (800a948 <malloc+0xc>)
 800a93e:	4601      	mov	r1, r0
 800a940:	6818      	ldr	r0, [r3, #0]
 800a942:	f000 b825 	b.w	800a990 <_malloc_r>
 800a946:	bf00      	nop
 800a948:	20000028 	.word	0x20000028

0800a94c <sbrk_aligned>:
 800a94c:	b570      	push	{r4, r5, r6, lr}
 800a94e:	4e0f      	ldr	r6, [pc, #60]	@ (800a98c <sbrk_aligned+0x40>)
 800a950:	460c      	mov	r4, r1
 800a952:	6831      	ldr	r1, [r6, #0]
 800a954:	4605      	mov	r5, r0
 800a956:	b911      	cbnz	r1, 800a95e <sbrk_aligned+0x12>
 800a958:	f001 fe04 	bl	800c564 <_sbrk_r>
 800a95c:	6030      	str	r0, [r6, #0]
 800a95e:	4621      	mov	r1, r4
 800a960:	4628      	mov	r0, r5
 800a962:	f001 fdff 	bl	800c564 <_sbrk_r>
 800a966:	1c43      	adds	r3, r0, #1
 800a968:	d103      	bne.n	800a972 <sbrk_aligned+0x26>
 800a96a:	f04f 34ff 	mov.w	r4, #4294967295
 800a96e:	4620      	mov	r0, r4
 800a970:	bd70      	pop	{r4, r5, r6, pc}
 800a972:	1cc4      	adds	r4, r0, #3
 800a974:	f024 0403 	bic.w	r4, r4, #3
 800a978:	42a0      	cmp	r0, r4
 800a97a:	d0f8      	beq.n	800a96e <sbrk_aligned+0x22>
 800a97c:	1a21      	subs	r1, r4, r0
 800a97e:	4628      	mov	r0, r5
 800a980:	f001 fdf0 	bl	800c564 <_sbrk_r>
 800a984:	3001      	adds	r0, #1
 800a986:	d1f2      	bne.n	800a96e <sbrk_aligned+0x22>
 800a988:	e7ef      	b.n	800a96a <sbrk_aligned+0x1e>
 800a98a:	bf00      	nop
 800a98c:	2000457c 	.word	0x2000457c

0800a990 <_malloc_r>:
 800a990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a994:	1ccd      	adds	r5, r1, #3
 800a996:	f025 0503 	bic.w	r5, r5, #3
 800a99a:	3508      	adds	r5, #8
 800a99c:	2d0c      	cmp	r5, #12
 800a99e:	bf38      	it	cc
 800a9a0:	250c      	movcc	r5, #12
 800a9a2:	2d00      	cmp	r5, #0
 800a9a4:	4606      	mov	r6, r0
 800a9a6:	db01      	blt.n	800a9ac <_malloc_r+0x1c>
 800a9a8:	42a9      	cmp	r1, r5
 800a9aa:	d904      	bls.n	800a9b6 <_malloc_r+0x26>
 800a9ac:	230c      	movs	r3, #12
 800a9ae:	6033      	str	r3, [r6, #0]
 800a9b0:	2000      	movs	r0, #0
 800a9b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aa8c <_malloc_r+0xfc>
 800a9ba:	f000 f869 	bl	800aa90 <__malloc_lock>
 800a9be:	f8d8 3000 	ldr.w	r3, [r8]
 800a9c2:	461c      	mov	r4, r3
 800a9c4:	bb44      	cbnz	r4, 800aa18 <_malloc_r+0x88>
 800a9c6:	4629      	mov	r1, r5
 800a9c8:	4630      	mov	r0, r6
 800a9ca:	f7ff ffbf 	bl	800a94c <sbrk_aligned>
 800a9ce:	1c43      	adds	r3, r0, #1
 800a9d0:	4604      	mov	r4, r0
 800a9d2:	d158      	bne.n	800aa86 <_malloc_r+0xf6>
 800a9d4:	f8d8 4000 	ldr.w	r4, [r8]
 800a9d8:	4627      	mov	r7, r4
 800a9da:	2f00      	cmp	r7, #0
 800a9dc:	d143      	bne.n	800aa66 <_malloc_r+0xd6>
 800a9de:	2c00      	cmp	r4, #0
 800a9e0:	d04b      	beq.n	800aa7a <_malloc_r+0xea>
 800a9e2:	6823      	ldr	r3, [r4, #0]
 800a9e4:	4639      	mov	r1, r7
 800a9e6:	4630      	mov	r0, r6
 800a9e8:	eb04 0903 	add.w	r9, r4, r3
 800a9ec:	f001 fdba 	bl	800c564 <_sbrk_r>
 800a9f0:	4581      	cmp	r9, r0
 800a9f2:	d142      	bne.n	800aa7a <_malloc_r+0xea>
 800a9f4:	6821      	ldr	r1, [r4, #0]
 800a9f6:	1a6d      	subs	r5, r5, r1
 800a9f8:	4629      	mov	r1, r5
 800a9fa:	4630      	mov	r0, r6
 800a9fc:	f7ff ffa6 	bl	800a94c <sbrk_aligned>
 800aa00:	3001      	adds	r0, #1
 800aa02:	d03a      	beq.n	800aa7a <_malloc_r+0xea>
 800aa04:	6823      	ldr	r3, [r4, #0]
 800aa06:	442b      	add	r3, r5
 800aa08:	6023      	str	r3, [r4, #0]
 800aa0a:	f8d8 3000 	ldr.w	r3, [r8]
 800aa0e:	685a      	ldr	r2, [r3, #4]
 800aa10:	bb62      	cbnz	r2, 800aa6c <_malloc_r+0xdc>
 800aa12:	f8c8 7000 	str.w	r7, [r8]
 800aa16:	e00f      	b.n	800aa38 <_malloc_r+0xa8>
 800aa18:	6822      	ldr	r2, [r4, #0]
 800aa1a:	1b52      	subs	r2, r2, r5
 800aa1c:	d420      	bmi.n	800aa60 <_malloc_r+0xd0>
 800aa1e:	2a0b      	cmp	r2, #11
 800aa20:	d917      	bls.n	800aa52 <_malloc_r+0xc2>
 800aa22:	1961      	adds	r1, r4, r5
 800aa24:	42a3      	cmp	r3, r4
 800aa26:	6025      	str	r5, [r4, #0]
 800aa28:	bf18      	it	ne
 800aa2a:	6059      	strne	r1, [r3, #4]
 800aa2c:	6863      	ldr	r3, [r4, #4]
 800aa2e:	bf08      	it	eq
 800aa30:	f8c8 1000 	streq.w	r1, [r8]
 800aa34:	5162      	str	r2, [r4, r5]
 800aa36:	604b      	str	r3, [r1, #4]
 800aa38:	4630      	mov	r0, r6
 800aa3a:	f000 f82f 	bl	800aa9c <__malloc_unlock>
 800aa3e:	f104 000b 	add.w	r0, r4, #11
 800aa42:	1d23      	adds	r3, r4, #4
 800aa44:	f020 0007 	bic.w	r0, r0, #7
 800aa48:	1ac2      	subs	r2, r0, r3
 800aa4a:	bf1c      	itt	ne
 800aa4c:	1a1b      	subne	r3, r3, r0
 800aa4e:	50a3      	strne	r3, [r4, r2]
 800aa50:	e7af      	b.n	800a9b2 <_malloc_r+0x22>
 800aa52:	6862      	ldr	r2, [r4, #4]
 800aa54:	42a3      	cmp	r3, r4
 800aa56:	bf0c      	ite	eq
 800aa58:	f8c8 2000 	streq.w	r2, [r8]
 800aa5c:	605a      	strne	r2, [r3, #4]
 800aa5e:	e7eb      	b.n	800aa38 <_malloc_r+0xa8>
 800aa60:	4623      	mov	r3, r4
 800aa62:	6864      	ldr	r4, [r4, #4]
 800aa64:	e7ae      	b.n	800a9c4 <_malloc_r+0x34>
 800aa66:	463c      	mov	r4, r7
 800aa68:	687f      	ldr	r7, [r7, #4]
 800aa6a:	e7b6      	b.n	800a9da <_malloc_r+0x4a>
 800aa6c:	461a      	mov	r2, r3
 800aa6e:	685b      	ldr	r3, [r3, #4]
 800aa70:	42a3      	cmp	r3, r4
 800aa72:	d1fb      	bne.n	800aa6c <_malloc_r+0xdc>
 800aa74:	2300      	movs	r3, #0
 800aa76:	6053      	str	r3, [r2, #4]
 800aa78:	e7de      	b.n	800aa38 <_malloc_r+0xa8>
 800aa7a:	230c      	movs	r3, #12
 800aa7c:	6033      	str	r3, [r6, #0]
 800aa7e:	4630      	mov	r0, r6
 800aa80:	f000 f80c 	bl	800aa9c <__malloc_unlock>
 800aa84:	e794      	b.n	800a9b0 <_malloc_r+0x20>
 800aa86:	6005      	str	r5, [r0, #0]
 800aa88:	e7d6      	b.n	800aa38 <_malloc_r+0xa8>
 800aa8a:	bf00      	nop
 800aa8c:	20004580 	.word	0x20004580

0800aa90 <__malloc_lock>:
 800aa90:	4801      	ldr	r0, [pc, #4]	@ (800aa98 <__malloc_lock+0x8>)
 800aa92:	f7ff b89a 	b.w	8009bca <__retarget_lock_acquire_recursive>
 800aa96:	bf00      	nop
 800aa98:	20004578 	.word	0x20004578

0800aa9c <__malloc_unlock>:
 800aa9c:	4801      	ldr	r0, [pc, #4]	@ (800aaa4 <__malloc_unlock+0x8>)
 800aa9e:	f7ff b895 	b.w	8009bcc <__retarget_lock_release_recursive>
 800aaa2:	bf00      	nop
 800aaa4:	20004578 	.word	0x20004578

0800aaa8 <_Balloc>:
 800aaa8:	b570      	push	{r4, r5, r6, lr}
 800aaaa:	69c6      	ldr	r6, [r0, #28]
 800aaac:	4604      	mov	r4, r0
 800aaae:	460d      	mov	r5, r1
 800aab0:	b976      	cbnz	r6, 800aad0 <_Balloc+0x28>
 800aab2:	2010      	movs	r0, #16
 800aab4:	f7ff ff42 	bl	800a93c <malloc>
 800aab8:	4602      	mov	r2, r0
 800aaba:	61e0      	str	r0, [r4, #28]
 800aabc:	b920      	cbnz	r0, 800aac8 <_Balloc+0x20>
 800aabe:	4b18      	ldr	r3, [pc, #96]	@ (800ab20 <_Balloc+0x78>)
 800aac0:	4818      	ldr	r0, [pc, #96]	@ (800ab24 <_Balloc+0x7c>)
 800aac2:	216b      	movs	r1, #107	@ 0x6b
 800aac4:	f001 fd68 	bl	800c598 <__assert_func>
 800aac8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aacc:	6006      	str	r6, [r0, #0]
 800aace:	60c6      	str	r6, [r0, #12]
 800aad0:	69e6      	ldr	r6, [r4, #28]
 800aad2:	68f3      	ldr	r3, [r6, #12]
 800aad4:	b183      	cbz	r3, 800aaf8 <_Balloc+0x50>
 800aad6:	69e3      	ldr	r3, [r4, #28]
 800aad8:	68db      	ldr	r3, [r3, #12]
 800aada:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aade:	b9b8      	cbnz	r0, 800ab10 <_Balloc+0x68>
 800aae0:	2101      	movs	r1, #1
 800aae2:	fa01 f605 	lsl.w	r6, r1, r5
 800aae6:	1d72      	adds	r2, r6, #5
 800aae8:	0092      	lsls	r2, r2, #2
 800aaea:	4620      	mov	r0, r4
 800aaec:	f001 fd72 	bl	800c5d4 <_calloc_r>
 800aaf0:	b160      	cbz	r0, 800ab0c <_Balloc+0x64>
 800aaf2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aaf6:	e00e      	b.n	800ab16 <_Balloc+0x6e>
 800aaf8:	2221      	movs	r2, #33	@ 0x21
 800aafa:	2104      	movs	r1, #4
 800aafc:	4620      	mov	r0, r4
 800aafe:	f001 fd69 	bl	800c5d4 <_calloc_r>
 800ab02:	69e3      	ldr	r3, [r4, #28]
 800ab04:	60f0      	str	r0, [r6, #12]
 800ab06:	68db      	ldr	r3, [r3, #12]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d1e4      	bne.n	800aad6 <_Balloc+0x2e>
 800ab0c:	2000      	movs	r0, #0
 800ab0e:	bd70      	pop	{r4, r5, r6, pc}
 800ab10:	6802      	ldr	r2, [r0, #0]
 800ab12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ab16:	2300      	movs	r3, #0
 800ab18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ab1c:	e7f7      	b.n	800ab0e <_Balloc+0x66>
 800ab1e:	bf00      	nop
 800ab20:	0800d3ae 	.word	0x0800d3ae
 800ab24:	0800d42e 	.word	0x0800d42e

0800ab28 <_Bfree>:
 800ab28:	b570      	push	{r4, r5, r6, lr}
 800ab2a:	69c6      	ldr	r6, [r0, #28]
 800ab2c:	4605      	mov	r5, r0
 800ab2e:	460c      	mov	r4, r1
 800ab30:	b976      	cbnz	r6, 800ab50 <_Bfree+0x28>
 800ab32:	2010      	movs	r0, #16
 800ab34:	f7ff ff02 	bl	800a93c <malloc>
 800ab38:	4602      	mov	r2, r0
 800ab3a:	61e8      	str	r0, [r5, #28]
 800ab3c:	b920      	cbnz	r0, 800ab48 <_Bfree+0x20>
 800ab3e:	4b09      	ldr	r3, [pc, #36]	@ (800ab64 <_Bfree+0x3c>)
 800ab40:	4809      	ldr	r0, [pc, #36]	@ (800ab68 <_Bfree+0x40>)
 800ab42:	218f      	movs	r1, #143	@ 0x8f
 800ab44:	f001 fd28 	bl	800c598 <__assert_func>
 800ab48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab4c:	6006      	str	r6, [r0, #0]
 800ab4e:	60c6      	str	r6, [r0, #12]
 800ab50:	b13c      	cbz	r4, 800ab62 <_Bfree+0x3a>
 800ab52:	69eb      	ldr	r3, [r5, #28]
 800ab54:	6862      	ldr	r2, [r4, #4]
 800ab56:	68db      	ldr	r3, [r3, #12]
 800ab58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ab5c:	6021      	str	r1, [r4, #0]
 800ab5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ab62:	bd70      	pop	{r4, r5, r6, pc}
 800ab64:	0800d3ae 	.word	0x0800d3ae
 800ab68:	0800d42e 	.word	0x0800d42e

0800ab6c <__multadd>:
 800ab6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab70:	690d      	ldr	r5, [r1, #16]
 800ab72:	4607      	mov	r7, r0
 800ab74:	460c      	mov	r4, r1
 800ab76:	461e      	mov	r6, r3
 800ab78:	f101 0c14 	add.w	ip, r1, #20
 800ab7c:	2000      	movs	r0, #0
 800ab7e:	f8dc 3000 	ldr.w	r3, [ip]
 800ab82:	b299      	uxth	r1, r3
 800ab84:	fb02 6101 	mla	r1, r2, r1, r6
 800ab88:	0c1e      	lsrs	r6, r3, #16
 800ab8a:	0c0b      	lsrs	r3, r1, #16
 800ab8c:	fb02 3306 	mla	r3, r2, r6, r3
 800ab90:	b289      	uxth	r1, r1
 800ab92:	3001      	adds	r0, #1
 800ab94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ab98:	4285      	cmp	r5, r0
 800ab9a:	f84c 1b04 	str.w	r1, [ip], #4
 800ab9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aba2:	dcec      	bgt.n	800ab7e <__multadd+0x12>
 800aba4:	b30e      	cbz	r6, 800abea <__multadd+0x7e>
 800aba6:	68a3      	ldr	r3, [r4, #8]
 800aba8:	42ab      	cmp	r3, r5
 800abaa:	dc19      	bgt.n	800abe0 <__multadd+0x74>
 800abac:	6861      	ldr	r1, [r4, #4]
 800abae:	4638      	mov	r0, r7
 800abb0:	3101      	adds	r1, #1
 800abb2:	f7ff ff79 	bl	800aaa8 <_Balloc>
 800abb6:	4680      	mov	r8, r0
 800abb8:	b928      	cbnz	r0, 800abc6 <__multadd+0x5a>
 800abba:	4602      	mov	r2, r0
 800abbc:	4b0c      	ldr	r3, [pc, #48]	@ (800abf0 <__multadd+0x84>)
 800abbe:	480d      	ldr	r0, [pc, #52]	@ (800abf4 <__multadd+0x88>)
 800abc0:	21ba      	movs	r1, #186	@ 0xba
 800abc2:	f001 fce9 	bl	800c598 <__assert_func>
 800abc6:	6922      	ldr	r2, [r4, #16]
 800abc8:	3202      	adds	r2, #2
 800abca:	f104 010c 	add.w	r1, r4, #12
 800abce:	0092      	lsls	r2, r2, #2
 800abd0:	300c      	adds	r0, #12
 800abd2:	f7fe fffc 	bl	8009bce <memcpy>
 800abd6:	4621      	mov	r1, r4
 800abd8:	4638      	mov	r0, r7
 800abda:	f7ff ffa5 	bl	800ab28 <_Bfree>
 800abde:	4644      	mov	r4, r8
 800abe0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800abe4:	3501      	adds	r5, #1
 800abe6:	615e      	str	r6, [r3, #20]
 800abe8:	6125      	str	r5, [r4, #16]
 800abea:	4620      	mov	r0, r4
 800abec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abf0:	0800d41d 	.word	0x0800d41d
 800abf4:	0800d42e 	.word	0x0800d42e

0800abf8 <__s2b>:
 800abf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abfc:	460c      	mov	r4, r1
 800abfe:	4615      	mov	r5, r2
 800ac00:	461f      	mov	r7, r3
 800ac02:	2209      	movs	r2, #9
 800ac04:	3308      	adds	r3, #8
 800ac06:	4606      	mov	r6, r0
 800ac08:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac0c:	2100      	movs	r1, #0
 800ac0e:	2201      	movs	r2, #1
 800ac10:	429a      	cmp	r2, r3
 800ac12:	db09      	blt.n	800ac28 <__s2b+0x30>
 800ac14:	4630      	mov	r0, r6
 800ac16:	f7ff ff47 	bl	800aaa8 <_Balloc>
 800ac1a:	b940      	cbnz	r0, 800ac2e <__s2b+0x36>
 800ac1c:	4602      	mov	r2, r0
 800ac1e:	4b19      	ldr	r3, [pc, #100]	@ (800ac84 <__s2b+0x8c>)
 800ac20:	4819      	ldr	r0, [pc, #100]	@ (800ac88 <__s2b+0x90>)
 800ac22:	21d3      	movs	r1, #211	@ 0xd3
 800ac24:	f001 fcb8 	bl	800c598 <__assert_func>
 800ac28:	0052      	lsls	r2, r2, #1
 800ac2a:	3101      	adds	r1, #1
 800ac2c:	e7f0      	b.n	800ac10 <__s2b+0x18>
 800ac2e:	9b08      	ldr	r3, [sp, #32]
 800ac30:	6143      	str	r3, [r0, #20]
 800ac32:	2d09      	cmp	r5, #9
 800ac34:	f04f 0301 	mov.w	r3, #1
 800ac38:	6103      	str	r3, [r0, #16]
 800ac3a:	dd16      	ble.n	800ac6a <__s2b+0x72>
 800ac3c:	f104 0909 	add.w	r9, r4, #9
 800ac40:	46c8      	mov	r8, r9
 800ac42:	442c      	add	r4, r5
 800ac44:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ac48:	4601      	mov	r1, r0
 800ac4a:	3b30      	subs	r3, #48	@ 0x30
 800ac4c:	220a      	movs	r2, #10
 800ac4e:	4630      	mov	r0, r6
 800ac50:	f7ff ff8c 	bl	800ab6c <__multadd>
 800ac54:	45a0      	cmp	r8, r4
 800ac56:	d1f5      	bne.n	800ac44 <__s2b+0x4c>
 800ac58:	f1a5 0408 	sub.w	r4, r5, #8
 800ac5c:	444c      	add	r4, r9
 800ac5e:	1b2d      	subs	r5, r5, r4
 800ac60:	1963      	adds	r3, r4, r5
 800ac62:	42bb      	cmp	r3, r7
 800ac64:	db04      	blt.n	800ac70 <__s2b+0x78>
 800ac66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac6a:	340a      	adds	r4, #10
 800ac6c:	2509      	movs	r5, #9
 800ac6e:	e7f6      	b.n	800ac5e <__s2b+0x66>
 800ac70:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ac74:	4601      	mov	r1, r0
 800ac76:	3b30      	subs	r3, #48	@ 0x30
 800ac78:	220a      	movs	r2, #10
 800ac7a:	4630      	mov	r0, r6
 800ac7c:	f7ff ff76 	bl	800ab6c <__multadd>
 800ac80:	e7ee      	b.n	800ac60 <__s2b+0x68>
 800ac82:	bf00      	nop
 800ac84:	0800d41d 	.word	0x0800d41d
 800ac88:	0800d42e 	.word	0x0800d42e

0800ac8c <__hi0bits>:
 800ac8c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ac90:	4603      	mov	r3, r0
 800ac92:	bf36      	itet	cc
 800ac94:	0403      	lslcc	r3, r0, #16
 800ac96:	2000      	movcs	r0, #0
 800ac98:	2010      	movcc	r0, #16
 800ac9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ac9e:	bf3c      	itt	cc
 800aca0:	021b      	lslcc	r3, r3, #8
 800aca2:	3008      	addcc	r0, #8
 800aca4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aca8:	bf3c      	itt	cc
 800acaa:	011b      	lslcc	r3, r3, #4
 800acac:	3004      	addcc	r0, #4
 800acae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acb2:	bf3c      	itt	cc
 800acb4:	009b      	lslcc	r3, r3, #2
 800acb6:	3002      	addcc	r0, #2
 800acb8:	2b00      	cmp	r3, #0
 800acba:	db05      	blt.n	800acc8 <__hi0bits+0x3c>
 800acbc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800acc0:	f100 0001 	add.w	r0, r0, #1
 800acc4:	bf08      	it	eq
 800acc6:	2020      	moveq	r0, #32
 800acc8:	4770      	bx	lr

0800acca <__lo0bits>:
 800acca:	6803      	ldr	r3, [r0, #0]
 800accc:	4602      	mov	r2, r0
 800acce:	f013 0007 	ands.w	r0, r3, #7
 800acd2:	d00b      	beq.n	800acec <__lo0bits+0x22>
 800acd4:	07d9      	lsls	r1, r3, #31
 800acd6:	d421      	bmi.n	800ad1c <__lo0bits+0x52>
 800acd8:	0798      	lsls	r0, r3, #30
 800acda:	bf49      	itett	mi
 800acdc:	085b      	lsrmi	r3, r3, #1
 800acde:	089b      	lsrpl	r3, r3, #2
 800ace0:	2001      	movmi	r0, #1
 800ace2:	6013      	strmi	r3, [r2, #0]
 800ace4:	bf5c      	itt	pl
 800ace6:	6013      	strpl	r3, [r2, #0]
 800ace8:	2002      	movpl	r0, #2
 800acea:	4770      	bx	lr
 800acec:	b299      	uxth	r1, r3
 800acee:	b909      	cbnz	r1, 800acf4 <__lo0bits+0x2a>
 800acf0:	0c1b      	lsrs	r3, r3, #16
 800acf2:	2010      	movs	r0, #16
 800acf4:	b2d9      	uxtb	r1, r3
 800acf6:	b909      	cbnz	r1, 800acfc <__lo0bits+0x32>
 800acf8:	3008      	adds	r0, #8
 800acfa:	0a1b      	lsrs	r3, r3, #8
 800acfc:	0719      	lsls	r1, r3, #28
 800acfe:	bf04      	itt	eq
 800ad00:	091b      	lsreq	r3, r3, #4
 800ad02:	3004      	addeq	r0, #4
 800ad04:	0799      	lsls	r1, r3, #30
 800ad06:	bf04      	itt	eq
 800ad08:	089b      	lsreq	r3, r3, #2
 800ad0a:	3002      	addeq	r0, #2
 800ad0c:	07d9      	lsls	r1, r3, #31
 800ad0e:	d403      	bmi.n	800ad18 <__lo0bits+0x4e>
 800ad10:	085b      	lsrs	r3, r3, #1
 800ad12:	f100 0001 	add.w	r0, r0, #1
 800ad16:	d003      	beq.n	800ad20 <__lo0bits+0x56>
 800ad18:	6013      	str	r3, [r2, #0]
 800ad1a:	4770      	bx	lr
 800ad1c:	2000      	movs	r0, #0
 800ad1e:	4770      	bx	lr
 800ad20:	2020      	movs	r0, #32
 800ad22:	4770      	bx	lr

0800ad24 <__i2b>:
 800ad24:	b510      	push	{r4, lr}
 800ad26:	460c      	mov	r4, r1
 800ad28:	2101      	movs	r1, #1
 800ad2a:	f7ff febd 	bl	800aaa8 <_Balloc>
 800ad2e:	4602      	mov	r2, r0
 800ad30:	b928      	cbnz	r0, 800ad3e <__i2b+0x1a>
 800ad32:	4b05      	ldr	r3, [pc, #20]	@ (800ad48 <__i2b+0x24>)
 800ad34:	4805      	ldr	r0, [pc, #20]	@ (800ad4c <__i2b+0x28>)
 800ad36:	f240 1145 	movw	r1, #325	@ 0x145
 800ad3a:	f001 fc2d 	bl	800c598 <__assert_func>
 800ad3e:	2301      	movs	r3, #1
 800ad40:	6144      	str	r4, [r0, #20]
 800ad42:	6103      	str	r3, [r0, #16]
 800ad44:	bd10      	pop	{r4, pc}
 800ad46:	bf00      	nop
 800ad48:	0800d41d 	.word	0x0800d41d
 800ad4c:	0800d42e 	.word	0x0800d42e

0800ad50 <__multiply>:
 800ad50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad54:	4617      	mov	r7, r2
 800ad56:	690a      	ldr	r2, [r1, #16]
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	bfa8      	it	ge
 800ad5e:	463b      	movge	r3, r7
 800ad60:	4689      	mov	r9, r1
 800ad62:	bfa4      	itt	ge
 800ad64:	460f      	movge	r7, r1
 800ad66:	4699      	movge	r9, r3
 800ad68:	693d      	ldr	r5, [r7, #16]
 800ad6a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	6879      	ldr	r1, [r7, #4]
 800ad72:	eb05 060a 	add.w	r6, r5, sl
 800ad76:	42b3      	cmp	r3, r6
 800ad78:	b085      	sub	sp, #20
 800ad7a:	bfb8      	it	lt
 800ad7c:	3101      	addlt	r1, #1
 800ad7e:	f7ff fe93 	bl	800aaa8 <_Balloc>
 800ad82:	b930      	cbnz	r0, 800ad92 <__multiply+0x42>
 800ad84:	4602      	mov	r2, r0
 800ad86:	4b41      	ldr	r3, [pc, #260]	@ (800ae8c <__multiply+0x13c>)
 800ad88:	4841      	ldr	r0, [pc, #260]	@ (800ae90 <__multiply+0x140>)
 800ad8a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ad8e:	f001 fc03 	bl	800c598 <__assert_func>
 800ad92:	f100 0414 	add.w	r4, r0, #20
 800ad96:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800ad9a:	4623      	mov	r3, r4
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	4573      	cmp	r3, lr
 800ada0:	d320      	bcc.n	800ade4 <__multiply+0x94>
 800ada2:	f107 0814 	add.w	r8, r7, #20
 800ada6:	f109 0114 	add.w	r1, r9, #20
 800adaa:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800adae:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800adb2:	9302      	str	r3, [sp, #8]
 800adb4:	1beb      	subs	r3, r5, r7
 800adb6:	3b15      	subs	r3, #21
 800adb8:	f023 0303 	bic.w	r3, r3, #3
 800adbc:	3304      	adds	r3, #4
 800adbe:	3715      	adds	r7, #21
 800adc0:	42bd      	cmp	r5, r7
 800adc2:	bf38      	it	cc
 800adc4:	2304      	movcc	r3, #4
 800adc6:	9301      	str	r3, [sp, #4]
 800adc8:	9b02      	ldr	r3, [sp, #8]
 800adca:	9103      	str	r1, [sp, #12]
 800adcc:	428b      	cmp	r3, r1
 800adce:	d80c      	bhi.n	800adea <__multiply+0x9a>
 800add0:	2e00      	cmp	r6, #0
 800add2:	dd03      	ble.n	800addc <__multiply+0x8c>
 800add4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800add8:	2b00      	cmp	r3, #0
 800adda:	d055      	beq.n	800ae88 <__multiply+0x138>
 800addc:	6106      	str	r6, [r0, #16]
 800adde:	b005      	add	sp, #20
 800ade0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ade4:	f843 2b04 	str.w	r2, [r3], #4
 800ade8:	e7d9      	b.n	800ad9e <__multiply+0x4e>
 800adea:	f8b1 a000 	ldrh.w	sl, [r1]
 800adee:	f1ba 0f00 	cmp.w	sl, #0
 800adf2:	d01f      	beq.n	800ae34 <__multiply+0xe4>
 800adf4:	46c4      	mov	ip, r8
 800adf6:	46a1      	mov	r9, r4
 800adf8:	2700      	movs	r7, #0
 800adfa:	f85c 2b04 	ldr.w	r2, [ip], #4
 800adfe:	f8d9 3000 	ldr.w	r3, [r9]
 800ae02:	fa1f fb82 	uxth.w	fp, r2
 800ae06:	b29b      	uxth	r3, r3
 800ae08:	fb0a 330b 	mla	r3, sl, fp, r3
 800ae0c:	443b      	add	r3, r7
 800ae0e:	f8d9 7000 	ldr.w	r7, [r9]
 800ae12:	0c12      	lsrs	r2, r2, #16
 800ae14:	0c3f      	lsrs	r7, r7, #16
 800ae16:	fb0a 7202 	mla	r2, sl, r2, r7
 800ae1a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ae1e:	b29b      	uxth	r3, r3
 800ae20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae24:	4565      	cmp	r5, ip
 800ae26:	f849 3b04 	str.w	r3, [r9], #4
 800ae2a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ae2e:	d8e4      	bhi.n	800adfa <__multiply+0xaa>
 800ae30:	9b01      	ldr	r3, [sp, #4]
 800ae32:	50e7      	str	r7, [r4, r3]
 800ae34:	9b03      	ldr	r3, [sp, #12]
 800ae36:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ae3a:	3104      	adds	r1, #4
 800ae3c:	f1b9 0f00 	cmp.w	r9, #0
 800ae40:	d020      	beq.n	800ae84 <__multiply+0x134>
 800ae42:	6823      	ldr	r3, [r4, #0]
 800ae44:	4647      	mov	r7, r8
 800ae46:	46a4      	mov	ip, r4
 800ae48:	f04f 0a00 	mov.w	sl, #0
 800ae4c:	f8b7 b000 	ldrh.w	fp, [r7]
 800ae50:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800ae54:	fb09 220b 	mla	r2, r9, fp, r2
 800ae58:	4452      	add	r2, sl
 800ae5a:	b29b      	uxth	r3, r3
 800ae5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae60:	f84c 3b04 	str.w	r3, [ip], #4
 800ae64:	f857 3b04 	ldr.w	r3, [r7], #4
 800ae68:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ae6c:	f8bc 3000 	ldrh.w	r3, [ip]
 800ae70:	fb09 330a 	mla	r3, r9, sl, r3
 800ae74:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800ae78:	42bd      	cmp	r5, r7
 800ae7a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ae7e:	d8e5      	bhi.n	800ae4c <__multiply+0xfc>
 800ae80:	9a01      	ldr	r2, [sp, #4]
 800ae82:	50a3      	str	r3, [r4, r2]
 800ae84:	3404      	adds	r4, #4
 800ae86:	e79f      	b.n	800adc8 <__multiply+0x78>
 800ae88:	3e01      	subs	r6, #1
 800ae8a:	e7a1      	b.n	800add0 <__multiply+0x80>
 800ae8c:	0800d41d 	.word	0x0800d41d
 800ae90:	0800d42e 	.word	0x0800d42e

0800ae94 <__pow5mult>:
 800ae94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae98:	4615      	mov	r5, r2
 800ae9a:	f012 0203 	ands.w	r2, r2, #3
 800ae9e:	4607      	mov	r7, r0
 800aea0:	460e      	mov	r6, r1
 800aea2:	d007      	beq.n	800aeb4 <__pow5mult+0x20>
 800aea4:	4c25      	ldr	r4, [pc, #148]	@ (800af3c <__pow5mult+0xa8>)
 800aea6:	3a01      	subs	r2, #1
 800aea8:	2300      	movs	r3, #0
 800aeaa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aeae:	f7ff fe5d 	bl	800ab6c <__multadd>
 800aeb2:	4606      	mov	r6, r0
 800aeb4:	10ad      	asrs	r5, r5, #2
 800aeb6:	d03d      	beq.n	800af34 <__pow5mult+0xa0>
 800aeb8:	69fc      	ldr	r4, [r7, #28]
 800aeba:	b97c      	cbnz	r4, 800aedc <__pow5mult+0x48>
 800aebc:	2010      	movs	r0, #16
 800aebe:	f7ff fd3d 	bl	800a93c <malloc>
 800aec2:	4602      	mov	r2, r0
 800aec4:	61f8      	str	r0, [r7, #28]
 800aec6:	b928      	cbnz	r0, 800aed4 <__pow5mult+0x40>
 800aec8:	4b1d      	ldr	r3, [pc, #116]	@ (800af40 <__pow5mult+0xac>)
 800aeca:	481e      	ldr	r0, [pc, #120]	@ (800af44 <__pow5mult+0xb0>)
 800aecc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800aed0:	f001 fb62 	bl	800c598 <__assert_func>
 800aed4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aed8:	6004      	str	r4, [r0, #0]
 800aeda:	60c4      	str	r4, [r0, #12]
 800aedc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800aee0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aee4:	b94c      	cbnz	r4, 800aefa <__pow5mult+0x66>
 800aee6:	f240 2171 	movw	r1, #625	@ 0x271
 800aeea:	4638      	mov	r0, r7
 800aeec:	f7ff ff1a 	bl	800ad24 <__i2b>
 800aef0:	2300      	movs	r3, #0
 800aef2:	f8c8 0008 	str.w	r0, [r8, #8]
 800aef6:	4604      	mov	r4, r0
 800aef8:	6003      	str	r3, [r0, #0]
 800aefa:	f04f 0900 	mov.w	r9, #0
 800aefe:	07eb      	lsls	r3, r5, #31
 800af00:	d50a      	bpl.n	800af18 <__pow5mult+0x84>
 800af02:	4631      	mov	r1, r6
 800af04:	4622      	mov	r2, r4
 800af06:	4638      	mov	r0, r7
 800af08:	f7ff ff22 	bl	800ad50 <__multiply>
 800af0c:	4631      	mov	r1, r6
 800af0e:	4680      	mov	r8, r0
 800af10:	4638      	mov	r0, r7
 800af12:	f7ff fe09 	bl	800ab28 <_Bfree>
 800af16:	4646      	mov	r6, r8
 800af18:	106d      	asrs	r5, r5, #1
 800af1a:	d00b      	beq.n	800af34 <__pow5mult+0xa0>
 800af1c:	6820      	ldr	r0, [r4, #0]
 800af1e:	b938      	cbnz	r0, 800af30 <__pow5mult+0x9c>
 800af20:	4622      	mov	r2, r4
 800af22:	4621      	mov	r1, r4
 800af24:	4638      	mov	r0, r7
 800af26:	f7ff ff13 	bl	800ad50 <__multiply>
 800af2a:	6020      	str	r0, [r4, #0]
 800af2c:	f8c0 9000 	str.w	r9, [r0]
 800af30:	4604      	mov	r4, r0
 800af32:	e7e4      	b.n	800aefe <__pow5mult+0x6a>
 800af34:	4630      	mov	r0, r6
 800af36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af3a:	bf00      	nop
 800af3c:	0800d540 	.word	0x0800d540
 800af40:	0800d3ae 	.word	0x0800d3ae
 800af44:	0800d42e 	.word	0x0800d42e

0800af48 <__lshift>:
 800af48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af4c:	460c      	mov	r4, r1
 800af4e:	6849      	ldr	r1, [r1, #4]
 800af50:	6923      	ldr	r3, [r4, #16]
 800af52:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800af56:	68a3      	ldr	r3, [r4, #8]
 800af58:	4607      	mov	r7, r0
 800af5a:	4691      	mov	r9, r2
 800af5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800af60:	f108 0601 	add.w	r6, r8, #1
 800af64:	42b3      	cmp	r3, r6
 800af66:	db0b      	blt.n	800af80 <__lshift+0x38>
 800af68:	4638      	mov	r0, r7
 800af6a:	f7ff fd9d 	bl	800aaa8 <_Balloc>
 800af6e:	4605      	mov	r5, r0
 800af70:	b948      	cbnz	r0, 800af86 <__lshift+0x3e>
 800af72:	4602      	mov	r2, r0
 800af74:	4b28      	ldr	r3, [pc, #160]	@ (800b018 <__lshift+0xd0>)
 800af76:	4829      	ldr	r0, [pc, #164]	@ (800b01c <__lshift+0xd4>)
 800af78:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800af7c:	f001 fb0c 	bl	800c598 <__assert_func>
 800af80:	3101      	adds	r1, #1
 800af82:	005b      	lsls	r3, r3, #1
 800af84:	e7ee      	b.n	800af64 <__lshift+0x1c>
 800af86:	2300      	movs	r3, #0
 800af88:	f100 0114 	add.w	r1, r0, #20
 800af8c:	f100 0210 	add.w	r2, r0, #16
 800af90:	4618      	mov	r0, r3
 800af92:	4553      	cmp	r3, sl
 800af94:	db33      	blt.n	800affe <__lshift+0xb6>
 800af96:	6920      	ldr	r0, [r4, #16]
 800af98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800af9c:	f104 0314 	add.w	r3, r4, #20
 800afa0:	f019 091f 	ands.w	r9, r9, #31
 800afa4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800afa8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800afac:	d02b      	beq.n	800b006 <__lshift+0xbe>
 800afae:	f1c9 0e20 	rsb	lr, r9, #32
 800afb2:	468a      	mov	sl, r1
 800afb4:	2200      	movs	r2, #0
 800afb6:	6818      	ldr	r0, [r3, #0]
 800afb8:	fa00 f009 	lsl.w	r0, r0, r9
 800afbc:	4310      	orrs	r0, r2
 800afbe:	f84a 0b04 	str.w	r0, [sl], #4
 800afc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800afc6:	459c      	cmp	ip, r3
 800afc8:	fa22 f20e 	lsr.w	r2, r2, lr
 800afcc:	d8f3      	bhi.n	800afb6 <__lshift+0x6e>
 800afce:	ebac 0304 	sub.w	r3, ip, r4
 800afd2:	3b15      	subs	r3, #21
 800afd4:	f023 0303 	bic.w	r3, r3, #3
 800afd8:	3304      	adds	r3, #4
 800afda:	f104 0015 	add.w	r0, r4, #21
 800afde:	4560      	cmp	r0, ip
 800afe0:	bf88      	it	hi
 800afe2:	2304      	movhi	r3, #4
 800afe4:	50ca      	str	r2, [r1, r3]
 800afe6:	b10a      	cbz	r2, 800afec <__lshift+0xa4>
 800afe8:	f108 0602 	add.w	r6, r8, #2
 800afec:	3e01      	subs	r6, #1
 800afee:	4638      	mov	r0, r7
 800aff0:	612e      	str	r6, [r5, #16]
 800aff2:	4621      	mov	r1, r4
 800aff4:	f7ff fd98 	bl	800ab28 <_Bfree>
 800aff8:	4628      	mov	r0, r5
 800affa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800affe:	f842 0f04 	str.w	r0, [r2, #4]!
 800b002:	3301      	adds	r3, #1
 800b004:	e7c5      	b.n	800af92 <__lshift+0x4a>
 800b006:	3904      	subs	r1, #4
 800b008:	f853 2b04 	ldr.w	r2, [r3], #4
 800b00c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b010:	459c      	cmp	ip, r3
 800b012:	d8f9      	bhi.n	800b008 <__lshift+0xc0>
 800b014:	e7ea      	b.n	800afec <__lshift+0xa4>
 800b016:	bf00      	nop
 800b018:	0800d41d 	.word	0x0800d41d
 800b01c:	0800d42e 	.word	0x0800d42e

0800b020 <__mcmp>:
 800b020:	690a      	ldr	r2, [r1, #16]
 800b022:	4603      	mov	r3, r0
 800b024:	6900      	ldr	r0, [r0, #16]
 800b026:	1a80      	subs	r0, r0, r2
 800b028:	b530      	push	{r4, r5, lr}
 800b02a:	d10e      	bne.n	800b04a <__mcmp+0x2a>
 800b02c:	3314      	adds	r3, #20
 800b02e:	3114      	adds	r1, #20
 800b030:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b034:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b038:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b03c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b040:	4295      	cmp	r5, r2
 800b042:	d003      	beq.n	800b04c <__mcmp+0x2c>
 800b044:	d205      	bcs.n	800b052 <__mcmp+0x32>
 800b046:	f04f 30ff 	mov.w	r0, #4294967295
 800b04a:	bd30      	pop	{r4, r5, pc}
 800b04c:	42a3      	cmp	r3, r4
 800b04e:	d3f3      	bcc.n	800b038 <__mcmp+0x18>
 800b050:	e7fb      	b.n	800b04a <__mcmp+0x2a>
 800b052:	2001      	movs	r0, #1
 800b054:	e7f9      	b.n	800b04a <__mcmp+0x2a>
	...

0800b058 <__mdiff>:
 800b058:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b05c:	4689      	mov	r9, r1
 800b05e:	4606      	mov	r6, r0
 800b060:	4611      	mov	r1, r2
 800b062:	4648      	mov	r0, r9
 800b064:	4614      	mov	r4, r2
 800b066:	f7ff ffdb 	bl	800b020 <__mcmp>
 800b06a:	1e05      	subs	r5, r0, #0
 800b06c:	d112      	bne.n	800b094 <__mdiff+0x3c>
 800b06e:	4629      	mov	r1, r5
 800b070:	4630      	mov	r0, r6
 800b072:	f7ff fd19 	bl	800aaa8 <_Balloc>
 800b076:	4602      	mov	r2, r0
 800b078:	b928      	cbnz	r0, 800b086 <__mdiff+0x2e>
 800b07a:	4b3f      	ldr	r3, [pc, #252]	@ (800b178 <__mdiff+0x120>)
 800b07c:	f240 2137 	movw	r1, #567	@ 0x237
 800b080:	483e      	ldr	r0, [pc, #248]	@ (800b17c <__mdiff+0x124>)
 800b082:	f001 fa89 	bl	800c598 <__assert_func>
 800b086:	2301      	movs	r3, #1
 800b088:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b08c:	4610      	mov	r0, r2
 800b08e:	b003      	add	sp, #12
 800b090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b094:	bfbc      	itt	lt
 800b096:	464b      	movlt	r3, r9
 800b098:	46a1      	movlt	r9, r4
 800b09a:	4630      	mov	r0, r6
 800b09c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b0a0:	bfba      	itte	lt
 800b0a2:	461c      	movlt	r4, r3
 800b0a4:	2501      	movlt	r5, #1
 800b0a6:	2500      	movge	r5, #0
 800b0a8:	f7ff fcfe 	bl	800aaa8 <_Balloc>
 800b0ac:	4602      	mov	r2, r0
 800b0ae:	b918      	cbnz	r0, 800b0b8 <__mdiff+0x60>
 800b0b0:	4b31      	ldr	r3, [pc, #196]	@ (800b178 <__mdiff+0x120>)
 800b0b2:	f240 2145 	movw	r1, #581	@ 0x245
 800b0b6:	e7e3      	b.n	800b080 <__mdiff+0x28>
 800b0b8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b0bc:	6926      	ldr	r6, [r4, #16]
 800b0be:	60c5      	str	r5, [r0, #12]
 800b0c0:	f109 0310 	add.w	r3, r9, #16
 800b0c4:	f109 0514 	add.w	r5, r9, #20
 800b0c8:	f104 0e14 	add.w	lr, r4, #20
 800b0cc:	f100 0b14 	add.w	fp, r0, #20
 800b0d0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b0d4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b0d8:	9301      	str	r3, [sp, #4]
 800b0da:	46d9      	mov	r9, fp
 800b0dc:	f04f 0c00 	mov.w	ip, #0
 800b0e0:	9b01      	ldr	r3, [sp, #4]
 800b0e2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b0e6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b0ea:	9301      	str	r3, [sp, #4]
 800b0ec:	fa1f f38a 	uxth.w	r3, sl
 800b0f0:	4619      	mov	r1, r3
 800b0f2:	b283      	uxth	r3, r0
 800b0f4:	1acb      	subs	r3, r1, r3
 800b0f6:	0c00      	lsrs	r0, r0, #16
 800b0f8:	4463      	add	r3, ip
 800b0fa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b0fe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b102:	b29b      	uxth	r3, r3
 800b104:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b108:	4576      	cmp	r6, lr
 800b10a:	f849 3b04 	str.w	r3, [r9], #4
 800b10e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b112:	d8e5      	bhi.n	800b0e0 <__mdiff+0x88>
 800b114:	1b33      	subs	r3, r6, r4
 800b116:	3b15      	subs	r3, #21
 800b118:	f023 0303 	bic.w	r3, r3, #3
 800b11c:	3415      	adds	r4, #21
 800b11e:	3304      	adds	r3, #4
 800b120:	42a6      	cmp	r6, r4
 800b122:	bf38      	it	cc
 800b124:	2304      	movcc	r3, #4
 800b126:	441d      	add	r5, r3
 800b128:	445b      	add	r3, fp
 800b12a:	461e      	mov	r6, r3
 800b12c:	462c      	mov	r4, r5
 800b12e:	4544      	cmp	r4, r8
 800b130:	d30e      	bcc.n	800b150 <__mdiff+0xf8>
 800b132:	f108 0103 	add.w	r1, r8, #3
 800b136:	1b49      	subs	r1, r1, r5
 800b138:	f021 0103 	bic.w	r1, r1, #3
 800b13c:	3d03      	subs	r5, #3
 800b13e:	45a8      	cmp	r8, r5
 800b140:	bf38      	it	cc
 800b142:	2100      	movcc	r1, #0
 800b144:	440b      	add	r3, r1
 800b146:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b14a:	b191      	cbz	r1, 800b172 <__mdiff+0x11a>
 800b14c:	6117      	str	r7, [r2, #16]
 800b14e:	e79d      	b.n	800b08c <__mdiff+0x34>
 800b150:	f854 1b04 	ldr.w	r1, [r4], #4
 800b154:	46e6      	mov	lr, ip
 800b156:	0c08      	lsrs	r0, r1, #16
 800b158:	fa1c fc81 	uxtah	ip, ip, r1
 800b15c:	4471      	add	r1, lr
 800b15e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b162:	b289      	uxth	r1, r1
 800b164:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b168:	f846 1b04 	str.w	r1, [r6], #4
 800b16c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b170:	e7dd      	b.n	800b12e <__mdiff+0xd6>
 800b172:	3f01      	subs	r7, #1
 800b174:	e7e7      	b.n	800b146 <__mdiff+0xee>
 800b176:	bf00      	nop
 800b178:	0800d41d 	.word	0x0800d41d
 800b17c:	0800d42e 	.word	0x0800d42e

0800b180 <__ulp>:
 800b180:	b082      	sub	sp, #8
 800b182:	ed8d 0b00 	vstr	d0, [sp]
 800b186:	9a01      	ldr	r2, [sp, #4]
 800b188:	4b0f      	ldr	r3, [pc, #60]	@ (800b1c8 <__ulp+0x48>)
 800b18a:	4013      	ands	r3, r2
 800b18c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b190:	2b00      	cmp	r3, #0
 800b192:	dc08      	bgt.n	800b1a6 <__ulp+0x26>
 800b194:	425b      	negs	r3, r3
 800b196:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b19a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b19e:	da04      	bge.n	800b1aa <__ulp+0x2a>
 800b1a0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b1a4:	4113      	asrs	r3, r2
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	e008      	b.n	800b1bc <__ulp+0x3c>
 800b1aa:	f1a2 0314 	sub.w	r3, r2, #20
 800b1ae:	2b1e      	cmp	r3, #30
 800b1b0:	bfda      	itte	le
 800b1b2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b1b6:	40da      	lsrle	r2, r3
 800b1b8:	2201      	movgt	r2, #1
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	4619      	mov	r1, r3
 800b1be:	4610      	mov	r0, r2
 800b1c0:	ec41 0b10 	vmov	d0, r0, r1
 800b1c4:	b002      	add	sp, #8
 800b1c6:	4770      	bx	lr
 800b1c8:	7ff00000 	.word	0x7ff00000

0800b1cc <__b2d>:
 800b1cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1d0:	6906      	ldr	r6, [r0, #16]
 800b1d2:	f100 0814 	add.w	r8, r0, #20
 800b1d6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b1da:	1f37      	subs	r7, r6, #4
 800b1dc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b1e0:	4610      	mov	r0, r2
 800b1e2:	f7ff fd53 	bl	800ac8c <__hi0bits>
 800b1e6:	f1c0 0320 	rsb	r3, r0, #32
 800b1ea:	280a      	cmp	r0, #10
 800b1ec:	600b      	str	r3, [r1, #0]
 800b1ee:	491b      	ldr	r1, [pc, #108]	@ (800b25c <__b2d+0x90>)
 800b1f0:	dc15      	bgt.n	800b21e <__b2d+0x52>
 800b1f2:	f1c0 0c0b 	rsb	ip, r0, #11
 800b1f6:	fa22 f30c 	lsr.w	r3, r2, ip
 800b1fa:	45b8      	cmp	r8, r7
 800b1fc:	ea43 0501 	orr.w	r5, r3, r1
 800b200:	bf34      	ite	cc
 800b202:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b206:	2300      	movcs	r3, #0
 800b208:	3015      	adds	r0, #21
 800b20a:	fa02 f000 	lsl.w	r0, r2, r0
 800b20e:	fa23 f30c 	lsr.w	r3, r3, ip
 800b212:	4303      	orrs	r3, r0
 800b214:	461c      	mov	r4, r3
 800b216:	ec45 4b10 	vmov	d0, r4, r5
 800b21a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b21e:	45b8      	cmp	r8, r7
 800b220:	bf3a      	itte	cc
 800b222:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b226:	f1a6 0708 	subcc.w	r7, r6, #8
 800b22a:	2300      	movcs	r3, #0
 800b22c:	380b      	subs	r0, #11
 800b22e:	d012      	beq.n	800b256 <__b2d+0x8a>
 800b230:	f1c0 0120 	rsb	r1, r0, #32
 800b234:	fa23 f401 	lsr.w	r4, r3, r1
 800b238:	4082      	lsls	r2, r0
 800b23a:	4322      	orrs	r2, r4
 800b23c:	4547      	cmp	r7, r8
 800b23e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b242:	bf8c      	ite	hi
 800b244:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b248:	2200      	movls	r2, #0
 800b24a:	4083      	lsls	r3, r0
 800b24c:	40ca      	lsrs	r2, r1
 800b24e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b252:	4313      	orrs	r3, r2
 800b254:	e7de      	b.n	800b214 <__b2d+0x48>
 800b256:	ea42 0501 	orr.w	r5, r2, r1
 800b25a:	e7db      	b.n	800b214 <__b2d+0x48>
 800b25c:	3ff00000 	.word	0x3ff00000

0800b260 <__d2b>:
 800b260:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b264:	460f      	mov	r7, r1
 800b266:	2101      	movs	r1, #1
 800b268:	ec59 8b10 	vmov	r8, r9, d0
 800b26c:	4616      	mov	r6, r2
 800b26e:	f7ff fc1b 	bl	800aaa8 <_Balloc>
 800b272:	4604      	mov	r4, r0
 800b274:	b930      	cbnz	r0, 800b284 <__d2b+0x24>
 800b276:	4602      	mov	r2, r0
 800b278:	4b23      	ldr	r3, [pc, #140]	@ (800b308 <__d2b+0xa8>)
 800b27a:	4824      	ldr	r0, [pc, #144]	@ (800b30c <__d2b+0xac>)
 800b27c:	f240 310f 	movw	r1, #783	@ 0x30f
 800b280:	f001 f98a 	bl	800c598 <__assert_func>
 800b284:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b288:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b28c:	b10d      	cbz	r5, 800b292 <__d2b+0x32>
 800b28e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b292:	9301      	str	r3, [sp, #4]
 800b294:	f1b8 0300 	subs.w	r3, r8, #0
 800b298:	d023      	beq.n	800b2e2 <__d2b+0x82>
 800b29a:	4668      	mov	r0, sp
 800b29c:	9300      	str	r3, [sp, #0]
 800b29e:	f7ff fd14 	bl	800acca <__lo0bits>
 800b2a2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b2a6:	b1d0      	cbz	r0, 800b2de <__d2b+0x7e>
 800b2a8:	f1c0 0320 	rsb	r3, r0, #32
 800b2ac:	fa02 f303 	lsl.w	r3, r2, r3
 800b2b0:	430b      	orrs	r3, r1
 800b2b2:	40c2      	lsrs	r2, r0
 800b2b4:	6163      	str	r3, [r4, #20]
 800b2b6:	9201      	str	r2, [sp, #4]
 800b2b8:	9b01      	ldr	r3, [sp, #4]
 800b2ba:	61a3      	str	r3, [r4, #24]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	bf0c      	ite	eq
 800b2c0:	2201      	moveq	r2, #1
 800b2c2:	2202      	movne	r2, #2
 800b2c4:	6122      	str	r2, [r4, #16]
 800b2c6:	b1a5      	cbz	r5, 800b2f2 <__d2b+0x92>
 800b2c8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b2cc:	4405      	add	r5, r0
 800b2ce:	603d      	str	r5, [r7, #0]
 800b2d0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b2d4:	6030      	str	r0, [r6, #0]
 800b2d6:	4620      	mov	r0, r4
 800b2d8:	b003      	add	sp, #12
 800b2da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2de:	6161      	str	r1, [r4, #20]
 800b2e0:	e7ea      	b.n	800b2b8 <__d2b+0x58>
 800b2e2:	a801      	add	r0, sp, #4
 800b2e4:	f7ff fcf1 	bl	800acca <__lo0bits>
 800b2e8:	9b01      	ldr	r3, [sp, #4]
 800b2ea:	6163      	str	r3, [r4, #20]
 800b2ec:	3020      	adds	r0, #32
 800b2ee:	2201      	movs	r2, #1
 800b2f0:	e7e8      	b.n	800b2c4 <__d2b+0x64>
 800b2f2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b2f6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b2fa:	6038      	str	r0, [r7, #0]
 800b2fc:	6918      	ldr	r0, [r3, #16]
 800b2fe:	f7ff fcc5 	bl	800ac8c <__hi0bits>
 800b302:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b306:	e7e5      	b.n	800b2d4 <__d2b+0x74>
 800b308:	0800d41d 	.word	0x0800d41d
 800b30c:	0800d42e 	.word	0x0800d42e

0800b310 <__ratio>:
 800b310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b314:	b085      	sub	sp, #20
 800b316:	e9cd 1000 	strd	r1, r0, [sp]
 800b31a:	a902      	add	r1, sp, #8
 800b31c:	f7ff ff56 	bl	800b1cc <__b2d>
 800b320:	9800      	ldr	r0, [sp, #0]
 800b322:	a903      	add	r1, sp, #12
 800b324:	ec55 4b10 	vmov	r4, r5, d0
 800b328:	f7ff ff50 	bl	800b1cc <__b2d>
 800b32c:	9b01      	ldr	r3, [sp, #4]
 800b32e:	6919      	ldr	r1, [r3, #16]
 800b330:	9b00      	ldr	r3, [sp, #0]
 800b332:	691b      	ldr	r3, [r3, #16]
 800b334:	1ac9      	subs	r1, r1, r3
 800b336:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b33a:	1a9b      	subs	r3, r3, r2
 800b33c:	ec5b ab10 	vmov	sl, fp, d0
 800b340:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b344:	2b00      	cmp	r3, #0
 800b346:	bfce      	itee	gt
 800b348:	462a      	movgt	r2, r5
 800b34a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b34e:	465a      	movle	r2, fp
 800b350:	462f      	mov	r7, r5
 800b352:	46d9      	mov	r9, fp
 800b354:	bfcc      	ite	gt
 800b356:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b35a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b35e:	464b      	mov	r3, r9
 800b360:	4652      	mov	r2, sl
 800b362:	4620      	mov	r0, r4
 800b364:	4639      	mov	r1, r7
 800b366:	f7f5 fa91 	bl	800088c <__aeabi_ddiv>
 800b36a:	ec41 0b10 	vmov	d0, r0, r1
 800b36e:	b005      	add	sp, #20
 800b370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b374 <__copybits>:
 800b374:	3901      	subs	r1, #1
 800b376:	b570      	push	{r4, r5, r6, lr}
 800b378:	1149      	asrs	r1, r1, #5
 800b37a:	6914      	ldr	r4, [r2, #16]
 800b37c:	3101      	adds	r1, #1
 800b37e:	f102 0314 	add.w	r3, r2, #20
 800b382:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b386:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b38a:	1f05      	subs	r5, r0, #4
 800b38c:	42a3      	cmp	r3, r4
 800b38e:	d30c      	bcc.n	800b3aa <__copybits+0x36>
 800b390:	1aa3      	subs	r3, r4, r2
 800b392:	3b11      	subs	r3, #17
 800b394:	f023 0303 	bic.w	r3, r3, #3
 800b398:	3211      	adds	r2, #17
 800b39a:	42a2      	cmp	r2, r4
 800b39c:	bf88      	it	hi
 800b39e:	2300      	movhi	r3, #0
 800b3a0:	4418      	add	r0, r3
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	4288      	cmp	r0, r1
 800b3a6:	d305      	bcc.n	800b3b4 <__copybits+0x40>
 800b3a8:	bd70      	pop	{r4, r5, r6, pc}
 800b3aa:	f853 6b04 	ldr.w	r6, [r3], #4
 800b3ae:	f845 6f04 	str.w	r6, [r5, #4]!
 800b3b2:	e7eb      	b.n	800b38c <__copybits+0x18>
 800b3b4:	f840 3b04 	str.w	r3, [r0], #4
 800b3b8:	e7f4      	b.n	800b3a4 <__copybits+0x30>

0800b3ba <__any_on>:
 800b3ba:	f100 0214 	add.w	r2, r0, #20
 800b3be:	6900      	ldr	r0, [r0, #16]
 800b3c0:	114b      	asrs	r3, r1, #5
 800b3c2:	4298      	cmp	r0, r3
 800b3c4:	b510      	push	{r4, lr}
 800b3c6:	db11      	blt.n	800b3ec <__any_on+0x32>
 800b3c8:	dd0a      	ble.n	800b3e0 <__any_on+0x26>
 800b3ca:	f011 011f 	ands.w	r1, r1, #31
 800b3ce:	d007      	beq.n	800b3e0 <__any_on+0x26>
 800b3d0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b3d4:	fa24 f001 	lsr.w	r0, r4, r1
 800b3d8:	fa00 f101 	lsl.w	r1, r0, r1
 800b3dc:	428c      	cmp	r4, r1
 800b3de:	d10b      	bne.n	800b3f8 <__any_on+0x3e>
 800b3e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	d803      	bhi.n	800b3f0 <__any_on+0x36>
 800b3e8:	2000      	movs	r0, #0
 800b3ea:	bd10      	pop	{r4, pc}
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	e7f7      	b.n	800b3e0 <__any_on+0x26>
 800b3f0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b3f4:	2900      	cmp	r1, #0
 800b3f6:	d0f5      	beq.n	800b3e4 <__any_on+0x2a>
 800b3f8:	2001      	movs	r0, #1
 800b3fa:	e7f6      	b.n	800b3ea <__any_on+0x30>

0800b3fc <sulp>:
 800b3fc:	b570      	push	{r4, r5, r6, lr}
 800b3fe:	4604      	mov	r4, r0
 800b400:	460d      	mov	r5, r1
 800b402:	ec45 4b10 	vmov	d0, r4, r5
 800b406:	4616      	mov	r6, r2
 800b408:	f7ff feba 	bl	800b180 <__ulp>
 800b40c:	ec51 0b10 	vmov	r0, r1, d0
 800b410:	b17e      	cbz	r6, 800b432 <sulp+0x36>
 800b412:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b416:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	dd09      	ble.n	800b432 <sulp+0x36>
 800b41e:	051b      	lsls	r3, r3, #20
 800b420:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b424:	2400      	movs	r4, #0
 800b426:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b42a:	4622      	mov	r2, r4
 800b42c:	462b      	mov	r3, r5
 800b42e:	f7f5 f903 	bl	8000638 <__aeabi_dmul>
 800b432:	ec41 0b10 	vmov	d0, r0, r1
 800b436:	bd70      	pop	{r4, r5, r6, pc}

0800b438 <_strtod_l>:
 800b438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b43c:	b09f      	sub	sp, #124	@ 0x7c
 800b43e:	460c      	mov	r4, r1
 800b440:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b442:	2200      	movs	r2, #0
 800b444:	921a      	str	r2, [sp, #104]	@ 0x68
 800b446:	9005      	str	r0, [sp, #20]
 800b448:	f04f 0a00 	mov.w	sl, #0
 800b44c:	f04f 0b00 	mov.w	fp, #0
 800b450:	460a      	mov	r2, r1
 800b452:	9219      	str	r2, [sp, #100]	@ 0x64
 800b454:	7811      	ldrb	r1, [r2, #0]
 800b456:	292b      	cmp	r1, #43	@ 0x2b
 800b458:	d04a      	beq.n	800b4f0 <_strtod_l+0xb8>
 800b45a:	d838      	bhi.n	800b4ce <_strtod_l+0x96>
 800b45c:	290d      	cmp	r1, #13
 800b45e:	d832      	bhi.n	800b4c6 <_strtod_l+0x8e>
 800b460:	2908      	cmp	r1, #8
 800b462:	d832      	bhi.n	800b4ca <_strtod_l+0x92>
 800b464:	2900      	cmp	r1, #0
 800b466:	d03b      	beq.n	800b4e0 <_strtod_l+0xa8>
 800b468:	2200      	movs	r2, #0
 800b46a:	920e      	str	r2, [sp, #56]	@ 0x38
 800b46c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b46e:	782a      	ldrb	r2, [r5, #0]
 800b470:	2a30      	cmp	r2, #48	@ 0x30
 800b472:	f040 80b2 	bne.w	800b5da <_strtod_l+0x1a2>
 800b476:	786a      	ldrb	r2, [r5, #1]
 800b478:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b47c:	2a58      	cmp	r2, #88	@ 0x58
 800b47e:	d16e      	bne.n	800b55e <_strtod_l+0x126>
 800b480:	9302      	str	r3, [sp, #8]
 800b482:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b484:	9301      	str	r3, [sp, #4]
 800b486:	ab1a      	add	r3, sp, #104	@ 0x68
 800b488:	9300      	str	r3, [sp, #0]
 800b48a:	4a8f      	ldr	r2, [pc, #572]	@ (800b6c8 <_strtod_l+0x290>)
 800b48c:	9805      	ldr	r0, [sp, #20]
 800b48e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b490:	a919      	add	r1, sp, #100	@ 0x64
 800b492:	f001 f91b 	bl	800c6cc <__gethex>
 800b496:	f010 060f 	ands.w	r6, r0, #15
 800b49a:	4604      	mov	r4, r0
 800b49c:	d005      	beq.n	800b4aa <_strtod_l+0x72>
 800b49e:	2e06      	cmp	r6, #6
 800b4a0:	d128      	bne.n	800b4f4 <_strtod_l+0xbc>
 800b4a2:	3501      	adds	r5, #1
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	9519      	str	r5, [sp, #100]	@ 0x64
 800b4a8:	930e      	str	r3, [sp, #56]	@ 0x38
 800b4aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	f040 858e 	bne.w	800bfce <_strtod_l+0xb96>
 800b4b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b4b4:	b1cb      	cbz	r3, 800b4ea <_strtod_l+0xb2>
 800b4b6:	4652      	mov	r2, sl
 800b4b8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b4bc:	ec43 2b10 	vmov	d0, r2, r3
 800b4c0:	b01f      	add	sp, #124	@ 0x7c
 800b4c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4c6:	2920      	cmp	r1, #32
 800b4c8:	d1ce      	bne.n	800b468 <_strtod_l+0x30>
 800b4ca:	3201      	adds	r2, #1
 800b4cc:	e7c1      	b.n	800b452 <_strtod_l+0x1a>
 800b4ce:	292d      	cmp	r1, #45	@ 0x2d
 800b4d0:	d1ca      	bne.n	800b468 <_strtod_l+0x30>
 800b4d2:	2101      	movs	r1, #1
 800b4d4:	910e      	str	r1, [sp, #56]	@ 0x38
 800b4d6:	1c51      	adds	r1, r2, #1
 800b4d8:	9119      	str	r1, [sp, #100]	@ 0x64
 800b4da:	7852      	ldrb	r2, [r2, #1]
 800b4dc:	2a00      	cmp	r2, #0
 800b4de:	d1c5      	bne.n	800b46c <_strtod_l+0x34>
 800b4e0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b4e2:	9419      	str	r4, [sp, #100]	@ 0x64
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	f040 8570 	bne.w	800bfca <_strtod_l+0xb92>
 800b4ea:	4652      	mov	r2, sl
 800b4ec:	465b      	mov	r3, fp
 800b4ee:	e7e5      	b.n	800b4bc <_strtod_l+0x84>
 800b4f0:	2100      	movs	r1, #0
 800b4f2:	e7ef      	b.n	800b4d4 <_strtod_l+0x9c>
 800b4f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b4f6:	b13a      	cbz	r2, 800b508 <_strtod_l+0xd0>
 800b4f8:	2135      	movs	r1, #53	@ 0x35
 800b4fa:	a81c      	add	r0, sp, #112	@ 0x70
 800b4fc:	f7ff ff3a 	bl	800b374 <__copybits>
 800b500:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b502:	9805      	ldr	r0, [sp, #20]
 800b504:	f7ff fb10 	bl	800ab28 <_Bfree>
 800b508:	3e01      	subs	r6, #1
 800b50a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b50c:	2e04      	cmp	r6, #4
 800b50e:	d806      	bhi.n	800b51e <_strtod_l+0xe6>
 800b510:	e8df f006 	tbb	[pc, r6]
 800b514:	201d0314 	.word	0x201d0314
 800b518:	14          	.byte	0x14
 800b519:	00          	.byte	0x00
 800b51a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b51e:	05e1      	lsls	r1, r4, #23
 800b520:	bf48      	it	mi
 800b522:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b526:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b52a:	0d1b      	lsrs	r3, r3, #20
 800b52c:	051b      	lsls	r3, r3, #20
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d1bb      	bne.n	800b4aa <_strtod_l+0x72>
 800b532:	f7fe fb1f 	bl	8009b74 <__errno>
 800b536:	2322      	movs	r3, #34	@ 0x22
 800b538:	6003      	str	r3, [r0, #0]
 800b53a:	e7b6      	b.n	800b4aa <_strtod_l+0x72>
 800b53c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b540:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b544:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b548:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b54c:	e7e7      	b.n	800b51e <_strtod_l+0xe6>
 800b54e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800b6d0 <_strtod_l+0x298>
 800b552:	e7e4      	b.n	800b51e <_strtod_l+0xe6>
 800b554:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b558:	f04f 3aff 	mov.w	sl, #4294967295
 800b55c:	e7df      	b.n	800b51e <_strtod_l+0xe6>
 800b55e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b560:	1c5a      	adds	r2, r3, #1
 800b562:	9219      	str	r2, [sp, #100]	@ 0x64
 800b564:	785b      	ldrb	r3, [r3, #1]
 800b566:	2b30      	cmp	r3, #48	@ 0x30
 800b568:	d0f9      	beq.n	800b55e <_strtod_l+0x126>
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d09d      	beq.n	800b4aa <_strtod_l+0x72>
 800b56e:	2301      	movs	r3, #1
 800b570:	2700      	movs	r7, #0
 800b572:	9308      	str	r3, [sp, #32]
 800b574:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b576:	930c      	str	r3, [sp, #48]	@ 0x30
 800b578:	970b      	str	r7, [sp, #44]	@ 0x2c
 800b57a:	46b9      	mov	r9, r7
 800b57c:	220a      	movs	r2, #10
 800b57e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b580:	7805      	ldrb	r5, [r0, #0]
 800b582:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b586:	b2d9      	uxtb	r1, r3
 800b588:	2909      	cmp	r1, #9
 800b58a:	d928      	bls.n	800b5de <_strtod_l+0x1a6>
 800b58c:	494f      	ldr	r1, [pc, #316]	@ (800b6cc <_strtod_l+0x294>)
 800b58e:	2201      	movs	r2, #1
 800b590:	f000 ffd6 	bl	800c540 <strncmp>
 800b594:	2800      	cmp	r0, #0
 800b596:	d032      	beq.n	800b5fe <_strtod_l+0x1c6>
 800b598:	2000      	movs	r0, #0
 800b59a:	462a      	mov	r2, r5
 800b59c:	900a      	str	r0, [sp, #40]	@ 0x28
 800b59e:	464d      	mov	r5, r9
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	2a65      	cmp	r2, #101	@ 0x65
 800b5a4:	d001      	beq.n	800b5aa <_strtod_l+0x172>
 800b5a6:	2a45      	cmp	r2, #69	@ 0x45
 800b5a8:	d114      	bne.n	800b5d4 <_strtod_l+0x19c>
 800b5aa:	b91d      	cbnz	r5, 800b5b4 <_strtod_l+0x17c>
 800b5ac:	9a08      	ldr	r2, [sp, #32]
 800b5ae:	4302      	orrs	r2, r0
 800b5b0:	d096      	beq.n	800b4e0 <_strtod_l+0xa8>
 800b5b2:	2500      	movs	r5, #0
 800b5b4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b5b6:	1c62      	adds	r2, r4, #1
 800b5b8:	9219      	str	r2, [sp, #100]	@ 0x64
 800b5ba:	7862      	ldrb	r2, [r4, #1]
 800b5bc:	2a2b      	cmp	r2, #43	@ 0x2b
 800b5be:	d07a      	beq.n	800b6b6 <_strtod_l+0x27e>
 800b5c0:	2a2d      	cmp	r2, #45	@ 0x2d
 800b5c2:	d07e      	beq.n	800b6c2 <_strtod_l+0x28a>
 800b5c4:	f04f 0c00 	mov.w	ip, #0
 800b5c8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b5cc:	2909      	cmp	r1, #9
 800b5ce:	f240 8085 	bls.w	800b6dc <_strtod_l+0x2a4>
 800b5d2:	9419      	str	r4, [sp, #100]	@ 0x64
 800b5d4:	f04f 0800 	mov.w	r8, #0
 800b5d8:	e0a5      	b.n	800b726 <_strtod_l+0x2ee>
 800b5da:	2300      	movs	r3, #0
 800b5dc:	e7c8      	b.n	800b570 <_strtod_l+0x138>
 800b5de:	f1b9 0f08 	cmp.w	r9, #8
 800b5e2:	bfd8      	it	le
 800b5e4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800b5e6:	f100 0001 	add.w	r0, r0, #1
 800b5ea:	bfda      	itte	le
 800b5ec:	fb02 3301 	mlale	r3, r2, r1, r3
 800b5f0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800b5f2:	fb02 3707 	mlagt	r7, r2, r7, r3
 800b5f6:	f109 0901 	add.w	r9, r9, #1
 800b5fa:	9019      	str	r0, [sp, #100]	@ 0x64
 800b5fc:	e7bf      	b.n	800b57e <_strtod_l+0x146>
 800b5fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b600:	1c5a      	adds	r2, r3, #1
 800b602:	9219      	str	r2, [sp, #100]	@ 0x64
 800b604:	785a      	ldrb	r2, [r3, #1]
 800b606:	f1b9 0f00 	cmp.w	r9, #0
 800b60a:	d03b      	beq.n	800b684 <_strtod_l+0x24c>
 800b60c:	900a      	str	r0, [sp, #40]	@ 0x28
 800b60e:	464d      	mov	r5, r9
 800b610:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b614:	2b09      	cmp	r3, #9
 800b616:	d912      	bls.n	800b63e <_strtod_l+0x206>
 800b618:	2301      	movs	r3, #1
 800b61a:	e7c2      	b.n	800b5a2 <_strtod_l+0x16a>
 800b61c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b61e:	1c5a      	adds	r2, r3, #1
 800b620:	9219      	str	r2, [sp, #100]	@ 0x64
 800b622:	785a      	ldrb	r2, [r3, #1]
 800b624:	3001      	adds	r0, #1
 800b626:	2a30      	cmp	r2, #48	@ 0x30
 800b628:	d0f8      	beq.n	800b61c <_strtod_l+0x1e4>
 800b62a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b62e:	2b08      	cmp	r3, #8
 800b630:	f200 84d2 	bhi.w	800bfd8 <_strtod_l+0xba0>
 800b634:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b636:	900a      	str	r0, [sp, #40]	@ 0x28
 800b638:	2000      	movs	r0, #0
 800b63a:	930c      	str	r3, [sp, #48]	@ 0x30
 800b63c:	4605      	mov	r5, r0
 800b63e:	3a30      	subs	r2, #48	@ 0x30
 800b640:	f100 0301 	add.w	r3, r0, #1
 800b644:	d018      	beq.n	800b678 <_strtod_l+0x240>
 800b646:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b648:	4419      	add	r1, r3
 800b64a:	910a      	str	r1, [sp, #40]	@ 0x28
 800b64c:	462e      	mov	r6, r5
 800b64e:	f04f 0e0a 	mov.w	lr, #10
 800b652:	1c71      	adds	r1, r6, #1
 800b654:	eba1 0c05 	sub.w	ip, r1, r5
 800b658:	4563      	cmp	r3, ip
 800b65a:	dc15      	bgt.n	800b688 <_strtod_l+0x250>
 800b65c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800b660:	182b      	adds	r3, r5, r0
 800b662:	2b08      	cmp	r3, #8
 800b664:	f105 0501 	add.w	r5, r5, #1
 800b668:	4405      	add	r5, r0
 800b66a:	dc1a      	bgt.n	800b6a2 <_strtod_l+0x26a>
 800b66c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b66e:	230a      	movs	r3, #10
 800b670:	fb03 2301 	mla	r3, r3, r1, r2
 800b674:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b676:	2300      	movs	r3, #0
 800b678:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b67a:	1c51      	adds	r1, r2, #1
 800b67c:	9119      	str	r1, [sp, #100]	@ 0x64
 800b67e:	7852      	ldrb	r2, [r2, #1]
 800b680:	4618      	mov	r0, r3
 800b682:	e7c5      	b.n	800b610 <_strtod_l+0x1d8>
 800b684:	4648      	mov	r0, r9
 800b686:	e7ce      	b.n	800b626 <_strtod_l+0x1ee>
 800b688:	2e08      	cmp	r6, #8
 800b68a:	dc05      	bgt.n	800b698 <_strtod_l+0x260>
 800b68c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b68e:	fb0e f606 	mul.w	r6, lr, r6
 800b692:	960b      	str	r6, [sp, #44]	@ 0x2c
 800b694:	460e      	mov	r6, r1
 800b696:	e7dc      	b.n	800b652 <_strtod_l+0x21a>
 800b698:	2910      	cmp	r1, #16
 800b69a:	bfd8      	it	le
 800b69c:	fb0e f707 	mulle.w	r7, lr, r7
 800b6a0:	e7f8      	b.n	800b694 <_strtod_l+0x25c>
 800b6a2:	2b0f      	cmp	r3, #15
 800b6a4:	bfdc      	itt	le
 800b6a6:	230a      	movle	r3, #10
 800b6a8:	fb03 2707 	mlale	r7, r3, r7, r2
 800b6ac:	e7e3      	b.n	800b676 <_strtod_l+0x23e>
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	930a      	str	r3, [sp, #40]	@ 0x28
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	e77a      	b.n	800b5ac <_strtod_l+0x174>
 800b6b6:	f04f 0c00 	mov.w	ip, #0
 800b6ba:	1ca2      	adds	r2, r4, #2
 800b6bc:	9219      	str	r2, [sp, #100]	@ 0x64
 800b6be:	78a2      	ldrb	r2, [r4, #2]
 800b6c0:	e782      	b.n	800b5c8 <_strtod_l+0x190>
 800b6c2:	f04f 0c01 	mov.w	ip, #1
 800b6c6:	e7f8      	b.n	800b6ba <_strtod_l+0x282>
 800b6c8:	0800d654 	.word	0x0800d654
 800b6cc:	0800d487 	.word	0x0800d487
 800b6d0:	7ff00000 	.word	0x7ff00000
 800b6d4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b6d6:	1c51      	adds	r1, r2, #1
 800b6d8:	9119      	str	r1, [sp, #100]	@ 0x64
 800b6da:	7852      	ldrb	r2, [r2, #1]
 800b6dc:	2a30      	cmp	r2, #48	@ 0x30
 800b6de:	d0f9      	beq.n	800b6d4 <_strtod_l+0x29c>
 800b6e0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b6e4:	2908      	cmp	r1, #8
 800b6e6:	f63f af75 	bhi.w	800b5d4 <_strtod_l+0x19c>
 800b6ea:	3a30      	subs	r2, #48	@ 0x30
 800b6ec:	9209      	str	r2, [sp, #36]	@ 0x24
 800b6ee:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b6f0:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b6f2:	f04f 080a 	mov.w	r8, #10
 800b6f6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b6f8:	1c56      	adds	r6, r2, #1
 800b6fa:	9619      	str	r6, [sp, #100]	@ 0x64
 800b6fc:	7852      	ldrb	r2, [r2, #1]
 800b6fe:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b702:	f1be 0f09 	cmp.w	lr, #9
 800b706:	d939      	bls.n	800b77c <_strtod_l+0x344>
 800b708:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b70a:	1a76      	subs	r6, r6, r1
 800b70c:	2e08      	cmp	r6, #8
 800b70e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b712:	dc03      	bgt.n	800b71c <_strtod_l+0x2e4>
 800b714:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b716:	4588      	cmp	r8, r1
 800b718:	bfa8      	it	ge
 800b71a:	4688      	movge	r8, r1
 800b71c:	f1bc 0f00 	cmp.w	ip, #0
 800b720:	d001      	beq.n	800b726 <_strtod_l+0x2ee>
 800b722:	f1c8 0800 	rsb	r8, r8, #0
 800b726:	2d00      	cmp	r5, #0
 800b728:	d14e      	bne.n	800b7c8 <_strtod_l+0x390>
 800b72a:	9908      	ldr	r1, [sp, #32]
 800b72c:	4308      	orrs	r0, r1
 800b72e:	f47f aebc 	bne.w	800b4aa <_strtod_l+0x72>
 800b732:	2b00      	cmp	r3, #0
 800b734:	f47f aed4 	bne.w	800b4e0 <_strtod_l+0xa8>
 800b738:	2a69      	cmp	r2, #105	@ 0x69
 800b73a:	d028      	beq.n	800b78e <_strtod_l+0x356>
 800b73c:	dc25      	bgt.n	800b78a <_strtod_l+0x352>
 800b73e:	2a49      	cmp	r2, #73	@ 0x49
 800b740:	d025      	beq.n	800b78e <_strtod_l+0x356>
 800b742:	2a4e      	cmp	r2, #78	@ 0x4e
 800b744:	f47f aecc 	bne.w	800b4e0 <_strtod_l+0xa8>
 800b748:	499a      	ldr	r1, [pc, #616]	@ (800b9b4 <_strtod_l+0x57c>)
 800b74a:	a819      	add	r0, sp, #100	@ 0x64
 800b74c:	f001 f9e0 	bl	800cb10 <__match>
 800b750:	2800      	cmp	r0, #0
 800b752:	f43f aec5 	beq.w	800b4e0 <_strtod_l+0xa8>
 800b756:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b758:	781b      	ldrb	r3, [r3, #0]
 800b75a:	2b28      	cmp	r3, #40	@ 0x28
 800b75c:	d12e      	bne.n	800b7bc <_strtod_l+0x384>
 800b75e:	4996      	ldr	r1, [pc, #600]	@ (800b9b8 <_strtod_l+0x580>)
 800b760:	aa1c      	add	r2, sp, #112	@ 0x70
 800b762:	a819      	add	r0, sp, #100	@ 0x64
 800b764:	f001 f9e8 	bl	800cb38 <__hexnan>
 800b768:	2805      	cmp	r0, #5
 800b76a:	d127      	bne.n	800b7bc <_strtod_l+0x384>
 800b76c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b76e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b772:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b776:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b77a:	e696      	b.n	800b4aa <_strtod_l+0x72>
 800b77c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b77e:	fb08 2101 	mla	r1, r8, r1, r2
 800b782:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b786:	9209      	str	r2, [sp, #36]	@ 0x24
 800b788:	e7b5      	b.n	800b6f6 <_strtod_l+0x2be>
 800b78a:	2a6e      	cmp	r2, #110	@ 0x6e
 800b78c:	e7da      	b.n	800b744 <_strtod_l+0x30c>
 800b78e:	498b      	ldr	r1, [pc, #556]	@ (800b9bc <_strtod_l+0x584>)
 800b790:	a819      	add	r0, sp, #100	@ 0x64
 800b792:	f001 f9bd 	bl	800cb10 <__match>
 800b796:	2800      	cmp	r0, #0
 800b798:	f43f aea2 	beq.w	800b4e0 <_strtod_l+0xa8>
 800b79c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b79e:	4988      	ldr	r1, [pc, #544]	@ (800b9c0 <_strtod_l+0x588>)
 800b7a0:	3b01      	subs	r3, #1
 800b7a2:	a819      	add	r0, sp, #100	@ 0x64
 800b7a4:	9319      	str	r3, [sp, #100]	@ 0x64
 800b7a6:	f001 f9b3 	bl	800cb10 <__match>
 800b7aa:	b910      	cbnz	r0, 800b7b2 <_strtod_l+0x37a>
 800b7ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b7ae:	3301      	adds	r3, #1
 800b7b0:	9319      	str	r3, [sp, #100]	@ 0x64
 800b7b2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800b9d0 <_strtod_l+0x598>
 800b7b6:	f04f 0a00 	mov.w	sl, #0
 800b7ba:	e676      	b.n	800b4aa <_strtod_l+0x72>
 800b7bc:	4881      	ldr	r0, [pc, #516]	@ (800b9c4 <_strtod_l+0x58c>)
 800b7be:	f000 fee3 	bl	800c588 <nan>
 800b7c2:	ec5b ab10 	vmov	sl, fp, d0
 800b7c6:	e670      	b.n	800b4aa <_strtod_l+0x72>
 800b7c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b7ca:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800b7cc:	eba8 0303 	sub.w	r3, r8, r3
 800b7d0:	f1b9 0f00 	cmp.w	r9, #0
 800b7d4:	bf08      	it	eq
 800b7d6:	46a9      	moveq	r9, r5
 800b7d8:	2d10      	cmp	r5, #16
 800b7da:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7dc:	462c      	mov	r4, r5
 800b7de:	bfa8      	it	ge
 800b7e0:	2410      	movge	r4, #16
 800b7e2:	f7f4 feaf 	bl	8000544 <__aeabi_ui2d>
 800b7e6:	2d09      	cmp	r5, #9
 800b7e8:	4682      	mov	sl, r0
 800b7ea:	468b      	mov	fp, r1
 800b7ec:	dc13      	bgt.n	800b816 <_strtod_l+0x3de>
 800b7ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	f43f ae5a 	beq.w	800b4aa <_strtod_l+0x72>
 800b7f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7f8:	dd78      	ble.n	800b8ec <_strtod_l+0x4b4>
 800b7fa:	2b16      	cmp	r3, #22
 800b7fc:	dc5f      	bgt.n	800b8be <_strtod_l+0x486>
 800b7fe:	4972      	ldr	r1, [pc, #456]	@ (800b9c8 <_strtod_l+0x590>)
 800b800:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b804:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b808:	4652      	mov	r2, sl
 800b80a:	465b      	mov	r3, fp
 800b80c:	f7f4 ff14 	bl	8000638 <__aeabi_dmul>
 800b810:	4682      	mov	sl, r0
 800b812:	468b      	mov	fp, r1
 800b814:	e649      	b.n	800b4aa <_strtod_l+0x72>
 800b816:	4b6c      	ldr	r3, [pc, #432]	@ (800b9c8 <_strtod_l+0x590>)
 800b818:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b81c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b820:	f7f4 ff0a 	bl	8000638 <__aeabi_dmul>
 800b824:	4682      	mov	sl, r0
 800b826:	4638      	mov	r0, r7
 800b828:	468b      	mov	fp, r1
 800b82a:	f7f4 fe8b 	bl	8000544 <__aeabi_ui2d>
 800b82e:	4602      	mov	r2, r0
 800b830:	460b      	mov	r3, r1
 800b832:	4650      	mov	r0, sl
 800b834:	4659      	mov	r1, fp
 800b836:	f7f4 fd49 	bl	80002cc <__adddf3>
 800b83a:	2d0f      	cmp	r5, #15
 800b83c:	4682      	mov	sl, r0
 800b83e:	468b      	mov	fp, r1
 800b840:	ddd5      	ble.n	800b7ee <_strtod_l+0x3b6>
 800b842:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b844:	1b2c      	subs	r4, r5, r4
 800b846:	441c      	add	r4, r3
 800b848:	2c00      	cmp	r4, #0
 800b84a:	f340 8093 	ble.w	800b974 <_strtod_l+0x53c>
 800b84e:	f014 030f 	ands.w	r3, r4, #15
 800b852:	d00a      	beq.n	800b86a <_strtod_l+0x432>
 800b854:	495c      	ldr	r1, [pc, #368]	@ (800b9c8 <_strtod_l+0x590>)
 800b856:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b85a:	4652      	mov	r2, sl
 800b85c:	465b      	mov	r3, fp
 800b85e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b862:	f7f4 fee9 	bl	8000638 <__aeabi_dmul>
 800b866:	4682      	mov	sl, r0
 800b868:	468b      	mov	fp, r1
 800b86a:	f034 040f 	bics.w	r4, r4, #15
 800b86e:	d073      	beq.n	800b958 <_strtod_l+0x520>
 800b870:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b874:	dd49      	ble.n	800b90a <_strtod_l+0x4d2>
 800b876:	2400      	movs	r4, #0
 800b878:	46a0      	mov	r8, r4
 800b87a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b87c:	46a1      	mov	r9, r4
 800b87e:	9a05      	ldr	r2, [sp, #20]
 800b880:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800b9d0 <_strtod_l+0x598>
 800b884:	2322      	movs	r3, #34	@ 0x22
 800b886:	6013      	str	r3, [r2, #0]
 800b888:	f04f 0a00 	mov.w	sl, #0
 800b88c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b88e:	2b00      	cmp	r3, #0
 800b890:	f43f ae0b 	beq.w	800b4aa <_strtod_l+0x72>
 800b894:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b896:	9805      	ldr	r0, [sp, #20]
 800b898:	f7ff f946 	bl	800ab28 <_Bfree>
 800b89c:	9805      	ldr	r0, [sp, #20]
 800b89e:	4649      	mov	r1, r9
 800b8a0:	f7ff f942 	bl	800ab28 <_Bfree>
 800b8a4:	9805      	ldr	r0, [sp, #20]
 800b8a6:	4641      	mov	r1, r8
 800b8a8:	f7ff f93e 	bl	800ab28 <_Bfree>
 800b8ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b8ae:	9805      	ldr	r0, [sp, #20]
 800b8b0:	f7ff f93a 	bl	800ab28 <_Bfree>
 800b8b4:	9805      	ldr	r0, [sp, #20]
 800b8b6:	4621      	mov	r1, r4
 800b8b8:	f7ff f936 	bl	800ab28 <_Bfree>
 800b8bc:	e5f5      	b.n	800b4aa <_strtod_l+0x72>
 800b8be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b8c0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b8c4:	4293      	cmp	r3, r2
 800b8c6:	dbbc      	blt.n	800b842 <_strtod_l+0x40a>
 800b8c8:	4c3f      	ldr	r4, [pc, #252]	@ (800b9c8 <_strtod_l+0x590>)
 800b8ca:	f1c5 050f 	rsb	r5, r5, #15
 800b8ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b8d2:	4652      	mov	r2, sl
 800b8d4:	465b      	mov	r3, fp
 800b8d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8da:	f7f4 fead 	bl	8000638 <__aeabi_dmul>
 800b8de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8e0:	1b5d      	subs	r5, r3, r5
 800b8e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b8e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b8ea:	e78f      	b.n	800b80c <_strtod_l+0x3d4>
 800b8ec:	3316      	adds	r3, #22
 800b8ee:	dba8      	blt.n	800b842 <_strtod_l+0x40a>
 800b8f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8f2:	eba3 0808 	sub.w	r8, r3, r8
 800b8f6:	4b34      	ldr	r3, [pc, #208]	@ (800b9c8 <_strtod_l+0x590>)
 800b8f8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b8fc:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b900:	4650      	mov	r0, sl
 800b902:	4659      	mov	r1, fp
 800b904:	f7f4 ffc2 	bl	800088c <__aeabi_ddiv>
 800b908:	e782      	b.n	800b810 <_strtod_l+0x3d8>
 800b90a:	2300      	movs	r3, #0
 800b90c:	4f2f      	ldr	r7, [pc, #188]	@ (800b9cc <_strtod_l+0x594>)
 800b90e:	1124      	asrs	r4, r4, #4
 800b910:	4650      	mov	r0, sl
 800b912:	4659      	mov	r1, fp
 800b914:	461e      	mov	r6, r3
 800b916:	2c01      	cmp	r4, #1
 800b918:	dc21      	bgt.n	800b95e <_strtod_l+0x526>
 800b91a:	b10b      	cbz	r3, 800b920 <_strtod_l+0x4e8>
 800b91c:	4682      	mov	sl, r0
 800b91e:	468b      	mov	fp, r1
 800b920:	492a      	ldr	r1, [pc, #168]	@ (800b9cc <_strtod_l+0x594>)
 800b922:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b926:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b92a:	4652      	mov	r2, sl
 800b92c:	465b      	mov	r3, fp
 800b92e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b932:	f7f4 fe81 	bl	8000638 <__aeabi_dmul>
 800b936:	4b26      	ldr	r3, [pc, #152]	@ (800b9d0 <_strtod_l+0x598>)
 800b938:	460a      	mov	r2, r1
 800b93a:	400b      	ands	r3, r1
 800b93c:	4925      	ldr	r1, [pc, #148]	@ (800b9d4 <_strtod_l+0x59c>)
 800b93e:	428b      	cmp	r3, r1
 800b940:	4682      	mov	sl, r0
 800b942:	d898      	bhi.n	800b876 <_strtod_l+0x43e>
 800b944:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b948:	428b      	cmp	r3, r1
 800b94a:	bf86      	itte	hi
 800b94c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800b9d8 <_strtod_l+0x5a0>
 800b950:	f04f 3aff 	movhi.w	sl, #4294967295
 800b954:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b958:	2300      	movs	r3, #0
 800b95a:	9308      	str	r3, [sp, #32]
 800b95c:	e076      	b.n	800ba4c <_strtod_l+0x614>
 800b95e:	07e2      	lsls	r2, r4, #31
 800b960:	d504      	bpl.n	800b96c <_strtod_l+0x534>
 800b962:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b966:	f7f4 fe67 	bl	8000638 <__aeabi_dmul>
 800b96a:	2301      	movs	r3, #1
 800b96c:	3601      	adds	r6, #1
 800b96e:	1064      	asrs	r4, r4, #1
 800b970:	3708      	adds	r7, #8
 800b972:	e7d0      	b.n	800b916 <_strtod_l+0x4de>
 800b974:	d0f0      	beq.n	800b958 <_strtod_l+0x520>
 800b976:	4264      	negs	r4, r4
 800b978:	f014 020f 	ands.w	r2, r4, #15
 800b97c:	d00a      	beq.n	800b994 <_strtod_l+0x55c>
 800b97e:	4b12      	ldr	r3, [pc, #72]	@ (800b9c8 <_strtod_l+0x590>)
 800b980:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b984:	4650      	mov	r0, sl
 800b986:	4659      	mov	r1, fp
 800b988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b98c:	f7f4 ff7e 	bl	800088c <__aeabi_ddiv>
 800b990:	4682      	mov	sl, r0
 800b992:	468b      	mov	fp, r1
 800b994:	1124      	asrs	r4, r4, #4
 800b996:	d0df      	beq.n	800b958 <_strtod_l+0x520>
 800b998:	2c1f      	cmp	r4, #31
 800b99a:	dd1f      	ble.n	800b9dc <_strtod_l+0x5a4>
 800b99c:	2400      	movs	r4, #0
 800b99e:	46a0      	mov	r8, r4
 800b9a0:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b9a2:	46a1      	mov	r9, r4
 800b9a4:	9a05      	ldr	r2, [sp, #20]
 800b9a6:	2322      	movs	r3, #34	@ 0x22
 800b9a8:	f04f 0a00 	mov.w	sl, #0
 800b9ac:	f04f 0b00 	mov.w	fp, #0
 800b9b0:	6013      	str	r3, [r2, #0]
 800b9b2:	e76b      	b.n	800b88c <_strtod_l+0x454>
 800b9b4:	0800d375 	.word	0x0800d375
 800b9b8:	0800d640 	.word	0x0800d640
 800b9bc:	0800d36d 	.word	0x0800d36d
 800b9c0:	0800d3a4 	.word	0x0800d3a4
 800b9c4:	0800d4dd 	.word	0x0800d4dd
 800b9c8:	0800d578 	.word	0x0800d578
 800b9cc:	0800d550 	.word	0x0800d550
 800b9d0:	7ff00000 	.word	0x7ff00000
 800b9d4:	7ca00000 	.word	0x7ca00000
 800b9d8:	7fefffff 	.word	0x7fefffff
 800b9dc:	f014 0310 	ands.w	r3, r4, #16
 800b9e0:	bf18      	it	ne
 800b9e2:	236a      	movne	r3, #106	@ 0x6a
 800b9e4:	4ea9      	ldr	r6, [pc, #676]	@ (800bc8c <_strtod_l+0x854>)
 800b9e6:	9308      	str	r3, [sp, #32]
 800b9e8:	4650      	mov	r0, sl
 800b9ea:	4659      	mov	r1, fp
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	07e7      	lsls	r7, r4, #31
 800b9f0:	d504      	bpl.n	800b9fc <_strtod_l+0x5c4>
 800b9f2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b9f6:	f7f4 fe1f 	bl	8000638 <__aeabi_dmul>
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	1064      	asrs	r4, r4, #1
 800b9fe:	f106 0608 	add.w	r6, r6, #8
 800ba02:	d1f4      	bne.n	800b9ee <_strtod_l+0x5b6>
 800ba04:	b10b      	cbz	r3, 800ba0a <_strtod_l+0x5d2>
 800ba06:	4682      	mov	sl, r0
 800ba08:	468b      	mov	fp, r1
 800ba0a:	9b08      	ldr	r3, [sp, #32]
 800ba0c:	b1b3      	cbz	r3, 800ba3c <_strtod_l+0x604>
 800ba0e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ba12:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	4659      	mov	r1, fp
 800ba1a:	dd0f      	ble.n	800ba3c <_strtod_l+0x604>
 800ba1c:	2b1f      	cmp	r3, #31
 800ba1e:	dd56      	ble.n	800bace <_strtod_l+0x696>
 800ba20:	2b34      	cmp	r3, #52	@ 0x34
 800ba22:	bfde      	ittt	le
 800ba24:	f04f 33ff 	movle.w	r3, #4294967295
 800ba28:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ba2c:	4093      	lslle	r3, r2
 800ba2e:	f04f 0a00 	mov.w	sl, #0
 800ba32:	bfcc      	ite	gt
 800ba34:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ba38:	ea03 0b01 	andle.w	fp, r3, r1
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	2300      	movs	r3, #0
 800ba40:	4650      	mov	r0, sl
 800ba42:	4659      	mov	r1, fp
 800ba44:	f7f5 f860 	bl	8000b08 <__aeabi_dcmpeq>
 800ba48:	2800      	cmp	r0, #0
 800ba4a:	d1a7      	bne.n	800b99c <_strtod_l+0x564>
 800ba4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba4e:	9300      	str	r3, [sp, #0]
 800ba50:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ba52:	9805      	ldr	r0, [sp, #20]
 800ba54:	462b      	mov	r3, r5
 800ba56:	464a      	mov	r2, r9
 800ba58:	f7ff f8ce 	bl	800abf8 <__s2b>
 800ba5c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800ba5e:	2800      	cmp	r0, #0
 800ba60:	f43f af09 	beq.w	800b876 <_strtod_l+0x43e>
 800ba64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba68:	2a00      	cmp	r2, #0
 800ba6a:	eba3 0308 	sub.w	r3, r3, r8
 800ba6e:	bfa8      	it	ge
 800ba70:	2300      	movge	r3, #0
 800ba72:	9312      	str	r3, [sp, #72]	@ 0x48
 800ba74:	2400      	movs	r4, #0
 800ba76:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ba7a:	9316      	str	r3, [sp, #88]	@ 0x58
 800ba7c:	46a0      	mov	r8, r4
 800ba7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba80:	9805      	ldr	r0, [sp, #20]
 800ba82:	6859      	ldr	r1, [r3, #4]
 800ba84:	f7ff f810 	bl	800aaa8 <_Balloc>
 800ba88:	4681      	mov	r9, r0
 800ba8a:	2800      	cmp	r0, #0
 800ba8c:	f43f aef7 	beq.w	800b87e <_strtod_l+0x446>
 800ba90:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba92:	691a      	ldr	r2, [r3, #16]
 800ba94:	3202      	adds	r2, #2
 800ba96:	f103 010c 	add.w	r1, r3, #12
 800ba9a:	0092      	lsls	r2, r2, #2
 800ba9c:	300c      	adds	r0, #12
 800ba9e:	f7fe f896 	bl	8009bce <memcpy>
 800baa2:	ec4b ab10 	vmov	d0, sl, fp
 800baa6:	9805      	ldr	r0, [sp, #20]
 800baa8:	aa1c      	add	r2, sp, #112	@ 0x70
 800baaa:	a91b      	add	r1, sp, #108	@ 0x6c
 800baac:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800bab0:	f7ff fbd6 	bl	800b260 <__d2b>
 800bab4:	901a      	str	r0, [sp, #104]	@ 0x68
 800bab6:	2800      	cmp	r0, #0
 800bab8:	f43f aee1 	beq.w	800b87e <_strtod_l+0x446>
 800babc:	9805      	ldr	r0, [sp, #20]
 800babe:	2101      	movs	r1, #1
 800bac0:	f7ff f930 	bl	800ad24 <__i2b>
 800bac4:	4680      	mov	r8, r0
 800bac6:	b948      	cbnz	r0, 800badc <_strtod_l+0x6a4>
 800bac8:	f04f 0800 	mov.w	r8, #0
 800bacc:	e6d7      	b.n	800b87e <_strtod_l+0x446>
 800bace:	f04f 32ff 	mov.w	r2, #4294967295
 800bad2:	fa02 f303 	lsl.w	r3, r2, r3
 800bad6:	ea03 0a0a 	and.w	sl, r3, sl
 800bada:	e7af      	b.n	800ba3c <_strtod_l+0x604>
 800badc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800bade:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800bae0:	2d00      	cmp	r5, #0
 800bae2:	bfab      	itete	ge
 800bae4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800bae6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800bae8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800baea:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800baec:	bfac      	ite	ge
 800baee:	18ef      	addge	r7, r5, r3
 800baf0:	1b5e      	sublt	r6, r3, r5
 800baf2:	9b08      	ldr	r3, [sp, #32]
 800baf4:	1aed      	subs	r5, r5, r3
 800baf6:	4415      	add	r5, r2
 800baf8:	4b65      	ldr	r3, [pc, #404]	@ (800bc90 <_strtod_l+0x858>)
 800bafa:	3d01      	subs	r5, #1
 800bafc:	429d      	cmp	r5, r3
 800bafe:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bb02:	da50      	bge.n	800bba6 <_strtod_l+0x76e>
 800bb04:	1b5b      	subs	r3, r3, r5
 800bb06:	2b1f      	cmp	r3, #31
 800bb08:	eba2 0203 	sub.w	r2, r2, r3
 800bb0c:	f04f 0101 	mov.w	r1, #1
 800bb10:	dc3d      	bgt.n	800bb8e <_strtod_l+0x756>
 800bb12:	fa01 f303 	lsl.w	r3, r1, r3
 800bb16:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bb18:	2300      	movs	r3, #0
 800bb1a:	9310      	str	r3, [sp, #64]	@ 0x40
 800bb1c:	18bd      	adds	r5, r7, r2
 800bb1e:	9b08      	ldr	r3, [sp, #32]
 800bb20:	42af      	cmp	r7, r5
 800bb22:	4416      	add	r6, r2
 800bb24:	441e      	add	r6, r3
 800bb26:	463b      	mov	r3, r7
 800bb28:	bfa8      	it	ge
 800bb2a:	462b      	movge	r3, r5
 800bb2c:	42b3      	cmp	r3, r6
 800bb2e:	bfa8      	it	ge
 800bb30:	4633      	movge	r3, r6
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	bfc2      	ittt	gt
 800bb36:	1aed      	subgt	r5, r5, r3
 800bb38:	1af6      	subgt	r6, r6, r3
 800bb3a:	1aff      	subgt	r7, r7, r3
 800bb3c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	dd16      	ble.n	800bb70 <_strtod_l+0x738>
 800bb42:	4641      	mov	r1, r8
 800bb44:	9805      	ldr	r0, [sp, #20]
 800bb46:	461a      	mov	r2, r3
 800bb48:	f7ff f9a4 	bl	800ae94 <__pow5mult>
 800bb4c:	4680      	mov	r8, r0
 800bb4e:	2800      	cmp	r0, #0
 800bb50:	d0ba      	beq.n	800bac8 <_strtod_l+0x690>
 800bb52:	4601      	mov	r1, r0
 800bb54:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bb56:	9805      	ldr	r0, [sp, #20]
 800bb58:	f7ff f8fa 	bl	800ad50 <__multiply>
 800bb5c:	900a      	str	r0, [sp, #40]	@ 0x28
 800bb5e:	2800      	cmp	r0, #0
 800bb60:	f43f ae8d 	beq.w	800b87e <_strtod_l+0x446>
 800bb64:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bb66:	9805      	ldr	r0, [sp, #20]
 800bb68:	f7fe ffde 	bl	800ab28 <_Bfree>
 800bb6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb6e:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb70:	2d00      	cmp	r5, #0
 800bb72:	dc1d      	bgt.n	800bbb0 <_strtod_l+0x778>
 800bb74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	dd23      	ble.n	800bbc2 <_strtod_l+0x78a>
 800bb7a:	4649      	mov	r1, r9
 800bb7c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bb7e:	9805      	ldr	r0, [sp, #20]
 800bb80:	f7ff f988 	bl	800ae94 <__pow5mult>
 800bb84:	4681      	mov	r9, r0
 800bb86:	b9e0      	cbnz	r0, 800bbc2 <_strtod_l+0x78a>
 800bb88:	f04f 0900 	mov.w	r9, #0
 800bb8c:	e677      	b.n	800b87e <_strtod_l+0x446>
 800bb8e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800bb92:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800bb96:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800bb9a:	35e2      	adds	r5, #226	@ 0xe2
 800bb9c:	fa01 f305 	lsl.w	r3, r1, r5
 800bba0:	9310      	str	r3, [sp, #64]	@ 0x40
 800bba2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800bba4:	e7ba      	b.n	800bb1c <_strtod_l+0x6e4>
 800bba6:	2300      	movs	r3, #0
 800bba8:	9310      	str	r3, [sp, #64]	@ 0x40
 800bbaa:	2301      	movs	r3, #1
 800bbac:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bbae:	e7b5      	b.n	800bb1c <_strtod_l+0x6e4>
 800bbb0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bbb2:	9805      	ldr	r0, [sp, #20]
 800bbb4:	462a      	mov	r2, r5
 800bbb6:	f7ff f9c7 	bl	800af48 <__lshift>
 800bbba:	901a      	str	r0, [sp, #104]	@ 0x68
 800bbbc:	2800      	cmp	r0, #0
 800bbbe:	d1d9      	bne.n	800bb74 <_strtod_l+0x73c>
 800bbc0:	e65d      	b.n	800b87e <_strtod_l+0x446>
 800bbc2:	2e00      	cmp	r6, #0
 800bbc4:	dd07      	ble.n	800bbd6 <_strtod_l+0x79e>
 800bbc6:	4649      	mov	r1, r9
 800bbc8:	9805      	ldr	r0, [sp, #20]
 800bbca:	4632      	mov	r2, r6
 800bbcc:	f7ff f9bc 	bl	800af48 <__lshift>
 800bbd0:	4681      	mov	r9, r0
 800bbd2:	2800      	cmp	r0, #0
 800bbd4:	d0d8      	beq.n	800bb88 <_strtod_l+0x750>
 800bbd6:	2f00      	cmp	r7, #0
 800bbd8:	dd08      	ble.n	800bbec <_strtod_l+0x7b4>
 800bbda:	4641      	mov	r1, r8
 800bbdc:	9805      	ldr	r0, [sp, #20]
 800bbde:	463a      	mov	r2, r7
 800bbe0:	f7ff f9b2 	bl	800af48 <__lshift>
 800bbe4:	4680      	mov	r8, r0
 800bbe6:	2800      	cmp	r0, #0
 800bbe8:	f43f ae49 	beq.w	800b87e <_strtod_l+0x446>
 800bbec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bbee:	9805      	ldr	r0, [sp, #20]
 800bbf0:	464a      	mov	r2, r9
 800bbf2:	f7ff fa31 	bl	800b058 <__mdiff>
 800bbf6:	4604      	mov	r4, r0
 800bbf8:	2800      	cmp	r0, #0
 800bbfa:	f43f ae40 	beq.w	800b87e <_strtod_l+0x446>
 800bbfe:	68c3      	ldr	r3, [r0, #12]
 800bc00:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bc02:	2300      	movs	r3, #0
 800bc04:	60c3      	str	r3, [r0, #12]
 800bc06:	4641      	mov	r1, r8
 800bc08:	f7ff fa0a 	bl	800b020 <__mcmp>
 800bc0c:	2800      	cmp	r0, #0
 800bc0e:	da45      	bge.n	800bc9c <_strtod_l+0x864>
 800bc10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc12:	ea53 030a 	orrs.w	r3, r3, sl
 800bc16:	d16b      	bne.n	800bcf0 <_strtod_l+0x8b8>
 800bc18:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d167      	bne.n	800bcf0 <_strtod_l+0x8b8>
 800bc20:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bc24:	0d1b      	lsrs	r3, r3, #20
 800bc26:	051b      	lsls	r3, r3, #20
 800bc28:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bc2c:	d960      	bls.n	800bcf0 <_strtod_l+0x8b8>
 800bc2e:	6963      	ldr	r3, [r4, #20]
 800bc30:	b913      	cbnz	r3, 800bc38 <_strtod_l+0x800>
 800bc32:	6923      	ldr	r3, [r4, #16]
 800bc34:	2b01      	cmp	r3, #1
 800bc36:	dd5b      	ble.n	800bcf0 <_strtod_l+0x8b8>
 800bc38:	4621      	mov	r1, r4
 800bc3a:	2201      	movs	r2, #1
 800bc3c:	9805      	ldr	r0, [sp, #20]
 800bc3e:	f7ff f983 	bl	800af48 <__lshift>
 800bc42:	4641      	mov	r1, r8
 800bc44:	4604      	mov	r4, r0
 800bc46:	f7ff f9eb 	bl	800b020 <__mcmp>
 800bc4a:	2800      	cmp	r0, #0
 800bc4c:	dd50      	ble.n	800bcf0 <_strtod_l+0x8b8>
 800bc4e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bc52:	9a08      	ldr	r2, [sp, #32]
 800bc54:	0d1b      	lsrs	r3, r3, #20
 800bc56:	051b      	lsls	r3, r3, #20
 800bc58:	2a00      	cmp	r2, #0
 800bc5a:	d06a      	beq.n	800bd32 <_strtod_l+0x8fa>
 800bc5c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bc60:	d867      	bhi.n	800bd32 <_strtod_l+0x8fa>
 800bc62:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800bc66:	f67f ae9d 	bls.w	800b9a4 <_strtod_l+0x56c>
 800bc6a:	4b0a      	ldr	r3, [pc, #40]	@ (800bc94 <_strtod_l+0x85c>)
 800bc6c:	4650      	mov	r0, sl
 800bc6e:	4659      	mov	r1, fp
 800bc70:	2200      	movs	r2, #0
 800bc72:	f7f4 fce1 	bl	8000638 <__aeabi_dmul>
 800bc76:	4b08      	ldr	r3, [pc, #32]	@ (800bc98 <_strtod_l+0x860>)
 800bc78:	400b      	ands	r3, r1
 800bc7a:	4682      	mov	sl, r0
 800bc7c:	468b      	mov	fp, r1
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	f47f ae08 	bne.w	800b894 <_strtod_l+0x45c>
 800bc84:	9a05      	ldr	r2, [sp, #20]
 800bc86:	2322      	movs	r3, #34	@ 0x22
 800bc88:	6013      	str	r3, [r2, #0]
 800bc8a:	e603      	b.n	800b894 <_strtod_l+0x45c>
 800bc8c:	0800d668 	.word	0x0800d668
 800bc90:	fffffc02 	.word	0xfffffc02
 800bc94:	39500000 	.word	0x39500000
 800bc98:	7ff00000 	.word	0x7ff00000
 800bc9c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800bca0:	d165      	bne.n	800bd6e <_strtod_l+0x936>
 800bca2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bca4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bca8:	b35a      	cbz	r2, 800bd02 <_strtod_l+0x8ca>
 800bcaa:	4a9f      	ldr	r2, [pc, #636]	@ (800bf28 <_strtod_l+0xaf0>)
 800bcac:	4293      	cmp	r3, r2
 800bcae:	d12b      	bne.n	800bd08 <_strtod_l+0x8d0>
 800bcb0:	9b08      	ldr	r3, [sp, #32]
 800bcb2:	4651      	mov	r1, sl
 800bcb4:	b303      	cbz	r3, 800bcf8 <_strtod_l+0x8c0>
 800bcb6:	4b9d      	ldr	r3, [pc, #628]	@ (800bf2c <_strtod_l+0xaf4>)
 800bcb8:	465a      	mov	r2, fp
 800bcba:	4013      	ands	r3, r2
 800bcbc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800bcc0:	f04f 32ff 	mov.w	r2, #4294967295
 800bcc4:	d81b      	bhi.n	800bcfe <_strtod_l+0x8c6>
 800bcc6:	0d1b      	lsrs	r3, r3, #20
 800bcc8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bccc:	fa02 f303 	lsl.w	r3, r2, r3
 800bcd0:	4299      	cmp	r1, r3
 800bcd2:	d119      	bne.n	800bd08 <_strtod_l+0x8d0>
 800bcd4:	4b96      	ldr	r3, [pc, #600]	@ (800bf30 <_strtod_l+0xaf8>)
 800bcd6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bcd8:	429a      	cmp	r2, r3
 800bcda:	d102      	bne.n	800bce2 <_strtod_l+0x8aa>
 800bcdc:	3101      	adds	r1, #1
 800bcde:	f43f adce 	beq.w	800b87e <_strtod_l+0x446>
 800bce2:	4b92      	ldr	r3, [pc, #584]	@ (800bf2c <_strtod_l+0xaf4>)
 800bce4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bce6:	401a      	ands	r2, r3
 800bce8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800bcec:	f04f 0a00 	mov.w	sl, #0
 800bcf0:	9b08      	ldr	r3, [sp, #32]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d1b9      	bne.n	800bc6a <_strtod_l+0x832>
 800bcf6:	e5cd      	b.n	800b894 <_strtod_l+0x45c>
 800bcf8:	f04f 33ff 	mov.w	r3, #4294967295
 800bcfc:	e7e8      	b.n	800bcd0 <_strtod_l+0x898>
 800bcfe:	4613      	mov	r3, r2
 800bd00:	e7e6      	b.n	800bcd0 <_strtod_l+0x898>
 800bd02:	ea53 030a 	orrs.w	r3, r3, sl
 800bd06:	d0a2      	beq.n	800bc4e <_strtod_l+0x816>
 800bd08:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bd0a:	b1db      	cbz	r3, 800bd44 <_strtod_l+0x90c>
 800bd0c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bd0e:	4213      	tst	r3, r2
 800bd10:	d0ee      	beq.n	800bcf0 <_strtod_l+0x8b8>
 800bd12:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd14:	9a08      	ldr	r2, [sp, #32]
 800bd16:	4650      	mov	r0, sl
 800bd18:	4659      	mov	r1, fp
 800bd1a:	b1bb      	cbz	r3, 800bd4c <_strtod_l+0x914>
 800bd1c:	f7ff fb6e 	bl	800b3fc <sulp>
 800bd20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd24:	ec53 2b10 	vmov	r2, r3, d0
 800bd28:	f7f4 fad0 	bl	80002cc <__adddf3>
 800bd2c:	4682      	mov	sl, r0
 800bd2e:	468b      	mov	fp, r1
 800bd30:	e7de      	b.n	800bcf0 <_strtod_l+0x8b8>
 800bd32:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800bd36:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bd3a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bd3e:	f04f 3aff 	mov.w	sl, #4294967295
 800bd42:	e7d5      	b.n	800bcf0 <_strtod_l+0x8b8>
 800bd44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bd46:	ea13 0f0a 	tst.w	r3, sl
 800bd4a:	e7e1      	b.n	800bd10 <_strtod_l+0x8d8>
 800bd4c:	f7ff fb56 	bl	800b3fc <sulp>
 800bd50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd54:	ec53 2b10 	vmov	r2, r3, d0
 800bd58:	f7f4 fab6 	bl	80002c8 <__aeabi_dsub>
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	2300      	movs	r3, #0
 800bd60:	4682      	mov	sl, r0
 800bd62:	468b      	mov	fp, r1
 800bd64:	f7f4 fed0 	bl	8000b08 <__aeabi_dcmpeq>
 800bd68:	2800      	cmp	r0, #0
 800bd6a:	d0c1      	beq.n	800bcf0 <_strtod_l+0x8b8>
 800bd6c:	e61a      	b.n	800b9a4 <_strtod_l+0x56c>
 800bd6e:	4641      	mov	r1, r8
 800bd70:	4620      	mov	r0, r4
 800bd72:	f7ff facd 	bl	800b310 <__ratio>
 800bd76:	ec57 6b10 	vmov	r6, r7, d0
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bd80:	4630      	mov	r0, r6
 800bd82:	4639      	mov	r1, r7
 800bd84:	f7f4 fed4 	bl	8000b30 <__aeabi_dcmple>
 800bd88:	2800      	cmp	r0, #0
 800bd8a:	d06f      	beq.n	800be6c <_strtod_l+0xa34>
 800bd8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d17a      	bne.n	800be88 <_strtod_l+0xa50>
 800bd92:	f1ba 0f00 	cmp.w	sl, #0
 800bd96:	d158      	bne.n	800be4a <_strtod_l+0xa12>
 800bd98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d15a      	bne.n	800be58 <_strtod_l+0xa20>
 800bda2:	4b64      	ldr	r3, [pc, #400]	@ (800bf34 <_strtod_l+0xafc>)
 800bda4:	2200      	movs	r2, #0
 800bda6:	4630      	mov	r0, r6
 800bda8:	4639      	mov	r1, r7
 800bdaa:	f7f4 feb7 	bl	8000b1c <__aeabi_dcmplt>
 800bdae:	2800      	cmp	r0, #0
 800bdb0:	d159      	bne.n	800be66 <_strtod_l+0xa2e>
 800bdb2:	4630      	mov	r0, r6
 800bdb4:	4639      	mov	r1, r7
 800bdb6:	4b60      	ldr	r3, [pc, #384]	@ (800bf38 <_strtod_l+0xb00>)
 800bdb8:	2200      	movs	r2, #0
 800bdba:	f7f4 fc3d 	bl	8000638 <__aeabi_dmul>
 800bdbe:	4606      	mov	r6, r0
 800bdc0:	460f      	mov	r7, r1
 800bdc2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800bdc6:	9606      	str	r6, [sp, #24]
 800bdc8:	9307      	str	r3, [sp, #28]
 800bdca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bdce:	4d57      	ldr	r5, [pc, #348]	@ (800bf2c <_strtod_l+0xaf4>)
 800bdd0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bdd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bdd6:	401d      	ands	r5, r3
 800bdd8:	4b58      	ldr	r3, [pc, #352]	@ (800bf3c <_strtod_l+0xb04>)
 800bdda:	429d      	cmp	r5, r3
 800bddc:	f040 80b2 	bne.w	800bf44 <_strtod_l+0xb0c>
 800bde0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bde2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800bde6:	ec4b ab10 	vmov	d0, sl, fp
 800bdea:	f7ff f9c9 	bl	800b180 <__ulp>
 800bdee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bdf2:	ec51 0b10 	vmov	r0, r1, d0
 800bdf6:	f7f4 fc1f 	bl	8000638 <__aeabi_dmul>
 800bdfa:	4652      	mov	r2, sl
 800bdfc:	465b      	mov	r3, fp
 800bdfe:	f7f4 fa65 	bl	80002cc <__adddf3>
 800be02:	460b      	mov	r3, r1
 800be04:	4949      	ldr	r1, [pc, #292]	@ (800bf2c <_strtod_l+0xaf4>)
 800be06:	4a4e      	ldr	r2, [pc, #312]	@ (800bf40 <_strtod_l+0xb08>)
 800be08:	4019      	ands	r1, r3
 800be0a:	4291      	cmp	r1, r2
 800be0c:	4682      	mov	sl, r0
 800be0e:	d942      	bls.n	800be96 <_strtod_l+0xa5e>
 800be10:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800be12:	4b47      	ldr	r3, [pc, #284]	@ (800bf30 <_strtod_l+0xaf8>)
 800be14:	429a      	cmp	r2, r3
 800be16:	d103      	bne.n	800be20 <_strtod_l+0x9e8>
 800be18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800be1a:	3301      	adds	r3, #1
 800be1c:	f43f ad2f 	beq.w	800b87e <_strtod_l+0x446>
 800be20:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800bf30 <_strtod_l+0xaf8>
 800be24:	f04f 3aff 	mov.w	sl, #4294967295
 800be28:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800be2a:	9805      	ldr	r0, [sp, #20]
 800be2c:	f7fe fe7c 	bl	800ab28 <_Bfree>
 800be30:	9805      	ldr	r0, [sp, #20]
 800be32:	4649      	mov	r1, r9
 800be34:	f7fe fe78 	bl	800ab28 <_Bfree>
 800be38:	9805      	ldr	r0, [sp, #20]
 800be3a:	4641      	mov	r1, r8
 800be3c:	f7fe fe74 	bl	800ab28 <_Bfree>
 800be40:	9805      	ldr	r0, [sp, #20]
 800be42:	4621      	mov	r1, r4
 800be44:	f7fe fe70 	bl	800ab28 <_Bfree>
 800be48:	e619      	b.n	800ba7e <_strtod_l+0x646>
 800be4a:	f1ba 0f01 	cmp.w	sl, #1
 800be4e:	d103      	bne.n	800be58 <_strtod_l+0xa20>
 800be50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be52:	2b00      	cmp	r3, #0
 800be54:	f43f ada6 	beq.w	800b9a4 <_strtod_l+0x56c>
 800be58:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800bf08 <_strtod_l+0xad0>
 800be5c:	4f35      	ldr	r7, [pc, #212]	@ (800bf34 <_strtod_l+0xafc>)
 800be5e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800be62:	2600      	movs	r6, #0
 800be64:	e7b1      	b.n	800bdca <_strtod_l+0x992>
 800be66:	4f34      	ldr	r7, [pc, #208]	@ (800bf38 <_strtod_l+0xb00>)
 800be68:	2600      	movs	r6, #0
 800be6a:	e7aa      	b.n	800bdc2 <_strtod_l+0x98a>
 800be6c:	4b32      	ldr	r3, [pc, #200]	@ (800bf38 <_strtod_l+0xb00>)
 800be6e:	4630      	mov	r0, r6
 800be70:	4639      	mov	r1, r7
 800be72:	2200      	movs	r2, #0
 800be74:	f7f4 fbe0 	bl	8000638 <__aeabi_dmul>
 800be78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be7a:	4606      	mov	r6, r0
 800be7c:	460f      	mov	r7, r1
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d09f      	beq.n	800bdc2 <_strtod_l+0x98a>
 800be82:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800be86:	e7a0      	b.n	800bdca <_strtod_l+0x992>
 800be88:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800bf10 <_strtod_l+0xad8>
 800be8c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800be90:	ec57 6b17 	vmov	r6, r7, d7
 800be94:	e799      	b.n	800bdca <_strtod_l+0x992>
 800be96:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800be9a:	9b08      	ldr	r3, [sp, #32]
 800be9c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d1c1      	bne.n	800be28 <_strtod_l+0x9f0>
 800bea4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bea8:	0d1b      	lsrs	r3, r3, #20
 800beaa:	051b      	lsls	r3, r3, #20
 800beac:	429d      	cmp	r5, r3
 800beae:	d1bb      	bne.n	800be28 <_strtod_l+0x9f0>
 800beb0:	4630      	mov	r0, r6
 800beb2:	4639      	mov	r1, r7
 800beb4:	f7f4 ff20 	bl	8000cf8 <__aeabi_d2lz>
 800beb8:	f7f4 fb90 	bl	80005dc <__aeabi_l2d>
 800bebc:	4602      	mov	r2, r0
 800bebe:	460b      	mov	r3, r1
 800bec0:	4630      	mov	r0, r6
 800bec2:	4639      	mov	r1, r7
 800bec4:	f7f4 fa00 	bl	80002c8 <__aeabi_dsub>
 800bec8:	460b      	mov	r3, r1
 800beca:	4602      	mov	r2, r0
 800becc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800bed0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800bed4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bed6:	ea46 060a 	orr.w	r6, r6, sl
 800beda:	431e      	orrs	r6, r3
 800bedc:	d06f      	beq.n	800bfbe <_strtod_l+0xb86>
 800bede:	a30e      	add	r3, pc, #56	@ (adr r3, 800bf18 <_strtod_l+0xae0>)
 800bee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee4:	f7f4 fe1a 	bl	8000b1c <__aeabi_dcmplt>
 800bee8:	2800      	cmp	r0, #0
 800beea:	f47f acd3 	bne.w	800b894 <_strtod_l+0x45c>
 800beee:	a30c      	add	r3, pc, #48	@ (adr r3, 800bf20 <_strtod_l+0xae8>)
 800bef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bef8:	f7f4 fe2e 	bl	8000b58 <__aeabi_dcmpgt>
 800befc:	2800      	cmp	r0, #0
 800befe:	d093      	beq.n	800be28 <_strtod_l+0x9f0>
 800bf00:	e4c8      	b.n	800b894 <_strtod_l+0x45c>
 800bf02:	bf00      	nop
 800bf04:	f3af 8000 	nop.w
 800bf08:	00000000 	.word	0x00000000
 800bf0c:	bff00000 	.word	0xbff00000
 800bf10:	00000000 	.word	0x00000000
 800bf14:	3ff00000 	.word	0x3ff00000
 800bf18:	94a03595 	.word	0x94a03595
 800bf1c:	3fdfffff 	.word	0x3fdfffff
 800bf20:	35afe535 	.word	0x35afe535
 800bf24:	3fe00000 	.word	0x3fe00000
 800bf28:	000fffff 	.word	0x000fffff
 800bf2c:	7ff00000 	.word	0x7ff00000
 800bf30:	7fefffff 	.word	0x7fefffff
 800bf34:	3ff00000 	.word	0x3ff00000
 800bf38:	3fe00000 	.word	0x3fe00000
 800bf3c:	7fe00000 	.word	0x7fe00000
 800bf40:	7c9fffff 	.word	0x7c9fffff
 800bf44:	9b08      	ldr	r3, [sp, #32]
 800bf46:	b323      	cbz	r3, 800bf92 <_strtod_l+0xb5a>
 800bf48:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800bf4c:	d821      	bhi.n	800bf92 <_strtod_l+0xb5a>
 800bf4e:	a328      	add	r3, pc, #160	@ (adr r3, 800bff0 <_strtod_l+0xbb8>)
 800bf50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf54:	4630      	mov	r0, r6
 800bf56:	4639      	mov	r1, r7
 800bf58:	f7f4 fdea 	bl	8000b30 <__aeabi_dcmple>
 800bf5c:	b1a0      	cbz	r0, 800bf88 <_strtod_l+0xb50>
 800bf5e:	4639      	mov	r1, r7
 800bf60:	4630      	mov	r0, r6
 800bf62:	f7f4 fe41 	bl	8000be8 <__aeabi_d2uiz>
 800bf66:	2801      	cmp	r0, #1
 800bf68:	bf38      	it	cc
 800bf6a:	2001      	movcc	r0, #1
 800bf6c:	f7f4 faea 	bl	8000544 <__aeabi_ui2d>
 800bf70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf72:	4606      	mov	r6, r0
 800bf74:	460f      	mov	r7, r1
 800bf76:	b9fb      	cbnz	r3, 800bfb8 <_strtod_l+0xb80>
 800bf78:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bf7c:	9014      	str	r0, [sp, #80]	@ 0x50
 800bf7e:	9315      	str	r3, [sp, #84]	@ 0x54
 800bf80:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800bf84:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bf88:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bf8a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800bf8e:	1b5b      	subs	r3, r3, r5
 800bf90:	9311      	str	r3, [sp, #68]	@ 0x44
 800bf92:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bf96:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800bf9a:	f7ff f8f1 	bl	800b180 <__ulp>
 800bf9e:	4650      	mov	r0, sl
 800bfa0:	ec53 2b10 	vmov	r2, r3, d0
 800bfa4:	4659      	mov	r1, fp
 800bfa6:	f7f4 fb47 	bl	8000638 <__aeabi_dmul>
 800bfaa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bfae:	f7f4 f98d 	bl	80002cc <__adddf3>
 800bfb2:	4682      	mov	sl, r0
 800bfb4:	468b      	mov	fp, r1
 800bfb6:	e770      	b.n	800be9a <_strtod_l+0xa62>
 800bfb8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800bfbc:	e7e0      	b.n	800bf80 <_strtod_l+0xb48>
 800bfbe:	a30e      	add	r3, pc, #56	@ (adr r3, 800bff8 <_strtod_l+0xbc0>)
 800bfc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc4:	f7f4 fdaa 	bl	8000b1c <__aeabi_dcmplt>
 800bfc8:	e798      	b.n	800befc <_strtod_l+0xac4>
 800bfca:	2300      	movs	r3, #0
 800bfcc:	930e      	str	r3, [sp, #56]	@ 0x38
 800bfce:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800bfd0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bfd2:	6013      	str	r3, [r2, #0]
 800bfd4:	f7ff ba6d 	b.w	800b4b2 <_strtod_l+0x7a>
 800bfd8:	2a65      	cmp	r2, #101	@ 0x65
 800bfda:	f43f ab68 	beq.w	800b6ae <_strtod_l+0x276>
 800bfde:	2a45      	cmp	r2, #69	@ 0x45
 800bfe0:	f43f ab65 	beq.w	800b6ae <_strtod_l+0x276>
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	f7ff bba0 	b.w	800b72a <_strtod_l+0x2f2>
 800bfea:	bf00      	nop
 800bfec:	f3af 8000 	nop.w
 800bff0:	ffc00000 	.word	0xffc00000
 800bff4:	41dfffff 	.word	0x41dfffff
 800bff8:	94a03595 	.word	0x94a03595
 800bffc:	3fcfffff 	.word	0x3fcfffff

0800c000 <_strtod_r>:
 800c000:	4b01      	ldr	r3, [pc, #4]	@ (800c008 <_strtod_r+0x8>)
 800c002:	f7ff ba19 	b.w	800b438 <_strtod_l>
 800c006:	bf00      	nop
 800c008:	20000078 	.word	0x20000078

0800c00c <_strtol_l.isra.0>:
 800c00c:	2b24      	cmp	r3, #36	@ 0x24
 800c00e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c012:	4686      	mov	lr, r0
 800c014:	4690      	mov	r8, r2
 800c016:	d801      	bhi.n	800c01c <_strtol_l.isra.0+0x10>
 800c018:	2b01      	cmp	r3, #1
 800c01a:	d106      	bne.n	800c02a <_strtol_l.isra.0+0x1e>
 800c01c:	f7fd fdaa 	bl	8009b74 <__errno>
 800c020:	2316      	movs	r3, #22
 800c022:	6003      	str	r3, [r0, #0]
 800c024:	2000      	movs	r0, #0
 800c026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c02a:	4834      	ldr	r0, [pc, #208]	@ (800c0fc <_strtol_l.isra.0+0xf0>)
 800c02c:	460d      	mov	r5, r1
 800c02e:	462a      	mov	r2, r5
 800c030:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c034:	5d06      	ldrb	r6, [r0, r4]
 800c036:	f016 0608 	ands.w	r6, r6, #8
 800c03a:	d1f8      	bne.n	800c02e <_strtol_l.isra.0+0x22>
 800c03c:	2c2d      	cmp	r4, #45	@ 0x2d
 800c03e:	d110      	bne.n	800c062 <_strtol_l.isra.0+0x56>
 800c040:	782c      	ldrb	r4, [r5, #0]
 800c042:	2601      	movs	r6, #1
 800c044:	1c95      	adds	r5, r2, #2
 800c046:	f033 0210 	bics.w	r2, r3, #16
 800c04a:	d115      	bne.n	800c078 <_strtol_l.isra.0+0x6c>
 800c04c:	2c30      	cmp	r4, #48	@ 0x30
 800c04e:	d10d      	bne.n	800c06c <_strtol_l.isra.0+0x60>
 800c050:	782a      	ldrb	r2, [r5, #0]
 800c052:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c056:	2a58      	cmp	r2, #88	@ 0x58
 800c058:	d108      	bne.n	800c06c <_strtol_l.isra.0+0x60>
 800c05a:	786c      	ldrb	r4, [r5, #1]
 800c05c:	3502      	adds	r5, #2
 800c05e:	2310      	movs	r3, #16
 800c060:	e00a      	b.n	800c078 <_strtol_l.isra.0+0x6c>
 800c062:	2c2b      	cmp	r4, #43	@ 0x2b
 800c064:	bf04      	itt	eq
 800c066:	782c      	ldrbeq	r4, [r5, #0]
 800c068:	1c95      	addeq	r5, r2, #2
 800c06a:	e7ec      	b.n	800c046 <_strtol_l.isra.0+0x3a>
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d1f6      	bne.n	800c05e <_strtol_l.isra.0+0x52>
 800c070:	2c30      	cmp	r4, #48	@ 0x30
 800c072:	bf14      	ite	ne
 800c074:	230a      	movne	r3, #10
 800c076:	2308      	moveq	r3, #8
 800c078:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c07c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c080:	2200      	movs	r2, #0
 800c082:	fbbc f9f3 	udiv	r9, ip, r3
 800c086:	4610      	mov	r0, r2
 800c088:	fb03 ca19 	mls	sl, r3, r9, ip
 800c08c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c090:	2f09      	cmp	r7, #9
 800c092:	d80f      	bhi.n	800c0b4 <_strtol_l.isra.0+0xa8>
 800c094:	463c      	mov	r4, r7
 800c096:	42a3      	cmp	r3, r4
 800c098:	dd1b      	ble.n	800c0d2 <_strtol_l.isra.0+0xc6>
 800c09a:	1c57      	adds	r7, r2, #1
 800c09c:	d007      	beq.n	800c0ae <_strtol_l.isra.0+0xa2>
 800c09e:	4581      	cmp	r9, r0
 800c0a0:	d314      	bcc.n	800c0cc <_strtol_l.isra.0+0xc0>
 800c0a2:	d101      	bne.n	800c0a8 <_strtol_l.isra.0+0x9c>
 800c0a4:	45a2      	cmp	sl, r4
 800c0a6:	db11      	blt.n	800c0cc <_strtol_l.isra.0+0xc0>
 800c0a8:	fb00 4003 	mla	r0, r0, r3, r4
 800c0ac:	2201      	movs	r2, #1
 800c0ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c0b2:	e7eb      	b.n	800c08c <_strtol_l.isra.0+0x80>
 800c0b4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c0b8:	2f19      	cmp	r7, #25
 800c0ba:	d801      	bhi.n	800c0c0 <_strtol_l.isra.0+0xb4>
 800c0bc:	3c37      	subs	r4, #55	@ 0x37
 800c0be:	e7ea      	b.n	800c096 <_strtol_l.isra.0+0x8a>
 800c0c0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c0c4:	2f19      	cmp	r7, #25
 800c0c6:	d804      	bhi.n	800c0d2 <_strtol_l.isra.0+0xc6>
 800c0c8:	3c57      	subs	r4, #87	@ 0x57
 800c0ca:	e7e4      	b.n	800c096 <_strtol_l.isra.0+0x8a>
 800c0cc:	f04f 32ff 	mov.w	r2, #4294967295
 800c0d0:	e7ed      	b.n	800c0ae <_strtol_l.isra.0+0xa2>
 800c0d2:	1c53      	adds	r3, r2, #1
 800c0d4:	d108      	bne.n	800c0e8 <_strtol_l.isra.0+0xdc>
 800c0d6:	2322      	movs	r3, #34	@ 0x22
 800c0d8:	f8ce 3000 	str.w	r3, [lr]
 800c0dc:	4660      	mov	r0, ip
 800c0de:	f1b8 0f00 	cmp.w	r8, #0
 800c0e2:	d0a0      	beq.n	800c026 <_strtol_l.isra.0+0x1a>
 800c0e4:	1e69      	subs	r1, r5, #1
 800c0e6:	e006      	b.n	800c0f6 <_strtol_l.isra.0+0xea>
 800c0e8:	b106      	cbz	r6, 800c0ec <_strtol_l.isra.0+0xe0>
 800c0ea:	4240      	negs	r0, r0
 800c0ec:	f1b8 0f00 	cmp.w	r8, #0
 800c0f0:	d099      	beq.n	800c026 <_strtol_l.isra.0+0x1a>
 800c0f2:	2a00      	cmp	r2, #0
 800c0f4:	d1f6      	bne.n	800c0e4 <_strtol_l.isra.0+0xd8>
 800c0f6:	f8c8 1000 	str.w	r1, [r8]
 800c0fa:	e794      	b.n	800c026 <_strtol_l.isra.0+0x1a>
 800c0fc:	0800d691 	.word	0x0800d691

0800c100 <_strtol_r>:
 800c100:	f7ff bf84 	b.w	800c00c <_strtol_l.isra.0>

0800c104 <__ssputs_r>:
 800c104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c108:	688e      	ldr	r6, [r1, #8]
 800c10a:	461f      	mov	r7, r3
 800c10c:	42be      	cmp	r6, r7
 800c10e:	680b      	ldr	r3, [r1, #0]
 800c110:	4682      	mov	sl, r0
 800c112:	460c      	mov	r4, r1
 800c114:	4690      	mov	r8, r2
 800c116:	d82d      	bhi.n	800c174 <__ssputs_r+0x70>
 800c118:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c11c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c120:	d026      	beq.n	800c170 <__ssputs_r+0x6c>
 800c122:	6965      	ldr	r5, [r4, #20]
 800c124:	6909      	ldr	r1, [r1, #16]
 800c126:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c12a:	eba3 0901 	sub.w	r9, r3, r1
 800c12e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c132:	1c7b      	adds	r3, r7, #1
 800c134:	444b      	add	r3, r9
 800c136:	106d      	asrs	r5, r5, #1
 800c138:	429d      	cmp	r5, r3
 800c13a:	bf38      	it	cc
 800c13c:	461d      	movcc	r5, r3
 800c13e:	0553      	lsls	r3, r2, #21
 800c140:	d527      	bpl.n	800c192 <__ssputs_r+0x8e>
 800c142:	4629      	mov	r1, r5
 800c144:	f7fe fc24 	bl	800a990 <_malloc_r>
 800c148:	4606      	mov	r6, r0
 800c14a:	b360      	cbz	r0, 800c1a6 <__ssputs_r+0xa2>
 800c14c:	6921      	ldr	r1, [r4, #16]
 800c14e:	464a      	mov	r2, r9
 800c150:	f7fd fd3d 	bl	8009bce <memcpy>
 800c154:	89a3      	ldrh	r3, [r4, #12]
 800c156:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c15a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c15e:	81a3      	strh	r3, [r4, #12]
 800c160:	6126      	str	r6, [r4, #16]
 800c162:	6165      	str	r5, [r4, #20]
 800c164:	444e      	add	r6, r9
 800c166:	eba5 0509 	sub.w	r5, r5, r9
 800c16a:	6026      	str	r6, [r4, #0]
 800c16c:	60a5      	str	r5, [r4, #8]
 800c16e:	463e      	mov	r6, r7
 800c170:	42be      	cmp	r6, r7
 800c172:	d900      	bls.n	800c176 <__ssputs_r+0x72>
 800c174:	463e      	mov	r6, r7
 800c176:	6820      	ldr	r0, [r4, #0]
 800c178:	4632      	mov	r2, r6
 800c17a:	4641      	mov	r1, r8
 800c17c:	f000 f9c6 	bl	800c50c <memmove>
 800c180:	68a3      	ldr	r3, [r4, #8]
 800c182:	1b9b      	subs	r3, r3, r6
 800c184:	60a3      	str	r3, [r4, #8]
 800c186:	6823      	ldr	r3, [r4, #0]
 800c188:	4433      	add	r3, r6
 800c18a:	6023      	str	r3, [r4, #0]
 800c18c:	2000      	movs	r0, #0
 800c18e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c192:	462a      	mov	r2, r5
 800c194:	f000 fd7d 	bl	800cc92 <_realloc_r>
 800c198:	4606      	mov	r6, r0
 800c19a:	2800      	cmp	r0, #0
 800c19c:	d1e0      	bne.n	800c160 <__ssputs_r+0x5c>
 800c19e:	6921      	ldr	r1, [r4, #16]
 800c1a0:	4650      	mov	r0, sl
 800c1a2:	f7fe fb81 	bl	800a8a8 <_free_r>
 800c1a6:	230c      	movs	r3, #12
 800c1a8:	f8ca 3000 	str.w	r3, [sl]
 800c1ac:	89a3      	ldrh	r3, [r4, #12]
 800c1ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1b2:	81a3      	strh	r3, [r4, #12]
 800c1b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c1b8:	e7e9      	b.n	800c18e <__ssputs_r+0x8a>
	...

0800c1bc <_svfiprintf_r>:
 800c1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1c0:	4698      	mov	r8, r3
 800c1c2:	898b      	ldrh	r3, [r1, #12]
 800c1c4:	061b      	lsls	r3, r3, #24
 800c1c6:	b09d      	sub	sp, #116	@ 0x74
 800c1c8:	4607      	mov	r7, r0
 800c1ca:	460d      	mov	r5, r1
 800c1cc:	4614      	mov	r4, r2
 800c1ce:	d510      	bpl.n	800c1f2 <_svfiprintf_r+0x36>
 800c1d0:	690b      	ldr	r3, [r1, #16]
 800c1d2:	b973      	cbnz	r3, 800c1f2 <_svfiprintf_r+0x36>
 800c1d4:	2140      	movs	r1, #64	@ 0x40
 800c1d6:	f7fe fbdb 	bl	800a990 <_malloc_r>
 800c1da:	6028      	str	r0, [r5, #0]
 800c1dc:	6128      	str	r0, [r5, #16]
 800c1de:	b930      	cbnz	r0, 800c1ee <_svfiprintf_r+0x32>
 800c1e0:	230c      	movs	r3, #12
 800c1e2:	603b      	str	r3, [r7, #0]
 800c1e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c1e8:	b01d      	add	sp, #116	@ 0x74
 800c1ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1ee:	2340      	movs	r3, #64	@ 0x40
 800c1f0:	616b      	str	r3, [r5, #20]
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1f6:	2320      	movs	r3, #32
 800c1f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c1fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c200:	2330      	movs	r3, #48	@ 0x30
 800c202:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c3a0 <_svfiprintf_r+0x1e4>
 800c206:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c20a:	f04f 0901 	mov.w	r9, #1
 800c20e:	4623      	mov	r3, r4
 800c210:	469a      	mov	sl, r3
 800c212:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c216:	b10a      	cbz	r2, 800c21c <_svfiprintf_r+0x60>
 800c218:	2a25      	cmp	r2, #37	@ 0x25
 800c21a:	d1f9      	bne.n	800c210 <_svfiprintf_r+0x54>
 800c21c:	ebba 0b04 	subs.w	fp, sl, r4
 800c220:	d00b      	beq.n	800c23a <_svfiprintf_r+0x7e>
 800c222:	465b      	mov	r3, fp
 800c224:	4622      	mov	r2, r4
 800c226:	4629      	mov	r1, r5
 800c228:	4638      	mov	r0, r7
 800c22a:	f7ff ff6b 	bl	800c104 <__ssputs_r>
 800c22e:	3001      	adds	r0, #1
 800c230:	f000 80a7 	beq.w	800c382 <_svfiprintf_r+0x1c6>
 800c234:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c236:	445a      	add	r2, fp
 800c238:	9209      	str	r2, [sp, #36]	@ 0x24
 800c23a:	f89a 3000 	ldrb.w	r3, [sl]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	f000 809f 	beq.w	800c382 <_svfiprintf_r+0x1c6>
 800c244:	2300      	movs	r3, #0
 800c246:	f04f 32ff 	mov.w	r2, #4294967295
 800c24a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c24e:	f10a 0a01 	add.w	sl, sl, #1
 800c252:	9304      	str	r3, [sp, #16]
 800c254:	9307      	str	r3, [sp, #28]
 800c256:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c25a:	931a      	str	r3, [sp, #104]	@ 0x68
 800c25c:	4654      	mov	r4, sl
 800c25e:	2205      	movs	r2, #5
 800c260:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c264:	484e      	ldr	r0, [pc, #312]	@ (800c3a0 <_svfiprintf_r+0x1e4>)
 800c266:	f7f3 ffd3 	bl	8000210 <memchr>
 800c26a:	9a04      	ldr	r2, [sp, #16]
 800c26c:	b9d8      	cbnz	r0, 800c2a6 <_svfiprintf_r+0xea>
 800c26e:	06d0      	lsls	r0, r2, #27
 800c270:	bf44      	itt	mi
 800c272:	2320      	movmi	r3, #32
 800c274:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c278:	0711      	lsls	r1, r2, #28
 800c27a:	bf44      	itt	mi
 800c27c:	232b      	movmi	r3, #43	@ 0x2b
 800c27e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c282:	f89a 3000 	ldrb.w	r3, [sl]
 800c286:	2b2a      	cmp	r3, #42	@ 0x2a
 800c288:	d015      	beq.n	800c2b6 <_svfiprintf_r+0xfa>
 800c28a:	9a07      	ldr	r2, [sp, #28]
 800c28c:	4654      	mov	r4, sl
 800c28e:	2000      	movs	r0, #0
 800c290:	f04f 0c0a 	mov.w	ip, #10
 800c294:	4621      	mov	r1, r4
 800c296:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c29a:	3b30      	subs	r3, #48	@ 0x30
 800c29c:	2b09      	cmp	r3, #9
 800c29e:	d94b      	bls.n	800c338 <_svfiprintf_r+0x17c>
 800c2a0:	b1b0      	cbz	r0, 800c2d0 <_svfiprintf_r+0x114>
 800c2a2:	9207      	str	r2, [sp, #28]
 800c2a4:	e014      	b.n	800c2d0 <_svfiprintf_r+0x114>
 800c2a6:	eba0 0308 	sub.w	r3, r0, r8
 800c2aa:	fa09 f303 	lsl.w	r3, r9, r3
 800c2ae:	4313      	orrs	r3, r2
 800c2b0:	9304      	str	r3, [sp, #16]
 800c2b2:	46a2      	mov	sl, r4
 800c2b4:	e7d2      	b.n	800c25c <_svfiprintf_r+0xa0>
 800c2b6:	9b03      	ldr	r3, [sp, #12]
 800c2b8:	1d19      	adds	r1, r3, #4
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	9103      	str	r1, [sp, #12]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	bfbb      	ittet	lt
 800c2c2:	425b      	neglt	r3, r3
 800c2c4:	f042 0202 	orrlt.w	r2, r2, #2
 800c2c8:	9307      	strge	r3, [sp, #28]
 800c2ca:	9307      	strlt	r3, [sp, #28]
 800c2cc:	bfb8      	it	lt
 800c2ce:	9204      	strlt	r2, [sp, #16]
 800c2d0:	7823      	ldrb	r3, [r4, #0]
 800c2d2:	2b2e      	cmp	r3, #46	@ 0x2e
 800c2d4:	d10a      	bne.n	800c2ec <_svfiprintf_r+0x130>
 800c2d6:	7863      	ldrb	r3, [r4, #1]
 800c2d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c2da:	d132      	bne.n	800c342 <_svfiprintf_r+0x186>
 800c2dc:	9b03      	ldr	r3, [sp, #12]
 800c2de:	1d1a      	adds	r2, r3, #4
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	9203      	str	r2, [sp, #12]
 800c2e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c2e8:	3402      	adds	r4, #2
 800c2ea:	9305      	str	r3, [sp, #20]
 800c2ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c3b0 <_svfiprintf_r+0x1f4>
 800c2f0:	7821      	ldrb	r1, [r4, #0]
 800c2f2:	2203      	movs	r2, #3
 800c2f4:	4650      	mov	r0, sl
 800c2f6:	f7f3 ff8b 	bl	8000210 <memchr>
 800c2fa:	b138      	cbz	r0, 800c30c <_svfiprintf_r+0x150>
 800c2fc:	9b04      	ldr	r3, [sp, #16]
 800c2fe:	eba0 000a 	sub.w	r0, r0, sl
 800c302:	2240      	movs	r2, #64	@ 0x40
 800c304:	4082      	lsls	r2, r0
 800c306:	4313      	orrs	r3, r2
 800c308:	3401      	adds	r4, #1
 800c30a:	9304      	str	r3, [sp, #16]
 800c30c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c310:	4824      	ldr	r0, [pc, #144]	@ (800c3a4 <_svfiprintf_r+0x1e8>)
 800c312:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c316:	2206      	movs	r2, #6
 800c318:	f7f3 ff7a 	bl	8000210 <memchr>
 800c31c:	2800      	cmp	r0, #0
 800c31e:	d036      	beq.n	800c38e <_svfiprintf_r+0x1d2>
 800c320:	4b21      	ldr	r3, [pc, #132]	@ (800c3a8 <_svfiprintf_r+0x1ec>)
 800c322:	bb1b      	cbnz	r3, 800c36c <_svfiprintf_r+0x1b0>
 800c324:	9b03      	ldr	r3, [sp, #12]
 800c326:	3307      	adds	r3, #7
 800c328:	f023 0307 	bic.w	r3, r3, #7
 800c32c:	3308      	adds	r3, #8
 800c32e:	9303      	str	r3, [sp, #12]
 800c330:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c332:	4433      	add	r3, r6
 800c334:	9309      	str	r3, [sp, #36]	@ 0x24
 800c336:	e76a      	b.n	800c20e <_svfiprintf_r+0x52>
 800c338:	fb0c 3202 	mla	r2, ip, r2, r3
 800c33c:	460c      	mov	r4, r1
 800c33e:	2001      	movs	r0, #1
 800c340:	e7a8      	b.n	800c294 <_svfiprintf_r+0xd8>
 800c342:	2300      	movs	r3, #0
 800c344:	3401      	adds	r4, #1
 800c346:	9305      	str	r3, [sp, #20]
 800c348:	4619      	mov	r1, r3
 800c34a:	f04f 0c0a 	mov.w	ip, #10
 800c34e:	4620      	mov	r0, r4
 800c350:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c354:	3a30      	subs	r2, #48	@ 0x30
 800c356:	2a09      	cmp	r2, #9
 800c358:	d903      	bls.n	800c362 <_svfiprintf_r+0x1a6>
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d0c6      	beq.n	800c2ec <_svfiprintf_r+0x130>
 800c35e:	9105      	str	r1, [sp, #20]
 800c360:	e7c4      	b.n	800c2ec <_svfiprintf_r+0x130>
 800c362:	fb0c 2101 	mla	r1, ip, r1, r2
 800c366:	4604      	mov	r4, r0
 800c368:	2301      	movs	r3, #1
 800c36a:	e7f0      	b.n	800c34e <_svfiprintf_r+0x192>
 800c36c:	ab03      	add	r3, sp, #12
 800c36e:	9300      	str	r3, [sp, #0]
 800c370:	462a      	mov	r2, r5
 800c372:	4b0e      	ldr	r3, [pc, #56]	@ (800c3ac <_svfiprintf_r+0x1f0>)
 800c374:	a904      	add	r1, sp, #16
 800c376:	4638      	mov	r0, r7
 800c378:	f7fc fc4c 	bl	8008c14 <_printf_float>
 800c37c:	1c42      	adds	r2, r0, #1
 800c37e:	4606      	mov	r6, r0
 800c380:	d1d6      	bne.n	800c330 <_svfiprintf_r+0x174>
 800c382:	89ab      	ldrh	r3, [r5, #12]
 800c384:	065b      	lsls	r3, r3, #25
 800c386:	f53f af2d 	bmi.w	800c1e4 <_svfiprintf_r+0x28>
 800c38a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c38c:	e72c      	b.n	800c1e8 <_svfiprintf_r+0x2c>
 800c38e:	ab03      	add	r3, sp, #12
 800c390:	9300      	str	r3, [sp, #0]
 800c392:	462a      	mov	r2, r5
 800c394:	4b05      	ldr	r3, [pc, #20]	@ (800c3ac <_svfiprintf_r+0x1f0>)
 800c396:	a904      	add	r1, sp, #16
 800c398:	4638      	mov	r0, r7
 800c39a:	f7fc fed3 	bl	8009144 <_printf_i>
 800c39e:	e7ed      	b.n	800c37c <_svfiprintf_r+0x1c0>
 800c3a0:	0800d489 	.word	0x0800d489
 800c3a4:	0800d493 	.word	0x0800d493
 800c3a8:	08008c15 	.word	0x08008c15
 800c3ac:	0800c105 	.word	0x0800c105
 800c3b0:	0800d48f 	.word	0x0800d48f

0800c3b4 <__sflush_r>:
 800c3b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c3b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3bc:	0716      	lsls	r6, r2, #28
 800c3be:	4605      	mov	r5, r0
 800c3c0:	460c      	mov	r4, r1
 800c3c2:	d454      	bmi.n	800c46e <__sflush_r+0xba>
 800c3c4:	684b      	ldr	r3, [r1, #4]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	dc02      	bgt.n	800c3d0 <__sflush_r+0x1c>
 800c3ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	dd48      	ble.n	800c462 <__sflush_r+0xae>
 800c3d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c3d2:	2e00      	cmp	r6, #0
 800c3d4:	d045      	beq.n	800c462 <__sflush_r+0xae>
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c3dc:	682f      	ldr	r7, [r5, #0]
 800c3de:	6a21      	ldr	r1, [r4, #32]
 800c3e0:	602b      	str	r3, [r5, #0]
 800c3e2:	d030      	beq.n	800c446 <__sflush_r+0x92>
 800c3e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c3e6:	89a3      	ldrh	r3, [r4, #12]
 800c3e8:	0759      	lsls	r1, r3, #29
 800c3ea:	d505      	bpl.n	800c3f8 <__sflush_r+0x44>
 800c3ec:	6863      	ldr	r3, [r4, #4]
 800c3ee:	1ad2      	subs	r2, r2, r3
 800c3f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c3f2:	b10b      	cbz	r3, 800c3f8 <__sflush_r+0x44>
 800c3f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c3f6:	1ad2      	subs	r2, r2, r3
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c3fc:	6a21      	ldr	r1, [r4, #32]
 800c3fe:	4628      	mov	r0, r5
 800c400:	47b0      	blx	r6
 800c402:	1c43      	adds	r3, r0, #1
 800c404:	89a3      	ldrh	r3, [r4, #12]
 800c406:	d106      	bne.n	800c416 <__sflush_r+0x62>
 800c408:	6829      	ldr	r1, [r5, #0]
 800c40a:	291d      	cmp	r1, #29
 800c40c:	d82b      	bhi.n	800c466 <__sflush_r+0xb2>
 800c40e:	4a2a      	ldr	r2, [pc, #168]	@ (800c4b8 <__sflush_r+0x104>)
 800c410:	40ca      	lsrs	r2, r1
 800c412:	07d6      	lsls	r6, r2, #31
 800c414:	d527      	bpl.n	800c466 <__sflush_r+0xb2>
 800c416:	2200      	movs	r2, #0
 800c418:	6062      	str	r2, [r4, #4]
 800c41a:	04d9      	lsls	r1, r3, #19
 800c41c:	6922      	ldr	r2, [r4, #16]
 800c41e:	6022      	str	r2, [r4, #0]
 800c420:	d504      	bpl.n	800c42c <__sflush_r+0x78>
 800c422:	1c42      	adds	r2, r0, #1
 800c424:	d101      	bne.n	800c42a <__sflush_r+0x76>
 800c426:	682b      	ldr	r3, [r5, #0]
 800c428:	b903      	cbnz	r3, 800c42c <__sflush_r+0x78>
 800c42a:	6560      	str	r0, [r4, #84]	@ 0x54
 800c42c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c42e:	602f      	str	r7, [r5, #0]
 800c430:	b1b9      	cbz	r1, 800c462 <__sflush_r+0xae>
 800c432:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c436:	4299      	cmp	r1, r3
 800c438:	d002      	beq.n	800c440 <__sflush_r+0x8c>
 800c43a:	4628      	mov	r0, r5
 800c43c:	f7fe fa34 	bl	800a8a8 <_free_r>
 800c440:	2300      	movs	r3, #0
 800c442:	6363      	str	r3, [r4, #52]	@ 0x34
 800c444:	e00d      	b.n	800c462 <__sflush_r+0xae>
 800c446:	2301      	movs	r3, #1
 800c448:	4628      	mov	r0, r5
 800c44a:	47b0      	blx	r6
 800c44c:	4602      	mov	r2, r0
 800c44e:	1c50      	adds	r0, r2, #1
 800c450:	d1c9      	bne.n	800c3e6 <__sflush_r+0x32>
 800c452:	682b      	ldr	r3, [r5, #0]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d0c6      	beq.n	800c3e6 <__sflush_r+0x32>
 800c458:	2b1d      	cmp	r3, #29
 800c45a:	d001      	beq.n	800c460 <__sflush_r+0xac>
 800c45c:	2b16      	cmp	r3, #22
 800c45e:	d11e      	bne.n	800c49e <__sflush_r+0xea>
 800c460:	602f      	str	r7, [r5, #0]
 800c462:	2000      	movs	r0, #0
 800c464:	e022      	b.n	800c4ac <__sflush_r+0xf8>
 800c466:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c46a:	b21b      	sxth	r3, r3
 800c46c:	e01b      	b.n	800c4a6 <__sflush_r+0xf2>
 800c46e:	690f      	ldr	r7, [r1, #16]
 800c470:	2f00      	cmp	r7, #0
 800c472:	d0f6      	beq.n	800c462 <__sflush_r+0xae>
 800c474:	0793      	lsls	r3, r2, #30
 800c476:	680e      	ldr	r6, [r1, #0]
 800c478:	bf08      	it	eq
 800c47a:	694b      	ldreq	r3, [r1, #20]
 800c47c:	600f      	str	r7, [r1, #0]
 800c47e:	bf18      	it	ne
 800c480:	2300      	movne	r3, #0
 800c482:	eba6 0807 	sub.w	r8, r6, r7
 800c486:	608b      	str	r3, [r1, #8]
 800c488:	f1b8 0f00 	cmp.w	r8, #0
 800c48c:	dde9      	ble.n	800c462 <__sflush_r+0xae>
 800c48e:	6a21      	ldr	r1, [r4, #32]
 800c490:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c492:	4643      	mov	r3, r8
 800c494:	463a      	mov	r2, r7
 800c496:	4628      	mov	r0, r5
 800c498:	47b0      	blx	r6
 800c49a:	2800      	cmp	r0, #0
 800c49c:	dc08      	bgt.n	800c4b0 <__sflush_r+0xfc>
 800c49e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c4a6:	81a3      	strh	r3, [r4, #12]
 800c4a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c4ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4b0:	4407      	add	r7, r0
 800c4b2:	eba8 0800 	sub.w	r8, r8, r0
 800c4b6:	e7e7      	b.n	800c488 <__sflush_r+0xd4>
 800c4b8:	20400001 	.word	0x20400001

0800c4bc <_fflush_r>:
 800c4bc:	b538      	push	{r3, r4, r5, lr}
 800c4be:	690b      	ldr	r3, [r1, #16]
 800c4c0:	4605      	mov	r5, r0
 800c4c2:	460c      	mov	r4, r1
 800c4c4:	b913      	cbnz	r3, 800c4cc <_fflush_r+0x10>
 800c4c6:	2500      	movs	r5, #0
 800c4c8:	4628      	mov	r0, r5
 800c4ca:	bd38      	pop	{r3, r4, r5, pc}
 800c4cc:	b118      	cbz	r0, 800c4d6 <_fflush_r+0x1a>
 800c4ce:	6a03      	ldr	r3, [r0, #32]
 800c4d0:	b90b      	cbnz	r3, 800c4d6 <_fflush_r+0x1a>
 800c4d2:	f7fd f9ef 	bl	80098b4 <__sinit>
 800c4d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d0f3      	beq.n	800c4c6 <_fflush_r+0xa>
 800c4de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c4e0:	07d0      	lsls	r0, r2, #31
 800c4e2:	d404      	bmi.n	800c4ee <_fflush_r+0x32>
 800c4e4:	0599      	lsls	r1, r3, #22
 800c4e6:	d402      	bmi.n	800c4ee <_fflush_r+0x32>
 800c4e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c4ea:	f7fd fb6e 	bl	8009bca <__retarget_lock_acquire_recursive>
 800c4ee:	4628      	mov	r0, r5
 800c4f0:	4621      	mov	r1, r4
 800c4f2:	f7ff ff5f 	bl	800c3b4 <__sflush_r>
 800c4f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c4f8:	07da      	lsls	r2, r3, #31
 800c4fa:	4605      	mov	r5, r0
 800c4fc:	d4e4      	bmi.n	800c4c8 <_fflush_r+0xc>
 800c4fe:	89a3      	ldrh	r3, [r4, #12]
 800c500:	059b      	lsls	r3, r3, #22
 800c502:	d4e1      	bmi.n	800c4c8 <_fflush_r+0xc>
 800c504:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c506:	f7fd fb61 	bl	8009bcc <__retarget_lock_release_recursive>
 800c50a:	e7dd      	b.n	800c4c8 <_fflush_r+0xc>

0800c50c <memmove>:
 800c50c:	4288      	cmp	r0, r1
 800c50e:	b510      	push	{r4, lr}
 800c510:	eb01 0402 	add.w	r4, r1, r2
 800c514:	d902      	bls.n	800c51c <memmove+0x10>
 800c516:	4284      	cmp	r4, r0
 800c518:	4623      	mov	r3, r4
 800c51a:	d807      	bhi.n	800c52c <memmove+0x20>
 800c51c:	1e43      	subs	r3, r0, #1
 800c51e:	42a1      	cmp	r1, r4
 800c520:	d008      	beq.n	800c534 <memmove+0x28>
 800c522:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c526:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c52a:	e7f8      	b.n	800c51e <memmove+0x12>
 800c52c:	4402      	add	r2, r0
 800c52e:	4601      	mov	r1, r0
 800c530:	428a      	cmp	r2, r1
 800c532:	d100      	bne.n	800c536 <memmove+0x2a>
 800c534:	bd10      	pop	{r4, pc}
 800c536:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c53a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c53e:	e7f7      	b.n	800c530 <memmove+0x24>

0800c540 <strncmp>:
 800c540:	b510      	push	{r4, lr}
 800c542:	b16a      	cbz	r2, 800c560 <strncmp+0x20>
 800c544:	3901      	subs	r1, #1
 800c546:	1884      	adds	r4, r0, r2
 800c548:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c54c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c550:	429a      	cmp	r2, r3
 800c552:	d103      	bne.n	800c55c <strncmp+0x1c>
 800c554:	42a0      	cmp	r0, r4
 800c556:	d001      	beq.n	800c55c <strncmp+0x1c>
 800c558:	2a00      	cmp	r2, #0
 800c55a:	d1f5      	bne.n	800c548 <strncmp+0x8>
 800c55c:	1ad0      	subs	r0, r2, r3
 800c55e:	bd10      	pop	{r4, pc}
 800c560:	4610      	mov	r0, r2
 800c562:	e7fc      	b.n	800c55e <strncmp+0x1e>

0800c564 <_sbrk_r>:
 800c564:	b538      	push	{r3, r4, r5, lr}
 800c566:	4d06      	ldr	r5, [pc, #24]	@ (800c580 <_sbrk_r+0x1c>)
 800c568:	2300      	movs	r3, #0
 800c56a:	4604      	mov	r4, r0
 800c56c:	4608      	mov	r0, r1
 800c56e:	602b      	str	r3, [r5, #0]
 800c570:	f7f5 fe12 	bl	8002198 <_sbrk>
 800c574:	1c43      	adds	r3, r0, #1
 800c576:	d102      	bne.n	800c57e <_sbrk_r+0x1a>
 800c578:	682b      	ldr	r3, [r5, #0]
 800c57a:	b103      	cbz	r3, 800c57e <_sbrk_r+0x1a>
 800c57c:	6023      	str	r3, [r4, #0]
 800c57e:	bd38      	pop	{r3, r4, r5, pc}
 800c580:	20004574 	.word	0x20004574
 800c584:	00000000 	.word	0x00000000

0800c588 <nan>:
 800c588:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c590 <nan+0x8>
 800c58c:	4770      	bx	lr
 800c58e:	bf00      	nop
 800c590:	00000000 	.word	0x00000000
 800c594:	7ff80000 	.word	0x7ff80000

0800c598 <__assert_func>:
 800c598:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c59a:	4614      	mov	r4, r2
 800c59c:	461a      	mov	r2, r3
 800c59e:	4b09      	ldr	r3, [pc, #36]	@ (800c5c4 <__assert_func+0x2c>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	4605      	mov	r5, r0
 800c5a4:	68d8      	ldr	r0, [r3, #12]
 800c5a6:	b14c      	cbz	r4, 800c5bc <__assert_func+0x24>
 800c5a8:	4b07      	ldr	r3, [pc, #28]	@ (800c5c8 <__assert_func+0x30>)
 800c5aa:	9100      	str	r1, [sp, #0]
 800c5ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c5b0:	4906      	ldr	r1, [pc, #24]	@ (800c5cc <__assert_func+0x34>)
 800c5b2:	462b      	mov	r3, r5
 800c5b4:	f000 fba8 	bl	800cd08 <fiprintf>
 800c5b8:	f000 fbb8 	bl	800cd2c <abort>
 800c5bc:	4b04      	ldr	r3, [pc, #16]	@ (800c5d0 <__assert_func+0x38>)
 800c5be:	461c      	mov	r4, r3
 800c5c0:	e7f3      	b.n	800c5aa <__assert_func+0x12>
 800c5c2:	bf00      	nop
 800c5c4:	20000028 	.word	0x20000028
 800c5c8:	0800d4a2 	.word	0x0800d4a2
 800c5cc:	0800d4af 	.word	0x0800d4af
 800c5d0:	0800d4dd 	.word	0x0800d4dd

0800c5d4 <_calloc_r>:
 800c5d4:	b570      	push	{r4, r5, r6, lr}
 800c5d6:	fba1 5402 	umull	r5, r4, r1, r2
 800c5da:	b934      	cbnz	r4, 800c5ea <_calloc_r+0x16>
 800c5dc:	4629      	mov	r1, r5
 800c5de:	f7fe f9d7 	bl	800a990 <_malloc_r>
 800c5e2:	4606      	mov	r6, r0
 800c5e4:	b928      	cbnz	r0, 800c5f2 <_calloc_r+0x1e>
 800c5e6:	4630      	mov	r0, r6
 800c5e8:	bd70      	pop	{r4, r5, r6, pc}
 800c5ea:	220c      	movs	r2, #12
 800c5ec:	6002      	str	r2, [r0, #0]
 800c5ee:	2600      	movs	r6, #0
 800c5f0:	e7f9      	b.n	800c5e6 <_calloc_r+0x12>
 800c5f2:	462a      	mov	r2, r5
 800c5f4:	4621      	mov	r1, r4
 800c5f6:	f7fd fa6b 	bl	8009ad0 <memset>
 800c5fa:	e7f4      	b.n	800c5e6 <_calloc_r+0x12>

0800c5fc <rshift>:
 800c5fc:	6903      	ldr	r3, [r0, #16]
 800c5fe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c602:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c606:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c60a:	f100 0414 	add.w	r4, r0, #20
 800c60e:	dd45      	ble.n	800c69c <rshift+0xa0>
 800c610:	f011 011f 	ands.w	r1, r1, #31
 800c614:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c618:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c61c:	d10c      	bne.n	800c638 <rshift+0x3c>
 800c61e:	f100 0710 	add.w	r7, r0, #16
 800c622:	4629      	mov	r1, r5
 800c624:	42b1      	cmp	r1, r6
 800c626:	d334      	bcc.n	800c692 <rshift+0x96>
 800c628:	1a9b      	subs	r3, r3, r2
 800c62a:	009b      	lsls	r3, r3, #2
 800c62c:	1eea      	subs	r2, r5, #3
 800c62e:	4296      	cmp	r6, r2
 800c630:	bf38      	it	cc
 800c632:	2300      	movcc	r3, #0
 800c634:	4423      	add	r3, r4
 800c636:	e015      	b.n	800c664 <rshift+0x68>
 800c638:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c63c:	f1c1 0820 	rsb	r8, r1, #32
 800c640:	40cf      	lsrs	r7, r1
 800c642:	f105 0e04 	add.w	lr, r5, #4
 800c646:	46a1      	mov	r9, r4
 800c648:	4576      	cmp	r6, lr
 800c64a:	46f4      	mov	ip, lr
 800c64c:	d815      	bhi.n	800c67a <rshift+0x7e>
 800c64e:	1a9a      	subs	r2, r3, r2
 800c650:	0092      	lsls	r2, r2, #2
 800c652:	3a04      	subs	r2, #4
 800c654:	3501      	adds	r5, #1
 800c656:	42ae      	cmp	r6, r5
 800c658:	bf38      	it	cc
 800c65a:	2200      	movcc	r2, #0
 800c65c:	18a3      	adds	r3, r4, r2
 800c65e:	50a7      	str	r7, [r4, r2]
 800c660:	b107      	cbz	r7, 800c664 <rshift+0x68>
 800c662:	3304      	adds	r3, #4
 800c664:	1b1a      	subs	r2, r3, r4
 800c666:	42a3      	cmp	r3, r4
 800c668:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c66c:	bf08      	it	eq
 800c66e:	2300      	moveq	r3, #0
 800c670:	6102      	str	r2, [r0, #16]
 800c672:	bf08      	it	eq
 800c674:	6143      	streq	r3, [r0, #20]
 800c676:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c67a:	f8dc c000 	ldr.w	ip, [ip]
 800c67e:	fa0c fc08 	lsl.w	ip, ip, r8
 800c682:	ea4c 0707 	orr.w	r7, ip, r7
 800c686:	f849 7b04 	str.w	r7, [r9], #4
 800c68a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c68e:	40cf      	lsrs	r7, r1
 800c690:	e7da      	b.n	800c648 <rshift+0x4c>
 800c692:	f851 cb04 	ldr.w	ip, [r1], #4
 800c696:	f847 cf04 	str.w	ip, [r7, #4]!
 800c69a:	e7c3      	b.n	800c624 <rshift+0x28>
 800c69c:	4623      	mov	r3, r4
 800c69e:	e7e1      	b.n	800c664 <rshift+0x68>

0800c6a0 <__hexdig_fun>:
 800c6a0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c6a4:	2b09      	cmp	r3, #9
 800c6a6:	d802      	bhi.n	800c6ae <__hexdig_fun+0xe>
 800c6a8:	3820      	subs	r0, #32
 800c6aa:	b2c0      	uxtb	r0, r0
 800c6ac:	4770      	bx	lr
 800c6ae:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c6b2:	2b05      	cmp	r3, #5
 800c6b4:	d801      	bhi.n	800c6ba <__hexdig_fun+0x1a>
 800c6b6:	3847      	subs	r0, #71	@ 0x47
 800c6b8:	e7f7      	b.n	800c6aa <__hexdig_fun+0xa>
 800c6ba:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c6be:	2b05      	cmp	r3, #5
 800c6c0:	d801      	bhi.n	800c6c6 <__hexdig_fun+0x26>
 800c6c2:	3827      	subs	r0, #39	@ 0x27
 800c6c4:	e7f1      	b.n	800c6aa <__hexdig_fun+0xa>
 800c6c6:	2000      	movs	r0, #0
 800c6c8:	4770      	bx	lr
	...

0800c6cc <__gethex>:
 800c6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6d0:	b085      	sub	sp, #20
 800c6d2:	468a      	mov	sl, r1
 800c6d4:	9302      	str	r3, [sp, #8]
 800c6d6:	680b      	ldr	r3, [r1, #0]
 800c6d8:	9001      	str	r0, [sp, #4]
 800c6da:	4690      	mov	r8, r2
 800c6dc:	1c9c      	adds	r4, r3, #2
 800c6de:	46a1      	mov	r9, r4
 800c6e0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c6e4:	2830      	cmp	r0, #48	@ 0x30
 800c6e6:	d0fa      	beq.n	800c6de <__gethex+0x12>
 800c6e8:	eba9 0303 	sub.w	r3, r9, r3
 800c6ec:	f1a3 0b02 	sub.w	fp, r3, #2
 800c6f0:	f7ff ffd6 	bl	800c6a0 <__hexdig_fun>
 800c6f4:	4605      	mov	r5, r0
 800c6f6:	2800      	cmp	r0, #0
 800c6f8:	d168      	bne.n	800c7cc <__gethex+0x100>
 800c6fa:	49a0      	ldr	r1, [pc, #640]	@ (800c97c <__gethex+0x2b0>)
 800c6fc:	2201      	movs	r2, #1
 800c6fe:	4648      	mov	r0, r9
 800c700:	f7ff ff1e 	bl	800c540 <strncmp>
 800c704:	4607      	mov	r7, r0
 800c706:	2800      	cmp	r0, #0
 800c708:	d167      	bne.n	800c7da <__gethex+0x10e>
 800c70a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c70e:	4626      	mov	r6, r4
 800c710:	f7ff ffc6 	bl	800c6a0 <__hexdig_fun>
 800c714:	2800      	cmp	r0, #0
 800c716:	d062      	beq.n	800c7de <__gethex+0x112>
 800c718:	4623      	mov	r3, r4
 800c71a:	7818      	ldrb	r0, [r3, #0]
 800c71c:	2830      	cmp	r0, #48	@ 0x30
 800c71e:	4699      	mov	r9, r3
 800c720:	f103 0301 	add.w	r3, r3, #1
 800c724:	d0f9      	beq.n	800c71a <__gethex+0x4e>
 800c726:	f7ff ffbb 	bl	800c6a0 <__hexdig_fun>
 800c72a:	fab0 f580 	clz	r5, r0
 800c72e:	096d      	lsrs	r5, r5, #5
 800c730:	f04f 0b01 	mov.w	fp, #1
 800c734:	464a      	mov	r2, r9
 800c736:	4616      	mov	r6, r2
 800c738:	3201      	adds	r2, #1
 800c73a:	7830      	ldrb	r0, [r6, #0]
 800c73c:	f7ff ffb0 	bl	800c6a0 <__hexdig_fun>
 800c740:	2800      	cmp	r0, #0
 800c742:	d1f8      	bne.n	800c736 <__gethex+0x6a>
 800c744:	498d      	ldr	r1, [pc, #564]	@ (800c97c <__gethex+0x2b0>)
 800c746:	2201      	movs	r2, #1
 800c748:	4630      	mov	r0, r6
 800c74a:	f7ff fef9 	bl	800c540 <strncmp>
 800c74e:	2800      	cmp	r0, #0
 800c750:	d13f      	bne.n	800c7d2 <__gethex+0x106>
 800c752:	b944      	cbnz	r4, 800c766 <__gethex+0x9a>
 800c754:	1c74      	adds	r4, r6, #1
 800c756:	4622      	mov	r2, r4
 800c758:	4616      	mov	r6, r2
 800c75a:	3201      	adds	r2, #1
 800c75c:	7830      	ldrb	r0, [r6, #0]
 800c75e:	f7ff ff9f 	bl	800c6a0 <__hexdig_fun>
 800c762:	2800      	cmp	r0, #0
 800c764:	d1f8      	bne.n	800c758 <__gethex+0x8c>
 800c766:	1ba4      	subs	r4, r4, r6
 800c768:	00a7      	lsls	r7, r4, #2
 800c76a:	7833      	ldrb	r3, [r6, #0]
 800c76c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c770:	2b50      	cmp	r3, #80	@ 0x50
 800c772:	d13e      	bne.n	800c7f2 <__gethex+0x126>
 800c774:	7873      	ldrb	r3, [r6, #1]
 800c776:	2b2b      	cmp	r3, #43	@ 0x2b
 800c778:	d033      	beq.n	800c7e2 <__gethex+0x116>
 800c77a:	2b2d      	cmp	r3, #45	@ 0x2d
 800c77c:	d034      	beq.n	800c7e8 <__gethex+0x11c>
 800c77e:	1c71      	adds	r1, r6, #1
 800c780:	2400      	movs	r4, #0
 800c782:	7808      	ldrb	r0, [r1, #0]
 800c784:	f7ff ff8c 	bl	800c6a0 <__hexdig_fun>
 800c788:	1e43      	subs	r3, r0, #1
 800c78a:	b2db      	uxtb	r3, r3
 800c78c:	2b18      	cmp	r3, #24
 800c78e:	d830      	bhi.n	800c7f2 <__gethex+0x126>
 800c790:	f1a0 0210 	sub.w	r2, r0, #16
 800c794:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c798:	f7ff ff82 	bl	800c6a0 <__hexdig_fun>
 800c79c:	f100 3cff 	add.w	ip, r0, #4294967295
 800c7a0:	fa5f fc8c 	uxtb.w	ip, ip
 800c7a4:	f1bc 0f18 	cmp.w	ip, #24
 800c7a8:	f04f 030a 	mov.w	r3, #10
 800c7ac:	d91e      	bls.n	800c7ec <__gethex+0x120>
 800c7ae:	b104      	cbz	r4, 800c7b2 <__gethex+0xe6>
 800c7b0:	4252      	negs	r2, r2
 800c7b2:	4417      	add	r7, r2
 800c7b4:	f8ca 1000 	str.w	r1, [sl]
 800c7b8:	b1ed      	cbz	r5, 800c7f6 <__gethex+0x12a>
 800c7ba:	f1bb 0f00 	cmp.w	fp, #0
 800c7be:	bf0c      	ite	eq
 800c7c0:	2506      	moveq	r5, #6
 800c7c2:	2500      	movne	r5, #0
 800c7c4:	4628      	mov	r0, r5
 800c7c6:	b005      	add	sp, #20
 800c7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7cc:	2500      	movs	r5, #0
 800c7ce:	462c      	mov	r4, r5
 800c7d0:	e7b0      	b.n	800c734 <__gethex+0x68>
 800c7d2:	2c00      	cmp	r4, #0
 800c7d4:	d1c7      	bne.n	800c766 <__gethex+0x9a>
 800c7d6:	4627      	mov	r7, r4
 800c7d8:	e7c7      	b.n	800c76a <__gethex+0x9e>
 800c7da:	464e      	mov	r6, r9
 800c7dc:	462f      	mov	r7, r5
 800c7de:	2501      	movs	r5, #1
 800c7e0:	e7c3      	b.n	800c76a <__gethex+0x9e>
 800c7e2:	2400      	movs	r4, #0
 800c7e4:	1cb1      	adds	r1, r6, #2
 800c7e6:	e7cc      	b.n	800c782 <__gethex+0xb6>
 800c7e8:	2401      	movs	r4, #1
 800c7ea:	e7fb      	b.n	800c7e4 <__gethex+0x118>
 800c7ec:	fb03 0002 	mla	r0, r3, r2, r0
 800c7f0:	e7ce      	b.n	800c790 <__gethex+0xc4>
 800c7f2:	4631      	mov	r1, r6
 800c7f4:	e7de      	b.n	800c7b4 <__gethex+0xe8>
 800c7f6:	eba6 0309 	sub.w	r3, r6, r9
 800c7fa:	3b01      	subs	r3, #1
 800c7fc:	4629      	mov	r1, r5
 800c7fe:	2b07      	cmp	r3, #7
 800c800:	dc0a      	bgt.n	800c818 <__gethex+0x14c>
 800c802:	9801      	ldr	r0, [sp, #4]
 800c804:	f7fe f950 	bl	800aaa8 <_Balloc>
 800c808:	4604      	mov	r4, r0
 800c80a:	b940      	cbnz	r0, 800c81e <__gethex+0x152>
 800c80c:	4b5c      	ldr	r3, [pc, #368]	@ (800c980 <__gethex+0x2b4>)
 800c80e:	4602      	mov	r2, r0
 800c810:	21e4      	movs	r1, #228	@ 0xe4
 800c812:	485c      	ldr	r0, [pc, #368]	@ (800c984 <__gethex+0x2b8>)
 800c814:	f7ff fec0 	bl	800c598 <__assert_func>
 800c818:	3101      	adds	r1, #1
 800c81a:	105b      	asrs	r3, r3, #1
 800c81c:	e7ef      	b.n	800c7fe <__gethex+0x132>
 800c81e:	f100 0a14 	add.w	sl, r0, #20
 800c822:	2300      	movs	r3, #0
 800c824:	4655      	mov	r5, sl
 800c826:	469b      	mov	fp, r3
 800c828:	45b1      	cmp	r9, r6
 800c82a:	d337      	bcc.n	800c89c <__gethex+0x1d0>
 800c82c:	f845 bb04 	str.w	fp, [r5], #4
 800c830:	eba5 050a 	sub.w	r5, r5, sl
 800c834:	10ad      	asrs	r5, r5, #2
 800c836:	6125      	str	r5, [r4, #16]
 800c838:	4658      	mov	r0, fp
 800c83a:	f7fe fa27 	bl	800ac8c <__hi0bits>
 800c83e:	016d      	lsls	r5, r5, #5
 800c840:	f8d8 6000 	ldr.w	r6, [r8]
 800c844:	1a2d      	subs	r5, r5, r0
 800c846:	42b5      	cmp	r5, r6
 800c848:	dd54      	ble.n	800c8f4 <__gethex+0x228>
 800c84a:	1bad      	subs	r5, r5, r6
 800c84c:	4629      	mov	r1, r5
 800c84e:	4620      	mov	r0, r4
 800c850:	f7fe fdb3 	bl	800b3ba <__any_on>
 800c854:	4681      	mov	r9, r0
 800c856:	b178      	cbz	r0, 800c878 <__gethex+0x1ac>
 800c858:	1e6b      	subs	r3, r5, #1
 800c85a:	1159      	asrs	r1, r3, #5
 800c85c:	f003 021f 	and.w	r2, r3, #31
 800c860:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c864:	f04f 0901 	mov.w	r9, #1
 800c868:	fa09 f202 	lsl.w	r2, r9, r2
 800c86c:	420a      	tst	r2, r1
 800c86e:	d003      	beq.n	800c878 <__gethex+0x1ac>
 800c870:	454b      	cmp	r3, r9
 800c872:	dc36      	bgt.n	800c8e2 <__gethex+0x216>
 800c874:	f04f 0902 	mov.w	r9, #2
 800c878:	4629      	mov	r1, r5
 800c87a:	4620      	mov	r0, r4
 800c87c:	f7ff febe 	bl	800c5fc <rshift>
 800c880:	442f      	add	r7, r5
 800c882:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c886:	42bb      	cmp	r3, r7
 800c888:	da42      	bge.n	800c910 <__gethex+0x244>
 800c88a:	9801      	ldr	r0, [sp, #4]
 800c88c:	4621      	mov	r1, r4
 800c88e:	f7fe f94b 	bl	800ab28 <_Bfree>
 800c892:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c894:	2300      	movs	r3, #0
 800c896:	6013      	str	r3, [r2, #0]
 800c898:	25a3      	movs	r5, #163	@ 0xa3
 800c89a:	e793      	b.n	800c7c4 <__gethex+0xf8>
 800c89c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c8a0:	2a2e      	cmp	r2, #46	@ 0x2e
 800c8a2:	d012      	beq.n	800c8ca <__gethex+0x1fe>
 800c8a4:	2b20      	cmp	r3, #32
 800c8a6:	d104      	bne.n	800c8b2 <__gethex+0x1e6>
 800c8a8:	f845 bb04 	str.w	fp, [r5], #4
 800c8ac:	f04f 0b00 	mov.w	fp, #0
 800c8b0:	465b      	mov	r3, fp
 800c8b2:	7830      	ldrb	r0, [r6, #0]
 800c8b4:	9303      	str	r3, [sp, #12]
 800c8b6:	f7ff fef3 	bl	800c6a0 <__hexdig_fun>
 800c8ba:	9b03      	ldr	r3, [sp, #12]
 800c8bc:	f000 000f 	and.w	r0, r0, #15
 800c8c0:	4098      	lsls	r0, r3
 800c8c2:	ea4b 0b00 	orr.w	fp, fp, r0
 800c8c6:	3304      	adds	r3, #4
 800c8c8:	e7ae      	b.n	800c828 <__gethex+0x15c>
 800c8ca:	45b1      	cmp	r9, r6
 800c8cc:	d8ea      	bhi.n	800c8a4 <__gethex+0x1d8>
 800c8ce:	492b      	ldr	r1, [pc, #172]	@ (800c97c <__gethex+0x2b0>)
 800c8d0:	9303      	str	r3, [sp, #12]
 800c8d2:	2201      	movs	r2, #1
 800c8d4:	4630      	mov	r0, r6
 800c8d6:	f7ff fe33 	bl	800c540 <strncmp>
 800c8da:	9b03      	ldr	r3, [sp, #12]
 800c8dc:	2800      	cmp	r0, #0
 800c8de:	d1e1      	bne.n	800c8a4 <__gethex+0x1d8>
 800c8e0:	e7a2      	b.n	800c828 <__gethex+0x15c>
 800c8e2:	1ea9      	subs	r1, r5, #2
 800c8e4:	4620      	mov	r0, r4
 800c8e6:	f7fe fd68 	bl	800b3ba <__any_on>
 800c8ea:	2800      	cmp	r0, #0
 800c8ec:	d0c2      	beq.n	800c874 <__gethex+0x1a8>
 800c8ee:	f04f 0903 	mov.w	r9, #3
 800c8f2:	e7c1      	b.n	800c878 <__gethex+0x1ac>
 800c8f4:	da09      	bge.n	800c90a <__gethex+0x23e>
 800c8f6:	1b75      	subs	r5, r6, r5
 800c8f8:	4621      	mov	r1, r4
 800c8fa:	9801      	ldr	r0, [sp, #4]
 800c8fc:	462a      	mov	r2, r5
 800c8fe:	f7fe fb23 	bl	800af48 <__lshift>
 800c902:	1b7f      	subs	r7, r7, r5
 800c904:	4604      	mov	r4, r0
 800c906:	f100 0a14 	add.w	sl, r0, #20
 800c90a:	f04f 0900 	mov.w	r9, #0
 800c90e:	e7b8      	b.n	800c882 <__gethex+0x1b6>
 800c910:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c914:	42bd      	cmp	r5, r7
 800c916:	dd6f      	ble.n	800c9f8 <__gethex+0x32c>
 800c918:	1bed      	subs	r5, r5, r7
 800c91a:	42ae      	cmp	r6, r5
 800c91c:	dc34      	bgt.n	800c988 <__gethex+0x2bc>
 800c91e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c922:	2b02      	cmp	r3, #2
 800c924:	d022      	beq.n	800c96c <__gethex+0x2a0>
 800c926:	2b03      	cmp	r3, #3
 800c928:	d024      	beq.n	800c974 <__gethex+0x2a8>
 800c92a:	2b01      	cmp	r3, #1
 800c92c:	d115      	bne.n	800c95a <__gethex+0x28e>
 800c92e:	42ae      	cmp	r6, r5
 800c930:	d113      	bne.n	800c95a <__gethex+0x28e>
 800c932:	2e01      	cmp	r6, #1
 800c934:	d10b      	bne.n	800c94e <__gethex+0x282>
 800c936:	9a02      	ldr	r2, [sp, #8]
 800c938:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c93c:	6013      	str	r3, [r2, #0]
 800c93e:	2301      	movs	r3, #1
 800c940:	6123      	str	r3, [r4, #16]
 800c942:	f8ca 3000 	str.w	r3, [sl]
 800c946:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c948:	2562      	movs	r5, #98	@ 0x62
 800c94a:	601c      	str	r4, [r3, #0]
 800c94c:	e73a      	b.n	800c7c4 <__gethex+0xf8>
 800c94e:	1e71      	subs	r1, r6, #1
 800c950:	4620      	mov	r0, r4
 800c952:	f7fe fd32 	bl	800b3ba <__any_on>
 800c956:	2800      	cmp	r0, #0
 800c958:	d1ed      	bne.n	800c936 <__gethex+0x26a>
 800c95a:	9801      	ldr	r0, [sp, #4]
 800c95c:	4621      	mov	r1, r4
 800c95e:	f7fe f8e3 	bl	800ab28 <_Bfree>
 800c962:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c964:	2300      	movs	r3, #0
 800c966:	6013      	str	r3, [r2, #0]
 800c968:	2550      	movs	r5, #80	@ 0x50
 800c96a:	e72b      	b.n	800c7c4 <__gethex+0xf8>
 800c96c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d1f3      	bne.n	800c95a <__gethex+0x28e>
 800c972:	e7e0      	b.n	800c936 <__gethex+0x26a>
 800c974:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c976:	2b00      	cmp	r3, #0
 800c978:	d1dd      	bne.n	800c936 <__gethex+0x26a>
 800c97a:	e7ee      	b.n	800c95a <__gethex+0x28e>
 800c97c:	0800d487 	.word	0x0800d487
 800c980:	0800d41d 	.word	0x0800d41d
 800c984:	0800d4de 	.word	0x0800d4de
 800c988:	1e6f      	subs	r7, r5, #1
 800c98a:	f1b9 0f00 	cmp.w	r9, #0
 800c98e:	d130      	bne.n	800c9f2 <__gethex+0x326>
 800c990:	b127      	cbz	r7, 800c99c <__gethex+0x2d0>
 800c992:	4639      	mov	r1, r7
 800c994:	4620      	mov	r0, r4
 800c996:	f7fe fd10 	bl	800b3ba <__any_on>
 800c99a:	4681      	mov	r9, r0
 800c99c:	117a      	asrs	r2, r7, #5
 800c99e:	2301      	movs	r3, #1
 800c9a0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c9a4:	f007 071f 	and.w	r7, r7, #31
 800c9a8:	40bb      	lsls	r3, r7
 800c9aa:	4213      	tst	r3, r2
 800c9ac:	4629      	mov	r1, r5
 800c9ae:	4620      	mov	r0, r4
 800c9b0:	bf18      	it	ne
 800c9b2:	f049 0902 	orrne.w	r9, r9, #2
 800c9b6:	f7ff fe21 	bl	800c5fc <rshift>
 800c9ba:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c9be:	1b76      	subs	r6, r6, r5
 800c9c0:	2502      	movs	r5, #2
 800c9c2:	f1b9 0f00 	cmp.w	r9, #0
 800c9c6:	d047      	beq.n	800ca58 <__gethex+0x38c>
 800c9c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c9cc:	2b02      	cmp	r3, #2
 800c9ce:	d015      	beq.n	800c9fc <__gethex+0x330>
 800c9d0:	2b03      	cmp	r3, #3
 800c9d2:	d017      	beq.n	800ca04 <__gethex+0x338>
 800c9d4:	2b01      	cmp	r3, #1
 800c9d6:	d109      	bne.n	800c9ec <__gethex+0x320>
 800c9d8:	f019 0f02 	tst.w	r9, #2
 800c9dc:	d006      	beq.n	800c9ec <__gethex+0x320>
 800c9de:	f8da 3000 	ldr.w	r3, [sl]
 800c9e2:	ea49 0903 	orr.w	r9, r9, r3
 800c9e6:	f019 0f01 	tst.w	r9, #1
 800c9ea:	d10e      	bne.n	800ca0a <__gethex+0x33e>
 800c9ec:	f045 0510 	orr.w	r5, r5, #16
 800c9f0:	e032      	b.n	800ca58 <__gethex+0x38c>
 800c9f2:	f04f 0901 	mov.w	r9, #1
 800c9f6:	e7d1      	b.n	800c99c <__gethex+0x2d0>
 800c9f8:	2501      	movs	r5, #1
 800c9fa:	e7e2      	b.n	800c9c2 <__gethex+0x2f6>
 800c9fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c9fe:	f1c3 0301 	rsb	r3, r3, #1
 800ca02:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ca04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d0f0      	beq.n	800c9ec <__gethex+0x320>
 800ca0a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ca0e:	f104 0314 	add.w	r3, r4, #20
 800ca12:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ca16:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ca1a:	f04f 0c00 	mov.w	ip, #0
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca24:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ca28:	d01b      	beq.n	800ca62 <__gethex+0x396>
 800ca2a:	3201      	adds	r2, #1
 800ca2c:	6002      	str	r2, [r0, #0]
 800ca2e:	2d02      	cmp	r5, #2
 800ca30:	f104 0314 	add.w	r3, r4, #20
 800ca34:	d13c      	bne.n	800cab0 <__gethex+0x3e4>
 800ca36:	f8d8 2000 	ldr.w	r2, [r8]
 800ca3a:	3a01      	subs	r2, #1
 800ca3c:	42b2      	cmp	r2, r6
 800ca3e:	d109      	bne.n	800ca54 <__gethex+0x388>
 800ca40:	1171      	asrs	r1, r6, #5
 800ca42:	2201      	movs	r2, #1
 800ca44:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ca48:	f006 061f 	and.w	r6, r6, #31
 800ca4c:	fa02 f606 	lsl.w	r6, r2, r6
 800ca50:	421e      	tst	r6, r3
 800ca52:	d13a      	bne.n	800caca <__gethex+0x3fe>
 800ca54:	f045 0520 	orr.w	r5, r5, #32
 800ca58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca5a:	601c      	str	r4, [r3, #0]
 800ca5c:	9b02      	ldr	r3, [sp, #8]
 800ca5e:	601f      	str	r7, [r3, #0]
 800ca60:	e6b0      	b.n	800c7c4 <__gethex+0xf8>
 800ca62:	4299      	cmp	r1, r3
 800ca64:	f843 cc04 	str.w	ip, [r3, #-4]
 800ca68:	d8d9      	bhi.n	800ca1e <__gethex+0x352>
 800ca6a:	68a3      	ldr	r3, [r4, #8]
 800ca6c:	459b      	cmp	fp, r3
 800ca6e:	db17      	blt.n	800caa0 <__gethex+0x3d4>
 800ca70:	6861      	ldr	r1, [r4, #4]
 800ca72:	9801      	ldr	r0, [sp, #4]
 800ca74:	3101      	adds	r1, #1
 800ca76:	f7fe f817 	bl	800aaa8 <_Balloc>
 800ca7a:	4681      	mov	r9, r0
 800ca7c:	b918      	cbnz	r0, 800ca86 <__gethex+0x3ba>
 800ca7e:	4b1a      	ldr	r3, [pc, #104]	@ (800cae8 <__gethex+0x41c>)
 800ca80:	4602      	mov	r2, r0
 800ca82:	2184      	movs	r1, #132	@ 0x84
 800ca84:	e6c5      	b.n	800c812 <__gethex+0x146>
 800ca86:	6922      	ldr	r2, [r4, #16]
 800ca88:	3202      	adds	r2, #2
 800ca8a:	f104 010c 	add.w	r1, r4, #12
 800ca8e:	0092      	lsls	r2, r2, #2
 800ca90:	300c      	adds	r0, #12
 800ca92:	f7fd f89c 	bl	8009bce <memcpy>
 800ca96:	4621      	mov	r1, r4
 800ca98:	9801      	ldr	r0, [sp, #4]
 800ca9a:	f7fe f845 	bl	800ab28 <_Bfree>
 800ca9e:	464c      	mov	r4, r9
 800caa0:	6923      	ldr	r3, [r4, #16]
 800caa2:	1c5a      	adds	r2, r3, #1
 800caa4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800caa8:	6122      	str	r2, [r4, #16]
 800caaa:	2201      	movs	r2, #1
 800caac:	615a      	str	r2, [r3, #20]
 800caae:	e7be      	b.n	800ca2e <__gethex+0x362>
 800cab0:	6922      	ldr	r2, [r4, #16]
 800cab2:	455a      	cmp	r2, fp
 800cab4:	dd0b      	ble.n	800cace <__gethex+0x402>
 800cab6:	2101      	movs	r1, #1
 800cab8:	4620      	mov	r0, r4
 800caba:	f7ff fd9f 	bl	800c5fc <rshift>
 800cabe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cac2:	3701      	adds	r7, #1
 800cac4:	42bb      	cmp	r3, r7
 800cac6:	f6ff aee0 	blt.w	800c88a <__gethex+0x1be>
 800caca:	2501      	movs	r5, #1
 800cacc:	e7c2      	b.n	800ca54 <__gethex+0x388>
 800cace:	f016 061f 	ands.w	r6, r6, #31
 800cad2:	d0fa      	beq.n	800caca <__gethex+0x3fe>
 800cad4:	4453      	add	r3, sl
 800cad6:	f1c6 0620 	rsb	r6, r6, #32
 800cada:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cade:	f7fe f8d5 	bl	800ac8c <__hi0bits>
 800cae2:	42b0      	cmp	r0, r6
 800cae4:	dbe7      	blt.n	800cab6 <__gethex+0x3ea>
 800cae6:	e7f0      	b.n	800caca <__gethex+0x3fe>
 800cae8:	0800d41d 	.word	0x0800d41d

0800caec <L_shift>:
 800caec:	f1c2 0208 	rsb	r2, r2, #8
 800caf0:	0092      	lsls	r2, r2, #2
 800caf2:	b570      	push	{r4, r5, r6, lr}
 800caf4:	f1c2 0620 	rsb	r6, r2, #32
 800caf8:	6843      	ldr	r3, [r0, #4]
 800cafa:	6804      	ldr	r4, [r0, #0]
 800cafc:	fa03 f506 	lsl.w	r5, r3, r6
 800cb00:	432c      	orrs	r4, r5
 800cb02:	40d3      	lsrs	r3, r2
 800cb04:	6004      	str	r4, [r0, #0]
 800cb06:	f840 3f04 	str.w	r3, [r0, #4]!
 800cb0a:	4288      	cmp	r0, r1
 800cb0c:	d3f4      	bcc.n	800caf8 <L_shift+0xc>
 800cb0e:	bd70      	pop	{r4, r5, r6, pc}

0800cb10 <__match>:
 800cb10:	b530      	push	{r4, r5, lr}
 800cb12:	6803      	ldr	r3, [r0, #0]
 800cb14:	3301      	adds	r3, #1
 800cb16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb1a:	b914      	cbnz	r4, 800cb22 <__match+0x12>
 800cb1c:	6003      	str	r3, [r0, #0]
 800cb1e:	2001      	movs	r0, #1
 800cb20:	bd30      	pop	{r4, r5, pc}
 800cb22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb26:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800cb2a:	2d19      	cmp	r5, #25
 800cb2c:	bf98      	it	ls
 800cb2e:	3220      	addls	r2, #32
 800cb30:	42a2      	cmp	r2, r4
 800cb32:	d0f0      	beq.n	800cb16 <__match+0x6>
 800cb34:	2000      	movs	r0, #0
 800cb36:	e7f3      	b.n	800cb20 <__match+0x10>

0800cb38 <__hexnan>:
 800cb38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb3c:	680b      	ldr	r3, [r1, #0]
 800cb3e:	6801      	ldr	r1, [r0, #0]
 800cb40:	115e      	asrs	r6, r3, #5
 800cb42:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cb46:	f013 031f 	ands.w	r3, r3, #31
 800cb4a:	b087      	sub	sp, #28
 800cb4c:	bf18      	it	ne
 800cb4e:	3604      	addne	r6, #4
 800cb50:	2500      	movs	r5, #0
 800cb52:	1f37      	subs	r7, r6, #4
 800cb54:	4682      	mov	sl, r0
 800cb56:	4690      	mov	r8, r2
 800cb58:	9301      	str	r3, [sp, #4]
 800cb5a:	f846 5c04 	str.w	r5, [r6, #-4]
 800cb5e:	46b9      	mov	r9, r7
 800cb60:	463c      	mov	r4, r7
 800cb62:	9502      	str	r5, [sp, #8]
 800cb64:	46ab      	mov	fp, r5
 800cb66:	784a      	ldrb	r2, [r1, #1]
 800cb68:	1c4b      	adds	r3, r1, #1
 800cb6a:	9303      	str	r3, [sp, #12]
 800cb6c:	b342      	cbz	r2, 800cbc0 <__hexnan+0x88>
 800cb6e:	4610      	mov	r0, r2
 800cb70:	9105      	str	r1, [sp, #20]
 800cb72:	9204      	str	r2, [sp, #16]
 800cb74:	f7ff fd94 	bl	800c6a0 <__hexdig_fun>
 800cb78:	2800      	cmp	r0, #0
 800cb7a:	d151      	bne.n	800cc20 <__hexnan+0xe8>
 800cb7c:	9a04      	ldr	r2, [sp, #16]
 800cb7e:	9905      	ldr	r1, [sp, #20]
 800cb80:	2a20      	cmp	r2, #32
 800cb82:	d818      	bhi.n	800cbb6 <__hexnan+0x7e>
 800cb84:	9b02      	ldr	r3, [sp, #8]
 800cb86:	459b      	cmp	fp, r3
 800cb88:	dd13      	ble.n	800cbb2 <__hexnan+0x7a>
 800cb8a:	454c      	cmp	r4, r9
 800cb8c:	d206      	bcs.n	800cb9c <__hexnan+0x64>
 800cb8e:	2d07      	cmp	r5, #7
 800cb90:	dc04      	bgt.n	800cb9c <__hexnan+0x64>
 800cb92:	462a      	mov	r2, r5
 800cb94:	4649      	mov	r1, r9
 800cb96:	4620      	mov	r0, r4
 800cb98:	f7ff ffa8 	bl	800caec <L_shift>
 800cb9c:	4544      	cmp	r4, r8
 800cb9e:	d952      	bls.n	800cc46 <__hexnan+0x10e>
 800cba0:	2300      	movs	r3, #0
 800cba2:	f1a4 0904 	sub.w	r9, r4, #4
 800cba6:	f844 3c04 	str.w	r3, [r4, #-4]
 800cbaa:	f8cd b008 	str.w	fp, [sp, #8]
 800cbae:	464c      	mov	r4, r9
 800cbb0:	461d      	mov	r5, r3
 800cbb2:	9903      	ldr	r1, [sp, #12]
 800cbb4:	e7d7      	b.n	800cb66 <__hexnan+0x2e>
 800cbb6:	2a29      	cmp	r2, #41	@ 0x29
 800cbb8:	d157      	bne.n	800cc6a <__hexnan+0x132>
 800cbba:	3102      	adds	r1, #2
 800cbbc:	f8ca 1000 	str.w	r1, [sl]
 800cbc0:	f1bb 0f00 	cmp.w	fp, #0
 800cbc4:	d051      	beq.n	800cc6a <__hexnan+0x132>
 800cbc6:	454c      	cmp	r4, r9
 800cbc8:	d206      	bcs.n	800cbd8 <__hexnan+0xa0>
 800cbca:	2d07      	cmp	r5, #7
 800cbcc:	dc04      	bgt.n	800cbd8 <__hexnan+0xa0>
 800cbce:	462a      	mov	r2, r5
 800cbd0:	4649      	mov	r1, r9
 800cbd2:	4620      	mov	r0, r4
 800cbd4:	f7ff ff8a 	bl	800caec <L_shift>
 800cbd8:	4544      	cmp	r4, r8
 800cbda:	d936      	bls.n	800cc4a <__hexnan+0x112>
 800cbdc:	f1a8 0204 	sub.w	r2, r8, #4
 800cbe0:	4623      	mov	r3, r4
 800cbe2:	f853 1b04 	ldr.w	r1, [r3], #4
 800cbe6:	f842 1f04 	str.w	r1, [r2, #4]!
 800cbea:	429f      	cmp	r7, r3
 800cbec:	d2f9      	bcs.n	800cbe2 <__hexnan+0xaa>
 800cbee:	1b3b      	subs	r3, r7, r4
 800cbf0:	f023 0303 	bic.w	r3, r3, #3
 800cbf4:	3304      	adds	r3, #4
 800cbf6:	3401      	adds	r4, #1
 800cbf8:	3e03      	subs	r6, #3
 800cbfa:	42b4      	cmp	r4, r6
 800cbfc:	bf88      	it	hi
 800cbfe:	2304      	movhi	r3, #4
 800cc00:	4443      	add	r3, r8
 800cc02:	2200      	movs	r2, #0
 800cc04:	f843 2b04 	str.w	r2, [r3], #4
 800cc08:	429f      	cmp	r7, r3
 800cc0a:	d2fb      	bcs.n	800cc04 <__hexnan+0xcc>
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	b91b      	cbnz	r3, 800cc18 <__hexnan+0xe0>
 800cc10:	4547      	cmp	r7, r8
 800cc12:	d128      	bne.n	800cc66 <__hexnan+0x12e>
 800cc14:	2301      	movs	r3, #1
 800cc16:	603b      	str	r3, [r7, #0]
 800cc18:	2005      	movs	r0, #5
 800cc1a:	b007      	add	sp, #28
 800cc1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc20:	3501      	adds	r5, #1
 800cc22:	2d08      	cmp	r5, #8
 800cc24:	f10b 0b01 	add.w	fp, fp, #1
 800cc28:	dd06      	ble.n	800cc38 <__hexnan+0x100>
 800cc2a:	4544      	cmp	r4, r8
 800cc2c:	d9c1      	bls.n	800cbb2 <__hexnan+0x7a>
 800cc2e:	2300      	movs	r3, #0
 800cc30:	f844 3c04 	str.w	r3, [r4, #-4]
 800cc34:	2501      	movs	r5, #1
 800cc36:	3c04      	subs	r4, #4
 800cc38:	6822      	ldr	r2, [r4, #0]
 800cc3a:	f000 000f 	and.w	r0, r0, #15
 800cc3e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cc42:	6020      	str	r0, [r4, #0]
 800cc44:	e7b5      	b.n	800cbb2 <__hexnan+0x7a>
 800cc46:	2508      	movs	r5, #8
 800cc48:	e7b3      	b.n	800cbb2 <__hexnan+0x7a>
 800cc4a:	9b01      	ldr	r3, [sp, #4]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d0dd      	beq.n	800cc0c <__hexnan+0xd4>
 800cc50:	f1c3 0320 	rsb	r3, r3, #32
 800cc54:	f04f 32ff 	mov.w	r2, #4294967295
 800cc58:	40da      	lsrs	r2, r3
 800cc5a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cc5e:	4013      	ands	r3, r2
 800cc60:	f846 3c04 	str.w	r3, [r6, #-4]
 800cc64:	e7d2      	b.n	800cc0c <__hexnan+0xd4>
 800cc66:	3f04      	subs	r7, #4
 800cc68:	e7d0      	b.n	800cc0c <__hexnan+0xd4>
 800cc6a:	2004      	movs	r0, #4
 800cc6c:	e7d5      	b.n	800cc1a <__hexnan+0xe2>

0800cc6e <__ascii_mbtowc>:
 800cc6e:	b082      	sub	sp, #8
 800cc70:	b901      	cbnz	r1, 800cc74 <__ascii_mbtowc+0x6>
 800cc72:	a901      	add	r1, sp, #4
 800cc74:	b142      	cbz	r2, 800cc88 <__ascii_mbtowc+0x1a>
 800cc76:	b14b      	cbz	r3, 800cc8c <__ascii_mbtowc+0x1e>
 800cc78:	7813      	ldrb	r3, [r2, #0]
 800cc7a:	600b      	str	r3, [r1, #0]
 800cc7c:	7812      	ldrb	r2, [r2, #0]
 800cc7e:	1e10      	subs	r0, r2, #0
 800cc80:	bf18      	it	ne
 800cc82:	2001      	movne	r0, #1
 800cc84:	b002      	add	sp, #8
 800cc86:	4770      	bx	lr
 800cc88:	4610      	mov	r0, r2
 800cc8a:	e7fb      	b.n	800cc84 <__ascii_mbtowc+0x16>
 800cc8c:	f06f 0001 	mvn.w	r0, #1
 800cc90:	e7f8      	b.n	800cc84 <__ascii_mbtowc+0x16>

0800cc92 <_realloc_r>:
 800cc92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc96:	4607      	mov	r7, r0
 800cc98:	4614      	mov	r4, r2
 800cc9a:	460d      	mov	r5, r1
 800cc9c:	b921      	cbnz	r1, 800cca8 <_realloc_r+0x16>
 800cc9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cca2:	4611      	mov	r1, r2
 800cca4:	f7fd be74 	b.w	800a990 <_malloc_r>
 800cca8:	b92a      	cbnz	r2, 800ccb6 <_realloc_r+0x24>
 800ccaa:	f7fd fdfd 	bl	800a8a8 <_free_r>
 800ccae:	4625      	mov	r5, r4
 800ccb0:	4628      	mov	r0, r5
 800ccb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccb6:	f000 f840 	bl	800cd3a <_malloc_usable_size_r>
 800ccba:	4284      	cmp	r4, r0
 800ccbc:	4606      	mov	r6, r0
 800ccbe:	d802      	bhi.n	800ccc6 <_realloc_r+0x34>
 800ccc0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ccc4:	d8f4      	bhi.n	800ccb0 <_realloc_r+0x1e>
 800ccc6:	4621      	mov	r1, r4
 800ccc8:	4638      	mov	r0, r7
 800ccca:	f7fd fe61 	bl	800a990 <_malloc_r>
 800ccce:	4680      	mov	r8, r0
 800ccd0:	b908      	cbnz	r0, 800ccd6 <_realloc_r+0x44>
 800ccd2:	4645      	mov	r5, r8
 800ccd4:	e7ec      	b.n	800ccb0 <_realloc_r+0x1e>
 800ccd6:	42b4      	cmp	r4, r6
 800ccd8:	4622      	mov	r2, r4
 800ccda:	4629      	mov	r1, r5
 800ccdc:	bf28      	it	cs
 800ccde:	4632      	movcs	r2, r6
 800cce0:	f7fc ff75 	bl	8009bce <memcpy>
 800cce4:	4629      	mov	r1, r5
 800cce6:	4638      	mov	r0, r7
 800cce8:	f7fd fdde 	bl	800a8a8 <_free_r>
 800ccec:	e7f1      	b.n	800ccd2 <_realloc_r+0x40>

0800ccee <__ascii_wctomb>:
 800ccee:	4603      	mov	r3, r0
 800ccf0:	4608      	mov	r0, r1
 800ccf2:	b141      	cbz	r1, 800cd06 <__ascii_wctomb+0x18>
 800ccf4:	2aff      	cmp	r2, #255	@ 0xff
 800ccf6:	d904      	bls.n	800cd02 <__ascii_wctomb+0x14>
 800ccf8:	228a      	movs	r2, #138	@ 0x8a
 800ccfa:	601a      	str	r2, [r3, #0]
 800ccfc:	f04f 30ff 	mov.w	r0, #4294967295
 800cd00:	4770      	bx	lr
 800cd02:	700a      	strb	r2, [r1, #0]
 800cd04:	2001      	movs	r0, #1
 800cd06:	4770      	bx	lr

0800cd08 <fiprintf>:
 800cd08:	b40e      	push	{r1, r2, r3}
 800cd0a:	b503      	push	{r0, r1, lr}
 800cd0c:	4601      	mov	r1, r0
 800cd0e:	ab03      	add	r3, sp, #12
 800cd10:	4805      	ldr	r0, [pc, #20]	@ (800cd28 <fiprintf+0x20>)
 800cd12:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd16:	6800      	ldr	r0, [r0, #0]
 800cd18:	9301      	str	r3, [sp, #4]
 800cd1a:	f000 f83f 	bl	800cd9c <_vfiprintf_r>
 800cd1e:	b002      	add	sp, #8
 800cd20:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd24:	b003      	add	sp, #12
 800cd26:	4770      	bx	lr
 800cd28:	20000028 	.word	0x20000028

0800cd2c <abort>:
 800cd2c:	b508      	push	{r3, lr}
 800cd2e:	2006      	movs	r0, #6
 800cd30:	f000 fa08 	bl	800d144 <raise>
 800cd34:	2001      	movs	r0, #1
 800cd36:	f7f5 f9b7 	bl	80020a8 <_exit>

0800cd3a <_malloc_usable_size_r>:
 800cd3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd3e:	1f18      	subs	r0, r3, #4
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	bfbc      	itt	lt
 800cd44:	580b      	ldrlt	r3, [r1, r0]
 800cd46:	18c0      	addlt	r0, r0, r3
 800cd48:	4770      	bx	lr

0800cd4a <__sfputc_r>:
 800cd4a:	6893      	ldr	r3, [r2, #8]
 800cd4c:	3b01      	subs	r3, #1
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	b410      	push	{r4}
 800cd52:	6093      	str	r3, [r2, #8]
 800cd54:	da08      	bge.n	800cd68 <__sfputc_r+0x1e>
 800cd56:	6994      	ldr	r4, [r2, #24]
 800cd58:	42a3      	cmp	r3, r4
 800cd5a:	db01      	blt.n	800cd60 <__sfputc_r+0x16>
 800cd5c:	290a      	cmp	r1, #10
 800cd5e:	d103      	bne.n	800cd68 <__sfputc_r+0x1e>
 800cd60:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd64:	f000 b932 	b.w	800cfcc <__swbuf_r>
 800cd68:	6813      	ldr	r3, [r2, #0]
 800cd6a:	1c58      	adds	r0, r3, #1
 800cd6c:	6010      	str	r0, [r2, #0]
 800cd6e:	7019      	strb	r1, [r3, #0]
 800cd70:	4608      	mov	r0, r1
 800cd72:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd76:	4770      	bx	lr

0800cd78 <__sfputs_r>:
 800cd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd7a:	4606      	mov	r6, r0
 800cd7c:	460f      	mov	r7, r1
 800cd7e:	4614      	mov	r4, r2
 800cd80:	18d5      	adds	r5, r2, r3
 800cd82:	42ac      	cmp	r4, r5
 800cd84:	d101      	bne.n	800cd8a <__sfputs_r+0x12>
 800cd86:	2000      	movs	r0, #0
 800cd88:	e007      	b.n	800cd9a <__sfputs_r+0x22>
 800cd8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd8e:	463a      	mov	r2, r7
 800cd90:	4630      	mov	r0, r6
 800cd92:	f7ff ffda 	bl	800cd4a <__sfputc_r>
 800cd96:	1c43      	adds	r3, r0, #1
 800cd98:	d1f3      	bne.n	800cd82 <__sfputs_r+0xa>
 800cd9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cd9c <_vfiprintf_r>:
 800cd9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cda0:	460d      	mov	r5, r1
 800cda2:	b09d      	sub	sp, #116	@ 0x74
 800cda4:	4614      	mov	r4, r2
 800cda6:	4698      	mov	r8, r3
 800cda8:	4606      	mov	r6, r0
 800cdaa:	b118      	cbz	r0, 800cdb4 <_vfiprintf_r+0x18>
 800cdac:	6a03      	ldr	r3, [r0, #32]
 800cdae:	b90b      	cbnz	r3, 800cdb4 <_vfiprintf_r+0x18>
 800cdb0:	f7fc fd80 	bl	80098b4 <__sinit>
 800cdb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cdb6:	07d9      	lsls	r1, r3, #31
 800cdb8:	d405      	bmi.n	800cdc6 <_vfiprintf_r+0x2a>
 800cdba:	89ab      	ldrh	r3, [r5, #12]
 800cdbc:	059a      	lsls	r2, r3, #22
 800cdbe:	d402      	bmi.n	800cdc6 <_vfiprintf_r+0x2a>
 800cdc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cdc2:	f7fc ff02 	bl	8009bca <__retarget_lock_acquire_recursive>
 800cdc6:	89ab      	ldrh	r3, [r5, #12]
 800cdc8:	071b      	lsls	r3, r3, #28
 800cdca:	d501      	bpl.n	800cdd0 <_vfiprintf_r+0x34>
 800cdcc:	692b      	ldr	r3, [r5, #16]
 800cdce:	b99b      	cbnz	r3, 800cdf8 <_vfiprintf_r+0x5c>
 800cdd0:	4629      	mov	r1, r5
 800cdd2:	4630      	mov	r0, r6
 800cdd4:	f000 f938 	bl	800d048 <__swsetup_r>
 800cdd8:	b170      	cbz	r0, 800cdf8 <_vfiprintf_r+0x5c>
 800cdda:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cddc:	07dc      	lsls	r4, r3, #31
 800cdde:	d504      	bpl.n	800cdea <_vfiprintf_r+0x4e>
 800cde0:	f04f 30ff 	mov.w	r0, #4294967295
 800cde4:	b01d      	add	sp, #116	@ 0x74
 800cde6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdea:	89ab      	ldrh	r3, [r5, #12]
 800cdec:	0598      	lsls	r0, r3, #22
 800cdee:	d4f7      	bmi.n	800cde0 <_vfiprintf_r+0x44>
 800cdf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cdf2:	f7fc feeb 	bl	8009bcc <__retarget_lock_release_recursive>
 800cdf6:	e7f3      	b.n	800cde0 <_vfiprintf_r+0x44>
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	9309      	str	r3, [sp, #36]	@ 0x24
 800cdfc:	2320      	movs	r3, #32
 800cdfe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ce02:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce06:	2330      	movs	r3, #48	@ 0x30
 800ce08:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cfb8 <_vfiprintf_r+0x21c>
 800ce0c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ce10:	f04f 0901 	mov.w	r9, #1
 800ce14:	4623      	mov	r3, r4
 800ce16:	469a      	mov	sl, r3
 800ce18:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce1c:	b10a      	cbz	r2, 800ce22 <_vfiprintf_r+0x86>
 800ce1e:	2a25      	cmp	r2, #37	@ 0x25
 800ce20:	d1f9      	bne.n	800ce16 <_vfiprintf_r+0x7a>
 800ce22:	ebba 0b04 	subs.w	fp, sl, r4
 800ce26:	d00b      	beq.n	800ce40 <_vfiprintf_r+0xa4>
 800ce28:	465b      	mov	r3, fp
 800ce2a:	4622      	mov	r2, r4
 800ce2c:	4629      	mov	r1, r5
 800ce2e:	4630      	mov	r0, r6
 800ce30:	f7ff ffa2 	bl	800cd78 <__sfputs_r>
 800ce34:	3001      	adds	r0, #1
 800ce36:	f000 80a7 	beq.w	800cf88 <_vfiprintf_r+0x1ec>
 800ce3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce3c:	445a      	add	r2, fp
 800ce3e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ce40:	f89a 3000 	ldrb.w	r3, [sl]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	f000 809f 	beq.w	800cf88 <_vfiprintf_r+0x1ec>
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	f04f 32ff 	mov.w	r2, #4294967295
 800ce50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce54:	f10a 0a01 	add.w	sl, sl, #1
 800ce58:	9304      	str	r3, [sp, #16]
 800ce5a:	9307      	str	r3, [sp, #28]
 800ce5c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ce60:	931a      	str	r3, [sp, #104]	@ 0x68
 800ce62:	4654      	mov	r4, sl
 800ce64:	2205      	movs	r2, #5
 800ce66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce6a:	4853      	ldr	r0, [pc, #332]	@ (800cfb8 <_vfiprintf_r+0x21c>)
 800ce6c:	f7f3 f9d0 	bl	8000210 <memchr>
 800ce70:	9a04      	ldr	r2, [sp, #16]
 800ce72:	b9d8      	cbnz	r0, 800ceac <_vfiprintf_r+0x110>
 800ce74:	06d1      	lsls	r1, r2, #27
 800ce76:	bf44      	itt	mi
 800ce78:	2320      	movmi	r3, #32
 800ce7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce7e:	0713      	lsls	r3, r2, #28
 800ce80:	bf44      	itt	mi
 800ce82:	232b      	movmi	r3, #43	@ 0x2b
 800ce84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce88:	f89a 3000 	ldrb.w	r3, [sl]
 800ce8c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce8e:	d015      	beq.n	800cebc <_vfiprintf_r+0x120>
 800ce90:	9a07      	ldr	r2, [sp, #28]
 800ce92:	4654      	mov	r4, sl
 800ce94:	2000      	movs	r0, #0
 800ce96:	f04f 0c0a 	mov.w	ip, #10
 800ce9a:	4621      	mov	r1, r4
 800ce9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cea0:	3b30      	subs	r3, #48	@ 0x30
 800cea2:	2b09      	cmp	r3, #9
 800cea4:	d94b      	bls.n	800cf3e <_vfiprintf_r+0x1a2>
 800cea6:	b1b0      	cbz	r0, 800ced6 <_vfiprintf_r+0x13a>
 800cea8:	9207      	str	r2, [sp, #28]
 800ceaa:	e014      	b.n	800ced6 <_vfiprintf_r+0x13a>
 800ceac:	eba0 0308 	sub.w	r3, r0, r8
 800ceb0:	fa09 f303 	lsl.w	r3, r9, r3
 800ceb4:	4313      	orrs	r3, r2
 800ceb6:	9304      	str	r3, [sp, #16]
 800ceb8:	46a2      	mov	sl, r4
 800ceba:	e7d2      	b.n	800ce62 <_vfiprintf_r+0xc6>
 800cebc:	9b03      	ldr	r3, [sp, #12]
 800cebe:	1d19      	adds	r1, r3, #4
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	9103      	str	r1, [sp, #12]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	bfbb      	ittet	lt
 800cec8:	425b      	neglt	r3, r3
 800ceca:	f042 0202 	orrlt.w	r2, r2, #2
 800cece:	9307      	strge	r3, [sp, #28]
 800ced0:	9307      	strlt	r3, [sp, #28]
 800ced2:	bfb8      	it	lt
 800ced4:	9204      	strlt	r2, [sp, #16]
 800ced6:	7823      	ldrb	r3, [r4, #0]
 800ced8:	2b2e      	cmp	r3, #46	@ 0x2e
 800ceda:	d10a      	bne.n	800cef2 <_vfiprintf_r+0x156>
 800cedc:	7863      	ldrb	r3, [r4, #1]
 800cede:	2b2a      	cmp	r3, #42	@ 0x2a
 800cee0:	d132      	bne.n	800cf48 <_vfiprintf_r+0x1ac>
 800cee2:	9b03      	ldr	r3, [sp, #12]
 800cee4:	1d1a      	adds	r2, r3, #4
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	9203      	str	r2, [sp, #12]
 800ceea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ceee:	3402      	adds	r4, #2
 800cef0:	9305      	str	r3, [sp, #20]
 800cef2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cfc8 <_vfiprintf_r+0x22c>
 800cef6:	7821      	ldrb	r1, [r4, #0]
 800cef8:	2203      	movs	r2, #3
 800cefa:	4650      	mov	r0, sl
 800cefc:	f7f3 f988 	bl	8000210 <memchr>
 800cf00:	b138      	cbz	r0, 800cf12 <_vfiprintf_r+0x176>
 800cf02:	9b04      	ldr	r3, [sp, #16]
 800cf04:	eba0 000a 	sub.w	r0, r0, sl
 800cf08:	2240      	movs	r2, #64	@ 0x40
 800cf0a:	4082      	lsls	r2, r0
 800cf0c:	4313      	orrs	r3, r2
 800cf0e:	3401      	adds	r4, #1
 800cf10:	9304      	str	r3, [sp, #16]
 800cf12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf16:	4829      	ldr	r0, [pc, #164]	@ (800cfbc <_vfiprintf_r+0x220>)
 800cf18:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cf1c:	2206      	movs	r2, #6
 800cf1e:	f7f3 f977 	bl	8000210 <memchr>
 800cf22:	2800      	cmp	r0, #0
 800cf24:	d03f      	beq.n	800cfa6 <_vfiprintf_r+0x20a>
 800cf26:	4b26      	ldr	r3, [pc, #152]	@ (800cfc0 <_vfiprintf_r+0x224>)
 800cf28:	bb1b      	cbnz	r3, 800cf72 <_vfiprintf_r+0x1d6>
 800cf2a:	9b03      	ldr	r3, [sp, #12]
 800cf2c:	3307      	adds	r3, #7
 800cf2e:	f023 0307 	bic.w	r3, r3, #7
 800cf32:	3308      	adds	r3, #8
 800cf34:	9303      	str	r3, [sp, #12]
 800cf36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf38:	443b      	add	r3, r7
 800cf3a:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf3c:	e76a      	b.n	800ce14 <_vfiprintf_r+0x78>
 800cf3e:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf42:	460c      	mov	r4, r1
 800cf44:	2001      	movs	r0, #1
 800cf46:	e7a8      	b.n	800ce9a <_vfiprintf_r+0xfe>
 800cf48:	2300      	movs	r3, #0
 800cf4a:	3401      	adds	r4, #1
 800cf4c:	9305      	str	r3, [sp, #20]
 800cf4e:	4619      	mov	r1, r3
 800cf50:	f04f 0c0a 	mov.w	ip, #10
 800cf54:	4620      	mov	r0, r4
 800cf56:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf5a:	3a30      	subs	r2, #48	@ 0x30
 800cf5c:	2a09      	cmp	r2, #9
 800cf5e:	d903      	bls.n	800cf68 <_vfiprintf_r+0x1cc>
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d0c6      	beq.n	800cef2 <_vfiprintf_r+0x156>
 800cf64:	9105      	str	r1, [sp, #20]
 800cf66:	e7c4      	b.n	800cef2 <_vfiprintf_r+0x156>
 800cf68:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf6c:	4604      	mov	r4, r0
 800cf6e:	2301      	movs	r3, #1
 800cf70:	e7f0      	b.n	800cf54 <_vfiprintf_r+0x1b8>
 800cf72:	ab03      	add	r3, sp, #12
 800cf74:	9300      	str	r3, [sp, #0]
 800cf76:	462a      	mov	r2, r5
 800cf78:	4b12      	ldr	r3, [pc, #72]	@ (800cfc4 <_vfiprintf_r+0x228>)
 800cf7a:	a904      	add	r1, sp, #16
 800cf7c:	4630      	mov	r0, r6
 800cf7e:	f7fb fe49 	bl	8008c14 <_printf_float>
 800cf82:	4607      	mov	r7, r0
 800cf84:	1c78      	adds	r0, r7, #1
 800cf86:	d1d6      	bne.n	800cf36 <_vfiprintf_r+0x19a>
 800cf88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cf8a:	07d9      	lsls	r1, r3, #31
 800cf8c:	d405      	bmi.n	800cf9a <_vfiprintf_r+0x1fe>
 800cf8e:	89ab      	ldrh	r3, [r5, #12]
 800cf90:	059a      	lsls	r2, r3, #22
 800cf92:	d402      	bmi.n	800cf9a <_vfiprintf_r+0x1fe>
 800cf94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cf96:	f7fc fe19 	bl	8009bcc <__retarget_lock_release_recursive>
 800cf9a:	89ab      	ldrh	r3, [r5, #12]
 800cf9c:	065b      	lsls	r3, r3, #25
 800cf9e:	f53f af1f 	bmi.w	800cde0 <_vfiprintf_r+0x44>
 800cfa2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cfa4:	e71e      	b.n	800cde4 <_vfiprintf_r+0x48>
 800cfa6:	ab03      	add	r3, sp, #12
 800cfa8:	9300      	str	r3, [sp, #0]
 800cfaa:	462a      	mov	r2, r5
 800cfac:	4b05      	ldr	r3, [pc, #20]	@ (800cfc4 <_vfiprintf_r+0x228>)
 800cfae:	a904      	add	r1, sp, #16
 800cfb0:	4630      	mov	r0, r6
 800cfb2:	f7fc f8c7 	bl	8009144 <_printf_i>
 800cfb6:	e7e4      	b.n	800cf82 <_vfiprintf_r+0x1e6>
 800cfb8:	0800d489 	.word	0x0800d489
 800cfbc:	0800d493 	.word	0x0800d493
 800cfc0:	08008c15 	.word	0x08008c15
 800cfc4:	0800cd79 	.word	0x0800cd79
 800cfc8:	0800d48f 	.word	0x0800d48f

0800cfcc <__swbuf_r>:
 800cfcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfce:	460e      	mov	r6, r1
 800cfd0:	4614      	mov	r4, r2
 800cfd2:	4605      	mov	r5, r0
 800cfd4:	b118      	cbz	r0, 800cfde <__swbuf_r+0x12>
 800cfd6:	6a03      	ldr	r3, [r0, #32]
 800cfd8:	b90b      	cbnz	r3, 800cfde <__swbuf_r+0x12>
 800cfda:	f7fc fc6b 	bl	80098b4 <__sinit>
 800cfde:	69a3      	ldr	r3, [r4, #24]
 800cfe0:	60a3      	str	r3, [r4, #8]
 800cfe2:	89a3      	ldrh	r3, [r4, #12]
 800cfe4:	071a      	lsls	r2, r3, #28
 800cfe6:	d501      	bpl.n	800cfec <__swbuf_r+0x20>
 800cfe8:	6923      	ldr	r3, [r4, #16]
 800cfea:	b943      	cbnz	r3, 800cffe <__swbuf_r+0x32>
 800cfec:	4621      	mov	r1, r4
 800cfee:	4628      	mov	r0, r5
 800cff0:	f000 f82a 	bl	800d048 <__swsetup_r>
 800cff4:	b118      	cbz	r0, 800cffe <__swbuf_r+0x32>
 800cff6:	f04f 37ff 	mov.w	r7, #4294967295
 800cffa:	4638      	mov	r0, r7
 800cffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cffe:	6823      	ldr	r3, [r4, #0]
 800d000:	6922      	ldr	r2, [r4, #16]
 800d002:	1a98      	subs	r0, r3, r2
 800d004:	6963      	ldr	r3, [r4, #20]
 800d006:	b2f6      	uxtb	r6, r6
 800d008:	4283      	cmp	r3, r0
 800d00a:	4637      	mov	r7, r6
 800d00c:	dc05      	bgt.n	800d01a <__swbuf_r+0x4e>
 800d00e:	4621      	mov	r1, r4
 800d010:	4628      	mov	r0, r5
 800d012:	f7ff fa53 	bl	800c4bc <_fflush_r>
 800d016:	2800      	cmp	r0, #0
 800d018:	d1ed      	bne.n	800cff6 <__swbuf_r+0x2a>
 800d01a:	68a3      	ldr	r3, [r4, #8]
 800d01c:	3b01      	subs	r3, #1
 800d01e:	60a3      	str	r3, [r4, #8]
 800d020:	6823      	ldr	r3, [r4, #0]
 800d022:	1c5a      	adds	r2, r3, #1
 800d024:	6022      	str	r2, [r4, #0]
 800d026:	701e      	strb	r6, [r3, #0]
 800d028:	6962      	ldr	r2, [r4, #20]
 800d02a:	1c43      	adds	r3, r0, #1
 800d02c:	429a      	cmp	r2, r3
 800d02e:	d004      	beq.n	800d03a <__swbuf_r+0x6e>
 800d030:	89a3      	ldrh	r3, [r4, #12]
 800d032:	07db      	lsls	r3, r3, #31
 800d034:	d5e1      	bpl.n	800cffa <__swbuf_r+0x2e>
 800d036:	2e0a      	cmp	r6, #10
 800d038:	d1df      	bne.n	800cffa <__swbuf_r+0x2e>
 800d03a:	4621      	mov	r1, r4
 800d03c:	4628      	mov	r0, r5
 800d03e:	f7ff fa3d 	bl	800c4bc <_fflush_r>
 800d042:	2800      	cmp	r0, #0
 800d044:	d0d9      	beq.n	800cffa <__swbuf_r+0x2e>
 800d046:	e7d6      	b.n	800cff6 <__swbuf_r+0x2a>

0800d048 <__swsetup_r>:
 800d048:	b538      	push	{r3, r4, r5, lr}
 800d04a:	4b29      	ldr	r3, [pc, #164]	@ (800d0f0 <__swsetup_r+0xa8>)
 800d04c:	4605      	mov	r5, r0
 800d04e:	6818      	ldr	r0, [r3, #0]
 800d050:	460c      	mov	r4, r1
 800d052:	b118      	cbz	r0, 800d05c <__swsetup_r+0x14>
 800d054:	6a03      	ldr	r3, [r0, #32]
 800d056:	b90b      	cbnz	r3, 800d05c <__swsetup_r+0x14>
 800d058:	f7fc fc2c 	bl	80098b4 <__sinit>
 800d05c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d060:	0719      	lsls	r1, r3, #28
 800d062:	d422      	bmi.n	800d0aa <__swsetup_r+0x62>
 800d064:	06da      	lsls	r2, r3, #27
 800d066:	d407      	bmi.n	800d078 <__swsetup_r+0x30>
 800d068:	2209      	movs	r2, #9
 800d06a:	602a      	str	r2, [r5, #0]
 800d06c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d070:	81a3      	strh	r3, [r4, #12]
 800d072:	f04f 30ff 	mov.w	r0, #4294967295
 800d076:	e033      	b.n	800d0e0 <__swsetup_r+0x98>
 800d078:	0758      	lsls	r0, r3, #29
 800d07a:	d512      	bpl.n	800d0a2 <__swsetup_r+0x5a>
 800d07c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d07e:	b141      	cbz	r1, 800d092 <__swsetup_r+0x4a>
 800d080:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d084:	4299      	cmp	r1, r3
 800d086:	d002      	beq.n	800d08e <__swsetup_r+0x46>
 800d088:	4628      	mov	r0, r5
 800d08a:	f7fd fc0d 	bl	800a8a8 <_free_r>
 800d08e:	2300      	movs	r3, #0
 800d090:	6363      	str	r3, [r4, #52]	@ 0x34
 800d092:	89a3      	ldrh	r3, [r4, #12]
 800d094:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d098:	81a3      	strh	r3, [r4, #12]
 800d09a:	2300      	movs	r3, #0
 800d09c:	6063      	str	r3, [r4, #4]
 800d09e:	6923      	ldr	r3, [r4, #16]
 800d0a0:	6023      	str	r3, [r4, #0]
 800d0a2:	89a3      	ldrh	r3, [r4, #12]
 800d0a4:	f043 0308 	orr.w	r3, r3, #8
 800d0a8:	81a3      	strh	r3, [r4, #12]
 800d0aa:	6923      	ldr	r3, [r4, #16]
 800d0ac:	b94b      	cbnz	r3, 800d0c2 <__swsetup_r+0x7a>
 800d0ae:	89a3      	ldrh	r3, [r4, #12]
 800d0b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d0b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d0b8:	d003      	beq.n	800d0c2 <__swsetup_r+0x7a>
 800d0ba:	4621      	mov	r1, r4
 800d0bc:	4628      	mov	r0, r5
 800d0be:	f000 f883 	bl	800d1c8 <__smakebuf_r>
 800d0c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0c6:	f013 0201 	ands.w	r2, r3, #1
 800d0ca:	d00a      	beq.n	800d0e2 <__swsetup_r+0x9a>
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	60a2      	str	r2, [r4, #8]
 800d0d0:	6962      	ldr	r2, [r4, #20]
 800d0d2:	4252      	negs	r2, r2
 800d0d4:	61a2      	str	r2, [r4, #24]
 800d0d6:	6922      	ldr	r2, [r4, #16]
 800d0d8:	b942      	cbnz	r2, 800d0ec <__swsetup_r+0xa4>
 800d0da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d0de:	d1c5      	bne.n	800d06c <__swsetup_r+0x24>
 800d0e0:	bd38      	pop	{r3, r4, r5, pc}
 800d0e2:	0799      	lsls	r1, r3, #30
 800d0e4:	bf58      	it	pl
 800d0e6:	6962      	ldrpl	r2, [r4, #20]
 800d0e8:	60a2      	str	r2, [r4, #8]
 800d0ea:	e7f4      	b.n	800d0d6 <__swsetup_r+0x8e>
 800d0ec:	2000      	movs	r0, #0
 800d0ee:	e7f7      	b.n	800d0e0 <__swsetup_r+0x98>
 800d0f0:	20000028 	.word	0x20000028

0800d0f4 <_raise_r>:
 800d0f4:	291f      	cmp	r1, #31
 800d0f6:	b538      	push	{r3, r4, r5, lr}
 800d0f8:	4605      	mov	r5, r0
 800d0fa:	460c      	mov	r4, r1
 800d0fc:	d904      	bls.n	800d108 <_raise_r+0x14>
 800d0fe:	2316      	movs	r3, #22
 800d100:	6003      	str	r3, [r0, #0]
 800d102:	f04f 30ff 	mov.w	r0, #4294967295
 800d106:	bd38      	pop	{r3, r4, r5, pc}
 800d108:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d10a:	b112      	cbz	r2, 800d112 <_raise_r+0x1e>
 800d10c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d110:	b94b      	cbnz	r3, 800d126 <_raise_r+0x32>
 800d112:	4628      	mov	r0, r5
 800d114:	f000 f830 	bl	800d178 <_getpid_r>
 800d118:	4622      	mov	r2, r4
 800d11a:	4601      	mov	r1, r0
 800d11c:	4628      	mov	r0, r5
 800d11e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d122:	f000 b817 	b.w	800d154 <_kill_r>
 800d126:	2b01      	cmp	r3, #1
 800d128:	d00a      	beq.n	800d140 <_raise_r+0x4c>
 800d12a:	1c59      	adds	r1, r3, #1
 800d12c:	d103      	bne.n	800d136 <_raise_r+0x42>
 800d12e:	2316      	movs	r3, #22
 800d130:	6003      	str	r3, [r0, #0]
 800d132:	2001      	movs	r0, #1
 800d134:	e7e7      	b.n	800d106 <_raise_r+0x12>
 800d136:	2100      	movs	r1, #0
 800d138:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d13c:	4620      	mov	r0, r4
 800d13e:	4798      	blx	r3
 800d140:	2000      	movs	r0, #0
 800d142:	e7e0      	b.n	800d106 <_raise_r+0x12>

0800d144 <raise>:
 800d144:	4b02      	ldr	r3, [pc, #8]	@ (800d150 <raise+0xc>)
 800d146:	4601      	mov	r1, r0
 800d148:	6818      	ldr	r0, [r3, #0]
 800d14a:	f7ff bfd3 	b.w	800d0f4 <_raise_r>
 800d14e:	bf00      	nop
 800d150:	20000028 	.word	0x20000028

0800d154 <_kill_r>:
 800d154:	b538      	push	{r3, r4, r5, lr}
 800d156:	4d07      	ldr	r5, [pc, #28]	@ (800d174 <_kill_r+0x20>)
 800d158:	2300      	movs	r3, #0
 800d15a:	4604      	mov	r4, r0
 800d15c:	4608      	mov	r0, r1
 800d15e:	4611      	mov	r1, r2
 800d160:	602b      	str	r3, [r5, #0]
 800d162:	f7f4 ff91 	bl	8002088 <_kill>
 800d166:	1c43      	adds	r3, r0, #1
 800d168:	d102      	bne.n	800d170 <_kill_r+0x1c>
 800d16a:	682b      	ldr	r3, [r5, #0]
 800d16c:	b103      	cbz	r3, 800d170 <_kill_r+0x1c>
 800d16e:	6023      	str	r3, [r4, #0]
 800d170:	bd38      	pop	{r3, r4, r5, pc}
 800d172:	bf00      	nop
 800d174:	20004574 	.word	0x20004574

0800d178 <_getpid_r>:
 800d178:	f7f4 bf7e 	b.w	8002078 <_getpid>

0800d17c <__swhatbuf_r>:
 800d17c:	b570      	push	{r4, r5, r6, lr}
 800d17e:	460c      	mov	r4, r1
 800d180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d184:	2900      	cmp	r1, #0
 800d186:	b096      	sub	sp, #88	@ 0x58
 800d188:	4615      	mov	r5, r2
 800d18a:	461e      	mov	r6, r3
 800d18c:	da0d      	bge.n	800d1aa <__swhatbuf_r+0x2e>
 800d18e:	89a3      	ldrh	r3, [r4, #12]
 800d190:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d194:	f04f 0100 	mov.w	r1, #0
 800d198:	bf14      	ite	ne
 800d19a:	2340      	movne	r3, #64	@ 0x40
 800d19c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d1a0:	2000      	movs	r0, #0
 800d1a2:	6031      	str	r1, [r6, #0]
 800d1a4:	602b      	str	r3, [r5, #0]
 800d1a6:	b016      	add	sp, #88	@ 0x58
 800d1a8:	bd70      	pop	{r4, r5, r6, pc}
 800d1aa:	466a      	mov	r2, sp
 800d1ac:	f000 f848 	bl	800d240 <_fstat_r>
 800d1b0:	2800      	cmp	r0, #0
 800d1b2:	dbec      	blt.n	800d18e <__swhatbuf_r+0x12>
 800d1b4:	9901      	ldr	r1, [sp, #4]
 800d1b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d1ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d1be:	4259      	negs	r1, r3
 800d1c0:	4159      	adcs	r1, r3
 800d1c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d1c6:	e7eb      	b.n	800d1a0 <__swhatbuf_r+0x24>

0800d1c8 <__smakebuf_r>:
 800d1c8:	898b      	ldrh	r3, [r1, #12]
 800d1ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d1cc:	079d      	lsls	r5, r3, #30
 800d1ce:	4606      	mov	r6, r0
 800d1d0:	460c      	mov	r4, r1
 800d1d2:	d507      	bpl.n	800d1e4 <__smakebuf_r+0x1c>
 800d1d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d1d8:	6023      	str	r3, [r4, #0]
 800d1da:	6123      	str	r3, [r4, #16]
 800d1dc:	2301      	movs	r3, #1
 800d1de:	6163      	str	r3, [r4, #20]
 800d1e0:	b003      	add	sp, #12
 800d1e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1e4:	ab01      	add	r3, sp, #4
 800d1e6:	466a      	mov	r2, sp
 800d1e8:	f7ff ffc8 	bl	800d17c <__swhatbuf_r>
 800d1ec:	9f00      	ldr	r7, [sp, #0]
 800d1ee:	4605      	mov	r5, r0
 800d1f0:	4639      	mov	r1, r7
 800d1f2:	4630      	mov	r0, r6
 800d1f4:	f7fd fbcc 	bl	800a990 <_malloc_r>
 800d1f8:	b948      	cbnz	r0, 800d20e <__smakebuf_r+0x46>
 800d1fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1fe:	059a      	lsls	r2, r3, #22
 800d200:	d4ee      	bmi.n	800d1e0 <__smakebuf_r+0x18>
 800d202:	f023 0303 	bic.w	r3, r3, #3
 800d206:	f043 0302 	orr.w	r3, r3, #2
 800d20a:	81a3      	strh	r3, [r4, #12]
 800d20c:	e7e2      	b.n	800d1d4 <__smakebuf_r+0xc>
 800d20e:	89a3      	ldrh	r3, [r4, #12]
 800d210:	6020      	str	r0, [r4, #0]
 800d212:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d216:	81a3      	strh	r3, [r4, #12]
 800d218:	9b01      	ldr	r3, [sp, #4]
 800d21a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d21e:	b15b      	cbz	r3, 800d238 <__smakebuf_r+0x70>
 800d220:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d224:	4630      	mov	r0, r6
 800d226:	f000 f81d 	bl	800d264 <_isatty_r>
 800d22a:	b128      	cbz	r0, 800d238 <__smakebuf_r+0x70>
 800d22c:	89a3      	ldrh	r3, [r4, #12]
 800d22e:	f023 0303 	bic.w	r3, r3, #3
 800d232:	f043 0301 	orr.w	r3, r3, #1
 800d236:	81a3      	strh	r3, [r4, #12]
 800d238:	89a3      	ldrh	r3, [r4, #12]
 800d23a:	431d      	orrs	r5, r3
 800d23c:	81a5      	strh	r5, [r4, #12]
 800d23e:	e7cf      	b.n	800d1e0 <__smakebuf_r+0x18>

0800d240 <_fstat_r>:
 800d240:	b538      	push	{r3, r4, r5, lr}
 800d242:	4d07      	ldr	r5, [pc, #28]	@ (800d260 <_fstat_r+0x20>)
 800d244:	2300      	movs	r3, #0
 800d246:	4604      	mov	r4, r0
 800d248:	4608      	mov	r0, r1
 800d24a:	4611      	mov	r1, r2
 800d24c:	602b      	str	r3, [r5, #0]
 800d24e:	f7f4 ff7b 	bl	8002148 <_fstat>
 800d252:	1c43      	adds	r3, r0, #1
 800d254:	d102      	bne.n	800d25c <_fstat_r+0x1c>
 800d256:	682b      	ldr	r3, [r5, #0]
 800d258:	b103      	cbz	r3, 800d25c <_fstat_r+0x1c>
 800d25a:	6023      	str	r3, [r4, #0]
 800d25c:	bd38      	pop	{r3, r4, r5, pc}
 800d25e:	bf00      	nop
 800d260:	20004574 	.word	0x20004574

0800d264 <_isatty_r>:
 800d264:	b538      	push	{r3, r4, r5, lr}
 800d266:	4d06      	ldr	r5, [pc, #24]	@ (800d280 <_isatty_r+0x1c>)
 800d268:	2300      	movs	r3, #0
 800d26a:	4604      	mov	r4, r0
 800d26c:	4608      	mov	r0, r1
 800d26e:	602b      	str	r3, [r5, #0]
 800d270:	f7f4 ff7a 	bl	8002168 <_isatty>
 800d274:	1c43      	adds	r3, r0, #1
 800d276:	d102      	bne.n	800d27e <_isatty_r+0x1a>
 800d278:	682b      	ldr	r3, [r5, #0]
 800d27a:	b103      	cbz	r3, 800d27e <_isatty_r+0x1a>
 800d27c:	6023      	str	r3, [r4, #0]
 800d27e:	bd38      	pop	{r3, r4, r5, pc}
 800d280:	20004574 	.word	0x20004574

0800d284 <_init>:
 800d284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d286:	bf00      	nop
 800d288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d28a:	bc08      	pop	{r3}
 800d28c:	469e      	mov	lr, r3
 800d28e:	4770      	bx	lr

0800d290 <_fini>:
 800d290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d292:	bf00      	nop
 800d294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d296:	bc08      	pop	{r3}
 800d298:	469e      	mov	lr, r3
 800d29a:	4770      	bx	lr
